import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment((double) 0.0f);
        boolean boolean17 = variance1.isBiasCorrected();
        long long18 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        secondMoment26.increment((double) (short) 0);
        secondMoment26.increment((double) 1.0f);
        double double32 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        boolean boolean35 = variance1.equals((java.lang.Object) variance34);
        double[] doubleArray36 = new double[] {};
        double double37 = variance34.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        boolean boolean44 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean46 = variance39.equals((java.lang.Object) secondMoment45);
        variance39.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean52 = variance50.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double62 = variance54.evaluate(doubleArray61);
        double double63 = variance50.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance68.evaluate(doubleArray77);
        double double82 = variance65.evaluate(doubleArray77);
        double double83 = variance50.evaluate(doubleArray77);
        double double85 = variance39.evaluate(doubleArray77, (double) 0L);
        double double89 = variance34.evaluate(doubleArray77, 58606.246913580246d, (int) (short) 1, 0);
        variance34.clear();
        boolean boolean91 = variance34.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2136.8055555555557d + "'", double62 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2564.166666666667d + "'", double63 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 25.0d + "'", double85 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        long long9 = variance1.getN();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        long long15 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        variance18.incrementAll(doubleArray34);
        variance16.incrementAll(doubleArray34);
        double double42 = variance12.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        double double46 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment44);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double double51 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        secondMoment49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        secondMoment49.incrementAll(doubleArray59);
        double double62 = variance47.evaluate(doubleArray59);
        double double63 = variance12.evaluate(doubleArray59);
        variance1.incrementAll(doubleArray59);
        double[] doubleArray65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double69 = variance1.evaluate(doubleArray65, 2024039.12109375d, (int) ' ', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 25.0d + "'", double62 == 25.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        double double29 = variance19.evaluate(doubleArray26, (double) 10L);
        long long30 = variance19.getN();
        variance19.increment((double) 0L);
        double[] doubleArray34 = new double[] { 10.0d };
        variance19.incrementAll(doubleArray34);
        variance19.clear();
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long41 = secondMoment39.getN();
        secondMoment39.clear();
        double double43 = secondMoment39.getResult();
        secondMoment39.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double[] doubleArray47 = new double[] {};
        double double48 = secondMoment39.evaluate(doubleArray47);
        double double49 = secondMoment39.getResult();
        secondMoment39.clear();
        double double51 = secondMoment39.getResult();
        long long52 = secondMoment39.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double66 = variance58.evaluate(doubleArray65);
        double double67 = variance54.evaluate(doubleArray65);
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean72 = variance70.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray81 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double82 = variance74.evaluate(doubleArray81);
        double double83 = variance70.evaluate(doubleArray81);
        variance54.incrementAll(doubleArray81);
        secondMoment39.incrementAll(doubleArray81, 1, (int) (short) 1);
        double double89 = variance19.evaluate(doubleArray81, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray81, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2136.8055555555557d + "'", double82 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2564.1666666666665d + "'", double89 == 2564.1666666666665d);
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        secondMoment29.incrementAll(doubleArray39);
        double double42 = variance27.evaluate(doubleArray39);
        double double43 = secondMoment9.evaluate(doubleArray39);
        double double44 = secondMoment9.getResult();
        double double45 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        java.lang.Class<?> wildcardClass47 = variance46.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 25.0d + "'", double42 == 25.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        double double7 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        secondMoment10.incrementAll(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean27 = variance25.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        double double37 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double52 = secondMoment35.evaluate(doubleArray46, (int) (short) 0, 1);
        double double53 = variance25.evaluate(doubleArray46);
        secondMoment10.incrementAll(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            variance8.incrementAll(doubleArray46, (int) ' ', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        boolean boolean13 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance15.evaluate(doubleArray29);
        double double35 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        variance37.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        double double61 = variance48.evaluate(doubleArray57);
        double double62 = variance45.evaluate(doubleArray57);
        variance37.incrementAll(doubleArray57);
        double double64 = variance15.evaluate(doubleArray57);
        variance12.incrementAll(doubleArray57);
        double double66 = variance12.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        double double5 = secondMoment0.getResult();
        secondMoment0.increment((double) 10.0f);
        long long8 = secondMoment0.getN();
        double double9 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        long long4 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long10 = secondMoment8.getN();
        secondMoment8.clear();
        secondMoment8.clear();
        secondMoment8.increment((double) (byte) 100);
        long long15 = secondMoment8.getN();
        double[] doubleArray17 = new double[] { 2024039.1203703713d };
        double double18 = secondMoment8.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        variance26.setBiasCorrected(false);
        boolean boolean29 = secondMoment8.equals((java.lang.Object) variance26);
        double double30 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean34 = variance32.equals((java.lang.Object) (short) 10);
        double double35 = variance32.getResult();
        variance32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        variance38.increment((double) 100L);
        boolean boolean45 = variance38.isBiasCorrected();
        variance38.clear();
        long long47 = variance38.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double49 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double69 = variance56.evaluate(doubleArray65);
        double double70 = variance51.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray86 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double87 = variance79.evaluate(doubleArray86);
        double double88 = variance72.evaluate(doubleArray86);
        double double89 = variance51.evaluate(doubleArray86);
        double double90 = secondMoment48.evaluate(doubleArray86);
        double double91 = variance38.evaluate(doubleArray86);
        double double92 = variance32.evaluate(doubleArray86);
        secondMoment8.incrementAll(doubleArray86, (int) (byte) 1, (int) (short) 1);
        double double97 = variance1.evaluate(doubleArray86, (double) 100);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2136.8055555555557d + "'", double87 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2564.166666666667d + "'", double88 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2564.166666666667d + "'", double89 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 12820.833333333334d + "'", double90 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2136.8055555555557d + "'", double91 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2564.166666666667d + "'", double92 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2136.805555555555d + "'", double97 == 2136.805555555555d);
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        double double9 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double38 = variance20.evaluate(doubleArray37);
        double double40 = variance16.evaluate(doubleArray37, (double) (byte) 1);
        double double42 = variance11.evaluate(doubleArray37, 4048078.240740742d);
        double double43 = secondMoment1.evaluate(doubleArray37);
        double double44 = secondMoment1.getResult();
        long long45 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2024039.120370371d + "'", double38 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2024039.12109375d + "'", double42 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4048078.240740742d + "'", double43 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4048078.240740742d + "'", double44 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        secondMoment0.increment(50.0d);
        double double17 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        double double22 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        secondMoment20.clear();
        secondMoment20.increment((double) 2L);
        double double27 = secondMoment20.getResult();
        secondMoment20.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        secondMoment20.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        double double35 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long38 = secondMoment36.getN();
        secondMoment36.clear();
        secondMoment36.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        variance42.setBiasCorrected(false);
        double double45 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long48 = secondMoment46.getN();
        secondMoment46.clear();
        secondMoment46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean60 = variance53.equals((java.lang.Object) secondMoment59);
        variance53.increment((double) 100L);
        variance53.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double[] doubleArray83 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double84 = variance66.evaluate(doubleArray83);
        variance53.incrementAll(doubleArray83);
        double double86 = variance51.evaluate(doubleArray83);
        variance42.incrementAll(doubleArray83);
        double double90 = secondMoment20.evaluate(doubleArray83, (int) (short) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = secondMoment0.evaluate(doubleArray83, (int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1322.6666666666667d + "'", double35 == 1322.6666666666667d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2024039.120370371d + "'", double84 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2024039.120370371d + "'", double86 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        double double19 = secondMoment15.getResult();
        secondMoment15.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double40 = variance27.evaluate(doubleArray36);
        double double41 = variance24.evaluate(doubleArray36);
        variance22.incrementAll(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        variance44.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double double69 = variance52.evaluate(doubleArray64);
        variance44.incrementAll(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double double87 = variance44.evaluate(doubleArray81, Double.NaN);
        double double88 = variance22.evaluate(doubleArray81);
        double double89 = secondMoment7.evaluate(doubleArray81);
        secondMoment7.increment(13860.857142857143d);
        secondMoment7.increment(3.5113657447730967E12d);
        java.lang.Class<?> wildcardClass94 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        secondMoment0.incrementAll(doubleArray22);
        secondMoment0.clear();
        long long27 = secondMoment0.getN();
        secondMoment0.clear();
        long long29 = secondMoment0.getN();
        long long30 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        variance32.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean54 = variance52.equals((java.lang.Object) (short) 10);
        boolean boolean55 = variance46.equals((java.lang.Object) variance52);
        long long56 = variance52.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean60 = variance58.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance58.evaluate(doubleArray69);
        double double72 = variance52.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance76.increment((-1.0d));
        variance76.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double87 = variance86.getResult();
        double[] doubleArray90 = new double[] { 0L, (byte) 10 };
        double double91 = variance86.evaluate(doubleArray90);
        double double93 = variance83.evaluate(doubleArray90, (double) 10L);
        double double94 = variance81.evaluate(doubleArray90);
        double double95 = variance76.evaluate(doubleArray90);
        variance74.incrementAll(doubleArray90);
        double double97 = variance52.evaluate(doubleArray90);
        double double98 = variance32.evaluate(doubleArray90);
        double double99 = secondMoment0.evaluate(doubleArray90);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2564.166666666667d + "'", double71 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2564.166666666667d + "'", double72 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 50.0d + "'", double97 == 50.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 50.0d + "'", double98 == 50.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 50.0d + "'", double99 == 50.0d);
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        long long6 = secondMoment4.getN();
        secondMoment4.clear();
        secondMoment4.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance16.evaluate(doubleArray25);
        double double30 = variance11.evaluate(doubleArray25);
        double double31 = secondMoment4.evaluate(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray25, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double31 = variance23.evaluate(doubleArray30);
        double double32 = variance16.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean51 = variance49.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        double[] doubleArray62 = new double[] { 0L, (byte) 10 };
        double double63 = variance58.evaluate(doubleArray62);
        double double65 = variance55.evaluate(doubleArray62, (double) 10L);
        double double66 = variance53.evaluate(doubleArray62);
        double[] doubleArray70 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double71 = variance53.evaluate(doubleArray70);
        double double73 = variance49.evaluate(doubleArray70, (double) (byte) 1);
        double double74 = variance34.evaluate(doubleArray70);
        double double76 = variance16.evaluate(doubleArray70, 2310.1428571428573d);
        // The following exception was thrown during execution in test generation
        try {
            variance14.incrementAll(doubleArray70, (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2136.8055555555557d + "'", double31 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2564.166666666667d + "'", double32 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2024039.120370371d + "'", double71 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2024039.120370371d + "'", double73 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2024039.120370371d + "'", double74 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2024039.1203703713d + "'", double76 == 2024039.1203703713d);
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        secondMoment10.incrementAll(doubleArray20);
        boolean boolean23 = variance3.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean32 = variance25.equals((java.lang.Object) secondMoment31);
        boolean boolean33 = secondMoment10.equals((java.lang.Object) boolean32);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        secondMoment37.increment(10.0d);
        double double43 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double[] doubleArray62 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double63 = variance45.evaluate(doubleArray62);
        double double64 = secondMoment37.evaluate(doubleArray62);
        secondMoment10.incrementAll(doubleArray62);
        double double66 = secondMoment10.getResult();
        double[] doubleArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double70 = secondMoment10.evaluate(doubleArray67, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.120370371d + "'", double63 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4048078.240740742d + "'", double64 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4048078.240740742d + "'", double66 == 4048078.240740742d);
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        double double3 = secondMoment0.getResult();
        secondMoment0.increment(775107.6564625853d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        double double13 = variance7.getResult();
        variance7.increment(1349359.4135802474d);
        variance7.setBiasCorrected(true);
        variance7.clear();
        double double19 = variance7.getResult();
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        variance22.increment((double) (short) -1);
        long long26 = variance22.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance28.evaluate(doubleArray37);
        variance28.increment((double) 0.0f);
        boolean boolean44 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        long long47 = secondMoment45.getN();
        secondMoment45.clear();
        secondMoment45.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        variance51.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean57 = variance55.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray66 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double67 = variance59.evaluate(doubleArray66);
        double double68 = variance55.evaluate(doubleArray66);
        double double70 = variance51.evaluate(doubleArray66, (double) 1.0f);
        double double73 = variance28.evaluate(doubleArray66, (int) (byte) 0, 1);
        double double74 = variance22.evaluate(doubleArray66);
        double[] doubleArray79 = new double[] { (short) 1, (short) 10, 1.0d, 50.0d };
        double double80 = variance22.evaluate(doubleArray79);
        double double81 = variance7.evaluate(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = secondMoment0.evaluate(doubleArray79, (int) 'a', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2136.8055555555557d + "'", double67 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2564.166666666667d + "'", double68 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.805555555555d + "'", double70 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2564.166666666667d + "'", double74 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0, 1.0, 50.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 547.0d + "'", double80 == 547.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 547.0d + "'", double81 == 547.0d);
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance12.clear();
        double double14 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        long long19 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double42 = variance29.evaluate(doubleArray38);
        double double43 = variance24.evaluate(doubleArray38);
        variance22.incrementAll(doubleArray38);
        variance20.incrementAll(doubleArray38);
        double double46 = variance16.evaluate(doubleArray38);
        long long47 = variance16.getN();
        double double48 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        long long51 = secondMoment49.getN();
        secondMoment49.clear();
        secondMoment49.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        variance55.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        long long59 = secondMoment57.getN();
        secondMoment57.clear();
        secondMoment57.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        variance63.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean69 = variance67.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double79 = variance71.evaluate(doubleArray78);
        double double80 = variance67.evaluate(doubleArray78);
        double double82 = variance63.evaluate(doubleArray78, (double) 1.0f);
        double double83 = variance55.evaluate(doubleArray78);
        double double85 = variance16.evaluate(doubleArray78, 26761.69230769231d);
        variance12.incrementAll(doubleArray78);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2136.8055555555557d + "'", double79 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2564.166666666667d + "'", double80 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2136.805555555555d + "'", double82 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.1666666030883d + "'", double85 == 2564.1666666030883d);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double25 = secondMoment8.evaluate(doubleArray19, (int) (short) 0, 1);
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double29 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        long long32 = secondMoment30.getN();
        secondMoment30.clear();
        double double34 = secondMoment30.getResult();
        secondMoment30.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        double[] doubleArray38 = new double[] {};
        double double39 = secondMoment30.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        long long52 = variance41.getN();
        variance41.increment((double) 0L);
        double[] doubleArray56 = new double[] { 10.0d };
        variance41.incrementAll(doubleArray56);
        variance41.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        long long62 = secondMoment60.getN();
        secondMoment60.clear();
        secondMoment60.clear();
        secondMoment60.increment((double) (byte) 100);
        secondMoment60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment60);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        double double82 = variance69.evaluate(doubleArray78);
        double double83 = variance41.evaluate(doubleArray78);
        double double84 = secondMoment30.evaluate(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment8.incrementAll(doubleArray78, (int) (byte) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean12 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        double double24 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        secondMoment22.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean37 = variance30.equals((java.lang.Object) secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double53 = variance30.evaluate(doubleArray46, (double) (short) 0, 0, (int) (short) 0);
        double double56 = secondMoment22.evaluate(doubleArray46, 0, 0);
        variance14.incrementAll(doubleArray46);
        double double58 = variance11.evaluate(doubleArray46);
        variance11.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        secondMoment29.incrementAll(doubleArray39);
        double double42 = variance27.evaluate(doubleArray39);
        double double43 = secondMoment9.evaluate(doubleArray39);
        double double44 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        double[] doubleArray67 = new double[] { 0L, (byte) 10 };
        double double68 = variance63.evaluate(doubleArray67);
        double double70 = variance60.evaluate(doubleArray67, (double) 10L);
        double double71 = variance58.evaluate(doubleArray67);
        double double72 = variance53.evaluate(doubleArray67);
        variance51.incrementAll(doubleArray67);
        double double74 = variance48.evaluate(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = secondMoment9.evaluate(doubleArray67, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 25.0d + "'", double42 == 25.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long16 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double18 = secondMoment2.getResult();
        secondMoment2.clear();
        java.lang.Class<?> wildcardClass20 = secondMoment2.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        variance9.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean28 = variance26.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double[] doubleArray47 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double48 = variance30.evaluate(doubleArray47);
        double double50 = variance26.evaluate(doubleArray47, (double) (byte) 1);
        double double51 = variance9.evaluate(doubleArray47);
        double double53 = variance7.evaluate(doubleArray47, 0.0d);
        double double54 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double64 = variance56.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double74 = variance66.evaluate(doubleArray73);
        double double76 = variance56.evaluate(doubleArray73, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double79 = variance7.evaluate(doubleArray73, (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2024039.120370371d + "'", double48 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2024039.120370371d + "'", double50 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2024039.120370371d + "'", double51 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1349359.4135802472d + "'", double53 == 1349359.4135802472d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2136.8055555555557d + "'", double74 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2136.8055555555557d + "'", double76 == 2136.8055555555557d);
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        boolean boolean7 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        double double29 = variance10.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double47 = variance31.evaluate(doubleArray45);
        double double48 = variance10.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        variance10.incrementAll(doubleArray59, (int) (byte) 0, (int) (byte) 0);
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double77 = variance69.evaluate(doubleArray76);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray86 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double87 = variance79.evaluate(doubleArray86);
        double double89 = variance69.evaluate(doubleArray86, (double) '#');
        double double90 = variance10.evaluate(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance1.evaluate(doubleArray86, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2564.166666666667d + "'", double47 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2564.166666666667d + "'", double48 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2136.8055555555557d + "'", double77 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2136.8055555555557d + "'", double87 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2136.8055555555557d + "'", double89 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2564.166666666667d + "'", double90 == 2564.166666666667d);
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        long long7 = secondMoment0.getN();
        long long8 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        variance13.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        variance21.increment((double) (short) -1);
        long long25 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double40 = variance27.evaluate(doubleArray36);
        variance27.increment((double) 0.0f);
        boolean boolean43 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        long long46 = secondMoment44.getN();
        secondMoment44.clear();
        secondMoment44.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        variance50.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double66 = variance58.evaluate(doubleArray65);
        double double67 = variance54.evaluate(doubleArray65);
        double double69 = variance50.evaluate(doubleArray65, (double) 1.0f);
        double double72 = variance27.evaluate(doubleArray65, (int) (byte) 0, 1);
        double double73 = variance21.evaluate(doubleArray65);
        boolean boolean74 = variance13.equals((java.lang.Object) doubleArray65);
        double double75 = secondMoment9.evaluate(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = secondMoment0.evaluate(doubleArray65, (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2136.805555555555d + "'", double69 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2564.166666666667d + "'", double73 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 12820.833333333334d + "'", double75 == 12820.833333333334d);
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        long long28 = variance17.getN();
        variance17.increment((double) 0L);
        double[] doubleArray32 = new double[] { 10.0d };
        variance17.incrementAll(doubleArray32);
        variance17.clear();
        variance17.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        variance38.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.setBiasCorrected(false);
        boolean boolean61 = variance56.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean63 = variance56.equals((java.lang.Object) secondMoment62);
        secondMoment62.increment((double) (short) 0);
        secondMoment62.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double77 = variance69.evaluate(doubleArray76);
        double double78 = secondMoment62.evaluate(doubleArray76);
        secondMoment54.incrementAll(doubleArray76);
        variance38.incrementAll(doubleArray76);
        double double82 = variance17.evaluate(doubleArray76, (double) (-1));
        secondMoment7.incrementAll(doubleArray76);
        double double84 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2136.8055555555557d + "'", double77 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 12820.833333333334d + "'", double78 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2564.1666666666665d + "'", double82 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 12820.833333333334d + "'", double84 == 12820.833333333334d);
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        double double9 = secondMoment5.getResult();
        secondMoment5.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        secondMoment5.increment((double) (byte) 0);
        long long15 = secondMoment5.getN();
        boolean boolean16 = variance1.equals((java.lang.Object) long15);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray27 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double28 = variance20.evaluate(doubleArray27);
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        variance31.increment((double) (short) -1);
        boolean boolean35 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        secondMoment37.clear();
        secondMoment37.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        long long45 = secondMoment43.getN();
        secondMoment43.clear();
        secondMoment43.clear();
        secondMoment43.increment((double) (byte) 100);
        secondMoment43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        double double64 = variance54.evaluate(doubleArray61, (double) 10L);
        double double65 = variance52.evaluate(doubleArray61);
        double[] doubleArray69 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double70 = variance52.evaluate(doubleArray69);
        double double71 = secondMoment43.evaluate(doubleArray69);
        double double74 = secondMoment37.evaluate(doubleArray69, 0, (int) (short) 1);
        double double76 = variance31.evaluate(doubleArray69, 651942.9897959187d);
        double double78 = variance20.evaluate(doubleArray69, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = variance1.evaluate(doubleArray69, (double) 1, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2136.8055555555557d + "'", double28 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2024039.120370371d + "'", double70 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 4048078.240740742d + "'", double71 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2024039.1204833984d + "'", double76 == 2024039.1204833984d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1349359.4135802474d + "'", double78 == 1349359.4135802474d);
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        long long13 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        variance14.incrementAll(doubleArray32);
        double double40 = variance10.evaluate(doubleArray32);
        boolean boolean41 = secondMoment1.equals((java.lang.Object) doubleArray32);
        double double42 = secondMoment1.getResult();
        secondMoment1.clear();
        secondMoment1.increment((-1.0d));
        secondMoment1.clear();
        java.lang.Class<?> wildcardClass47 = secondMoment1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment(2310.1428571428573d);
        long long11 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long15 = secondMoment13.getN();
        secondMoment13.clear();
        secondMoment13.clear();
        secondMoment13.increment((double) (byte) 100);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        boolean boolean31 = variance26.isBiasCorrected();
        double double32 = variance26.getResult();
        variance26.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.setBiasCorrected(false);
        boolean boolean41 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean43 = variance36.equals((java.lang.Object) secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double59 = variance36.evaluate(doubleArray52, (double) (short) 0, 0, (int) (short) 0);
        double double60 = variance26.evaluate(doubleArray52);
        double double61 = variance24.evaluate(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = secondMoment7.evaluate(doubleArray52, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.increment(10.0d);
        double double8 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        variance12.increment((double) 100L);
        boolean boolean19 = variance12.isBiasCorrected();
        variance12.clear();
        double double21 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long25 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.clear();
        double double28 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double double40 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        secondMoment38.incrementAll(doubleArray48);
        boolean boolean51 = variance31.equals((java.lang.Object) secondMoment38);
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment54);
        secondMoment54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        secondMoment54.incrementAll(doubleArray64);
        double double67 = variance31.evaluate(doubleArray64);
        double double68 = variance29.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance70.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double86 = variance73.evaluate(doubleArray82);
        double double87 = variance70.evaluate(doubleArray82);
        double double89 = variance29.evaluate(doubleArray82, 2024039.1203703713d);
        double double90 = variance12.evaluate(doubleArray82);
        double double91 = variance10.evaluate(doubleArray82);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 25.0d + "'", double67 == 25.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0009765625d + "'", double89 == 50.0009765625d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 25.0d + "'", double90 == 25.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 25.0d + "'", double91 == 25.0d);
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        variance13.increment((double) (short) -1);
        variance13.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean22 = variance20.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double47 = secondMoment30.evaluate(doubleArray41, (int) (short) 0, 1);
        double double48 = variance20.evaluate(doubleArray41);
        variance20.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        double double58 = variance52.getResult();
        variance52.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance62.increment((-1.0d));
        variance62.setBiasCorrected(false);
        boolean boolean67 = variance62.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean69 = variance62.equals((java.lang.Object) secondMoment68);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        double double85 = variance62.evaluate(doubleArray78, (double) (short) 0, 0, (int) (short) 0);
        double double86 = variance52.evaluate(doubleArray78);
        double double87 = variance20.evaluate(doubleArray78);
        double double91 = variance13.evaluate(doubleArray78, 60.666666666666664d, 1, 1);
        double double92 = variance11.evaluate(doubleArray78);
        double double93 = variance11.getResult();
        variance11.increment(24.5d);
        variance11.clear();
        variance11.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance44.evaluate(doubleArray58);
        double double64 = secondMoment0.evaluate(doubleArray58);
        secondMoment0.increment(4450278.058309039d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        double double12 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = variance13.evaluate(doubleArray14, 4450278.058309039d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1152.0d + "'", double12 == 1152.0d);
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        variance4.increment(0.5d);
        boolean boolean49 = variance4.isBiasCorrected();
        boolean boolean50 = variance4.isBiasCorrected();
        variance4.increment(0.0d);
        variance4.increment(4684796.354166668d);
        variance4.increment(26761.69230769231d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.clear();
        long long8 = secondMoment0.getN();
        double double9 = secondMoment0.getResult();
        double double10 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        java.lang.Class<?> wildcardClass12 = variance11.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment((double) 0.0f);
        boolean boolean17 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long20 = secondMoment18.getN();
        secondMoment18.clear();
        secondMoment18.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        variance24.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean30 = variance28.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double40 = variance32.evaluate(doubleArray39);
        double double41 = variance28.evaluate(doubleArray39);
        double double43 = variance24.evaluate(doubleArray39, (double) 1.0f);
        double double46 = variance1.evaluate(doubleArray39, (int) (byte) 0, 1);
        variance1.increment((double) ' ');
        variance1.increment(1.0d);
        variance1.clear();
        long long52 = variance1.getN();
        double[] doubleArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2136.8055555555557d + "'", double40 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.805555555555d + "'", double43 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray5 = new double[] { (byte) 100, 10 };
        double double8 = variance2.evaluate(doubleArray5, (int) (short) 1, 0);
        variance2.setBiasCorrected(false);
        variance2.increment((double) ' ');
        variance2.clear();
        variance2.setBiasCorrected(false);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        secondMoment15.clear();
        double double20 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.clear();
        double double27 = variance25.getResult();
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double48 = variance35.evaluate(doubleArray44);
        double double49 = variance30.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        double[] doubleArray55 = new double[] { 0L, (byte) 10 };
        double double56 = variance51.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double66 = variance58.evaluate(doubleArray65);
        double double67 = variance51.evaluate(doubleArray65);
        double double68 = variance30.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance70.evaluate(doubleArray79);
        variance30.incrementAll(doubleArray79, (int) (byte) 0, (int) (byte) 0);
        double double87 = variance25.evaluate(doubleArray79);
        secondMoment15.incrementAll(doubleArray79, (int) (short) 0, (int) (byte) 1);
        double double91 = secondMoment7.evaluate(doubleArray79);
        double double92 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2564.166666666667d + "'", double68 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.increment((-1.0d));
        secondMoment0.increment(2564.166666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean10 = variance8.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double[] doubleArray29 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double30 = variance12.evaluate(doubleArray29);
        double double32 = variance8.evaluate(doubleArray29, (double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double double44 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment42);
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        secondMoment42.incrementAll(doubleArray52);
        boolean boolean55 = variance35.equals((java.lang.Object) secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        boolean boolean65 = secondMoment42.equals((java.lang.Object) boolean64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = secondMoment42.evaluate(doubleArray75);
        double double80 = variance8.evaluate(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray75, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2024039.120370371d + "'", double30 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2024039.120370371d + "'", double32 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        double double19 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        secondMoment17.incrementAll(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        secondMoment17.clear();
        secondMoment17.increment(Double.NaN);
        secondMoment17.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        boolean boolean43 = variance38.isBiasCorrected();
        double[] doubleArray44 = new double[] {};
        double double45 = variance38.evaluate(doubleArray44);
        variance38.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        double[] doubleArray67 = new double[] { 0L, (byte) 10 };
        double double68 = variance63.evaluate(doubleArray67);
        double double70 = variance60.evaluate(doubleArray67, (double) 10L);
        double double71 = variance58.evaluate(doubleArray67);
        double[] doubleArray75 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double76 = variance58.evaluate(doubleArray75);
        double double78 = variance54.evaluate(doubleArray75, (double) (byte) 1);
        double double80 = variance49.evaluate(doubleArray75, 4048078.240740742d);
        double double81 = variance38.evaluate(doubleArray75);
        boolean boolean82 = secondMoment17.equals((java.lang.Object) variance38);
        long long83 = variance38.getN();
        double[] doubleArray87 = new double[] { (short) 10, 60.666666666666664d, 547.0d };
        double double89 = variance38.evaluate(doubleArray87, (double) (-1.0f));
        variance14.incrementAll(doubleArray87);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2024039.120370371d + "'", double76 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2024039.120370371d + "'", double78 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2024039.12109375d + "'", double80 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1349359.4135802474d + "'", double81 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, 60.666666666666664, 547.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 58606.246913580246d + "'", double89 == 58606.246913580246d);
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        double double5 = variance1.getResult();
        variance1.increment((double) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        secondMoment9.increment((double) (byte) 100);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double31 = variance18.evaluate(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = variance1.evaluate(doubleArray27, (int) (short) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        double double7 = secondMoment1.getResult();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        boolean boolean10 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        double double18 = variance12.getResult();
        variance12.increment(1349359.4135802474d);
        variance12.setBiasCorrected(true);
        variance12.clear();
        double double24 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double34 = variance26.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double44 = variance36.evaluate(doubleArray43);
        double double46 = variance26.evaluate(doubleArray43, (double) '#');
        double double47 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        double double64 = variance54.evaluate(doubleArray61, (double) 10L);
        double double65 = variance52.evaluate(doubleArray61);
        double double66 = variance49.evaluate(doubleArray61);
        variance26.incrementAll(doubleArray61);
        double double68 = variance12.evaluate(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = variance9.evaluate(doubleArray61, (int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2136.8055555555557d + "'", double34 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2136.8055555555557d + "'", double44 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        secondMoment8.clear();
        double double16 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double43 = secondMoment26.evaluate(doubleArray37, (int) (short) 0, 1);
        long long44 = secondMoment26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean49 = variance47.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray58 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double59 = variance51.evaluate(doubleArray58);
        double double60 = variance47.evaluate(doubleArray58);
        java.lang.Class<?> wildcardClass61 = doubleArray58.getClass();
        boolean boolean62 = variance45.equals((java.lang.Object) wildcardClass61);
        variance45.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean68 = variance66.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double78 = variance70.evaluate(doubleArray77);
        double double79 = variance66.evaluate(doubleArray77);
        double double81 = variance45.evaluate(doubleArray77, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            secondMoment8.incrementAll(doubleArray77, (int) (short) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.8055555555557d + "'", double59 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2564.166666666667d + "'", double60 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2136.8055555555557d + "'", double78 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2564.166666666667d + "'", double79 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2136.8055555555557d + "'", double81 == 2136.8055555555557d);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        long long17 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double40 = variance27.evaluate(doubleArray36);
        double double41 = variance22.evaluate(doubleArray36);
        variance20.incrementAll(doubleArray36);
        variance18.incrementAll(doubleArray36);
        double double44 = variance14.evaluate(doubleArray36);
        long long45 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean58 = variance51.equals((java.lang.Object) secondMoment57);
        double double59 = secondMoment57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double74 = secondMoment57.evaluate(doubleArray68, (int) (short) 0, 1);
        double double75 = variance47.evaluate(doubleArray68);
        double double77 = variance14.evaluate(doubleArray68, (double) 2L);
        // The following exception was thrown during execution in test generation
        try {
            variance12.incrementAll(doubleArray68, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance7.increment((double) (byte) -1);
        long long10 = variance7.getN();
        variance7.increment((double) 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment((double) 10.0f);
        long long14 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        secondMoment23.increment((double) (short) 0);
        secondMoment23.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double38 = variance30.evaluate(doubleArray37);
        double double39 = secondMoment23.evaluate(doubleArray37);
        secondMoment15.incrementAll(doubleArray37);
        double double41 = secondMoment7.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        long long44 = secondMoment42.getN();
        secondMoment42.clear();
        double double46 = secondMoment42.getResult();
        secondMoment42.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        secondMoment42.increment((double) (byte) 0);
        long long52 = secondMoment42.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double66 = variance58.evaluate(doubleArray65);
        double double67 = variance54.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double double86 = variance69.evaluate(doubleArray81);
        double double87 = variance54.evaluate(doubleArray81);
        double double90 = secondMoment42.evaluate(doubleArray81, (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray81, (int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2136.8055555555557d + "'", double38 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 12820.833333333334d + "'", double39 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 12820.833333333334d + "'", double41 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double24 = secondMoment7.evaluate(doubleArray18, (int) (short) 0, 1);
        long long25 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double47 = variance39.evaluate(doubleArray46);
        double double48 = variance32.evaluate(doubleArray46);
        double double49 = secondMoment27.evaluate(doubleArray46);
        double double50 = secondMoment7.evaluate(doubleArray46);
        secondMoment7.clear();
        secondMoment7.clear();
        java.lang.Class<?> wildcardClass53 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2136.8055555555557d + "'", double47 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2564.166666666667d + "'", double48 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 12820.833333333334d + "'", double49 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 12820.833333333334d + "'", double50 == 12820.833333333334d);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        long long16 = secondMoment7.getN();
        double double17 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean26 = variance24.equals((java.lang.Object) (short) 10);
        double double27 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double40 = variance24.evaluate(doubleArray36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean53 = variance46.equals((java.lang.Object) secondMoment52);
        double double54 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        double double66 = variance56.evaluate(doubleArray63, (double) 10L);
        double double69 = secondMoment52.evaluate(doubleArray63, (int) (short) 0, 1);
        double double70 = variance42.evaluate(doubleArray63);
        double double73 = variance24.evaluate(doubleArray63, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            variance22.incrementAll(doubleArray63, (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        double double43 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        variance45.increment((double) 0.0f);
        boolean boolean61 = variance45.isBiasCorrected();
        long long62 = variance45.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.setBiasCorrected(false);
        boolean boolean69 = variance64.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean71 = variance64.equals((java.lang.Object) secondMoment70);
        secondMoment70.increment((double) (short) 0);
        secondMoment70.increment((double) 1.0f);
        double double76 = secondMoment70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        boolean boolean79 = variance45.equals((java.lang.Object) variance78);
        double[] doubleArray80 = new double[] {};
        double double81 = variance78.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = secondMoment0.evaluate(doubleArray80, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 12820.833333333334d + "'", double43 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.5d + "'", double76 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2024039.12109375d);
        secondMoment0.clear();
        secondMoment0.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double39 = variance16.evaluate(doubleArray32, (double) (short) 0, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = secondMoment0.evaluate(doubleArray32, (int) (byte) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        double double13 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        double double28 = secondMoment11.evaluate(doubleArray22, (int) (short) 0, 1);
        double double29 = variance1.evaluate(doubleArray22);
        variance1.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        double double39 = variance33.getResult();
        variance33.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance43.increment((-1.0d));
        variance43.setBiasCorrected(false);
        boolean boolean48 = variance43.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean50 = variance43.equals((java.lang.Object) secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double66 = variance43.evaluate(doubleArray59, (double) (short) 0, 0, (int) (short) 0);
        double double67 = variance33.evaluate(doubleArray59);
        double double68 = variance1.evaluate(doubleArray59);
        variance1.clear();
        boolean boolean70 = variance1.isBiasCorrected();
        variance1.increment(2024039.1203703708d);
        double[] doubleArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double74 = variance1.evaluate(doubleArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        long long27 = secondMoment8.getN();
        secondMoment8.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        variance31.increment((double) (short) -1);
        long long35 = variance31.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        variance37.increment((double) 0.0f);
        boolean boolean53 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        long long56 = secondMoment54.getN();
        secondMoment54.clear();
        secondMoment54.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        variance60.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean66 = variance64.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double76 = variance68.evaluate(doubleArray75);
        double double77 = variance64.evaluate(doubleArray75);
        double double79 = variance60.evaluate(doubleArray75, (double) 1.0f);
        double double82 = variance37.evaluate(doubleArray75, (int) (byte) 0, 1);
        double double83 = variance31.evaluate(doubleArray75);
        double double84 = secondMoment8.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        variance85.increment(2268035.8522376535d);
        variance85.setBiasCorrected(false);
        double double90 = variance85.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2136.8055555555557d + "'", double76 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2136.805555555555d + "'", double79 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 12820.833333333334d + "'", double84 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2136.8055555555557d + "'", double90 == 2136.8055555555557d);
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        secondMoment0.increment(50.0d);
        double double17 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        secondMoment27.incrementAll(doubleArray37);
        boolean boolean40 = variance20.equals((java.lang.Object) secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean49 = variance42.equals((java.lang.Object) secondMoment48);
        boolean boolean50 = secondMoment27.equals((java.lang.Object) boolean49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double64 = secondMoment27.evaluate(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = secondMoment0.evaluate(doubleArray60, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double double7 = variance1.getResult();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double34 = variance11.evaluate(doubleArray27, (double) (short) 0, 0, (int) (short) 0);
        double double35 = variance1.evaluate(doubleArray27);
        variance1.clear();
        variance1.increment((double) 100.0f);
        boolean boolean39 = variance1.isBiasCorrected();
        double double40 = variance1.getResult();
        double double41 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        secondMoment2.clear();
        long long22 = secondMoment2.getN();
        long long23 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        long long27 = secondMoment25.getN();
        secondMoment25.clear();
        secondMoment25.clear();
        double double30 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        long long32 = secondMoment25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double double44 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment42);
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        secondMoment42.incrementAll(doubleArray52);
        boolean boolean55 = variance35.equals((java.lang.Object) secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        boolean boolean65 = secondMoment42.equals((java.lang.Object) boolean64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment42);
        double double67 = variance66.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        double double71 = secondMoment69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment69);
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance75.increment((-1.0d));
        variance75.setBiasCorrected(false);
        boolean boolean80 = variance75.isBiasCorrected();
        double[] doubleArray81 = new double[] {};
        double double82 = variance75.evaluate(doubleArray81);
        secondMoment69.incrementAll(doubleArray81);
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double87 = variance86.getResult();
        double[] doubleArray90 = new double[] { 0L, (byte) 10 };
        double double91 = variance86.evaluate(doubleArray90);
        secondMoment69.incrementAll(doubleArray90);
        double double95 = variance66.evaluate(doubleArray90, (int) (byte) 0, 0);
        double double98 = secondMoment25.evaluate(doubleArray90, (int) (byte) 0, (int) (byte) 1);
        secondMoment2.incrementAll(doubleArray90);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        double double6 = secondMoment2.getResult();
        secondMoment2.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double[] doubleArray10 = new double[] {};
        double double11 = secondMoment2.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double14 = secondMoment2.getResult();
        java.lang.Class<?> wildcardClass15 = secondMoment2.getClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        long long15 = secondMoment2.getN();
        secondMoment2.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double19 = secondMoment2.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 60.666666666666664d + "'", double19 == 60.666666666666664d);
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        boolean boolean5 = variance1.isBiasCorrected();
        double double6 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance13.clear();
        double double15 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        long long39 = variance28.getN();
        variance28.increment((double) 0L);
        double[] doubleArray43 = new double[] { 10.0d };
        variance28.incrementAll(doubleArray43);
        secondMoment23.incrementAll(doubleArray43);
        double double47 = variance13.evaluate(doubleArray43, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray43, (int) '4', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        boolean boolean9 = variance1.isBiasCorrected();
        long long10 = variance1.getN();
        variance1.increment(18.666666666666668d);
        variance1.increment(2136.8055555559695d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance7.increment((double) (byte) -1);
        variance7.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        double double16 = secondMoment12.getResult();
        secondMoment12.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        variance19.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double23 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance25.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        double[] doubleArray50 = new double[] { 0L, (byte) 10 };
        double double51 = variance46.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray60 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double61 = variance53.evaluate(doubleArray60);
        double double62 = variance46.evaluate(doubleArray60);
        double double63 = variance25.evaluate(doubleArray60);
        double double64 = secondMoment22.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.increment((-1.0d));
        variance66.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double84 = variance71.evaluate(doubleArray80);
        double double85 = variance66.evaluate(doubleArray80);
        double double86 = secondMoment22.evaluate(doubleArray80);
        double double87 = variance19.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance7.evaluate(doubleArray80, 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2136.8055555555557d + "'", double61 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2564.166666666667d + "'", double62 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2564.166666666667d + "'", double63 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 12820.833333333334d + "'", double64 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.increment(10.0d);
        double double8 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        boolean boolean11 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        double double16 = secondMoment12.getResult();
        secondMoment12.increment((double) (short) 0);
        secondMoment12.clear();
        long long20 = secondMoment12.getN();
        double double21 = secondMoment12.getResult();
        double double22 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        double double27 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        secondMoment25.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        secondMoment25.clear();
        secondMoment25.increment(Double.NaN);
        secondMoment25.increment(0.0d);
        secondMoment25.clear();
        long long45 = secondMoment25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double double69 = variance50.evaluate(doubleArray64);
        variance48.incrementAll(doubleArray64);
        boolean boolean71 = variance46.equals((java.lang.Object) doubleArray64);
        double double72 = secondMoment12.evaluate(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = variance10.evaluate(doubleArray64, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        variance1.increment((double) (short) -1);
        double[] doubleArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray5, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.setBiasCorrected(false);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double34 = variance21.evaluate(doubleArray30);
        double double35 = variance16.evaluate(doubleArray30);
        variance14.incrementAll(doubleArray30);
        variance12.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        boolean boolean45 = variance12.equals((java.lang.Object) double44);
        double double46 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        double double56 = secondMoment54.getResult();
        secondMoment54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        double double59 = secondMoment54.getResult();
        long long60 = secondMoment54.getN();
        secondMoment54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        double double75 = variance65.evaluate(doubleArray72, (double) 10L);
        double double76 = variance63.evaluate(doubleArray72);
        double[] doubleArray80 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double81 = variance63.evaluate(doubleArray80);
        secondMoment54.incrementAll(doubleArray80);
        double double84 = variance12.evaluate(doubleArray80, (double) 100);
        variance1.incrementAll(doubleArray80);
        java.lang.Class<?> wildcardClass86 = doubleArray80.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2024039.120370371d + "'", double81 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2024039.1203703708d + "'", double84 == 2024039.1203703708d);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        secondMoment0.increment(50.0d);
        secondMoment0.clear();
        long long18 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        boolean boolean27 = variance21.isBiasCorrected();
        long long28 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        long long32 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        variance34.increment((double) 100L);
        boolean boolean41 = variance34.isBiasCorrected();
        variance34.clear();
        long long43 = variance34.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        double double47 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment45);
        secondMoment45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        double[] doubleArray55 = new double[] { 0L, (byte) 10 };
        double double56 = variance51.evaluate(doubleArray55);
        secondMoment45.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean62 = variance60.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.setBiasCorrected(false);
        boolean boolean69 = variance64.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean71 = variance64.equals((java.lang.Object) secondMoment70);
        double double72 = secondMoment70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double87 = secondMoment70.evaluate(doubleArray81, (int) (short) 0, 1);
        double double88 = variance60.evaluate(doubleArray81);
        secondMoment45.incrementAll(doubleArray81);
        double double90 = variance34.evaluate(doubleArray81);
        double double92 = variance30.evaluate(doubleArray81, (double) (byte) 100);
        variance21.incrementAll(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            variance19.incrementAll(doubleArray81, (int) (byte) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 25.0d + "'", double90 == 25.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        double double11 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        double double23 = variance13.evaluate(doubleArray20, (double) 10L);
        variance13.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance27.evaluate(doubleArray39);
        double double45 = variance13.evaluate(doubleArray39);
        variance1.incrementAll(doubleArray39, (int) (byte) 1, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        variance50.increment((double) 100L);
        boolean boolean57 = variance50.isBiasCorrected();
        variance50.clear();
        double double59 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance61.increment((-1.0d));
        variance61.setBiasCorrected(false);
        boolean boolean66 = variance61.isBiasCorrected();
        double[] doubleArray67 = new double[] {};
        double double68 = variance61.evaluate(doubleArray67);
        variance61.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        variance61.incrementAll(doubleArray81);
        double double89 = variance50.evaluate(doubleArray81, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance1.evaluate(doubleArray81, (double) (-1.0f), 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2136.8055555555557d + "'", double9 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        long long13 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        variance14.incrementAll(doubleArray32);
        double double40 = variance10.evaluate(doubleArray32);
        boolean boolean41 = secondMoment1.equals((java.lang.Object) doubleArray32);
        double double42 = secondMoment1.getResult();
        secondMoment1.clear();
        secondMoment1.increment((-1.0d));
        secondMoment1.clear();
        double double47 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean27 = variance25.equals((java.lang.Object) (short) 10);
        boolean boolean28 = variance19.equals((java.lang.Object) variance25);
        long long29 = variance25.getN();
        variance25.setBiasCorrected(false);
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        double double42 = secondMoment40.getResult();
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        boolean boolean45 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        boolean boolean54 = variance49.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean56 = variance49.equals((java.lang.Object) secondMoment55);
        double double57 = secondMoment55.getResult();
        secondMoment55.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        secondMoment55.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean70 = variance63.equals((java.lang.Object) secondMoment69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double86 = variance63.evaluate(doubleArray79, (double) (short) 0, 0, (int) (short) 0);
        double double89 = secondMoment55.evaluate(doubleArray79, 0, 0);
        variance47.incrementAll(doubleArray79);
        double double91 = variance44.evaluate(doubleArray79);
        double double93 = variance25.evaluate(doubleArray79, 13349.428571428572d);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance17.evaluate(doubleArray79, (-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 25.000000029802322d + "'", double93 == 25.000000029802322d);
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        variance17.increment((double) (short) -1);
        long long21 = variance17.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean34 = variance27.equals((java.lang.Object) secondMoment33);
        double double35 = secondMoment33.getResult();
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        secondMoment33.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        double double64 = variance41.evaluate(doubleArray57, (double) (short) 0, 0, (int) (short) 0);
        double double67 = secondMoment33.evaluate(doubleArray57, 0, 0);
        variance25.incrementAll(doubleArray57);
        variance23.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        long long72 = secondMoment70.getN();
        secondMoment70.clear();
        double double74 = secondMoment70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance76.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double85 = variance84.getResult();
        double[] doubleArray88 = new double[] { 0L, (byte) 10 };
        double double89 = variance84.evaluate(doubleArray88);
        double double91 = variance81.evaluate(doubleArray88, (double) 10L);
        double double92 = variance79.evaluate(doubleArray88);
        double double93 = variance76.evaluate(doubleArray88);
        secondMoment70.incrementAll(doubleArray88, 1, (int) (byte) 0);
        double double97 = variance23.evaluate(doubleArray88);
        double double98 = variance17.evaluate(doubleArray88);
        double double99 = variance14.evaluate(doubleArray88);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 50.0d + "'", double97 == 50.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 50.0d + "'", double98 == 50.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 50.0d + "'", double99 == 50.0d);
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        long long15 = secondMoment7.getN();
        secondMoment7.increment(0.0d);
        secondMoment7.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance28.evaluate(doubleArray37);
        double double42 = variance25.evaluate(doubleArray37);
        double double43 = variance21.evaluate(doubleArray37);
        long long44 = variance21.getN();
        variance21.increment(50.0d);
        long long47 = variance21.getN();
        variance21.increment(12820.833333333334d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        long long52 = secondMoment50.getN();
        secondMoment50.clear();
        double double54 = secondMoment50.getResult();
        secondMoment50.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        double[] doubleArray58 = new double[] {};
        double double59 = secondMoment50.evaluate(doubleArray58);
        double double60 = variance21.evaluate(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = secondMoment7.evaluate(doubleArray58, 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        variance0.clear();
        long long27 = variance0.getN();
        long long28 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        long long32 = variance30.getN();
        long long33 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance30.evaluate(doubleArray39, (double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance44.evaluate(doubleArray58);
        double double66 = variance30.evaluate(doubleArray58, (int) (short) 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = variance0.evaluate(doubleArray58, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        long long21 = secondMoment19.getN();
        secondMoment19.clear();
        secondMoment19.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        variance25.clear();
        double double27 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        double double37 = secondMoment35.getResult();
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        long long51 = variance40.getN();
        variance40.increment((double) 0L);
        double[] doubleArray55 = new double[] { 10.0d };
        variance40.incrementAll(doubleArray55);
        secondMoment35.incrementAll(doubleArray55);
        double double59 = variance25.evaluate(doubleArray55, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = variance17.evaluate(doubleArray55, 4.5d, (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        double double5 = secondMoment0.getResult();
        secondMoment0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = variance8.evaluate(doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        double double13 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        double double28 = secondMoment11.evaluate(doubleArray22, (int) (short) 0, 1);
        double double29 = variance1.evaluate(doubleArray22);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        long long35 = variance33.getN();
        long long36 = variance33.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance33.evaluate(doubleArray42, (double) (short) -1);
        variance1.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        double[] doubleArray62 = new double[] { 0L, (byte) 10 };
        double double63 = variance58.evaluate(doubleArray62);
        double double65 = variance55.evaluate(doubleArray62, (double) 10L);
        double double66 = variance48.evaluate(doubleArray62);
        long long67 = variance48.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double double86 = variance69.evaluate(doubleArray81);
        double double87 = variance48.evaluate(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance1.evaluate(doubleArray81, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 25.0d + "'", double66 == 25.0d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 25.0d + "'", double87 == 25.0d);
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(2136.805555555555d);
        secondMoment0.increment((double) 7L);
        long long13 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        double double11 = secondMoment9.getResult();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double40 = variance17.evaluate(doubleArray33, (double) (short) 0, 0, (int) (short) 0);
        double double43 = secondMoment9.evaluate(doubleArray33, 0, 0);
        variance1.incrementAll(doubleArray33);
        variance1.increment((double) (-1));
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        long long50 = variance48.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double52 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double72 = variance59.evaluate(doubleArray68);
        double double73 = variance54.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray89 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double90 = variance82.evaluate(doubleArray89);
        double double91 = variance75.evaluate(doubleArray89);
        double double92 = variance54.evaluate(doubleArray89);
        double double93 = secondMoment51.evaluate(doubleArray89);
        variance48.incrementAll(doubleArray89);
        double double95 = variance1.evaluate(doubleArray89);
        java.lang.Class<?> wildcardClass96 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2136.8055555555557d + "'", double90 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2564.166666666667d + "'", double91 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2564.166666666667d + "'", double92 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 12820.833333333334d + "'", double93 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2136.8055555555557d + "'", double95 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        long long15 = secondMoment2.getN();
        secondMoment2.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        long long22 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.clear();
        double double26 = variance24.getResult();
        variance24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance50.evaluate(doubleArray64);
        double double67 = variance29.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        double double82 = variance69.evaluate(doubleArray78);
        variance29.incrementAll(doubleArray78, (int) (byte) 0, (int) (byte) 0);
        double double86 = variance24.evaluate(doubleArray78);
        double double87 = variance20.evaluate(doubleArray78);
        double double90 = variance18.evaluate(doubleArray78, 1, (int) (byte) 0);
        variance18.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long6 = variance5.getN();
        long long7 = variance5.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        secondMoment3.increment((double) 2L);
        double double10 = secondMoment3.getResult();
        secondMoment3.increment(50.0d);
        double double13 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        double double16 = secondMoment3.getResult();
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = secondMoment3.evaluate(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1152.0d + "'", double13 == 1152.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1152.0d + "'", double16 == 1152.0d);
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        variance27.increment((double) 100L);
        boolean boolean34 = variance27.isBiasCorrected();
        boolean boolean35 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double45 = variance37.evaluate(doubleArray44);
        double double47 = variance27.evaluate(doubleArray44, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray44, 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2136.8055555555557d + "'", double45 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2136.8055555555557d + "'", double47 == 2136.8055555555557d);
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        long long15 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.increment(1988.7755102040815d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        secondMoment7.incrementAll(doubleArray34, 0, 0);
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        double double23 = variance13.evaluate(doubleArray20, (double) 10L);
        double double24 = variance11.evaluate(doubleArray20);
        double[] doubleArray28 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double29 = variance11.evaluate(doubleArray28);
        double double31 = variance7.evaluate(doubleArray28, (double) (byte) 1);
        variance7.clear();
        variance7.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.setBiasCorrected(false);
        boolean boolean41 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean43 = variance36.equals((java.lang.Object) secondMoment42);
        double double44 = secondMoment42.getResult();
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double double47 = secondMoment42.getResult();
        long long48 = secondMoment42.getN();
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double64 = variance51.evaluate(doubleArray60);
        double[] doubleArray68 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double69 = variance51.evaluate(doubleArray68);
        secondMoment42.incrementAll(doubleArray68);
        double double71 = variance7.evaluate(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray68, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2024039.120370371d + "'", double29 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2024039.120370371d + "'", double31 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2024039.120370371d + "'", double69 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2024039.120370371d + "'", double71 == 2024039.120370371d);
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        double double18 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.clear();
        double double25 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        double double37 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment35);
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        secondMoment35.incrementAll(doubleArray45);
        boolean boolean48 = variance28.equals((java.lang.Object) secondMoment35);
        variance28.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        double double53 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment51);
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        secondMoment51.incrementAll(doubleArray61);
        double double64 = variance28.evaluate(doubleArray61);
        double double65 = variance26.evaluate(doubleArray61);
        variance1.incrementAll(doubleArray61);
        java.lang.Class<?> wildcardClass67 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 25.0d + "'", double64 == 25.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean20 = variance18.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double30 = variance22.evaluate(doubleArray29);
        double double31 = variance18.evaluate(doubleArray29);
        variance1.incrementAll(doubleArray29);
        double double33 = variance1.getResult();
        variance1.increment(2310.1428571428573d);
        long long36 = variance1.getN();
        boolean boolean37 = variance1.isBiasCorrected();
        double double38 = variance1.getResult();
        long long39 = variance1.getN();
        boolean boolean40 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2136.8055555555557d + "'", double30 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2564.166666666667d + "'", double31 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2310.1428571428573d + "'", double33 == 2310.1428571428573d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 8L + "'", long36 == 8L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 651942.9897959187d + "'", double38 == 651942.9897959187d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 8L + "'", long39 == 8L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        variance1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        boolean boolean23 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean25 = variance18.equals((java.lang.Object) secondMoment24);
        double double26 = secondMoment24.getResult();
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        secondMoment24.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean39 = variance32.equals((java.lang.Object) secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double55 = variance32.evaluate(doubleArray48, (double) (short) 0, 0, (int) (short) 0);
        double double58 = secondMoment24.evaluate(doubleArray48, 0, 0);
        variance16.incrementAll(doubleArray48);
        variance14.incrementAll(doubleArray48);
        variance1.incrementAll(doubleArray48);
        java.lang.Class<?> wildcardClass62 = doubleArray48.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        secondMoment47.increment(10.0d);
        double double53 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double[] doubleArray72 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double73 = variance55.evaluate(doubleArray72);
        double double74 = secondMoment47.evaluate(doubleArray72);
        double double76 = variance4.evaluate(doubleArray72, (double) (short) 100);
        boolean boolean77 = variance4.isBiasCorrected();
        double double78 = variance4.getResult();
        double double79 = variance4.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2024039.120370371d + "'", double73 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4048078.240740742d + "'", double74 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1349359.4135802472d + "'", double76 == 1349359.4135802472d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) 1);
        secondMoment0.increment(227.3d);
        java.lang.Class<?> wildcardClass17 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) (-1.0f));
        double double11 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean20 = variance13.equals((java.lang.Object) secondMoment19);
        variance13.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double37 = variance24.evaluate(doubleArray33);
        variance24.increment((double) 0.0f);
        boolean boolean40 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long43 = secondMoment41.getN();
        secondMoment41.clear();
        secondMoment41.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        variance47.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean53 = variance51.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double63 = variance55.evaluate(doubleArray62);
        double double64 = variance51.evaluate(doubleArray62);
        double double66 = variance47.evaluate(doubleArray62, (double) 1.0f);
        double double69 = variance24.evaluate(doubleArray62, (int) (byte) 0, 1);
        double double70 = variance13.evaluate(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = variance1.evaluate(doubleArray62, (int) (byte) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.8055555555557d + "'", double63 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2564.166666666667d + "'", double64 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.805555555555d + "'", double66 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.setBiasCorrected(false);
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = variance1.evaluate(doubleArray11, (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        double double11 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean20 = variance13.equals((java.lang.Object) secondMoment19);
        variance13.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double37 = variance24.evaluate(doubleArray33);
        variance24.increment((double) 0.0f);
        boolean boolean40 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long43 = secondMoment41.getN();
        secondMoment41.clear();
        secondMoment41.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        variance47.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean53 = variance51.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double63 = variance55.evaluate(doubleArray62);
        double double64 = variance51.evaluate(doubleArray62);
        double double66 = variance47.evaluate(doubleArray62, (double) 1.0f);
        double double69 = variance24.evaluate(doubleArray62, (int) (byte) 0, 1);
        double double70 = variance13.evaluate(doubleArray62);
        double double71 = variance1.evaluate(doubleArray62);
        variance1.increment((double) ' ');
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.8055555555557d + "'", double63 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2564.166666666667d + "'", double64 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.805555555555d + "'", double66 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2136.8055555555557d + "'", double71 == 2136.8055555555557d);
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        long long25 = secondMoment7.getN();
        secondMoment7.increment((double) (short) 0);
        long long28 = secondMoment7.getN();
        java.lang.Class<?> wildcardClass29 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7L + "'", long28 == 7L);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        double double18 = variance1.getResult();
        variance1.clear();
        long long20 = variance1.getN();
        double[] doubleArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean12 = variance10.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = variance10.evaluate(doubleArray21);
        double double25 = variance6.evaluate(doubleArray21, (double) 1.0f);
        boolean boolean26 = variance6.isBiasCorrected();
        long long27 = variance6.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double double40 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        secondMoment38.incrementAll(doubleArray48);
        boolean boolean51 = variance31.equals((java.lang.Object) secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean60 = variance53.equals((java.lang.Object) secondMoment59);
        boolean boolean61 = secondMoment38.equals((java.lang.Object) boolean60);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        long long67 = secondMoment65.getN();
        secondMoment65.clear();
        secondMoment65.increment(10.0d);
        double double71 = secondMoment65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double86 = variance73.evaluate(doubleArray82);
        double[] doubleArray90 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double91 = variance73.evaluate(doubleArray90);
        double double92 = secondMoment65.evaluate(doubleArray90);
        secondMoment38.incrementAll(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance6.evaluate(doubleArray90, (int) (byte) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2564.166666666667d + "'", double23 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.805555555555d + "'", double25 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2024039.120370371d + "'", double91 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4048078.240740742d + "'", double92 == 4048078.240740742d);
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.clear();
        double double16 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        variance18.increment((double) 100L);
        boolean boolean25 = variance18.isBiasCorrected();
        variance18.clear();
        long long27 = variance18.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        secondMoment29.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean46 = variance44.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double71 = secondMoment54.evaluate(doubleArray65, (int) (short) 0, 1);
        double double72 = variance44.evaluate(doubleArray65);
        secondMoment29.incrementAll(doubleArray65);
        double double74 = variance18.evaluate(doubleArray65);
        variance14.incrementAll(doubleArray65);
        secondMoment8.incrementAll(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double78 = secondMoment8.getResult();
        secondMoment8.clear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 25.0d + "'", double74 == 25.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        secondMoment0.increment(25.0d);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        long long12 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.clear();
        double double16 = variance14.getResult();
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double37 = variance24.evaluate(doubleArray33);
        double double38 = variance19.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double55 = variance47.evaluate(doubleArray54);
        double double56 = variance40.evaluate(doubleArray54);
        double double57 = variance19.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double72 = variance59.evaluate(doubleArray68);
        variance19.incrementAll(doubleArray68, (int) (byte) 0, (int) (byte) 0);
        double double76 = variance14.evaluate(doubleArray68);
        double double77 = variance10.evaluate(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray68, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2136.8055555555557d + "'", double55 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2564.166666666667d + "'", double56 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        double double13 = secondMoment11.getResult();
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double35 = variance22.evaluate(doubleArray31);
        double double36 = variance17.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double53 = variance45.evaluate(doubleArray52);
        double double54 = variance38.evaluate(doubleArray52);
        double double55 = variance17.evaluate(doubleArray52);
        double double56 = variance15.evaluate(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray52, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2136.8055555555557d + "'", double53 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666667d + "'", double54 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        long long5 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        double double19 = variance9.evaluate(doubleArray16, (double) 10L);
        double double20 = variance7.evaluate(doubleArray16);
        variance7.increment((double) 0.0f);
        boolean boolean23 = variance7.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        variance30.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean36 = variance34.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double47 = variance34.evaluate(doubleArray45);
        double double49 = variance30.evaluate(doubleArray45, (double) 1.0f);
        double double52 = variance7.evaluate(doubleArray45, (int) (byte) 0, 1);
        double double53 = variance1.evaluate(doubleArray45);
        double[] doubleArray58 = new double[] { (short) 1, (short) 10, 1.0d, 50.0d };
        double double59 = variance1.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        double double82 = variance69.evaluate(doubleArray78);
        double double83 = variance64.evaluate(doubleArray78);
        variance62.incrementAll(doubleArray78);
        variance60.incrementAll(doubleArray78);
        double double86 = variance1.evaluate(doubleArray78);
        boolean boolean87 = variance1.isBiasCorrected();
        double[] doubleArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double89 = variance1.evaluate(doubleArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2564.166666666667d + "'", double47 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.805555555555d + "'", double49 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2564.166666666667d + "'", double53 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0, 1.0, 50.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 547.0d + "'", double59 == 547.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        java.lang.Class<?> wildcardClass7 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean20 = variance18.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double30 = variance22.evaluate(doubleArray29);
        double double31 = variance18.evaluate(doubleArray29);
        variance1.incrementAll(doubleArray29);
        boolean boolean33 = variance1.isBiasCorrected();
        double double34 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2136.8055555555557d + "'", double30 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2564.166666666667d + "'", double31 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2310.1428571428573d + "'", double34 == 2310.1428571428573d);
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray5 = new double[] { (byte) 100, 10 };
        double double8 = variance2.evaluate(doubleArray5, (int) (short) 1, 0);
        variance2.setBiasCorrected(false);
        variance2.increment((double) ' ');
        variance2.clear();
        variance2.increment((double) (short) -1);
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        double double19 = secondMoment17.getResult();
        secondMoment17.clear();
        double double21 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        double double29 = variance23.getResult();
        variance23.setBiasCorrected(true);
        double double32 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        long long35 = secondMoment33.getN();
        secondMoment33.clear();
        double double37 = secondMoment33.getResult();
        secondMoment33.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double double59 = variance42.evaluate(doubleArray54);
        variance40.incrementAll(doubleArray54);
        variance40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance63.evaluate(doubleArray77);
        double double83 = variance40.evaluate(doubleArray77, 2310.1428571428573d);
        variance23.incrementAll(doubleArray77, (int) (byte) 1, (int) (short) 1);
        double double87 = secondMoment17.evaluate(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = variance2.evaluate(doubleArray77, 1349359.4135802474d, (int) '#', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 25.0d + "'", double81 == 25.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.setBiasCorrected(false);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        secondMoment13.incrementAll(doubleArray23);
        variance1.incrementAll(doubleArray23);
        boolean boolean27 = variance1.isBiasCorrected();
        double[] doubleArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        double[] doubleArray25 = new double[] {};
        double double26 = variance19.evaluate(doubleArray25);
        secondMoment13.incrementAll(doubleArray25);
        double double28 = variance11.evaluate(doubleArray25);
        variance11.increment(50.0009765625d);
        long long31 = variance11.getN();
        variance11.increment(2564.166666666686d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long36 = secondMoment34.getN();
        secondMoment34.clear();
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long40 = variance39.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double double51 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        secondMoment49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        secondMoment49.incrementAll(doubleArray59);
        boolean boolean62 = variance42.equals((java.lang.Object) secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.setBiasCorrected(false);
        boolean boolean69 = variance64.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean71 = variance64.equals((java.lang.Object) secondMoment70);
        boolean boolean72 = secondMoment49.equals((java.lang.Object) boolean71);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance74.increment((-1.0d));
        variance74.setBiasCorrected(false);
        boolean boolean79 = variance74.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean81 = variance74.equals((java.lang.Object) secondMoment80);
        secondMoment80.increment((double) (short) 0);
        secondMoment80.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance87 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray94 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double95 = variance87.evaluate(doubleArray94);
        double double96 = secondMoment80.evaluate(doubleArray94);
        double double97 = secondMoment49.evaluate(doubleArray94);
        variance39.incrementAll(doubleArray94);
        double double99 = variance11.evaluate(doubleArray94);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2136.8055555555557d + "'", double95 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12820.833333333334d + "'", double96 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 12820.833333333334d + "'", double97 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 2564.166666666667d + "'", double99 == 2564.166666666667d);
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        long long3 = secondMoment0.getN();
        java.lang.Class<?> wildcardClass4 = secondMoment0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        long long16 = secondMoment1.getN();
        double double17 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance18.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        boolean boolean30 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double32 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance39.evaluate(doubleArray48);
        double double53 = variance34.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance55.evaluate(doubleArray69);
        double double72 = variance34.evaluate(doubleArray69);
        double double73 = secondMoment31.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance75.increment((-1.0d));
        variance75.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double86 = variance85.getResult();
        double[] doubleArray89 = new double[] { 0L, (byte) 10 };
        double double90 = variance85.evaluate(doubleArray89);
        double double92 = variance82.evaluate(doubleArray89, (double) 10L);
        double double93 = variance80.evaluate(doubleArray89);
        double double94 = variance75.evaluate(doubleArray89);
        double double95 = secondMoment31.evaluate(doubleArray89);
        double double96 = variance22.evaluate(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance18.evaluate(doubleArray89, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2564.166666666667d + "'", double71 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2564.166666666667d + "'", double72 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 12820.833333333334d + "'", double73 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 25.0d + "'", double96 == 25.0d);
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        long long16 = secondMoment1.getN();
        double double17 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double19 = secondMoment1.getResult();
        secondMoment1.increment((double) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double15 = secondMoment7.getResult();
        secondMoment7.increment(25.0d);
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        double double26 = variance16.evaluate(doubleArray23, (double) 10L);
        double double27 = variance9.evaluate(doubleArray23);
        long long28 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance33.evaluate(doubleArray42);
        double double47 = variance30.evaluate(doubleArray42);
        double double48 = variance9.evaluate(doubleArray42);
        boolean boolean49 = variance9.isBiasCorrected();
        double double50 = variance9.getResult();
        boolean boolean51 = variance1.equals((java.lang.Object) double50);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        long long54 = secondMoment52.getN();
        secondMoment52.clear();
        secondMoment52.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        variance58.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        long long62 = secondMoment60.getN();
        secondMoment60.clear();
        secondMoment60.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        variance66.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean72 = variance70.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray81 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double82 = variance74.evaluate(doubleArray81);
        double double83 = variance70.evaluate(doubleArray81);
        double double85 = variance66.evaluate(doubleArray81, (double) 1.0f);
        double double86 = variance58.evaluate(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = variance1.evaluate(doubleArray81, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 25.0d + "'", double27 == 25.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 25.0d + "'", double48 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2136.8055555555557d + "'", double82 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2136.805555555555d + "'", double85 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.166666666667d + "'", double86 == 2564.166666666667d);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        long long9 = variance1.getN();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        double double18 = variance12.getResult();
        variance12.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double45 = variance22.evaluate(doubleArray38, (double) (short) 0, 0, (int) (short) 0);
        double double46 = variance12.evaluate(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = variance1.evaluate(doubleArray38, (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        long long26 = variance15.getN();
        variance15.increment((double) 0L);
        double[] doubleArray30 = new double[] { 10.0d };
        variance15.incrementAll(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        double double52 = variance33.evaluate(doubleArray47);
        variance15.incrementAll(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = secondMoment1.evaluate(doubleArray47, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        secondMoment0.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        secondMoment16.incrementAll(doubleArray26);
        boolean boolean29 = variance9.equals((java.lang.Object) secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        boolean boolean39 = secondMoment16.equals((java.lang.Object) boolean38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment16);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        long long44 = secondMoment42.getN();
        secondMoment42.clear();
        double double46 = secondMoment42.getResult();
        secondMoment42.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        double double66 = variance56.evaluate(doubleArray63, (double) 10L);
        double double67 = variance54.evaluate(doubleArray63);
        double double68 = variance51.evaluate(doubleArray63);
        variance49.incrementAll(doubleArray63);
        double double70 = variance40.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.increment((-1.0d));
        variance72.setBiasCorrected(false);
        boolean boolean77 = variance72.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean79 = variance72.equals((java.lang.Object) secondMoment78);
        double double80 = secondMoment78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double86 = variance85.getResult();
        double[] doubleArray89 = new double[] { 0L, (byte) 10 };
        double double90 = variance85.evaluate(doubleArray89);
        double double92 = variance82.evaluate(doubleArray89, (double) 10L);
        double double95 = secondMoment78.evaluate(doubleArray89, (int) (short) 0, 1);
        double double96 = variance40.evaluate(doubleArray89);
        secondMoment0.incrementAll(doubleArray89);
        java.lang.Class<?> wildcardClass98 = secondMoment0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 50.0d + "'", double96 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.increment((-1.0d));
        variance6.setBiasCorrected(false);
        boolean boolean11 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        secondMoment13.incrementAll(doubleArray23);
        boolean boolean26 = variance6.equals((java.lang.Object) secondMoment13);
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        variance29.increment((double) 100L);
        variance29.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = variance42.evaluate(doubleArray51);
        double[] doubleArray59 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double60 = variance42.evaluate(doubleArray59);
        variance29.incrementAll(doubleArray59);
        variance6.incrementAll(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray59, (int) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2024039.120370371d + "'", double60 == 2024039.120370371d);
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.clear();
        secondMoment24.increment((double) (byte) 100);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        secondMoment24.clear();
        secondMoment24.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean49 = variance42.equals((java.lang.Object) secondMoment48);
        double double50 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double65 = secondMoment48.evaluate(doubleArray59, (int) (short) 0, 1);
        double double66 = variance38.evaluate(doubleArray59);
        double double67 = variance36.evaluate(doubleArray59);
        boolean boolean68 = variance1.equals((java.lang.Object) variance36);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        long long3 = variance1.getN();
        long long4 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.clear();
        secondMoment9.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double30 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        secondMoment29.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        variance35.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        variance40.setBiasCorrected(false);
        boolean boolean45 = variance40.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean47 = variance40.equals((java.lang.Object) secondMoment46);
        double double48 = secondMoment46.getResult();
        secondMoment46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        double double54 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment52);
        secondMoment52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        boolean boolean63 = variance58.isBiasCorrected();
        double[] doubleArray64 = new double[] {};
        double double65 = variance58.evaluate(doubleArray64);
        secondMoment52.incrementAll(doubleArray64);
        double double67 = variance50.evaluate(doubleArray64);
        double double68 = variance35.evaluate(doubleArray64);
        secondMoment29.incrementAll(doubleArray64);
        double double70 = secondMoment9.evaluate(doubleArray64);
        double double73 = variance1.evaluate(doubleArray64, 0, 0);
        double double74 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double43 = secondMoment26.evaluate(doubleArray37, (int) (short) 0, 1);
        double double44 = variance16.evaluate(doubleArray37);
        secondMoment1.incrementAll(doubleArray37);
        double double46 = secondMoment1.getResult();
        secondMoment1.increment(5.415271412037037E7d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        secondMoment21.incrementAll(doubleArray31);
        boolean boolean34 = variance14.equals((java.lang.Object) secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.setBiasCorrected(false);
        boolean boolean41 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean43 = variance36.equals((java.lang.Object) secondMoment42);
        boolean boolean44 = secondMoment21.equals((java.lang.Object) boolean43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment21);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        double double51 = secondMoment47.getResult();
        secondMoment47.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double72 = variance59.evaluate(doubleArray68);
        double double73 = variance56.evaluate(doubleArray68);
        variance54.incrementAll(doubleArray68);
        double double75 = variance45.evaluate(doubleArray68);
        double double77 = variance1.evaluate(doubleArray68, (double) (byte) 1);
        variance1.increment((double) 100L);
        double[] doubleArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray80, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long15 = variance14.getN();
        long long16 = variance14.getN();
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double43 = secondMoment26.evaluate(doubleArray37, (int) (short) 0, 1);
        long long44 = secondMoment26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        boolean boolean51 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        long long55 = variance53.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        long long58 = secondMoment56.getN();
        secondMoment56.clear();
        secondMoment56.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        variance62.setBiasCorrected(false);
        double[] doubleArray70 = new double[] { 1L, '#', 0.0d, 6L, 0.0d };
        variance62.incrementAll(doubleArray70);
        double double73 = variance53.evaluate(doubleArray70, 1142553.1483410494d);
        variance48.incrementAll(doubleArray70);
        double double76 = variance46.evaluate(doubleArray70, (double) 0L);
        double double78 = variance14.evaluate(doubleArray70, 60.5d);
        java.lang.Class<?> wildcardClass79 = variance14.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 35.0, 0.0, 6.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 227.2998046875d + "'", double73 == 227.2998046875d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 227.3d + "'", double76 == 227.3d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 227.30000000000018d + "'", double78 == 227.30000000000018d);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        boolean boolean7 = variance1.isBiasCorrected();
        variance1.clear();
        java.lang.Class<?> wildcardClass9 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long15 = variance14.getN();
        long long16 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.clear();
        double double20 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        variance22.increment((double) 100L);
        boolean boolean29 = variance22.isBiasCorrected();
        variance22.clear();
        long long31 = variance22.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        double double35 = secondMoment33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment33);
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        secondMoment33.incrementAll(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean50 = variance48.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        double double60 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double75 = secondMoment58.evaluate(doubleArray69, (int) (short) 0, 1);
        double double76 = variance48.evaluate(doubleArray69);
        secondMoment33.incrementAll(doubleArray69);
        double double78 = variance22.evaluate(doubleArray69);
        variance18.incrementAll(doubleArray69);
        double double80 = variance14.evaluate(doubleArray69);
        variance14.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 25.0d + "'", double78 == 25.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        double double17 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        secondMoment21.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.clear();
        secondMoment21.increment(Double.NaN);
        secondMoment21.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        double double45 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance42.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.setBiasCorrected(false);
        boolean boolean65 = variance60.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean67 = variance60.equals((java.lang.Object) secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double83 = variance60.evaluate(doubleArray76, (double) (short) 0, 0, (int) (short) 0);
        double double86 = variance42.evaluate(doubleArray76, 0, (int) (byte) 1);
        secondMoment21.incrementAll(doubleArray76, (int) (short) 0, (int) (byte) 1);
        double double90 = variance18.evaluate(doubleArray76);
        variance18.increment(1349359.4135802474d);
        variance18.setBiasCorrected(false);
        double double95 = variance18.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 25.0d + "'", double90 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        double double15 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double35 = variance22.evaluate(doubleArray31);
        double double36 = variance17.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double53 = variance45.evaluate(doubleArray52);
        double double54 = variance38.evaluate(doubleArray52);
        double double55 = variance17.evaluate(doubleArray52);
        double double56 = secondMoment8.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        double double58 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        variance59.clear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2136.8055555555557d + "'", double53 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666667d + "'", double54 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 12820.833333333334d + "'", double58 == 12820.833333333334d);
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long18 = secondMoment16.getN();
        secondMoment16.clear();
        secondMoment16.increment(10.0d);
        double double22 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double37 = variance24.evaluate(doubleArray33);
        double[] doubleArray41 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double42 = variance24.evaluate(doubleArray41);
        double double43 = secondMoment16.evaluate(doubleArray41);
        long long44 = secondMoment16.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        long long47 = secondMoment45.getN();
        secondMoment45.clear();
        double double49 = secondMoment45.getResult();
        secondMoment45.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        double double70 = variance57.evaluate(doubleArray66);
        double double71 = variance54.evaluate(doubleArray66);
        variance52.incrementAll(doubleArray66);
        secondMoment16.incrementAll(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray66, (int) 'a', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2024039.120370371d + "'", double42 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4048078.240740742d + "'", double43 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        variance2.increment((double) 1L);
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.clear();
        secondMoment9.increment(Double.NaN);
        secondMoment9.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        long long29 = variance28.getN();
        boolean boolean30 = variance28.isBiasCorrected();
        long long31 = variance28.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        long long45 = secondMoment39.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long48 = secondMoment46.getN();
        secondMoment46.clear();
        double double50 = secondMoment46.getResult();
        secondMoment46.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        double[] doubleArray67 = new double[] { 0L, (byte) 10 };
        double double68 = variance63.evaluate(doubleArray67);
        double double70 = variance60.evaluate(doubleArray67, (double) 10L);
        double double71 = variance58.evaluate(doubleArray67);
        double double72 = variance55.evaluate(doubleArray67);
        variance53.incrementAll(doubleArray67);
        double double74 = secondMoment39.evaluate(doubleArray67);
        variance28.incrementAll(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray67, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2L + "'", long29 == 2L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2L + "'", long31 == 2L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        double double17 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        secondMoment21.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.clear();
        secondMoment21.increment(Double.NaN);
        secondMoment21.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        double double45 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance42.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.setBiasCorrected(false);
        boolean boolean65 = variance60.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean67 = variance60.equals((java.lang.Object) secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double83 = variance60.evaluate(doubleArray76, (double) (short) 0, 0, (int) (short) 0);
        double double86 = variance42.evaluate(doubleArray76, 0, (int) (byte) 1);
        secondMoment21.incrementAll(doubleArray76, (int) (short) 0, (int) (byte) 1);
        double double90 = variance18.evaluate(doubleArray76);
        variance18.increment(1349359.4135802474d);
        variance18.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 25.0d + "'", double90 == 25.0d);
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean27 = variance25.equals((java.lang.Object) (short) 10);
        boolean boolean28 = variance19.equals((java.lang.Object) variance25);
        long long29 = variance25.getN();
        long long30 = variance25.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        double double35 = secondMoment31.getResult();
        secondMoment31.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        double[] doubleArray39 = new double[] {};
        double double40 = secondMoment31.evaluate(doubleArray39);
        double double41 = secondMoment31.getResult();
        secondMoment31.clear();
        double double43 = secondMoment31.getResult();
        long long44 = secondMoment31.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean48 = variance46.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double58 = variance50.evaluate(doubleArray57);
        double double59 = variance46.evaluate(doubleArray57);
        variance46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean64 = variance62.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double74 = variance66.evaluate(doubleArray73);
        double double75 = variance62.evaluate(doubleArray73);
        variance46.incrementAll(doubleArray73);
        secondMoment31.incrementAll(doubleArray73, 1, (int) (short) 1);
        boolean boolean80 = variance25.equals((java.lang.Object) doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = variance16.evaluate(doubleArray73, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2564.166666666667d + "'", double59 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2136.8055555555557d + "'", double74 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2564.166666666667d + "'", double75 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.increment((double) 100L);
        double double11 = variance1.getResult();
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2550.25d + "'", double11 == 2550.25d);
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        double double8 = variance1.getResult();
        double double9 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double30 = variance20.evaluate(doubleArray27, (double) 10L);
        double double34 = variance11.evaluate(doubleArray27, (double) (short) 0, 0, (int) (short) 0);
        double double35 = variance1.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        variance37.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        boolean boolean60 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean62 = variance55.equals((java.lang.Object) secondMoment61);
        secondMoment61.increment((double) (short) 0);
        secondMoment61.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray75 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double76 = variance68.evaluate(doubleArray75);
        double double77 = secondMoment61.evaluate(doubleArray75);
        secondMoment53.incrementAll(doubleArray75);
        variance37.incrementAll(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = variance1.evaluate(doubleArray75, 227.2998046875d, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2136.8055555555557d + "'", double76 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 12820.833333333334d + "'", double77 == 12820.833333333334d);
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double[] doubleArray25 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double26 = variance8.evaluate(doubleArray25);
        double double27 = secondMoment0.evaluate(doubleArray25);
        long long28 = secondMoment0.getN();
        long long29 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long31 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean41 = variance39.equals((java.lang.Object) (short) 10);
        boolean boolean42 = variance33.equals((java.lang.Object) variance39);
        long long43 = variance39.getN();
        long long44 = variance39.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        long long47 = secondMoment45.getN();
        secondMoment45.clear();
        double double49 = secondMoment45.getResult();
        secondMoment45.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        double[] doubleArray53 = new double[] {};
        double double54 = secondMoment45.evaluate(doubleArray53);
        double double55 = secondMoment45.getResult();
        secondMoment45.clear();
        double double57 = secondMoment45.getResult();
        long long58 = secondMoment45.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean62 = variance60.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double72 = variance64.evaluate(doubleArray71);
        double double73 = variance60.evaluate(doubleArray71);
        variance60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean78 = variance76.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray87 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double88 = variance80.evaluate(doubleArray87);
        double double89 = variance76.evaluate(doubleArray87);
        variance60.incrementAll(doubleArray87);
        secondMoment45.incrementAll(doubleArray87, 1, (int) (short) 1);
        boolean boolean94 = variance39.equals((java.lang.Object) doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray87, (int) (short) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2024039.120370371d + "'", double26 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4048078.240740742d + "'", double27 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2136.8055555555557d + "'", double72 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2564.166666666667d + "'", double73 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2136.8055555555557d + "'", double88 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2564.166666666667d + "'", double89 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance4.evaluate(doubleArray13);
        variance4.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean23 = variance21.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double33 = variance25.evaluate(doubleArray32);
        double double34 = variance21.evaluate(doubleArray32);
        variance4.incrementAll(doubleArray32);
        double double36 = variance4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        boolean boolean43 = variance38.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean45 = variance38.equals((java.lang.Object) secondMoment44);
        secondMoment44.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        long long50 = secondMoment48.getN();
        secondMoment48.clear();
        double double52 = secondMoment48.getResult();
        secondMoment48.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        double[] doubleArray56 = new double[] {};
        double double57 = secondMoment48.evaluate(doubleArray56);
        double double58 = secondMoment44.evaluate(doubleArray56);
        double double59 = variance4.evaluate(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray56, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2136.8055555555557d + "'", double33 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2564.166666666667d + "'", double34 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2310.1428571428573d + "'", double36 == 2310.1428571428573d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        double double9 = secondMoment5.getResult();
        secondMoment5.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        secondMoment5.increment((double) (byte) 0);
        long long15 = secondMoment5.getN();
        boolean boolean16 = variance1.equals((java.lang.Object) long15);
        variance1.setBiasCorrected(true);
        long long19 = variance1.getN();
        variance1.increment(Double.NaN);
        double[] doubleArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray22, (int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray6 = new double[] { 'a', (-1.0f), '4' };
        variance2.incrementAll(doubleArray6);
        variance2.clear();
        variance2.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double12 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        variance17.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        double double30 = secondMoment28.getResult();
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        double double36 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment34);
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        variance40.setBiasCorrected(false);
        boolean boolean45 = variance40.isBiasCorrected();
        double[] doubleArray46 = new double[] {};
        double double47 = variance40.evaluate(doubleArray46);
        secondMoment34.incrementAll(doubleArray46);
        double double49 = variance32.evaluate(doubleArray46);
        double double50 = variance17.evaluate(doubleArray46);
        secondMoment11.incrementAll(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        double[] doubleArray59 = new double[] {};
        double double60 = variance53.evaluate(doubleArray59);
        variance53.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double72 = variance64.evaluate(doubleArray71);
        double double73 = variance53.evaluate(doubleArray71);
        secondMoment11.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray71, (int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2136.8055555555557d + "'", double72 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2136.8055555555557d + "'", double73 == 2136.8055555555557d);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment((double) 0.0f);
        boolean boolean17 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long20 = secondMoment18.getN();
        secondMoment18.clear();
        secondMoment18.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        variance24.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean30 = variance28.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray39 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double40 = variance32.evaluate(doubleArray39);
        double double41 = variance28.evaluate(doubleArray39);
        double double43 = variance24.evaluate(doubleArray39, (double) 1.0f);
        double double46 = variance1.evaluate(doubleArray39, (int) (byte) 0, 1);
        variance1.increment((double) ' ');
        variance1.increment(1.0d);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray60 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double61 = variance53.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray70 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double71 = variance63.evaluate(doubleArray70);
        double double73 = variance53.evaluate(doubleArray70, (double) '#');
        double double74 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance76.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double85 = variance84.getResult();
        double[] doubleArray88 = new double[] { 0L, (byte) 10 };
        double double89 = variance84.evaluate(doubleArray88);
        double double91 = variance81.evaluate(doubleArray88, (double) 10L);
        double double92 = variance79.evaluate(doubleArray88);
        double double93 = variance76.evaluate(doubleArray88);
        variance53.incrementAll(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance1.evaluate(doubleArray88, (int) (short) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2136.8055555555557d + "'", double40 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.805555555555d + "'", double43 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2136.8055555555557d + "'", double61 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2136.8055555555557d + "'", double71 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2136.8055555555557d + "'", double73 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean12 = variance5.equals((java.lang.Object) secondMoment11);
        double double13 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        double double28 = secondMoment11.evaluate(doubleArray22, (int) (short) 0, 1);
        double double29 = variance1.evaluate(doubleArray22);
        double double30 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        secondMoment31.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        variance37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        variance40.setBiasCorrected(false);
        boolean boolean45 = variance40.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean47 = variance40.equals((java.lang.Object) secondMoment46);
        secondMoment46.increment((double) (short) 0);
        secondMoment46.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray60 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double61 = variance53.evaluate(doubleArray60);
        double double62 = secondMoment46.evaluate(doubleArray60);
        variance37.incrementAll(doubleArray60);
        double double65 = variance1.evaluate(doubleArray60, 50.0009765625d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        long long68 = secondMoment66.getN();
        secondMoment66.clear();
        secondMoment66.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        long long74 = secondMoment72.getN();
        secondMoment72.clear();
        double double76 = secondMoment72.getResult();
        secondMoment72.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        double[] doubleArray80 = new double[] {};
        double double81 = secondMoment72.evaluate(doubleArray80);
        secondMoment66.incrementAll(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray80, 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2136.8055555555557d + "'", double61 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 12820.833333333334d + "'", double62 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2564.166666666667d + "'", double65 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance5.evaluate(doubleArray17);
        double double23 = variance1.evaluate(doubleArray17);
        long long24 = variance1.getN();
        variance1.increment(50.0d);
        long long27 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean36 = variance34.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        double[] doubleArray55 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double56 = variance38.evaluate(doubleArray55);
        double double58 = variance34.evaluate(doubleArray55, (double) (byte) 1);
        double double60 = variance29.evaluate(doubleArray55, 4048078.240740742d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        variance29.incrementAll(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance1.evaluate(doubleArray69, 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2024039.120370371d + "'", double56 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2024039.120370371d + "'", double58 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2024039.12109375d + "'", double60 == 2024039.12109375d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray5 = new double[] { (byte) 100, 10 };
        double double8 = variance2.evaluate(doubleArray5, (int) (short) 1, 0);
        variance2.increment(0.0d);
        java.lang.Class<?> wildcardClass11 = variance2.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        secondMoment15.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        variance22.increment((double) 100L);
        boolean boolean29 = variance22.isBiasCorrected();
        boolean boolean30 = variance22.isBiasCorrected();
        boolean boolean31 = secondMoment15.equals((java.lang.Object) boolean30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long36 = secondMoment34.getN();
        secondMoment34.clear();
        secondMoment34.clear();
        secondMoment34.increment((double) (byte) 100);
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        secondMoment34.increment(2136.805555555555d);
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.setBiasCorrected(false);
        variance47.increment((double) 100L);
        boolean boolean54 = variance47.isBiasCorrected();
        boolean boolean55 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double67 = variance47.evaluate(doubleArray64, (double) (byte) 10);
        secondMoment34.incrementAll(doubleArray64);
        double double70 = variance33.evaluate(doubleArray64, 2564.166666666686d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance74.increment((-1.0d));
        variance74.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double85 = variance84.getResult();
        double[] doubleArray88 = new double[] { 0L, (byte) 10 };
        double double89 = variance84.evaluate(doubleArray88);
        double double91 = variance81.evaluate(doubleArray88, (double) 10L);
        double double92 = variance79.evaluate(doubleArray88);
        double double93 = variance74.evaluate(doubleArray88);
        variance72.incrementAll(doubleArray88);
        double double95 = variance33.evaluate(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance11.evaluate(doubleArray88, (int) (byte) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2136.8055555555557d + "'", double67 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555559695d + "'", double70 == 2136.8055555559695d);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 25.0d + "'", double95 == 25.0d);
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        secondMoment29.incrementAll(doubleArray39);
        double double42 = variance27.evaluate(doubleArray39);
        double double43 = secondMoment9.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.setBiasCorrected(false);
        boolean boolean50 = variance45.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean52 = variance45.equals((java.lang.Object) secondMoment51);
        double double53 = secondMoment51.getResult();
        secondMoment51.clear();
        secondMoment51.clear();
        secondMoment51.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        double double61 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment59);
        secondMoment59.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.increment((-1.0d));
        variance65.setBiasCorrected(false);
        boolean boolean70 = variance65.isBiasCorrected();
        double[] doubleArray71 = new double[] {};
        double double72 = variance65.evaluate(doubleArray71);
        secondMoment59.incrementAll(doubleArray71);
        secondMoment51.incrementAll(doubleArray71);
        double double75 = secondMoment9.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        double double77 = variance76.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 25.0d + "'", double42 == 25.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.increment((-1.0d));
        variance6.setBiasCorrected(false);
        boolean boolean11 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean13 = variance6.equals((java.lang.Object) secondMoment12);
        double double14 = secondMoment12.getResult();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double20 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        double[] doubleArray30 = new double[] {};
        double double31 = variance24.evaluate(doubleArray30);
        secondMoment18.incrementAll(doubleArray30);
        double double33 = variance16.evaluate(doubleArray30);
        double double34 = variance1.evaluate(doubleArray30);
        boolean boolean35 = variance1.isBiasCorrected();
        double double36 = variance1.getResult();
        double[] doubleArray37 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double38 = variance1.evaluate(doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long8 = secondMoment0.getN();
        java.lang.Class<?> wildcardClass9 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        double double3 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance5.increment(651942.9897959187d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        variance9.increment((double) (short) -1);
        long long13 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean26 = variance19.equals((java.lang.Object) secondMoment25);
        double double27 = secondMoment25.getResult();
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        secondMoment25.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double56 = variance33.evaluate(doubleArray49, (double) (short) 0, 0, (int) (short) 0);
        double double59 = secondMoment25.evaluate(doubleArray49, 0, 0);
        variance17.incrementAll(doubleArray49);
        variance15.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        long long64 = secondMoment62.getN();
        secondMoment62.clear();
        double double66 = secondMoment62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double84 = variance71.evaluate(doubleArray80);
        double double85 = variance68.evaluate(doubleArray80);
        secondMoment62.incrementAll(doubleArray80, 1, (int) (byte) 0);
        double double89 = variance15.evaluate(doubleArray80);
        double double90 = variance9.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = variance5.evaluate(doubleArray80, 7355.2d, (-1), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment(0.0d);
        variance1.increment(1349359.4140625d);
        variance1.increment((double) (byte) -1);
        double[] doubleArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        double[] doubleArray18 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double19 = variance1.evaluate(doubleArray18);
        double double20 = variance1.getResult();
        variance1.increment(13349.428571428572d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2024039.120370371d + "'", double19 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment(2136.8055555555557d);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        double double14 = secondMoment10.getResult();
        secondMoment10.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double35 = variance22.evaluate(doubleArray31);
        double double36 = variance19.evaluate(doubleArray31);
        variance17.incrementAll(doubleArray31);
        double double39 = variance1.evaluate(doubleArray31, (double) 3L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance41.increment((double) 10L);
        boolean boolean44 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long48 = secondMoment46.getN();
        secondMoment46.clear();
        secondMoment46.clear();
        double double51 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment46);
        variance52.increment((double) (byte) -1);
        long long55 = variance52.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        long long58 = secondMoment56.getN();
        secondMoment56.clear();
        secondMoment56.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        long long64 = secondMoment62.getN();
        secondMoment62.clear();
        double double66 = secondMoment62.getResult();
        secondMoment62.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        double[] doubleArray70 = new double[] {};
        double double71 = secondMoment62.evaluate(doubleArray70);
        secondMoment56.incrementAll(doubleArray70);
        double double73 = variance52.evaluate(doubleArray70);
        double double75 = variance41.evaluate(doubleArray70, 227.3d);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = variance1.evaluate(doubleArray70, 1349359.4135802984d, (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 25.0d + "'", double39 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray15 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double16 = variance8.evaluate(doubleArray15);
        double double17 = variance1.evaluate(doubleArray15);
        variance1.clear();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        variance22.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean34 = variance27.equals((java.lang.Object) secondMoment33);
        double double35 = secondMoment33.getResult();
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double double41 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment39);
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.setBiasCorrected(false);
        boolean boolean50 = variance45.isBiasCorrected();
        double[] doubleArray51 = new double[] {};
        double double52 = variance45.evaluate(doubleArray51);
        secondMoment39.incrementAll(doubleArray51);
        double double54 = variance37.evaluate(doubleArray51);
        double double55 = variance22.evaluate(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = variance1.evaluate(doubleArray51, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2136.8055555555557d + "'", double16 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2564.166666666667d + "'", double17 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance10.increment((double) 2L);
        double double13 = variance10.getResult();
        double double14 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        double double29 = variance16.evaluate(doubleArray25);
        variance16.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean35 = variance33.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double[] doubleArray54 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double55 = variance37.evaluate(doubleArray54);
        double double57 = variance33.evaluate(doubleArray54, (double) (byte) 1);
        double double58 = variance16.evaluate(doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = variance10.evaluate(doubleArray54, (int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2024039.120370371d + "'", double55 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2024039.120370371d + "'", double57 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2024039.120370371d + "'", double58 == 2024039.120370371d);
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = variance1.getResult();
        variance1.clear();
        boolean boolean11 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        double double26 = variance13.evaluate(doubleArray22);
        variance13.increment((double) 0.0f);
        boolean boolean29 = variance13.isBiasCorrected();
        long long30 = variance13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean39 = variance32.equals((java.lang.Object) secondMoment38);
        secondMoment38.increment((double) (short) 0);
        secondMoment38.increment((double) 1.0f);
        double double44 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        boolean boolean47 = variance13.equals((java.lang.Object) variance46);
        double[] doubleArray48 = new double[] {};
        double double49 = variance46.evaluate(doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = variance1.evaluate(doubleArray48, (int) (short) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.5d + "'", double44 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        double double4 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        double double23 = variance13.evaluate(doubleArray20, (double) 10L);
        double double24 = variance11.evaluate(doubleArray20);
        double[] doubleArray28 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double29 = variance11.evaluate(doubleArray28);
        double double31 = variance7.evaluate(doubleArray28, (double) (byte) 1);
        variance7.clear();
        double double33 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        double double43 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double58 = secondMoment41.evaluate(doubleArray52, (int) (short) 0, 1);
        long long59 = secondMoment41.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        double double63 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray80 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double81 = variance73.evaluate(doubleArray80);
        double double82 = variance66.evaluate(doubleArray80);
        double double83 = secondMoment61.evaluate(doubleArray80);
        double double84 = secondMoment41.evaluate(doubleArray80);
        double double85 = variance7.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = secondMoment1.evaluate(doubleArray80, (int) (byte) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2024039.120370371d + "'", double29 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2024039.120370371d + "'", double31 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2136.8055555555557d + "'", double81 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2564.166666666667d + "'", double82 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 12820.833333333334d + "'", double83 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 12820.833333333334d + "'", double84 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.166666666667d + "'", double85 == 2564.166666666667d);
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        // The following exception was thrown during execution in test generation
        try {
            double double3 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        variance1.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean21 = variance14.equals((java.lang.Object) secondMoment20);
        secondMoment20.increment((double) (short) 0);
        secondMoment20.increment((double) 1.0f);
        double double26 = secondMoment20.getResult();
        double double27 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        double double30 = secondMoment28.getResult();
        boolean boolean31 = secondMoment20.equals((java.lang.Object) double30);
        java.lang.Class<?> wildcardClass32 = secondMoment20.getClass();
        boolean boolean33 = variance1.equals((java.lang.Object) wildcardClass32);
        variance1.increment((double) '4');
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2136.8055555555557d + "'", double9 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5d + "'", double27 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double25 = secondMoment8.evaluate(doubleArray19, (int) (short) 0, 1);
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean31 = variance29.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double41 = variance33.evaluate(doubleArray40);
        double double42 = variance29.evaluate(doubleArray40);
        java.lang.Class<?> wildcardClass43 = doubleArray40.getClass();
        boolean boolean44 = variance27.equals((java.lang.Object) wildcardClass43);
        variance27.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        long long50 = secondMoment48.getN();
        secondMoment48.clear();
        secondMoment48.clear();
        secondMoment48.increment((double) (byte) 100);
        secondMoment48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        secondMoment48.clear();
        secondMoment48.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance62.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.increment((-1.0d));
        variance66.setBiasCorrected(false);
        boolean boolean71 = variance66.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean73 = variance66.equals((java.lang.Object) secondMoment72);
        double double74 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        double[] doubleArray83 = new double[] { 0L, (byte) 10 };
        double double84 = variance79.evaluate(doubleArray83);
        double double86 = variance76.evaluate(doubleArray83, (double) 10L);
        double double89 = secondMoment72.evaluate(doubleArray83, (int) (short) 0, 1);
        double double90 = variance62.evaluate(doubleArray83);
        double double91 = variance60.evaluate(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = variance27.evaluate(doubleArray83, 2268035.8522376535d, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2136.8055555555557d + "'", double41 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2564.166666666667d + "'", double42 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        variance4.increment(0.5d);
        boolean boolean49 = variance4.isBiasCorrected();
        boolean boolean50 = variance4.isBiasCorrected();
        variance4.clear();
        long long52 = variance4.getN();
        variance4.setBiasCorrected(true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        long long11 = variance7.getN();
        long long12 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long15 = secondMoment13.getN();
        secondMoment13.clear();
        double double17 = secondMoment13.getResult();
        secondMoment13.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double[] doubleArray21 = new double[] {};
        double double22 = secondMoment13.evaluate(doubleArray21);
        double double23 = secondMoment13.getResult();
        secondMoment13.clear();
        secondMoment13.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double28 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        variance33.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        boolean boolean43 = variance38.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean45 = variance38.equals((java.lang.Object) secondMoment44);
        double double46 = secondMoment44.getResult();
        secondMoment44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        double double52 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment50);
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.setBiasCorrected(false);
        boolean boolean61 = variance56.isBiasCorrected();
        double[] doubleArray62 = new double[] {};
        double double63 = variance56.evaluate(doubleArray62);
        secondMoment50.incrementAll(doubleArray62);
        double double65 = variance48.evaluate(doubleArray62);
        double double66 = variance33.evaluate(doubleArray62);
        secondMoment27.incrementAll(doubleArray62);
        double double68 = secondMoment13.evaluate(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            variance7.incrementAll(doubleArray62, (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        boolean boolean9 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double19 = variance11.evaluate(doubleArray18);
        double double21 = variance1.evaluate(doubleArray18, (double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long37 = secondMoment35.getN();
        secondMoment35.clear();
        double double39 = secondMoment35.getResult();
        secondMoment35.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        double double61 = variance44.evaluate(doubleArray56);
        variance42.incrementAll(doubleArray56);
        variance42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.increment((-1.0d));
        variance65.setBiasCorrected(false);
        boolean boolean70 = variance65.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance65.evaluate(doubleArray79);
        double double85 = variance42.evaluate(doubleArray79, 2310.1428571428573d);
        secondMoment29.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = variance1.evaluate(doubleArray79, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2136.8055555555557d + "'", double19 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 25.0d + "'", double83 == 25.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        double double22 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        secondMoment20.incrementAll(doubleArray30);
        boolean boolean33 = variance13.equals((java.lang.Object) secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        boolean boolean43 = secondMoment20.equals((java.lang.Object) boolean42);
        double double44 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        double double48 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment46);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        double double53 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment51);
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        secondMoment51.incrementAll(doubleArray61);
        double double64 = variance49.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.increment((-1.0d));
        variance66.setBiasCorrected(false);
        boolean boolean71 = variance66.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean73 = variance66.equals((java.lang.Object) secondMoment72);
        secondMoment72.increment((double) (short) 0);
        secondMoment72.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray86 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double87 = variance79.evaluate(doubleArray86);
        double double88 = secondMoment72.evaluate(doubleArray86);
        double double90 = variance49.evaluate(doubleArray86, 0.0d);
        secondMoment20.incrementAll(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = variance11.evaluate(doubleArray86, (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 25.0d + "'", double64 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2136.8055555555557d + "'", double87 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 12820.833333333334d + "'", double88 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2136.805555555555d + "'", double90 == 2136.805555555555d);
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        long long14 = variance3.getN();
        boolean boolean15 = secondMoment1.equals((java.lang.Object) long14);
        secondMoment1.increment(50.0d);
        double double18 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        double double28 = secondMoment26.getResult();
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double34 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        boolean boolean43 = variance38.isBiasCorrected();
        double[] doubleArray44 = new double[] {};
        double double45 = variance38.evaluate(doubleArray44);
        secondMoment32.incrementAll(doubleArray44);
        double double47 = variance30.evaluate(doubleArray44);
        double double48 = secondMoment1.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance49.increment(12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance10.increment((double) 2L);
        double double13 = variance10.getResult();
        double double14 = variance10.getResult();
        java.lang.Class<?> wildcardClass15 = variance10.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        long long15 = secondMoment7.getN();
        secondMoment7.clear();
        secondMoment7.increment(1988.7755102040815d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        secondMoment7.incrementAll(doubleArray34, 0, 0);
        java.lang.Class<?> wildcardClass43 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment(50.0009765625d);
        long long11 = secondMoment7.getN();
        long long12 = secondMoment7.getN();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long16 = secondMoment14.getN();
        secondMoment14.clear();
        secondMoment14.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        long long24 = secondMoment22.getN();
        secondMoment22.clear();
        secondMoment22.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        variance28.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean34 = variance32.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double44 = variance36.evaluate(doubleArray43);
        double double45 = variance32.evaluate(doubleArray43);
        double double47 = variance28.evaluate(doubleArray43, (double) 1.0f);
        double double48 = variance20.evaluate(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = secondMoment7.evaluate(doubleArray43, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2136.8055555555557d + "'", double44 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2564.166666666667d + "'", double45 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2136.805555555555d + "'", double47 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2564.166666666667d + "'", double48 == 2564.166666666667d);
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        variance34.increment((double) 100L);
        variance34.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        double[] doubleArray64 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double65 = variance47.evaluate(doubleArray64);
        variance34.incrementAll(doubleArray64);
        variance32.incrementAll(doubleArray64);
        double double68 = secondMoment8.evaluate(doubleArray64);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2024039.120370371d + "'", double65 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4048078.240740742d + "'", double68 == 4048078.240740742d);
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray19 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double20 = variance12.evaluate(doubleArray19);
        double double21 = variance1.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        secondMoment24.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        secondMoment24.clear();
        secondMoment24.increment(Double.NaN);
        secondMoment24.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.setBiasCorrected(false);
        boolean boolean50 = variance45.isBiasCorrected();
        double[] doubleArray51 = new double[] {};
        double double52 = variance45.evaluate(doubleArray51);
        variance45.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean63 = variance61.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double78 = variance65.evaluate(doubleArray74);
        double[] doubleArray82 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double83 = variance65.evaluate(doubleArray82);
        double double85 = variance61.evaluate(doubleArray82, (double) (byte) 1);
        double double87 = variance56.evaluate(doubleArray82, 4048078.240740742d);
        double double88 = variance45.evaluate(doubleArray82);
        boolean boolean89 = secondMoment24.equals((java.lang.Object) variance45);
        long long90 = variance45.getN();
        double[] doubleArray94 = new double[] { (short) 10, 60.666666666666664d, 547.0d };
        double double96 = variance45.evaluate(doubleArray94, (double) (-1.0f));
        double double97 = variance1.evaluate(doubleArray94);
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2136.8055555555557d + "'", double20 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2024039.120370371d + "'", double83 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2024039.120370371d + "'", double85 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2024039.12109375d + "'", double87 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1349359.4135802474d + "'", double88 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[10.0, 60.666666666666664, 547.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 58606.246913580246d + "'", double96 == 58606.246913580246d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 58606.246913580246d + "'", double97 == 58606.246913580246d);
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        double double2 = secondMoment0.getResult();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        secondMoment6.clear();
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment6);
        variance12.increment((double) (byte) -1);
        long long15 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long18 = secondMoment16.getN();
        secondMoment16.clear();
        secondMoment16.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        long long24 = secondMoment22.getN();
        secondMoment22.clear();
        double double26 = secondMoment22.getResult();
        secondMoment22.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double[] doubleArray30 = new double[] {};
        double double31 = secondMoment22.evaluate(doubleArray30);
        secondMoment16.incrementAll(doubleArray30);
        double double33 = variance12.evaluate(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = secondMoment0.evaluate(doubleArray30, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        secondMoment8.clear();
        double double16 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        boolean boolean18 = variance17.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        long long7 = variance1.getN();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        variance15.increment((double) 100L);
        variance15.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance28.evaluate(doubleArray37);
        double[] doubleArray45 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double46 = variance28.evaluate(doubleArray45);
        variance15.incrementAll(doubleArray45);
        variance13.incrementAll(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = variance1.evaluate(doubleArray45, 651942.9897959187d, (-1), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2024039.120370371d + "'", double46 == 2024039.120370371d);
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        variance8.increment((double) 100L);
        boolean boolean15 = variance8.isBiasCorrected();
        boolean boolean16 = variance8.isBiasCorrected();
        boolean boolean17 = secondMoment1.equals((java.lang.Object) boolean16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance18.clear();
        boolean boolean20 = variance18.isBiasCorrected();
        double double21 = variance18.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        long long13 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        variance14.incrementAll(doubleArray32);
        double double40 = variance10.evaluate(doubleArray32);
        boolean boolean41 = secondMoment1.equals((java.lang.Object) doubleArray32);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        long long47 = secondMoment45.getN();
        secondMoment45.clear();
        double double49 = secondMoment45.getResult();
        secondMoment45.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        double[] doubleArray53 = new double[] {};
        double double54 = secondMoment45.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment45);
        double double57 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long60 = secondMoment58.getN();
        secondMoment58.clear();
        secondMoment58.increment(10.0d);
        double double64 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double[] doubleArray83 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double84 = variance66.evaluate(doubleArray83);
        double double85 = secondMoment58.evaluate(doubleArray83);
        secondMoment45.incrementAll(doubleArray83);
        boolean boolean87 = secondMoment1.equals((java.lang.Object) secondMoment45);
        double double88 = secondMoment45.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2024039.120370371d + "'", double84 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4048078.240740742d + "'", double85 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 4684796.354166668d + "'", double88 == 4684796.354166668d);
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance50.evaluate(doubleArray64);
        double double67 = variance29.evaluate(doubleArray64);
        double double68 = variance27.evaluate(doubleArray64);
        variance14.incrementAll(doubleArray64);
        double double70 = variance6.evaluate(doubleArray64);
        double double71 = variance6.getResult();
        variance6.increment(60.5d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) (-1.0f));
        double double11 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long15 = secondMoment13.getN();
        secondMoment13.clear();
        secondMoment13.clear();
        double double18 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        double double30 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment28);
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        secondMoment28.incrementAll(doubleArray38);
        boolean boolean41 = variance21.equals((java.lang.Object) secondMoment28);
        variance21.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        double double46 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment44);
        secondMoment44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        secondMoment44.incrementAll(doubleArray54);
        double double57 = variance21.evaluate(doubleArray54);
        double double58 = variance19.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        double double75 = variance65.evaluate(doubleArray72, (double) 10L);
        double double76 = variance63.evaluate(doubleArray72);
        double double77 = variance60.evaluate(doubleArray72);
        double double79 = variance19.evaluate(doubleArray72, 2024039.1203703713d);
        variance1.incrementAll(doubleArray72);
        double double81 = variance1.getResult();
        boolean boolean82 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 25.0d + "'", double57 == 25.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0009765625d + "'", double79 == 50.0009765625d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 21.5d + "'", double81 == 21.5d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double66 = variance50.evaluate(doubleArray64);
        double double67 = variance29.evaluate(doubleArray64);
        double double68 = variance27.evaluate(doubleArray64);
        variance14.incrementAll(doubleArray64);
        double double70 = variance6.evaluate(doubleArray64);
        variance6.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555555557d + "'", double68 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double9 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment7);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        secondMoment7.incrementAll(doubleArray17);
        long long20 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        double double25 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        secondMoment23.clear();
        secondMoment23.increment((double) 2L);
        double double30 = secondMoment23.getResult();
        secondMoment23.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        secondMoment23.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean47 = variance45.equals((java.lang.Object) (short) 10);
        boolean boolean48 = variance39.equals((java.lang.Object) variance45);
        long long49 = variance45.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean53 = variance51.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double63 = variance55.evaluate(doubleArray62);
        double double64 = variance51.evaluate(doubleArray62);
        double double65 = variance45.evaluate(doubleArray62);
        double double67 = variance37.evaluate(doubleArray62, (double) 1.0f);
        double double68 = secondMoment7.evaluate(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = variance1.evaluate(doubleArray62, (int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.8055555555557d + "'", double63 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2564.166666666667d + "'", double64 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2564.166666666667d + "'", double65 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.1666666666665d + "'", double67 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 12820.833333333334d + "'", double68 == 12820.833333333334d);
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        double double6 = secondMoment2.getResult();
        secondMoment2.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double[] doubleArray10 = new double[] {};
        double double11 = secondMoment2.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        secondMoment15.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        variance21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        secondMoment30.increment((double) (short) 0);
        secondMoment30.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray44 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double45 = variance37.evaluate(doubleArray44);
        double double46 = secondMoment30.evaluate(doubleArray44);
        variance21.incrementAll(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = variance13.evaluate(doubleArray44, (double) (short) 100, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2136.8055555555557d + "'", double45 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12820.833333333334d + "'", double46 == 12820.833333333334d);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.setBiasCorrected(true);
        double double6 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        variance8.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean27 = variance25.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double37 = variance29.evaluate(doubleArray36);
        double double38 = variance25.evaluate(doubleArray36);
        variance8.incrementAll(doubleArray36);
        double double40 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean49 = variance42.equals((java.lang.Object) secondMoment48);
        secondMoment48.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        long long54 = secondMoment52.getN();
        secondMoment52.clear();
        double double56 = secondMoment52.getResult();
        secondMoment52.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        double[] doubleArray60 = new double[] {};
        double double61 = secondMoment52.evaluate(doubleArray60);
        double double62 = secondMoment48.evaluate(doubleArray60);
        double double63 = variance8.evaluate(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = variance1.evaluate(doubleArray60, 50.0d, (int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2136.8055555555557d + "'", double37 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2564.166666666667d + "'", double38 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2310.1428571428573d + "'", double40 == 2310.1428571428573d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long9 = secondMoment7.getN();
        secondMoment7.clear();
        double double11 = secondMoment7.getResult();
        secondMoment7.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        double double30 = secondMoment28.getResult();
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        secondMoment28.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.setBiasCorrected(false);
        boolean boolean41 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean43 = variance36.equals((java.lang.Object) secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double59 = variance36.evaluate(doubleArray52, (double) (short) 0, 0, (int) (short) 0);
        double double62 = secondMoment28.evaluate(doubleArray52, 0, 0);
        variance20.incrementAll(doubleArray52);
        variance18.incrementAll(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.increment((-1.0d));
        variance66.setBiasCorrected(false);
        boolean boolean71 = variance66.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean73 = variance66.equals((java.lang.Object) secondMoment72);
        double double74 = secondMoment72.getResult();
        secondMoment72.clear();
        secondMoment72.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        long long80 = variance78.getN();
        long long81 = variance78.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        double[] doubleArray87 = new double[] { 0L, (byte) 10 };
        double double88 = variance83.evaluate(doubleArray87);
        double double90 = variance78.evaluate(doubleArray87, (double) (short) -1);
        double double91 = secondMoment72.evaluate(doubleArray87);
        double double92 = variance18.evaluate(doubleArray87);
        double double93 = secondMoment7.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            variance6.incrementAll(doubleArray87, (int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        boolean boolean7 = secondMoment1.equals((java.lang.Object) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment(0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        variance1.increment((double) (short) -1);
        boolean boolean5 = variance1.isBiasCorrected();
        variance1.increment((double) 6L);
        long long8 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.setBiasCorrected(false);
        boolean boolean15 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment16);
        variance10.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean23 = variance21.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray32 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double33 = variance25.evaluate(doubleArray32);
        double double34 = variance21.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance39.evaluate(doubleArray48);
        double double53 = variance36.evaluate(doubleArray48);
        double double54 = variance21.evaluate(doubleArray48);
        double double56 = variance10.evaluate(doubleArray48, (double) 0L);
        double double57 = variance1.evaluate(doubleArray48);
        java.lang.Class<?> wildcardClass58 = doubleArray48.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2136.8055555555557d + "'", double33 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2564.166666666667d + "'", double34 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 25.0d + "'", double56 == 25.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        long long10 = variance1.getN();
        double double11 = variance1.getResult();
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance2.increment(2564.166666666667d);
        long long5 = variance2.getN();
        double double6 = variance2.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double44 = secondMoment27.evaluate(doubleArray38, (int) (short) 0, 1);
        double double45 = variance17.evaluate(doubleArray38);
        secondMoment2.incrementAll(doubleArray38);
        secondMoment2.clear();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double13 = variance12.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean12 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        double double24 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        secondMoment22.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean37 = variance30.equals((java.lang.Object) secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double53 = variance30.evaluate(doubleArray46, (double) (short) 0, 0, (int) (short) 0);
        double double56 = secondMoment22.evaluate(doubleArray46, 0, 0);
        variance14.incrementAll(doubleArray46);
        double double58 = variance11.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double[] doubleArray77 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double78 = variance60.evaluate(doubleArray77);
        double double80 = variance11.evaluate(doubleArray77, (double) 100);
        java.lang.Class<?> wildcardClass81 = variance11.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2024039.120370371d + "'", double78 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2024039.1203703708d + "'", double80 == 2024039.1203703708d);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance5.evaluate(doubleArray17);
        double double23 = variance1.evaluate(doubleArray17);
        long long24 = variance1.getN();
        variance1.increment(50.0d);
        long long27 = variance1.getN();
        variance1.increment(12820.833333333334d);
        variance1.increment(100.0d);
        double double32 = variance1.getResult();
        double double33 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5.415271412037037E7d + "'", double32 == 5.415271412037037E7d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5.415271412037037E7d + "'", double33 == 5.415271412037037E7d);
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double7 = variance6.getResult();
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        long long13 = variance10.getN();
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        double double26 = variance16.evaluate(doubleArray23, (double) 10L);
        long long27 = variance16.getN();
        variance16.increment((double) 0L);
        double[] doubleArray31 = new double[] { 10.0d };
        variance16.incrementAll(doubleArray31);
        variance10.incrementAll(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            variance6.incrementAll(doubleArray31, (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0]");
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.increment((double) 100L);
        variance1.increment((double) 0);
        variance1.increment(2564.166666666686d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        double double22 = variance16.getResult();
        variance16.increment(1349359.4135802474d);
        variance16.setBiasCorrected(true);
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        secondMoment28.increment(10.0d);
        double double34 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double49 = variance36.evaluate(doubleArray45);
        double[] doubleArray53 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double54 = variance36.evaluate(doubleArray53);
        double double55 = secondMoment28.evaluate(doubleArray53);
        double double56 = variance16.evaluate(doubleArray53);
        boolean boolean57 = variance1.equals((java.lang.Object) variance16);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2024039.120370371d + "'", double54 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 4048078.240740742d + "'", double55 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2024039.120370371d + "'", double56 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance1.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double27 = variance21.getResult();
        variance21.increment(1349359.4135802474d);
        variance21.setBiasCorrected(true);
        variance21.clear();
        double double33 = variance21.getResult();
        variance21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        variance36.increment((double) (short) -1);
        long long40 = variance36.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = variance42.evaluate(doubleArray51);
        variance42.increment((double) 0.0f);
        boolean boolean58 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        long long61 = secondMoment59.getN();
        secondMoment59.clear();
        secondMoment59.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        variance65.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean71 = variance69.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray80 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double81 = variance73.evaluate(doubleArray80);
        double double82 = variance69.evaluate(doubleArray80);
        double double84 = variance65.evaluate(doubleArray80, (double) 1.0f);
        double double87 = variance42.evaluate(doubleArray80, (int) (byte) 0, 1);
        double double88 = variance36.evaluate(doubleArray80);
        double[] doubleArray93 = new double[] { (short) 1, (short) 10, 1.0d, 50.0d };
        double double94 = variance36.evaluate(doubleArray93);
        double double95 = variance21.evaluate(doubleArray93);
        variance1.incrementAll(doubleArray93);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2136.8055555555557d + "'", double81 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2564.166666666667d + "'", double82 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2136.805555555555d + "'", double84 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2564.166666666667d + "'", double88 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 10.0, 1.0, 50.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 547.0d + "'", double94 == 547.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 547.0d + "'", double95 == 547.0d);
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        double double6 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        secondMoment4.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        secondMoment4.clear();
        secondMoment4.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment4);
        secondMoment4.increment(2136.805555555555d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        long long28 = secondMoment26.getN();
        secondMoment26.clear();
        double double30 = secondMoment26.getResult();
        secondMoment26.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        secondMoment26.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double37 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        double double57 = variance44.evaluate(doubleArray53);
        double double58 = variance39.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double75 = variance67.evaluate(doubleArray74);
        double double76 = variance60.evaluate(doubleArray74);
        double double77 = variance39.evaluate(doubleArray74);
        double double78 = secondMoment36.evaluate(doubleArray74);
        double double79 = secondMoment26.evaluate(doubleArray74);
        secondMoment4.incrementAll(doubleArray74);
        secondMoment4.increment((double) (short) 0);
        secondMoment4.clear();
        long long84 = secondMoment4.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2136.8055555555557d + "'", double75 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2564.166666666667d + "'", double76 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2564.166666666667d + "'", double77 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 12820.833333333334d + "'", double78 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 12820.833333333334d + "'", double79 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        long long10 = variance1.getN();
        variance1.clear();
        java.lang.Class<?> wildcardClass12 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        long long6 = variance1.getN();
        double double7 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        variance9.increment((double) 0.0f);
        boolean boolean25 = variance9.isBiasCorrected();
        long long26 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        secondMoment34.increment((double) (short) 0);
        secondMoment34.increment((double) 1.0f);
        double double40 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        boolean boolean43 = variance9.equals((java.lang.Object) variance42);
        double[] doubleArray44 = new double[] {};
        double double45 = variance42.evaluate(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.setBiasCorrected(false);
        boolean boolean52 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean54 = variance47.equals((java.lang.Object) secondMoment53);
        variance47.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean60 = variance58.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance58.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        double double90 = variance73.evaluate(doubleArray85);
        double double91 = variance58.evaluate(doubleArray85);
        double double93 = variance47.evaluate(doubleArray85, (double) 0L);
        double double97 = variance42.evaluate(doubleArray85, 58606.246913580246d, (int) (short) 1, 0);
        variance1.incrementAll(doubleArray85);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5d + "'", double40 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2564.166666666667d + "'", double71 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 25.0d + "'", double93 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double97));
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        variance11.clear();
        double double13 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        long long37 = variance26.getN();
        variance26.increment((double) 0L);
        double[] doubleArray41 = new double[] { 10.0d };
        variance26.incrementAll(doubleArray41);
        secondMoment21.incrementAll(doubleArray41);
        double double45 = variance11.evaluate(doubleArray41, (double) 100.0f);
        boolean boolean46 = secondMoment0.equals((java.lang.Object) 100.0f);
        secondMoment0.increment(Double.NaN);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        variance52.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        double double65 = secondMoment63.getResult();
        secondMoment63.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment63);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        double double71 = secondMoment69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment69);
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance75.increment((-1.0d));
        variance75.setBiasCorrected(false);
        boolean boolean80 = variance75.isBiasCorrected();
        double[] doubleArray81 = new double[] {};
        double double82 = variance75.evaluate(doubleArray81);
        secondMoment69.incrementAll(doubleArray81);
        double double84 = variance67.evaluate(doubleArray81);
        double double85 = variance52.evaluate(doubleArray81);
        double double86 = variance50.evaluate(doubleArray81);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        long long15 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        boolean boolean23 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean25 = variance18.equals((java.lang.Object) secondMoment24);
        secondMoment24.increment((double) (short) 0);
        secondMoment24.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = secondMoment24.evaluate(doubleArray38);
        long long41 = secondMoment24.getN();
        long long42 = secondMoment24.getN();
        secondMoment24.clear();
        double double44 = secondMoment24.getResult();
        secondMoment24.clear();
        boolean boolean46 = variance16.equals((java.lang.Object) secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        boolean boolean54 = variance49.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean56 = variance49.equals((java.lang.Object) secondMoment55);
        double double57 = secondMoment55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        double double72 = secondMoment55.evaluate(doubleArray66, (int) (short) 0, 1);
        long long73 = secondMoment55.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        double[] doubleArray83 = new double[] { 0L, (byte) 10 };
        double double84 = variance79.evaluate(doubleArray83);
        double double86 = variance76.evaluate(doubleArray83, (double) 10L);
        long long87 = variance76.getN();
        variance76.increment((double) 0L);
        double[] doubleArray91 = new double[] { 10.0d };
        variance76.incrementAll(doubleArray91);
        double double93 = variance74.evaluate(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance16.evaluate(doubleArray91, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 12820.833333333334d + "'", double40 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 6L + "'", long41 == 6L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6L + "'", long42 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        variance1.clear();
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long10 = secondMoment8.getN();
        secondMoment8.clear();
        secondMoment8.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long16 = secondMoment14.getN();
        secondMoment14.clear();
        double double18 = secondMoment14.getResult();
        secondMoment14.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        double[] doubleArray22 = new double[] {};
        double double23 = secondMoment14.evaluate(doubleArray22);
        secondMoment8.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean35 = variance33.equals((java.lang.Object) (short) 10);
        boolean boolean36 = variance27.equals((java.lang.Object) variance33);
        long long37 = variance33.getN();
        long long38 = variance33.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long41 = secondMoment39.getN();
        secondMoment39.clear();
        double double43 = secondMoment39.getResult();
        secondMoment39.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double[] doubleArray47 = new double[] {};
        double double48 = secondMoment39.evaluate(doubleArray47);
        double double49 = secondMoment39.getResult();
        secondMoment39.clear();
        double double51 = secondMoment39.getResult();
        long long52 = secondMoment39.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double66 = variance58.evaluate(doubleArray65);
        double double67 = variance54.evaluate(doubleArray65);
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean72 = variance70.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray81 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double82 = variance74.evaluate(doubleArray81);
        double double83 = variance70.evaluate(doubleArray81);
        variance54.incrementAll(doubleArray81);
        secondMoment39.incrementAll(doubleArray81, 1, (int) (short) 1);
        boolean boolean88 = variance33.equals((java.lang.Object) doubleArray81);
        double double89 = variance25.evaluate(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray81, (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2136.8055555555557d + "'", double82 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2564.166666666667d + "'", double89 == 2564.166666666667d);
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        double double20 = variance4.getResult();
        variance4.increment(2564.1666666030883d);
        double[] doubleArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double27 = variance4.evaluate(doubleArray23, (double) 2L, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double25 = secondMoment8.evaluate(doubleArray19, (int) (short) 0, 1);
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean38 = variance36.equals((java.lang.Object) (short) 10);
        boolean boolean39 = variance30.equals((java.lang.Object) variance36);
        long long40 = variance36.getN();
        long long41 = variance36.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        long long44 = secondMoment42.getN();
        secondMoment42.clear();
        double double46 = secondMoment42.getResult();
        secondMoment42.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double[] doubleArray50 = new double[] {};
        double double51 = secondMoment42.evaluate(doubleArray50);
        double double52 = secondMoment42.getResult();
        secondMoment42.clear();
        double double54 = secondMoment42.getResult();
        long long55 = secondMoment42.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean59 = variance57.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray68 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double69 = variance61.evaluate(doubleArray68);
        double double70 = variance57.evaluate(doubleArray68);
        variance57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean75 = variance73.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray84 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double85 = variance77.evaluate(doubleArray84);
        double double86 = variance73.evaluate(doubleArray84);
        variance57.incrementAll(doubleArray84);
        secondMoment42.incrementAll(doubleArray84, 1, (int) (short) 1);
        boolean boolean91 = variance36.equals((java.lang.Object) doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = secondMoment8.evaluate(doubleArray84, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2136.8055555555557d + "'", double69 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2564.166666666667d + "'", double70 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2136.8055555555557d + "'", double85 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.166666666667d + "'", double86 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = secondMoment9.evaluate(doubleArray23);
        long long26 = secondMoment9.getN();
        long long27 = secondMoment9.getN();
        secondMoment9.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean40 = variance38.equals((java.lang.Object) (short) 10);
        boolean boolean41 = variance32.equals((java.lang.Object) variance38);
        long long42 = variance38.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean46 = variance44.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance44.evaluate(doubleArray55);
        double double58 = variance38.evaluate(doubleArray55);
        secondMoment9.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        long long62 = secondMoment60.getN();
        secondMoment60.clear();
        secondMoment60.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        long long68 = secondMoment66.getN();
        secondMoment66.clear();
        double double70 = secondMoment66.getResult();
        secondMoment66.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        double[] doubleArray74 = new double[] {};
        double double75 = secondMoment66.evaluate(doubleArray74);
        secondMoment60.incrementAll(doubleArray74);
        double double77 = secondMoment9.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        double double79 = variance78.getResult();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 26761.69230769231d + "'", double77 == 26761.69230769231d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2230.141025641026d + "'", double79 == 2230.141025641026d);
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment(4.551252412837283E11d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        double double16 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double34 = variance21.evaluate(doubleArray30);
        double double35 = variance18.evaluate(doubleArray30);
        secondMoment12.incrementAll(doubleArray30, 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean43 = variance41.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double53 = variance45.evaluate(doubleArray52);
        double double54 = variance41.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double72 = variance59.evaluate(doubleArray68);
        double double73 = variance56.evaluate(doubleArray68);
        double double74 = variance41.evaluate(doubleArray68);
        double double75 = secondMoment12.evaluate(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = variance11.evaluate(doubleArray68, (int) (byte) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2136.8055555555557d + "'", double53 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666667d + "'", double54 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double23 = variance10.evaluate(doubleArray19);
        double double24 = variance7.evaluate(doubleArray19);
        secondMoment1.incrementAll(doubleArray19, 1, (int) (byte) 0);
        secondMoment1.clear();
        double double29 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double45 = variance32.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean49 = variance47.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double64 = variance51.evaluate(doubleArray60);
        double[] doubleArray68 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double69 = variance51.evaluate(doubleArray68);
        double double71 = variance47.evaluate(doubleArray68, (double) (byte) 1);
        double double72 = variance32.evaluate(doubleArray68);
        variance32.clear();
        double double74 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        variance32.incrementAll(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance30.evaluate(doubleArray85, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2024039.120370371d + "'", double69 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2024039.120370371d + "'", double71 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2024039.120370371d + "'", double72 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray5 = new double[] { (byte) 100, 10 };
        double double8 = variance2.evaluate(doubleArray5, (int) (short) 1, 0);
        boolean boolean9 = variance2.isBiasCorrected();
        variance2.increment(1641.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        double double15 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double35 = variance22.evaluate(doubleArray31);
        double double36 = variance17.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double53 = variance45.evaluate(doubleArray52);
        double double54 = variance38.evaluate(doubleArray52);
        double double55 = variance17.evaluate(doubleArray52);
        double double56 = secondMoment8.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        double[] doubleArray65 = new double[] {};
        double double66 = variance59.evaluate(doubleArray65);
        variance59.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance70.evaluate(doubleArray79);
        variance59.incrementAll(doubleArray79);
        double double85 = variance57.evaluate(doubleArray79);
        long long86 = variance57.getN();
        variance57.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2136.8055555555557d + "'", double53 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666667d + "'", double54 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12820.833333333334d + "'", double56 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 25.0d + "'", double85 == 25.0d);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 6L + "'", long86 == 6L);
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        variance1.setBiasCorrected(true);
        double double30 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        long long44 = variance33.getN();
        boolean boolean45 = secondMoment31.equals((java.lang.Object) long44);
        secondMoment31.increment(50.0d);
        double double48 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean57 = variance50.equals((java.lang.Object) secondMoment56);
        double double58 = secondMoment56.getResult();
        secondMoment56.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        double double64 = secondMoment62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment62);
        secondMoment62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.setBiasCorrected(false);
        boolean boolean73 = variance68.isBiasCorrected();
        double[] doubleArray74 = new double[] {};
        double double75 = variance68.evaluate(doubleArray74);
        secondMoment62.incrementAll(doubleArray74);
        double double77 = variance60.evaluate(doubleArray74);
        double double78 = secondMoment31.evaluate(doubleArray74);
        double double81 = variance1.evaluate(doubleArray74, (int) (short) 0, 0);
        variance1.clear();
        long long83 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        long long4 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        long long18 = variance7.getN();
        variance7.increment((double) 0L);
        double[] doubleArray22 = new double[] { 10.0d };
        variance7.incrementAll(doubleArray22);
        variance1.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        long long37 = variance26.getN();
        variance26.increment((double) 0L);
        double[] doubleArray41 = new double[] { 10.0d };
        variance26.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance44.evaluate(doubleArray58);
        variance26.incrementAll(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = variance1.evaluate(doubleArray58, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (byte) 0);
        long long10 = secondMoment0.getN();
        long long11 = secondMoment0.getN();
        java.lang.Class<?> wildcardClass12 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean21 = variance19.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double46 = secondMoment29.evaluate(doubleArray40, (int) (short) 0, 1);
        double double47 = variance19.evaluate(doubleArray40);
        double double50 = variance1.evaluate(doubleArray40, 0, 0);
        variance1.increment(4048078.240740742d);
        long long53 = variance1.getN();
        boolean boolean54 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long6 = variance5.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double17 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        secondMoment15.incrementAll(doubleArray25);
        boolean boolean28 = variance8.equals((java.lang.Object) secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean37 = variance30.equals((java.lang.Object) secondMoment36);
        boolean boolean38 = secondMoment15.equals((java.lang.Object) boolean37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        variance40.setBiasCorrected(false);
        boolean boolean45 = variance40.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean47 = variance40.equals((java.lang.Object) secondMoment46);
        secondMoment46.increment((double) (short) 0);
        secondMoment46.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray60 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double61 = variance53.evaluate(doubleArray60);
        double double62 = secondMoment46.evaluate(doubleArray60);
        double double63 = secondMoment15.evaluate(doubleArray60);
        variance5.incrementAll(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        long long68 = variance66.getN();
        long long69 = variance66.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance66.evaluate(doubleArray75, (double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = variance5.evaluate(doubleArray75, 14205.875d, (int) (short) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2136.8055555555557d + "'", double61 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 12820.833333333334d + "'", double62 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 12820.833333333334d + "'", double63 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance15.evaluate(doubleArray29);
        variance13.incrementAll(doubleArray29);
        double double36 = secondMoment8.evaluate(doubleArray29);
        secondMoment8.clear();
        long long38 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        double double40 = secondMoment8.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = variance13.evaluate(doubleArray14, (int) ' ', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        secondMoment34.increment((double) (short) 0);
        secondMoment34.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double49 = variance41.evaluate(doubleArray48);
        double double50 = secondMoment34.evaluate(doubleArray48);
        secondMoment26.incrementAll(doubleArray48);
        double double52 = variance0.evaluate(doubleArray48);
        variance0.increment(1349359.4135802474d);
        variance0.increment((double) (byte) 100);
        long long57 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        double[] doubleArray73 = new double[] { 0L, (byte) 10 };
        double double74 = variance69.evaluate(doubleArray73);
        double double76 = variance66.evaluate(doubleArray73, (double) 10L);
        double double77 = variance59.evaluate(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = variance0.evaluate(doubleArray73, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.8055555555557d + "'", double49 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 12820.833333333334d + "'", double50 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2564.166666666667d + "'", double52 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2L + "'", long57 == 2L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 25.0d + "'", double77 == 25.0d);
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(Double.NaN);
        secondMoment1.increment(0.0d);
        secondMoment1.clear();
        long long21 = secondMoment1.getN();
        long long22 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        double[] doubleArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = secondMoment1.evaluate(doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance17.evaluate(doubleArray29);
        double double35 = variance13.evaluate(doubleArray29);
        double double36 = variance11.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        secondMoment37.increment(10.0d);
        double double43 = secondMoment37.getResult();
        boolean boolean44 = variance11.equals((java.lang.Object) secondMoment37);
        variance11.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        java.lang.Class<?> wildcardClass13 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        long long13 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        double double37 = variance18.evaluate(doubleArray32);
        variance16.incrementAll(doubleArray32);
        variance14.incrementAll(doubleArray32);
        double double40 = variance10.evaluate(doubleArray32);
        boolean boolean41 = secondMoment1.equals((java.lang.Object) doubleArray32);
        double double42 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance43.increment((double) 10.0f);
        long long46 = variance43.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        variance0.clear();
        long long27 = variance0.getN();
        long long28 = variance0.getN();
        double double29 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        secondMoment37.increment((double) (short) 0);
        secondMoment37.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double52 = variance44.evaluate(doubleArray51);
        double double53 = secondMoment37.evaluate(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = variance0.evaluate(doubleArray51, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2136.8055555555557d + "'", double52 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 12820.833333333334d + "'", double53 == 12820.833333333334d);
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment(2136.8055555555557d);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        variance11.increment((double) (short) -1);
        long long15 = variance11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        double double29 = variance19.evaluate(doubleArray26, (double) 10L);
        double double30 = variance17.evaluate(doubleArray26);
        variance17.increment((double) 0.0f);
        boolean boolean33 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long36 = secondMoment34.getN();
        secondMoment34.clear();
        secondMoment34.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        variance40.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean46 = variance44.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance44.evaluate(doubleArray55);
        double double59 = variance40.evaluate(doubleArray55, (double) 1.0f);
        double double62 = variance17.evaluate(doubleArray55, (int) (byte) 0, 1);
        double double63 = variance11.evaluate(doubleArray55);
        double double64 = variance1.evaluate(doubleArray55);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double75 = variance67.evaluate(doubleArray74);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray84 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double85 = variance77.evaluate(doubleArray84);
        double double87 = variance67.evaluate(doubleArray84, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray84, (int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2136.805555555555d + "'", double59 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2564.166666666667d + "'", double63 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2136.8055555555557d + "'", double75 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2136.8055555555557d + "'", double85 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2136.8055555555557d + "'", double87 == 2136.8055555555557d);
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        variance15.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        variance1.setBiasCorrected(true);
        variance1.clear();
        variance1.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        secondMoment40.increment((double) (short) 0);
        secondMoment40.increment((double) 1.0f);
        double double46 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double double51 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        secondMoment49.clear();
        secondMoment49.increment((double) 2L);
        double double56 = secondMoment49.getResult();
        secondMoment49.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        secondMoment49.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.increment((-1.0d));
        variance65.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean73 = variance71.equals((java.lang.Object) (short) 10);
        boolean boolean74 = variance65.equals((java.lang.Object) variance71);
        long long75 = variance71.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean79 = variance77.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray88 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double89 = variance81.evaluate(doubleArray88);
        double double90 = variance77.evaluate(doubleArray88);
        double double91 = variance71.evaluate(doubleArray88);
        double double93 = variance63.evaluate(doubleArray88, (double) 1.0f);
        double double94 = secondMoment40.evaluate(doubleArray88);
        double double95 = variance1.evaluate(doubleArray88);
        double[] doubleArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance1.evaluate(doubleArray96, (int) (byte) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.5d + "'", double46 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2136.8055555555557d + "'", double89 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2564.166666666667d + "'", double90 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2564.166666666667d + "'", double91 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2564.1666666666665d + "'", double93 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 12820.833333333334d + "'", double94 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2564.166666666667d + "'", double95 == 2564.166666666667d);
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        variance33.increment((double) (short) 0);
        double[] doubleArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double37 = variance33.evaluate(doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        variance1.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean23 = variance21.equals((java.lang.Object) (short) 10);
        boolean boolean24 = variance15.equals((java.lang.Object) variance21);
        long long25 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance27.evaluate(doubleArray38);
        double double41 = variance21.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        double double64 = variance45.evaluate(doubleArray59);
        variance43.incrementAll(doubleArray59);
        double double66 = variance21.evaluate(doubleArray59);
        double double67 = variance1.evaluate(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance70.increment((-1.0d));
        variance70.setBiasCorrected(false);
        boolean boolean75 = variance70.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean77 = variance70.equals((java.lang.Object) secondMoment76);
        secondMoment76.increment((double) (short) 0);
        secondMoment76.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray90 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double91 = variance83.evaluate(doubleArray90);
        double double92 = secondMoment76.evaluate(doubleArray90);
        secondMoment68.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Variance variance94 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        boolean boolean95 = variance1.equals((java.lang.Object) secondMoment68);
        variance1.increment(1352.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2136.8055555555557d + "'", double91 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 12820.833333333334d + "'", double92 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray5 = new double[] { (byte) 100, 10 };
        double double8 = variance2.evaluate(doubleArray5, (int) (short) 1, 0);
        boolean boolean9 = variance2.isBiasCorrected();
        variance2.increment(1641.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        secondMoment13.incrementAll(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean30 = variance28.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean39 = variance32.equals((java.lang.Object) secondMoment38);
        double double40 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double55 = secondMoment38.evaluate(doubleArray49, (int) (short) 0, 1);
        double double56 = variance28.evaluate(doubleArray49);
        secondMoment13.incrementAll(doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = variance2.evaluate(doubleArray49, 5.415271412037037E7d, 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long15 = secondMoment1.getN();
        secondMoment1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        double double28 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double43 = secondMoment26.evaluate(doubleArray37, (int) (short) 0, 1);
        double double44 = variance16.evaluate(doubleArray37);
        secondMoment1.incrementAll(doubleArray37);
        secondMoment1.clear();
        secondMoment1.clear();
        long long48 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        long long3 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        double double7 = secondMoment5.getResult();
        double double8 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment5);
        long long10 = secondMoment5.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double17 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        secondMoment15.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.clear();
        secondMoment15.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        secondMoment15.increment(2136.805555555555d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        double double41 = secondMoment37.getResult();
        secondMoment37.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        secondMoment37.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double48 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double double69 = variance50.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray85 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double86 = variance78.evaluate(doubleArray85);
        double double87 = variance71.evaluate(doubleArray85);
        double double88 = variance50.evaluate(doubleArray85);
        double double89 = secondMoment47.evaluate(doubleArray85);
        double double90 = secondMoment37.evaluate(doubleArray85);
        secondMoment15.incrementAll(doubleArray85);
        double double92 = secondMoment5.evaluate(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray85, (int) (short) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2136.8055555555557d + "'", double86 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2564.166666666667d + "'", double87 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2564.166666666667d + "'", double88 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 12820.833333333334d + "'", double89 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 12820.833333333334d + "'", double90 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 12820.833333333334d + "'", double92 == 12820.833333333334d);
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean26 = variance19.equals((java.lang.Object) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        double double42 = variance19.evaluate(doubleArray35, (double) (short) 0, 0, (int) (short) 0);
        double double45 = variance1.evaluate(doubleArray35, 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.setBiasCorrected(false);
        boolean boolean52 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean54 = variance47.equals((java.lang.Object) secondMoment53);
        double double55 = secondMoment53.getResult();
        secondMoment53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        long long69 = variance58.getN();
        variance58.increment((double) 0L);
        double[] doubleArray73 = new double[] { 10.0d };
        variance58.incrementAll(doubleArray73);
        secondMoment53.incrementAll(doubleArray73);
        double double77 = variance1.evaluate(doubleArray73, 1.0d);
        boolean boolean78 = variance1.isBiasCorrected();
        boolean boolean79 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        boolean boolean33 = variance0.equals((java.lang.Object) double32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        double double52 = variance35.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment54);
        secondMoment54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.setBiasCorrected(false);
        boolean boolean65 = variance60.isBiasCorrected();
        double[] doubleArray66 = new double[] {};
        double double67 = variance60.evaluate(doubleArray66);
        secondMoment54.incrementAll(doubleArray66);
        double double69 = variance35.evaluate(doubleArray66);
        double double71 = variance0.evaluate(doubleArray66, (-1.0d));
        java.lang.Class<?> wildcardClass72 = variance0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        variance9.increment((double) (short) -1);
        long long13 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        variance15.increment((double) 0.0f);
        boolean boolean31 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        variance38.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance42.evaluate(doubleArray53);
        double double57 = variance38.evaluate(doubleArray53, (double) 1.0f);
        double double60 = variance15.evaluate(doubleArray53, (int) (byte) 0, 1);
        double double61 = variance9.evaluate(doubleArray53);
        boolean boolean62 = variance1.equals((java.lang.Object) doubleArray53);
        java.lang.Object obj63 = null;
        boolean boolean64 = variance1.equals(obj63);
        long long65 = variance1.getN();
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.805555555555d + "'", double57 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double25 = secondMoment8.evaluate(doubleArray19, (int) (short) 0, 1);
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean31 = variance29.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray40 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double41 = variance33.evaluate(doubleArray40);
        double double42 = variance29.evaluate(doubleArray40);
        java.lang.Class<?> wildcardClass43 = doubleArray40.getClass();
        boolean boolean44 = variance27.equals((java.lang.Object) wildcardClass43);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        long long47 = secondMoment45.getN();
        secondMoment45.clear();
        double double49 = secondMoment45.getResult();
        secondMoment45.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        double double64 = variance54.evaluate(doubleArray61, (double) 10L);
        variance54.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double84 = variance71.evaluate(doubleArray80);
        double double85 = variance68.evaluate(doubleArray80);
        double double86 = variance54.evaluate(doubleArray80);
        double double87 = secondMoment45.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            variance27.incrementAll(doubleArray80, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2136.8055555555557d + "'", double41 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2564.166666666667d + "'", double42 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        boolean boolean4 = variance1.isBiasCorrected();
        variance1.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        double double26 = variance8.evaluate(doubleArray22);
        variance8.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray37 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double38 = variance30.evaluate(doubleArray37);
        double double39 = variance8.evaluate(doubleArray37);
        double double40 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        boolean boolean45 = variance42.isBiasCorrected();
        double double46 = variance42.getResult();
        variance42.clear();
        variance42.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        double[] doubleArray57 = new double[] {};
        double double58 = variance51.evaluate(doubleArray57);
        variance51.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance51.evaluate(doubleArray69);
        variance42.incrementAll(doubleArray69);
        variance8.incrementAll(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance1.evaluate(doubleArray69, 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 25.0d + "'", double26 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2136.8055555555557d + "'", double38 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2136.8055555555557d + "'", double71 == 2136.8055555555557d);
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.setBiasCorrected(false);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        double double21 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        secondMoment19.incrementAll(doubleArray29);
        boolean boolean32 = variance12.equals((java.lang.Object) secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        boolean boolean42 = secondMoment19.equals((java.lang.Object) boolean41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double56 = secondMoment19.evaluate(doubleArray52);
        long long57 = secondMoment19.getN();
        double double58 = secondMoment19.getResult();
        secondMoment19.clear();
        double double60 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        long long64 = secondMoment62.getN();
        secondMoment62.clear();
        secondMoment62.clear();
        secondMoment62.increment((double) (byte) 100);
        long long69 = secondMoment62.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance72.increment((-1.0d));
        variance72.setBiasCorrected(false);
        boolean boolean77 = variance72.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double89 = variance79.evaluate(doubleArray86, (double) 10L);
        double double90 = variance72.evaluate(doubleArray86);
        variance70.incrementAll(doubleArray86, 0, (int) (short) 0);
        secondMoment19.incrementAll(doubleArray86, 0, (int) (short) 0);
        double double97 = variance1.evaluate(doubleArray86);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2L + "'", long57 == 2L);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 25.0d + "'", double90 == 25.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 25.0d + "'", double97 == 25.0d);
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        long long3 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        variance5.increment((double) 100L);
        boolean boolean12 = variance5.isBiasCorrected();
        variance5.clear();
        long long14 = variance5.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        secondMoment16.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean33 = variance31.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        double double43 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double58 = secondMoment41.evaluate(doubleArray52, (int) (short) 0, 1);
        double double59 = variance31.evaluate(doubleArray52);
        secondMoment16.incrementAll(doubleArray52);
        double double61 = variance5.evaluate(doubleArray52);
        double double63 = variance1.evaluate(doubleArray52, (double) (byte) 100);
        double[] doubleArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray64, (int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 25.0d + "'", double61 == 25.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        secondMoment0.increment(25.0d);
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        double double16 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean23 = variance21.equals((java.lang.Object) (short) 10);
        double double24 = variance21.getResult();
        variance21.clear();
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        boolean boolean33 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean35 = variance28.equals((java.lang.Object) secondMoment34);
        secondMoment34.increment((double) (short) 0);
        secondMoment34.increment((double) 1.0f);
        double double40 = secondMoment34.getResult();
        double double41 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double double44 = secondMoment42.getResult();
        boolean boolean45 = secondMoment34.equals((java.lang.Object) double44);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long48 = secondMoment46.getN();
        secondMoment46.clear();
        secondMoment46.clear();
        secondMoment46.increment((double) (byte) 100);
        long long53 = secondMoment46.getN();
        double[] doubleArray55 = new double[] { 2024039.1203703713d };
        double double56 = secondMoment46.evaluate(doubleArray55);
        double double57 = secondMoment34.evaluate(doubleArray55);
        double double58 = variance21.evaluate(doubleArray55);
        variance19.incrementAll(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = variance12.evaluate(doubleArray55, 2564.1666666666665d, 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5d + "'", double40 == 0.5d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.5d + "'", double41 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        variance8.increment((double) 100L);
        boolean boolean15 = variance8.isBiasCorrected();
        boolean boolean16 = variance8.isBiasCorrected();
        boolean boolean17 = secondMoment1.equals((java.lang.Object) boolean16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double21 = secondMoment20.getResult();
        double double22 = secondMoment20.getResult();
        secondMoment20.clear();
        double double24 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        boolean boolean31 = variance26.isBiasCorrected();
        double double32 = variance26.getResult();
        variance26.setBiasCorrected(true);
        double double35 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long38 = secondMoment36.getN();
        secondMoment36.clear();
        double double40 = secondMoment36.getResult();
        secondMoment36.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        double double61 = variance48.evaluate(doubleArray57);
        double double62 = variance45.evaluate(doubleArray57);
        variance43.incrementAll(doubleArray57);
        variance43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.increment((-1.0d));
        variance66.setBiasCorrected(false);
        boolean boolean71 = variance66.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double84 = variance66.evaluate(doubleArray80);
        double double86 = variance43.evaluate(doubleArray80, 2310.1428571428573d);
        variance26.incrementAll(doubleArray80, (int) (byte) 1, (int) (short) 1);
        double double90 = secondMoment20.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance18.evaluate(doubleArray80, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 25.0d + "'", double84 == 25.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        variance1.increment((double) (short) 0);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        double[] doubleArray20 = new double[] {};
        double double21 = variance14.evaluate(doubleArray20);
        secondMoment8.incrementAll(doubleArray20);
        double double23 = variance1.evaluate(doubleArray20);
        java.lang.Class<?> wildcardClass24 = doubleArray20.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        boolean boolean14 = secondMoment10.equals((java.lang.Object) 1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        long long19 = secondMoment17.getN();
        secondMoment17.clear();
        secondMoment17.clear();
        secondMoment17.increment((double) (byte) 100);
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        double double39 = variance26.evaluate(doubleArray35);
        long long40 = variance26.getN();
        double[] doubleArray41 = new double[] {};
        variance26.incrementAll(doubleArray41);
        double double44 = variance15.evaluate(doubleArray41, (-1.0d));
        double double45 = variance8.evaluate(doubleArray41);
        java.lang.Class<?> wildcardClass46 = variance8.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance44.evaluate(doubleArray58);
        double double64 = secondMoment0.evaluate(doubleArray58);
        long long65 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance66.increment(0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        long long16 = secondMoment1.getN();
        double double17 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        java.lang.Class<?> wildcardClass19 = secondMoment1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        double double4 = variance1.getResult();
        double double5 = variance1.getResult();
        java.lang.Class<?> wildcardClass6 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance8.increment(0.0d);
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = variance8.evaluate(doubleArray11, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        secondMoment0.increment(25.0d);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        double double29 = variance10.evaluate(doubleArray24);
        double double30 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        variance32.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean44 = variance37.equals((java.lang.Object) secondMoment43);
        double double45 = secondMoment43.getResult();
        secondMoment43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double double51 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        secondMoment49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        boolean boolean60 = variance55.isBiasCorrected();
        double[] doubleArray61 = new double[] {};
        double double62 = variance55.evaluate(doubleArray61);
        secondMoment49.incrementAll(doubleArray61);
        double double64 = variance47.evaluate(doubleArray61);
        double double65 = variance32.evaluate(doubleArray61);
        double double66 = variance10.evaluate(doubleArray61);
        double double67 = secondMoment0.evaluate(doubleArray61);
        java.lang.Class<?> wildcardClass68 = doubleArray61.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        secondMoment12.incrementAll(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.clear();
        long long27 = secondMoment12.getN();
        double double28 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        double[] doubleArray49 = new double[] { 0L, (byte) 10 };
        double double50 = variance45.evaluate(doubleArray49);
        double double52 = variance42.evaluate(doubleArray49, (double) 10L);
        double double53 = variance40.evaluate(doubleArray49);
        double double54 = variance35.evaluate(doubleArray49);
        variance33.incrementAll(doubleArray49);
        variance31.incrementAll(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean66 = variance59.equals((java.lang.Object) secondMoment65);
        secondMoment65.increment((double) (short) 0);
        secondMoment65.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray79 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double80 = variance72.evaluate(doubleArray79);
        double double81 = secondMoment65.evaluate(doubleArray79);
        secondMoment57.incrementAll(doubleArray79);
        double double83 = variance31.evaluate(doubleArray79);
        double double85 = variance30.evaluate(doubleArray79, 2564.1666666679084d);
        double double89 = variance1.evaluate(doubleArray79, 1.0d, (int) (byte) 0, (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2136.8055555555557d + "'", double80 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 12820.833333333334d + "'", double81 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.1666666656733d + "'", double85 == 2564.1666666656733d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long7 = secondMoment0.getN();
        double double8 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double16 = variance10.getResult();
        variance10.increment(1349359.4135802474d);
        variance10.setBiasCorrected(true);
        variance10.clear();
        double double22 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double32 = variance24.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double42 = variance34.evaluate(doubleArray41);
        double double44 = variance24.evaluate(doubleArray41, (double) '#');
        double double45 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        double double64 = variance47.evaluate(doubleArray59);
        variance24.incrementAll(doubleArray59);
        double double66 = variance10.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray59, (int) ' ', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2136.8055555555557d + "'", double32 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2136.8055555555557d + "'", double44 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        boolean boolean11 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long15 = secondMoment13.getN();
        secondMoment13.clear();
        secondMoment13.clear();
        secondMoment13.increment((double) (byte) 100);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        double[] doubleArray30 = new double[] {};
        double double31 = variance24.evaluate(doubleArray30);
        variance21.incrementAll(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = variance1.evaluate(doubleArray30, 547.0d, (int) (byte) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance1.incrementAll(doubleArray21);
        variance1.increment(4048078.240740742d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        double double52 = variance33.evaluate(doubleArray47);
        variance31.incrementAll(doubleArray47);
        variance29.incrementAll(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        secondMoment63.increment((double) (short) 0);
        secondMoment63.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double78 = variance70.evaluate(doubleArray77);
        double double79 = secondMoment63.evaluate(doubleArray77);
        secondMoment55.incrementAll(doubleArray77);
        double double81 = variance29.evaluate(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray77, (int) (byte) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2136.8055555555557d + "'", double78 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 12820.833333333334d + "'", double79 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2564.166666666667d + "'", double81 == 2564.166666666667d);
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        secondMoment17.increment((double) (short) 0);
        secondMoment17.increment((double) 1.0f);
        double double23 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        double double25 = secondMoment17.getResult();
        secondMoment17.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.clear();
        long long32 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long36 = secondMoment34.getN();
        secondMoment34.clear();
        secondMoment34.clear();
        double double39 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment34);
        variance40.increment((double) (byte) -1);
        long long43 = variance40.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        long long46 = secondMoment44.getN();
        secondMoment44.clear();
        secondMoment44.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        long long52 = secondMoment50.getN();
        secondMoment50.clear();
        double double54 = secondMoment50.getResult();
        secondMoment50.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        double[] doubleArray58 = new double[] {};
        double double59 = secondMoment50.evaluate(doubleArray58);
        secondMoment44.incrementAll(doubleArray58);
        double double61 = variance40.evaluate(doubleArray58);
        double double62 = variance30.evaluate(doubleArray58);
        variance28.incrementAll(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = secondMoment1.evaluate(doubleArray58, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double10 = secondMoment9.getResult();
        double double11 = secondMoment9.getResult();
        secondMoment9.clear();
        double double13 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        double double21 = variance15.getResult();
        variance15.setBiasCorrected(true);
        double double24 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        long long27 = secondMoment25.getN();
        secondMoment25.clear();
        double double29 = secondMoment25.getResult();
        secondMoment25.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double double51 = variance34.evaluate(doubleArray46);
        variance32.incrementAll(doubleArray46);
        variance32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        boolean boolean60 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance55.evaluate(doubleArray69);
        double double75 = variance32.evaluate(doubleArray69, 2310.1428571428573d);
        variance15.incrementAll(doubleArray69, (int) (byte) 1, (int) (short) 1);
        double double79 = secondMoment9.evaluate(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = secondMoment7.evaluate(doubleArray69, 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 25.0d + "'", double73 == 25.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray7, 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment(50.0009765625d);
        double double11 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long16 = secondMoment14.getN();
        secondMoment14.clear();
        secondMoment14.increment(10.0d);
        double double20 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance23.evaluate(doubleArray32);
        variance23.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean42 = variance40.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        double double57 = variance44.evaluate(doubleArray53);
        double[] doubleArray61 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double62 = variance44.evaluate(doubleArray61);
        double double64 = variance40.evaluate(doubleArray61, (double) (byte) 1);
        double double65 = variance23.evaluate(doubleArray61);
        double double67 = variance21.evaluate(doubleArray61, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = variance12.evaluate(doubleArray61, (double) 100.0f, 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2024039.120370371d + "'", double62 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2024039.120370371d + "'", double64 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2024039.120370371d + "'", double65 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1349359.4135802474d + "'", double67 == 1349359.4135802474d);
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        variance1.setBiasCorrected(false);
        variance1.increment((double) 'a');
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double31 = variance1.evaluate(doubleArray27, 24.666666666666668d, (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        secondMoment17.increment((double) (short) 0);
        secondMoment17.increment((double) 1.0f);
        double double23 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean34 = variance27.equals((java.lang.Object) secondMoment33);
        long long35 = secondMoment33.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        variance37.increment((double) 100L);
        boolean boolean44 = variance37.isBiasCorrected();
        boolean boolean45 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray54 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double55 = variance47.evaluate(doubleArray54);
        double double57 = variance37.evaluate(doubleArray54, (double) (byte) 10);
        secondMoment33.incrementAll(doubleArray54);
        secondMoment17.incrementAll(doubleArray54);
        double double60 = secondMoment0.evaluate(doubleArray54);
        secondMoment0.clear();
        double[] doubleArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double63 = secondMoment0.evaluate(doubleArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2136.8055555555557d + "'", double55 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.8055555555557d + "'", double57 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12820.833333333334d + "'", double60 == 12820.833333333334d);
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        variance1.setBiasCorrected(true);
        boolean boolean12 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance15.evaluate(doubleArray29);
        long long34 = variance15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance39.evaluate(doubleArray48);
        double double53 = variance36.evaluate(doubleArray48);
        double double54 = variance15.evaluate(doubleArray48);
        double double55 = variance13.evaluate(doubleArray48);
        java.lang.Class<?> wildcardClass56 = variance13.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 25.0d + "'", double33 == 25.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 25.0d + "'", double54 == 25.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 25.0d + "'", double55 == 25.0d);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        secondMoment8.increment(25.00000011920929d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean22 = variance20.equals((java.lang.Object) (short) 10);
        double double23 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.setBiasCorrected(false);
        boolean boolean30 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double34 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        secondMoment32.incrementAll(doubleArray42);
        boolean boolean45 = variance25.equals((java.lang.Object) secondMoment32);
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        double double50 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment48);
        secondMoment48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        secondMoment48.incrementAll(doubleArray58);
        double double61 = variance25.evaluate(doubleArray58);
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        double[] doubleArray73 = new double[] { 0L, (byte) 10 };
        double double74 = variance69.evaluate(doubleArray73);
        double double76 = variance66.evaluate(doubleArray73, (double) 10L);
        double double77 = variance64.evaluate(doubleArray73);
        double double78 = variance25.evaluate(doubleArray73);
        double double79 = variance20.evaluate(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = variance18.evaluate(doubleArray73, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 25.0d + "'", double61 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 25.0d + "'", double78 == 25.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = secondMoment9.evaluate(doubleArray42);
        double double47 = secondMoment9.getResult();
        double double48 = secondMoment9.getResult();
        double double49 = secondMoment9.getResult();
        secondMoment9.increment(13860.857142857143d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment(10.0d);
        double double17 = variance1.getResult();
        variance1.increment(1152.0d);
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2024039.12109375d);
        secondMoment0.clear();
        secondMoment0.increment((double) 8L);
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean26 = variance19.equals((java.lang.Object) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        double double42 = variance19.evaluate(doubleArray35, (double) (short) 0, 0, (int) (short) 0);
        double double45 = variance1.evaluate(doubleArray35, 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double71 = secondMoment54.evaluate(doubleArray65, (int) (short) 0, 1);
        long long72 = secondMoment54.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        long long86 = variance75.getN();
        variance75.increment((double) 0L);
        double[] doubleArray90 = new double[] { 10.0d };
        variance75.incrementAll(doubleArray90);
        double double92 = variance73.evaluate(doubleArray90);
        double double96 = variance1.evaluate(doubleArray90, 547.0d, (int) (short) 0, 0);
        double double97 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
        org.junit.Assert.assertTrue(Double.isNaN(double97));
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double44 = secondMoment27.evaluate(doubleArray38, (int) (short) 0, 1);
        double double45 = variance17.evaluate(doubleArray38);
        secondMoment2.incrementAll(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        boolean boolean54 = variance49.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean56 = variance49.equals((java.lang.Object) secondMoment55);
        secondMoment55.increment((double) (short) 0);
        secondMoment55.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = secondMoment55.evaluate(doubleArray69);
        long long72 = secondMoment55.getN();
        long long73 = secondMoment55.getN();
        secondMoment55.increment((double) (short) 0);
        long long76 = secondMoment55.getN();
        boolean boolean77 = secondMoment2.equals((java.lang.Object) secondMoment55);
        long long78 = secondMoment55.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 12820.833333333334d + "'", double71 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 6L + "'", long72 == 6L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 6L + "'", long73 == 6L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 7L + "'", long76 == 7L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 7L + "'", long78 == 7L);
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.setBiasCorrected(false);
        variance1.clear();
        variance1.increment(227.3d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean23 = variance21.equals((java.lang.Object) (short) 10);
        boolean boolean24 = variance15.equals((java.lang.Object) variance21);
        long long25 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean29 = variance27.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance27.evaluate(doubleArray38);
        double double41 = variance21.evaluate(doubleArray38);
        double double42 = variance1.evaluate(doubleArray38);
        variance1.setBiasCorrected(false);
        long long45 = variance1.getN();
        java.lang.Class<?> wildcardClass46 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.setBiasCorrected(false);
        boolean boolean9 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean11 = variance4.equals((java.lang.Object) secondMoment10);
        secondMoment10.increment((double) (short) 0);
        secondMoment10.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = secondMoment10.evaluate(doubleArray24);
        long long27 = secondMoment10.getN();
        long long28 = secondMoment10.getN();
        secondMoment10.clear();
        double double30 = secondMoment10.getResult();
        secondMoment10.clear();
        boolean boolean32 = secondMoment0.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance34.evaluate(doubleArray48);
        variance34.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance34.evaluate(doubleArray63);
        java.lang.Class<?> wildcardClass66 = doubleArray63.getClass();
        boolean boolean67 = secondMoment10.equals((java.lang.Object) wildcardClass66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        secondMoment10.clear();
        secondMoment10.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 12820.833333333334d + "'", double26 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 25.0d + "'", double52 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        secondMoment0.incrementAll(doubleArray22);
        secondMoment0.clear();
        long long27 = secondMoment0.getN();
        secondMoment0.clear();
        double double29 = secondMoment0.getResult();
        double[] doubleArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double33 = secondMoment0.evaluate(doubleArray30, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1);
        secondMoment8.increment(4671050.520833335d);
        double double16 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        java.lang.Class<?> wildcardClass18 = secondMoment8.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.4545805531418566E13d + "'", double16 == 1.4545805531418566E13d);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        variance11.clear();
        double double13 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        long long37 = variance26.getN();
        variance26.increment((double) 0L);
        double[] doubleArray41 = new double[] { 10.0d };
        variance26.incrementAll(doubleArray41);
        secondMoment21.incrementAll(doubleArray41);
        double double45 = variance11.evaluate(doubleArray41, (double) 100.0f);
        boolean boolean46 = secondMoment0.equals((java.lang.Object) 100.0f);
        secondMoment0.clear();
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = secondMoment9.evaluate(doubleArray23);
        long long26 = secondMoment9.getN();
        long long27 = secondMoment9.getN();
        secondMoment9.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        double double32 = variance31.getResult();
        variance31.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2310.1428571428573d + "'", double32 == 2310.1428571428573d);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        long long41 = variance30.getN();
        variance30.increment((double) 0L);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double64 = variance51.evaluate(doubleArray60);
        double double65 = variance46.evaluate(doubleArray60);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double[] doubleArray71 = new double[] { 0L, (byte) 10 };
        double double72 = variance67.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray81 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double82 = variance74.evaluate(doubleArray81);
        double double83 = variance67.evaluate(doubleArray81);
        double double84 = variance46.evaluate(doubleArray81);
        double double86 = variance30.evaluate(doubleArray81, 227.3d);
        double double87 = secondMoment8.evaluate(doubleArray81);
        long long88 = secondMoment8.getN();
        double[] doubleArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double90 = secondMoment8.evaluate(doubleArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2136.8055555555557d + "'", double82 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.166666666686d + "'", double86 == 2564.166666666686d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 12820.833333333334d + "'", double87 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 6L + "'", long88 == 6L);
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        double double17 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        secondMoment21.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.clear();
        secondMoment21.increment(Double.NaN);
        secondMoment21.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        double double45 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance42.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.setBiasCorrected(false);
        boolean boolean65 = variance60.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean67 = variance60.equals((java.lang.Object) secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double83 = variance60.evaluate(doubleArray76, (double) (short) 0, 0, (int) (short) 0);
        double double86 = variance42.evaluate(doubleArray76, 0, (int) (byte) 1);
        secondMoment21.incrementAll(doubleArray76, (int) (short) 0, (int) (byte) 1);
        double double90 = variance18.evaluate(doubleArray76);
        variance18.increment(1349359.4135802474d);
        variance18.increment(2024039.1203703708d);
        long long95 = variance18.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 25.0d + "'", double90 == 25.0d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance4.evaluate(doubleArray13);
        double double18 = variance1.evaluate(doubleArray13);
        long long19 = variance1.getN();
        variance1.clear();
        java.lang.Class<?> wildcardClass21 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        double double25 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        double double30 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment28);
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        secondMoment28.incrementAll(doubleArray38);
        double double41 = variance26.evaluate(doubleArray38);
        double double42 = secondMoment8.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        double double52 = secondMoment50.getResult();
        secondMoment50.clear();
        secondMoment50.clear();
        secondMoment50.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        double double60 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment58);
        secondMoment58.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.setBiasCorrected(false);
        boolean boolean69 = variance64.isBiasCorrected();
        double[] doubleArray70 = new double[] {};
        double double71 = variance64.evaluate(doubleArray70);
        secondMoment58.incrementAll(doubleArray70);
        secondMoment50.incrementAll(doubleArray70);
        double double74 = secondMoment8.evaluate(doubleArray70);
        java.lang.Class<?> wildcardClass75 = secondMoment8.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 25.0d + "'", double41 == 25.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        boolean boolean13 = variance12.isBiasCorrected();
        double double14 = variance12.getResult();
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double35 = variance22.evaluate(doubleArray31);
        double double36 = variance17.evaluate(doubleArray31);
        double double37 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        variance39.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        double double63 = variance50.evaluate(doubleArray59);
        double double64 = variance47.evaluate(doubleArray59);
        variance39.incrementAll(doubleArray59);
        double double66 = variance17.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = variance12.evaluate(doubleArray59, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long10 = secondMoment8.getN();
        secondMoment8.clear();
        secondMoment8.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        variance14.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean20 = variance18.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray29 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double30 = variance22.evaluate(doubleArray29);
        double double31 = variance18.evaluate(doubleArray29);
        double double33 = variance14.evaluate(doubleArray29, (double) 1.0f);
        double double34 = variance6.evaluate(doubleArray29);
        variance6.setBiasCorrected(false);
        variance6.increment(24.666666666666668d);
        java.lang.Class<?> wildcardClass39 = variance6.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2136.8055555555557d + "'", double30 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2564.166666666667d + "'", double31 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2136.805555555555d + "'", double33 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2564.166666666667d + "'", double34 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.clear();
        secondMoment2.increment((double) (byte) 100);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        double double23 = variance13.evaluate(doubleArray20, (double) 10L);
        double double24 = variance11.evaluate(doubleArray20);
        double[] doubleArray28 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double29 = variance11.evaluate(doubleArray28);
        double double30 = secondMoment2.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double34 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        secondMoment32.clear();
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        long long40 = secondMoment38.getN();
        secondMoment38.clear();
        secondMoment38.clear();
        secondMoment38.increment((double) (byte) 100);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        double[] doubleArray64 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double65 = variance47.evaluate(doubleArray64);
        double double66 = secondMoment38.evaluate(doubleArray64);
        double double69 = secondMoment32.evaluate(doubleArray64, 0, (int) (short) 1);
        double double70 = secondMoment2.evaluate(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = variance1.evaluate(doubleArray64, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2024039.120370371d + "'", double29 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 4048078.240740742d + "'", double30 == 4048078.240740742d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2024039.120370371d + "'", double65 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4048078.240740742d + "'", double66 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 4048078.240740742d + "'", double70 == 4048078.240740742d);
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        boolean boolean5 = secondMoment1.equals((java.lang.Object) 1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean10 = variance8.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean19 = variance12.equals((java.lang.Object) secondMoment18);
        double double20 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double35 = secondMoment18.evaluate(doubleArray29, (int) (short) 0, 1);
        double double36 = variance8.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        secondMoment37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        boolean boolean49 = variance44.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean51 = variance44.equals((java.lang.Object) secondMoment50);
        variance44.increment((double) 100L);
        variance44.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        double double70 = variance57.evaluate(doubleArray66);
        double[] doubleArray74 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double75 = variance57.evaluate(doubleArray74);
        variance44.incrementAll(doubleArray74);
        double double77 = variance42.evaluate(doubleArray74);
        double double78 = variance8.evaluate(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = variance6.evaluate(doubleArray74, 7355.2d, (int) (byte) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2024039.120370371d + "'", double75 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2024039.120370371d + "'", double77 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2024039.120370371d + "'", double78 == 2024039.120370371d);
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        double double15 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        boolean boolean19 = secondMoment8.equals((java.lang.Object) double18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean24 = variance22.equals((java.lang.Object) (short) 10);
        double double25 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance22.evaluate(doubleArray34);
        double double39 = variance22.getResult();
        double double40 = variance22.getResult();
        boolean boolean41 = variance20.equals((java.lang.Object) variance22);
        variance20.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.setBiasCorrected(false);
        boolean boolean50 = variance45.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean52 = variance45.equals((java.lang.Object) secondMoment51);
        long long53 = secondMoment51.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        variance55.increment((double) 100L);
        boolean boolean62 = variance55.isBiasCorrected();
        boolean boolean63 = variance55.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray72 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double73 = variance65.evaluate(doubleArray72);
        double double75 = variance55.evaluate(doubleArray72, (double) (byte) 10);
        secondMoment51.incrementAll(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            variance20.incrementAll(doubleArray72, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2136.8055555555557d + "'", double73 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2136.8055555555557d + "'", double75 == 2136.8055555555557d);
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray6 = new double[] { 'a', (-1.0f), '4' };
        variance2.incrementAll(doubleArray6);
        variance2.increment((double) 10.0f);
        variance2.increment((double) 100);
        variance2.clear();
        variance2.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        variance16.increment(2136.8055555555557d);
        variance16.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        long long27 = secondMoment25.getN();
        secondMoment25.clear();
        double double29 = secondMoment25.getResult();
        secondMoment25.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double double51 = variance34.evaluate(doubleArray46);
        variance32.incrementAll(doubleArray46);
        double double54 = variance16.evaluate(doubleArray46, (double) 3L);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = variance2.evaluate(doubleArray46, 1.0d, 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 25.0d + "'", double54 == 25.0d);
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        long long7 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean18 = variance11.equals((java.lang.Object) secondMoment17);
        secondMoment17.increment((double) (short) 0);
        secondMoment17.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray31 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double32 = variance24.evaluate(doubleArray31);
        double double33 = secondMoment17.evaluate(doubleArray31);
        long long34 = secondMoment17.getN();
        long long35 = secondMoment17.getN();
        secondMoment17.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        secondMoment17.incrementAll(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = secondMoment0.evaluate(doubleArray44, (int) '#', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2136.8055555555557d + "'", double32 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 12820.833333333334d + "'", double33 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 6L + "'", long34 == 6L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6L + "'", long35 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray8 = new double[] {};
        double double9 = secondMoment0.evaluate(doubleArray8);
        double double10 = secondMoment0.getResult();
        secondMoment0.clear();
        double double12 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        secondMoment15.clear();
        double double20 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean25 = variance23.equals((java.lang.Object) (short) 10);
        double double26 = variance23.getResult();
        variance23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double42 = variance29.evaluate(doubleArray38);
        double[] doubleArray46 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double47 = variance29.evaluate(doubleArray46);
        double double50 = variance23.evaluate(doubleArray46, 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        long long53 = secondMoment51.getN();
        secondMoment51.clear();
        secondMoment51.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long60 = secondMoment58.getN();
        secondMoment58.clear();
        double double62 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        double double81 = variance64.evaluate(doubleArray76);
        secondMoment58.incrementAll(doubleArray76, 1, (int) (byte) 0);
        double double87 = variance57.evaluate(doubleArray76, (int) (byte) 1, (int) (short) 1);
        double double88 = variance23.evaluate(doubleArray76);
        double double89 = secondMoment15.evaluate(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = secondMoment0.evaluate(doubleArray76, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2024039.120370371d + "'", double47 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double44 = secondMoment27.evaluate(doubleArray38, (int) (short) 0, 1);
        double double45 = variance17.evaluate(doubleArray38);
        secondMoment2.incrementAll(doubleArray38);
        secondMoment2.clear();
        secondMoment2.increment((double) 'a');
        long long50 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        double double54 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment52);
        secondMoment52.increment(50.0d);
        secondMoment52.clear();
        long long59 = secondMoment52.getN();
        boolean boolean60 = secondMoment2.equals((java.lang.Object) secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance61.setBiasCorrected(true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double9 = variance8.getResult();
        boolean boolean10 = variance8.isBiasCorrected();
        variance8.clear();
        variance8.increment((double) 13L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        variance24.increment((double) 100L);
        variance24.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double[] doubleArray54 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double55 = variance37.evaluate(doubleArray54);
        variance24.incrementAll(doubleArray54);
        variance1.incrementAll(doubleArray54);
        variance1.setBiasCorrected(false);
        double[] doubleArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double63 = variance1.evaluate(doubleArray60, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2024039.120370371d + "'", double55 == 2024039.120370371d);
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double24 = variance1.evaluate(doubleArray17, (double) (short) 0, 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        boolean boolean31 = variance26.isBiasCorrected();
        double[] doubleArray32 = new double[] {};
        double double33 = variance26.evaluate(doubleArray32);
        variance26.setBiasCorrected(false);
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double double40 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        secondMoment38.incrementAll(doubleArray48);
        variance26.incrementAll(doubleArray48);
        double[] doubleArray52 = new double[] {};
        double double53 = variance26.evaluate(doubleArray52);
        boolean boolean54 = variance1.equals((java.lang.Object) doubleArray52);
        variance1.clear();
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.clear();
        double double16 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        variance18.increment((double) 100L);
        boolean boolean25 = variance18.isBiasCorrected();
        variance18.clear();
        long long27 = variance18.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        secondMoment29.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean46 = variance44.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double71 = secondMoment54.evaluate(doubleArray65, (int) (short) 0, 1);
        double double72 = variance44.evaluate(doubleArray65);
        secondMoment29.incrementAll(doubleArray65);
        double double74 = variance18.evaluate(doubleArray65);
        variance14.incrementAll(doubleArray65);
        secondMoment8.incrementAll(doubleArray65);
        double double77 = secondMoment8.getResult();
        secondMoment8.increment((double) ' ');
        secondMoment8.increment(5.415271412037037E7d);
        secondMoment8.increment(8.579406224874637E8d);
        double double84 = secondMoment8.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 25.0d + "'", double74 == 25.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 5.7261176190072966E17d + "'", double84 == 5.7261176190072966E17d);
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        double double4 = variance1.getResult();
        double double5 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        double[] doubleArray20 = new double[] { 0L, (byte) 10 };
        double double21 = variance16.evaluate(doubleArray20);
        double double23 = variance13.evaluate(doubleArray20, (double) 10L);
        double double24 = variance11.evaluate(doubleArray20);
        double[] doubleArray28 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double29 = variance11.evaluate(doubleArray28);
        double double31 = variance7.evaluate(doubleArray28, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = variance1.evaluate(doubleArray28, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2024039.120370371d + "'", double29 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2024039.120370371d + "'", double31 == 2024039.120370371d);
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.clear();
        variance1.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        double[] doubleArray36 = new double[] {};
        double double37 = variance30.evaluate(doubleArray36);
        variance30.setBiasCorrected(false);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double double44 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment42);
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        secondMoment42.incrementAll(doubleArray52);
        variance30.incrementAll(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        variance57.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance62.increment((-1.0d));
        variance62.setBiasCorrected(false);
        boolean boolean67 = variance62.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean69 = variance62.equals((java.lang.Object) secondMoment68);
        double double70 = secondMoment68.getResult();
        secondMoment68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment74);
        double double76 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment74);
        secondMoment74.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance80.increment((-1.0d));
        variance80.setBiasCorrected(false);
        boolean boolean85 = variance80.isBiasCorrected();
        double[] doubleArray86 = new double[] {};
        double double87 = variance80.evaluate(doubleArray86);
        secondMoment74.incrementAll(doubleArray86);
        double double89 = variance72.evaluate(doubleArray86);
        double double90 = variance57.evaluate(doubleArray86);
        double double91 = variance30.evaluate(doubleArray86);
        double double92 = variance1.evaluate(doubleArray86);
        variance1.increment(24.666666666666668d);
        double double95 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2837.555555555555d + "'", double95 == 2837.555555555555d);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double double26 = variance9.evaluate(doubleArray21);
        variance7.incrementAll(doubleArray21);
        variance7.clear();
        long long29 = variance7.getN();
        variance7.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        variance1.setBiasCorrected(false);
        boolean boolean7 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance7.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long13 = secondMoment11.getN();
        secondMoment11.clear();
        secondMoment11.clear();
        secondMoment11.increment((double) (byte) 100);
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment11);
        variance20.increment((double) 2L);
        double double23 = variance20.getResult();
        double double24 = variance20.getResult();
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance27.evaluate(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        double double48 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment46);
        secondMoment46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        double[] doubleArray58 = new double[] {};
        double double59 = variance52.evaluate(doubleArray58);
        secondMoment46.incrementAll(doubleArray58);
        double double61 = variance27.evaluate(doubleArray58);
        variance20.incrementAll(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = variance7.evaluate(doubleArray58, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double double26 = variance9.evaluate(doubleArray21);
        variance7.incrementAll(doubleArray21);
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        variance7.incrementAll(doubleArray37);
        variance7.clear();
        double double43 = variance7.getResult();
        double[] doubleArray44 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double45 = variance7.evaluate(doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double13 = variance5.evaluate(doubleArray12);
        double double14 = variance1.evaluate(doubleArray12);
        variance1.setBiasCorrected(false);
        variance1.increment((double) (byte) -1);
        long long19 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        long long45 = secondMoment28.getN();
        long long46 = secondMoment28.getN();
        long long47 = secondMoment28.getN();
        long long48 = secondMoment28.getN();
        long long49 = secondMoment28.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        long long54 = variance52.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        long long57 = secondMoment55.getN();
        secondMoment55.clear();
        secondMoment55.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        variance61.setBiasCorrected(false);
        double[] doubleArray69 = new double[] { 1L, '#', 0.0d, 6L, 0.0d };
        variance61.incrementAll(doubleArray69);
        double double72 = variance52.evaluate(doubleArray69, 1142553.1483410494d);
        double double73 = variance50.evaluate(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance1.evaluate(doubleArray69, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2136.8055555555557d + "'", double13 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2564.166666666667d + "'", double14 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 6L + "'", long45 == 6L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 6L + "'", long46 == 6L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 6L + "'", long47 == 6L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 6L + "'", long48 == 6L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 6L + "'", long49 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 35.0, 0.0, 6.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 227.2998046875d + "'", double72 == 227.2998046875d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 227.3d + "'", double73 == 227.3d);
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance10.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        double double15 = secondMoment13.getResult();
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long18 = secondMoment13.getN();
        boolean boolean19 = variance10.equals((java.lang.Object) secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double22 = secondMoment13.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        long long24 = secondMoment7.getN();
        double double25 = secondMoment7.getResult();
        secondMoment7.increment((double) 2L);
        secondMoment7.increment(2136.8055555559695d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment37);
        double double39 = secondMoment37.getResult();
        secondMoment37.clear();
        secondMoment37.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        long long45 = secondMoment43.getN();
        secondMoment43.clear();
        secondMoment43.clear();
        secondMoment43.increment((double) (byte) 100);
        secondMoment43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment43);
        variance52.increment((double) 2L);
        double double55 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        long long59 = secondMoment57.getN();
        secondMoment57.clear();
        double double61 = secondMoment57.getResult();
        secondMoment57.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        double[] doubleArray65 = new double[] {};
        double double66 = secondMoment57.evaluate(doubleArray65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment57);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance69.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        double double90 = variance73.evaluate(doubleArray85);
        double double91 = variance69.evaluate(doubleArray85);
        double double92 = variance67.evaluate(doubleArray85);
        double double93 = variance52.evaluate(doubleArray85);
        double double94 = secondMoment37.evaluate(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = secondMoment7.evaluate(doubleArray85, (int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 6L + "'", long24 == 6L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double[] doubleArray26 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double27 = variance9.evaluate(doubleArray26);
        double double28 = secondMoment0.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double30 = secondMoment29.getResult();
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        long long36 = secondMoment34.getN();
        secondMoment34.clear();
        secondMoment34.clear();
        secondMoment34.increment((double) (byte) 100);
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment34);
        variance43.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double71 = secondMoment54.evaluate(doubleArray65, (int) (short) 0, 1);
        long long72 = secondMoment54.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        long long86 = variance75.getN();
        variance75.increment((double) 0L);
        double[] doubleArray90 = new double[] { 10.0d };
        variance75.incrementAll(doubleArray90);
        double double92 = variance73.evaluate(doubleArray90);
        variance43.incrementAll(doubleArray90);
        secondMoment29.incrementAll(doubleArray90);
        secondMoment0.incrementAll(doubleArray90);
        org.apache.commons.math.stat.descriptive.moment.Variance variance96 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance96.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2024039.120370371d + "'", double27 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4048078.240740742d + "'", double28 == 4048078.240740742d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        variance34.increment((double) 100L);
        variance34.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        double[] doubleArray56 = new double[] { 0L, (byte) 10 };
        double double57 = variance52.evaluate(doubleArray56);
        double double59 = variance49.evaluate(doubleArray56, (double) 10L);
        double double60 = variance47.evaluate(doubleArray56);
        double[] doubleArray64 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double65 = variance47.evaluate(doubleArray64);
        variance34.incrementAll(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = secondMoment8.evaluate(doubleArray64, (int) 'a', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2024039.120370371d + "'", double65 == 2024039.120370371d);
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        double[] doubleArray25 = new double[] {};
        double double26 = variance19.evaluate(doubleArray25);
        secondMoment13.incrementAll(doubleArray25);
        double double28 = variance11.evaluate(doubleArray25);
        variance11.increment(50.0009765625d);
        long long31 = variance11.getN();
        variance11.increment(2564.166666666686d);
        variance11.increment((-1.0d));
        long long36 = variance11.getN();
        variance11.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance44.evaluate(doubleArray58);
        double double64 = secondMoment0.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double69 = variance65.evaluate(doubleArray66, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment(2024039.12109375d);
        secondMoment0.clear();
        secondMoment0.increment(2564.166666666651d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment(10.0d);
        double double17 = variance1.getResult();
        long long18 = variance1.getN();
        variance1.increment(100.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        secondMoment29.incrementAll(doubleArray39);
        boolean boolean42 = variance22.equals((java.lang.Object) secondMoment29);
        double double43 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean47 = variance45.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray56 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double57 = variance49.evaluate(doubleArray56);
        double double58 = variance45.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        double double75 = variance65.evaluate(doubleArray72, (double) 10L);
        double double76 = variance63.evaluate(doubleArray72);
        double double77 = variance60.evaluate(doubleArray72);
        double double78 = variance45.evaluate(doubleArray72);
        double double82 = variance22.evaluate(doubleArray72, (double) 0L, (int) (short) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = variance1.evaluate(doubleArray72, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.8055555555557d + "'", double57 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment((double) '4');
        long long6 = secondMoment0.getN();
        long long7 = secondMoment0.getN();
        secondMoment0.clear();
        double double9 = secondMoment0.getResult();
        secondMoment0.increment(2564.1666666030883d);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = secondMoment9.evaluate(doubleArray23);
        long long26 = secondMoment9.getN();
        long long27 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        java.lang.Class<?> wildcardClass30 = variance29.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        boolean boolean9 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double19 = variance11.evaluate(doubleArray18);
        double double21 = variance1.evaluate(doubleArray18, (double) (byte) 10);
        double double22 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long25 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        double double33 = secondMoment29.getResult();
        secondMoment29.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double[] doubleArray37 = new double[] {};
        double double38 = secondMoment29.evaluate(doubleArray37);
        secondMoment23.incrementAll(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = variance1.evaluate(doubleArray37, (int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2136.8055555555557d + "'", double19 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2136.8055555555557d + "'", double21 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2550.25d + "'", double22 == 2550.25d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        boolean boolean7 = variance1.isBiasCorrected();
        variance1.clear();
        boolean boolean9 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        double double17 = variance11.getResult();
        variance11.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double44 = variance21.evaluate(doubleArray37, (double) (short) 0, 0, (int) (short) 0);
        double double45 = variance11.evaluate(doubleArray37);
        variance11.clear();
        variance11.increment((double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean57 = variance50.equals((java.lang.Object) secondMoment56);
        double double58 = secondMoment56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        double[] doubleArray67 = new double[] { 0L, (byte) 10 };
        double double68 = variance63.evaluate(doubleArray67);
        double double70 = variance60.evaluate(doubleArray67, (double) 10L);
        double double73 = secondMoment56.evaluate(doubleArray67, (int) (short) 0, 1);
        double double74 = variance11.evaluate(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = variance1.evaluate(doubleArray67, (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean11 = variance9.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        double[] doubleArray22 = new double[] { 0L, (byte) 10 };
        double double23 = variance18.evaluate(doubleArray22);
        double double25 = variance15.evaluate(doubleArray22, (double) 10L);
        double double26 = variance13.evaluate(doubleArray22);
        double[] doubleArray30 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double31 = variance13.evaluate(doubleArray30);
        double double33 = variance9.evaluate(doubleArray30, (double) (byte) 1);
        variance9.clear();
        double double35 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        long long48 = variance37.getN();
        variance37.increment((double) 0L);
        double[] doubleArray52 = new double[] { 10.0d };
        variance37.incrementAll(doubleArray52);
        double double54 = variance9.evaluate(doubleArray52);
        variance7.incrementAll(doubleArray52);
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        boolean boolean63 = variance58.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean65 = variance58.equals((java.lang.Object) secondMoment64);
        secondMoment64.increment((double) (short) 0);
        secondMoment64.increment((double) 1.0f);
        double double70 = secondMoment64.getResult();
        double double71 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        double double74 = secondMoment72.getResult();
        boolean boolean75 = secondMoment64.equals((java.lang.Object) double74);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment76);
        long long78 = secondMoment76.getN();
        secondMoment76.clear();
        secondMoment76.clear();
        secondMoment76.increment((double) (byte) 100);
        long long83 = secondMoment76.getN();
        double[] doubleArray85 = new double[] { 2024039.1203703713d };
        double double86 = secondMoment76.evaluate(doubleArray85);
        double double87 = secondMoment64.evaluate(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance7.evaluate(doubleArray85, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2024039.120370371d + "'", double31 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2024039.120370371d + "'", double33 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.5d + "'", double70 == 0.5d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.5d + "'", double71 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        variance11.clear();
        double double13 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        long long37 = variance26.getN();
        variance26.increment((double) 0L);
        double[] doubleArray41 = new double[] { 10.0d };
        variance26.incrementAll(doubleArray41);
        secondMoment21.incrementAll(doubleArray41);
        double double45 = variance11.evaluate(doubleArray41, (double) 100.0f);
        boolean boolean46 = secondMoment0.equals((java.lang.Object) 100.0f);
        secondMoment0.increment(Double.NaN);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean60 = variance53.equals((java.lang.Object) secondMoment59);
        secondMoment59.increment((double) (short) 0);
        secondMoment59.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double74 = variance66.evaluate(doubleArray73);
        double double75 = secondMoment59.evaluate(doubleArray73);
        long long76 = secondMoment59.getN();
        long long77 = secondMoment59.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment59);
        secondMoment59.clear();
        secondMoment59.increment(0.0d);
        secondMoment59.increment((double) 'a');
        secondMoment59.clear();
        secondMoment59.clear();
        boolean boolean86 = variance50.equals((java.lang.Object) secondMoment59);
        long long87 = secondMoment59.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2136.8055555555557d + "'", double74 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 12820.833333333334d + "'", double75 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 6L + "'", long76 == 6L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 6L + "'", long77 == 6L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = secondMoment9.evaluate(doubleArray23);
        long long26 = secondMoment9.getN();
        long long27 = secondMoment9.getN();
        secondMoment9.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = variance42.evaluate(doubleArray51);
        double double56 = variance37.evaluate(doubleArray51);
        variance35.incrementAll(doubleArray51);
        variance33.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance61.increment((-1.0d));
        variance61.setBiasCorrected(false);
        boolean boolean66 = variance61.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean68 = variance61.equals((java.lang.Object) secondMoment67);
        secondMoment67.increment((double) (short) 0);
        secondMoment67.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray81 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double82 = variance74.evaluate(doubleArray81);
        double double83 = secondMoment67.evaluate(doubleArray81);
        secondMoment59.incrementAll(doubleArray81);
        double double85 = variance33.evaluate(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = variance31.evaluate(doubleArray81, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2310.1428571428573d + "'", double32 == 2310.1428571428573d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2136.8055555555557d + "'", double82 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 12820.833333333334d + "'", double83 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.166666666667d + "'", double85 == 2564.166666666667d);
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance11.increment(58606.246913580246d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long16 = secondMoment14.getN();
        secondMoment14.clear();
        secondMoment14.increment(10.0d);
        double double20 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        double double34 = variance24.evaluate(doubleArray31, (double) 10L);
        double double35 = variance22.evaluate(doubleArray31);
        double[] doubleArray39 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double40 = variance22.evaluate(doubleArray39);
        double double41 = secondMoment14.evaluate(doubleArray39);
        long long42 = secondMoment14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        long long47 = variance44.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        double[] doubleArray66 = new double[] { 0L, (byte) 10 };
        double double67 = variance62.evaluate(doubleArray66);
        double double69 = variance59.evaluate(doubleArray66, (double) 10L);
        double double70 = variance57.evaluate(doubleArray66);
        double double71 = variance52.evaluate(doubleArray66);
        variance50.incrementAll(doubleArray66);
        variance48.incrementAll(doubleArray66);
        double double74 = variance44.evaluate(doubleArray66);
        double double77 = secondMoment14.evaluate(doubleArray66, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = variance11.evaluate(doubleArray66, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 4048078.240740742d + "'", double41 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        variance7.increment((double) 100L);
        boolean boolean14 = variance7.isBiasCorrected();
        variance7.clear();
        long long16 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance41.evaluate(doubleArray55);
        double double58 = variance20.evaluate(doubleArray55);
        double double59 = secondMoment17.evaluate(doubleArray55);
        double double60 = variance7.evaluate(doubleArray55);
        double double61 = variance1.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double83 = variance70.evaluate(doubleArray79);
        double double84 = variance67.evaluate(doubleArray79);
        double double85 = variance63.evaluate(doubleArray79);
        double double86 = variance1.evaluate(doubleArray79);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 12820.833333333334d + "'", double59 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        boolean boolean21 = variance1.isBiasCorrected();
        variance1.increment((double) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean27 = variance25.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double37 = variance29.evaluate(doubleArray36);
        double double38 = variance25.evaluate(doubleArray36);
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean43 = variance41.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray52 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double53 = variance45.evaluate(doubleArray52);
        double double54 = variance41.evaluate(doubleArray52);
        variance25.incrementAll(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = variance1.evaluate(doubleArray52, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2136.8055555555557d + "'", double37 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2564.166666666667d + "'", double38 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2136.8055555555557d + "'", double53 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666667d + "'", double54 == 2564.166666666667d);
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double20 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        double double25 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        secondMoment23.incrementAll(doubleArray33);
        double double36 = variance21.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        boolean boolean44 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean46 = variance39.equals((java.lang.Object) secondMoment45);
        secondMoment45.increment((double) (short) 0);
        secondMoment45.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double60 = variance52.evaluate(doubleArray59);
        double double61 = secondMoment45.evaluate(doubleArray59);
        secondMoment37.incrementAll(doubleArray59);
        variance21.incrementAll(doubleArray59);
        variance21.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean69 = variance67.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance71.increment((-1.0d));
        variance71.setBiasCorrected(false);
        boolean boolean76 = variance71.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean78 = variance71.equals((java.lang.Object) secondMoment77);
        double double79 = secondMoment77.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double85 = variance84.getResult();
        double[] doubleArray88 = new double[] { 0L, (byte) 10 };
        double double89 = variance84.evaluate(doubleArray88);
        double double91 = variance81.evaluate(doubleArray88, (double) 10L);
        double double94 = secondMoment77.evaluate(doubleArray88, (int) (short) 0, 1);
        double double95 = variance67.evaluate(doubleArray88);
        variance21.incrementAll(doubleArray88);
        double double97 = secondMoment1.evaluate(doubleArray88);
        org.apache.commons.math.stat.descriptive.moment.Variance variance98 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        java.lang.Class<?> wildcardClass99 = variance98.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 25.0d + "'", double36 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 12820.833333333334d + "'", double61 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 50.0d + "'", double97 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance2.clear();
        variance2.increment((double) 1L);
        variance2.clear();
        variance2.increment(2136.8055555559695d);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double18 = variance17.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double double26 = variance9.evaluate(doubleArray21);
        variance7.incrementAll(doubleArray21);
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double48 = variance30.evaluate(doubleArray44);
        double double50 = variance7.evaluate(doubleArray44, 2310.1428571428573d);
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        double[] doubleArray59 = new double[] {};
        double double60 = variance53.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            variance7.incrementAll(doubleArray59, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 25.0d + "'", double48 == 25.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        boolean boolean21 = variance1.isBiasCorrected();
        double double22 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        double double33 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment31);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        secondMoment31.incrementAll(doubleArray41);
        boolean boolean44 = variance24.equals((java.lang.Object) secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        double double48 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment46);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        double double53 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment51);
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        secondMoment51.incrementAll(doubleArray61);
        double double64 = variance49.evaluate(doubleArray61);
        double double65 = secondMoment31.evaluate(doubleArray61);
        variance1.incrementAll(doubleArray61);
        double double67 = variance1.getResult();
        boolean boolean68 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 25.0d + "'", double64 == 25.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double25 = secondMoment8.evaluate(doubleArray19, (int) (short) 0, 1);
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long29 = secondMoment8.getN();
        java.lang.Class<?> wildcardClass30 = secondMoment8.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double5 = secondMoment4.getResult();
        double double6 = secondMoment4.getResult();
        boolean boolean7 = variance1.equals((java.lang.Object) double6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        long long11 = variance9.getN();
        long long12 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance9.evaluate(doubleArray18, (double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        secondMoment29.increment((double) (short) 0);
        secondMoment29.increment((double) 1.0f);
        double double35 = secondMoment29.getResult();
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.increment((-1.0d));
        variance39.setBiasCorrected(false);
        boolean boolean44 = variance39.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean46 = variance39.equals((java.lang.Object) secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        double[] doubleArray55 = new double[] { 0L, (byte) 10 };
        double double56 = variance51.evaluate(doubleArray55);
        double double58 = variance48.evaluate(doubleArray55, (double) 10L);
        double double62 = variance39.evaluate(doubleArray55, (double) (short) 0, 0, (int) (short) 0);
        double double63 = variance37.evaluate(doubleArray55);
        double double64 = variance9.evaluate(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = variance1.evaluate(doubleArray55, 2564.1666666656733d, (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.5d + "'", double35 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        double double5 = secondMoment0.getResult();
        long long6 = secondMoment0.getN();
        double double7 = secondMoment0.getResult();
        long long8 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.setBiasCorrected(false);
        boolean boolean15 = variance10.isBiasCorrected();
        double[] doubleArray16 = new double[] {};
        double double17 = variance10.evaluate(doubleArray16);
        variance10.increment((double) 1.0f);
        variance10.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        double double33 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment31);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        secondMoment31.incrementAll(doubleArray41);
        boolean boolean44 = variance24.equals((java.lang.Object) secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.increment((-1.0d));
        variance46.setBiasCorrected(false);
        boolean boolean51 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean53 = variance46.equals((java.lang.Object) secondMoment52);
        boolean boolean54 = secondMoment31.equals((java.lang.Object) boolean53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment31);
        variance55.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        double[] doubleArray65 = new double[] {};
        double double66 = variance59.evaluate(doubleArray65);
        variance59.setBiasCorrected(false);
        variance59.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment71);
        double double73 = secondMoment71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment71);
        secondMoment71.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        secondMoment71.incrementAll(doubleArray81);
        variance59.incrementAll(doubleArray81);
        double[] doubleArray85 = new double[] {};
        double double86 = variance59.evaluate(doubleArray85);
        double double88 = variance55.evaluate(doubleArray85, 2564.166666666686d);
        double double91 = variance10.evaluate(doubleArray85, (int) (short) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray85, (int) '#', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        double double31 = variance21.evaluate(doubleArray28, (double) 10L);
        double double32 = variance19.evaluate(doubleArray28);
        double double33 = variance14.evaluate(doubleArray28);
        variance12.incrementAll(doubleArray28);
        double double35 = secondMoment7.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean44 = variance37.equals((java.lang.Object) secondMoment43);
        double double45 = secondMoment43.getResult();
        secondMoment43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        boolean boolean48 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        double double60 = secondMoment58.getResult();
        secondMoment58.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        secondMoment58.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.increment((-1.0d));
        variance66.setBiasCorrected(false);
        boolean boolean71 = variance66.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean73 = variance66.equals((java.lang.Object) secondMoment72);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        double[] doubleArray82 = new double[] { 0L, (byte) 10 };
        double double83 = variance78.evaluate(doubleArray82);
        double double85 = variance75.evaluate(doubleArray82, (double) 10L);
        double double89 = variance66.evaluate(doubleArray82, (double) (short) 0, 0, (int) (short) 0);
        double double92 = secondMoment58.evaluate(doubleArray82, 0, 0);
        variance50.incrementAll(doubleArray82);
        double double94 = variance47.evaluate(doubleArray82);
        secondMoment7.incrementAll(doubleArray82);
        secondMoment7.increment((double) 0.0f);
        double double98 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 120.0d + "'", double98 == 120.0d);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean19 = variance17.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double44 = secondMoment27.evaluate(doubleArray38, (int) (short) 0, 1);
        double double45 = variance17.evaluate(doubleArray38);
        secondMoment2.incrementAll(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        boolean boolean54 = variance49.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean56 = variance49.equals((java.lang.Object) secondMoment55);
        secondMoment55.increment((double) (short) 0);
        secondMoment55.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = secondMoment55.evaluate(doubleArray69);
        long long72 = secondMoment55.getN();
        long long73 = secondMoment55.getN();
        secondMoment55.increment((double) (short) 0);
        long long76 = secondMoment55.getN();
        boolean boolean77 = secondMoment2.equals((java.lang.Object) secondMoment55);
        secondMoment2.clear();
        secondMoment2.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 12820.833333333334d + "'", double71 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 6L + "'", long72 == 6L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 6L + "'", long73 == 6L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 7L + "'", long76 == 7L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.increment(25.000000029802322d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        double[] doubleArray16 = new double[] { 10.0d };
        variance1.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double37 = variance24.evaluate(doubleArray33);
        double double38 = variance19.evaluate(doubleArray33);
        variance1.incrementAll(doubleArray33);
        double double40 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 33.333333333333336d + "'", double40 == 33.333333333333336d);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.setBiasCorrected(false);
        double[] doubleArray14 = new double[] { 1L, '#', 0.0d, 6L, 0.0d };
        variance6.incrementAll(doubleArray14);
        double double16 = variance6.getResult();
        variance6.increment((double) 100);
        variance6.increment(2136.8055555559695d);
        boolean boolean21 = variance6.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 35.0, 0.0, 6.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double double3 = variance1.getResult();
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.increment((-1.0d));
        variance6.setBiasCorrected(false);
        boolean boolean11 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean13 = variance6.equals((java.lang.Object) secondMoment12);
        double double14 = secondMoment12.getResult();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double43 = variance20.evaluate(doubleArray36, (double) (short) 0, 0, (int) (short) 0);
        double double46 = secondMoment12.evaluate(doubleArray36, 0, 0);
        variance1.incrementAll(doubleArray36);
        java.lang.Class<?> wildcardClass48 = doubleArray36.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.clear();
        long long8 = secondMoment0.getN();
        double double9 = secondMoment0.getResult();
        double double10 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long12 = variance11.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance44.evaluate(doubleArray58);
        double double64 = secondMoment0.evaluate(doubleArray58);
        long long65 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long67 = variance66.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2L + "'", long67 == 2L);
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long6 = variance5.getN();
        variance5.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.setBiasCorrected(false);
        boolean boolean15 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment16);
        double double18 = secondMoment16.getResult();
        secondMoment16.clear();
        secondMoment16.clear();
        secondMoment16.increment((double) 10.0f);
        double double23 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        long long36 = variance25.getN();
        variance25.increment((double) 0L);
        long long39 = variance25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean49 = variance42.equals((java.lang.Object) secondMoment48);
        double double50 = secondMoment48.getResult();
        secondMoment48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        double[] doubleArray68 = new double[] { 0L, (byte) 10 };
        double double69 = variance64.evaluate(doubleArray68);
        double double71 = variance61.evaluate(doubleArray68, (double) 10L);
        double double72 = variance59.evaluate(doubleArray68);
        double double73 = variance54.evaluate(doubleArray68);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray89 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double90 = variance82.evaluate(doubleArray89);
        double double91 = variance75.evaluate(doubleArray89);
        double double92 = variance54.evaluate(doubleArray89);
        double double93 = variance52.evaluate(doubleArray89);
        double double95 = variance25.evaluate(doubleArray89, (double) (byte) 1);
        double double96 = secondMoment16.evaluate(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance5.evaluate(doubleArray89, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2136.8055555555557d + "'", double90 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2564.166666666667d + "'", double91 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2564.166666666667d + "'", double92 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2136.8055555555557d + "'", double93 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2564.1666666666665d + "'", double95 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12820.833333333334d + "'", double96 == 12820.833333333334d);
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double22 = variance12.evaluate(doubleArray19, (double) 10L);
        double double25 = secondMoment8.evaluate(doubleArray19, (int) (short) 0, 1);
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        variance27.increment(12820.833333333334d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean24 = variance22.equals((java.lang.Object) (short) 10);
        double double25 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        double double36 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment34);
        secondMoment34.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        secondMoment34.incrementAll(doubleArray44);
        boolean boolean47 = variance27.equals((java.lang.Object) secondMoment34);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        double double52 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment50);
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        secondMoment50.incrementAll(doubleArray60);
        double double63 = variance27.evaluate(doubleArray60);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double double80 = variance27.evaluate(doubleArray75);
        double double81 = variance22.evaluate(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = secondMoment2.evaluate(doubleArray75, (int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 25.0d + "'", double63 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 25.0d + "'", double80 == 25.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double[] doubleArray26 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double27 = variance9.evaluate(doubleArray26);
        double double28 = secondMoment0.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        secondMoment30.clear();
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long38 = secondMoment36.getN();
        secondMoment36.clear();
        secondMoment36.clear();
        secondMoment36.increment((double) (byte) 100);
        secondMoment36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double[] doubleArray62 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double63 = variance45.evaluate(doubleArray62);
        double double64 = secondMoment36.evaluate(doubleArray62);
        double double67 = secondMoment30.evaluate(doubleArray62, 0, (int) (short) 1);
        double double68 = secondMoment0.evaluate(doubleArray62);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        long long72 = secondMoment70.getN();
        secondMoment70.clear();
        secondMoment70.clear();
        secondMoment70.increment((double) (byte) 100);
        secondMoment70.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        double double79 = variance78.getResult();
        variance78.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment81);
        long long83 = secondMoment81.getN();
        secondMoment81.clear();
        double double85 = secondMoment81.getResult();
        secondMoment81.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance88 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment81);
        double[] doubleArray89 = new double[] {};
        double double90 = secondMoment81.evaluate(doubleArray89);
        double double92 = variance78.evaluate(doubleArray89, 4048078.240740742d);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray89, (-1), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2024039.120370371d + "'", double27 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4048078.240740742d + "'", double28 == 4048078.240740742d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.120370371d + "'", double63 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4048078.240740742d + "'", double64 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4048078.240740742d + "'", double68 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        java.lang.Class<?> wildcardClass7 = doubleArray5.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(Double.NaN);
        secondMoment1.increment(0.0d);
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean26 = variance24.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        double[] doubleArray37 = new double[] { 0L, (byte) 10 };
        double double38 = variance33.evaluate(doubleArray37);
        double double40 = variance30.evaluate(doubleArray37, (double) 10L);
        double double41 = variance28.evaluate(doubleArray37);
        double[] doubleArray45 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double46 = variance28.evaluate(doubleArray45);
        double double48 = variance24.evaluate(doubleArray45, (double) (byte) 1);
        variance24.clear();
        variance24.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean60 = variance53.equals((java.lang.Object) secondMoment59);
        double double61 = secondMoment59.getResult();
        secondMoment59.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        double double64 = secondMoment59.getResult();
        long long65 = secondMoment59.getN();
        secondMoment59.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance68.evaluate(doubleArray77);
        double[] doubleArray85 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double86 = variance68.evaluate(doubleArray85);
        secondMoment59.incrementAll(doubleArray85);
        double double88 = variance24.evaluate(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = secondMoment1.evaluate(doubleArray85, (-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2024039.120370371d + "'", double46 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2024039.120370371d + "'", double48 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2024039.120370371d + "'", double86 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2024039.120370371d + "'", double88 == 2024039.120370371d);
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double13 = variance5.evaluate(doubleArray12);
        double double14 = variance1.evaluate(doubleArray12);
        long long15 = variance1.getN();
        variance1.increment(2136.8055555559695d);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2136.8055555555557d + "'", double13 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2564.166666666667d + "'", double14 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double3 = variance2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double6 = variance5.getResult();
        double[] doubleArray9 = new double[] { 0L, (byte) 10 };
        double double10 = variance5.evaluate(doubleArray9);
        double double12 = variance2.evaluate(doubleArray9, (double) 10L);
        long long13 = variance2.getN();
        boolean boolean14 = secondMoment0.equals((java.lang.Object) long13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        secondMoment16.incrementAll(doubleArray26);
        long long29 = secondMoment16.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double34 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        secondMoment32.clear();
        secondMoment32.increment((double) 2L);
        double double39 = secondMoment32.getResult();
        secondMoment32.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        secondMoment32.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        boolean boolean57 = variance48.equals((java.lang.Object) variance54);
        long long58 = variance54.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean62 = variance60.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray71 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double72 = variance64.evaluate(doubleArray71);
        double double73 = variance60.evaluate(doubleArray71);
        double double74 = variance54.evaluate(doubleArray71);
        double double76 = variance46.evaluate(doubleArray71, (double) 1.0f);
        double double77 = secondMoment16.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = secondMoment0.evaluate(doubleArray71, (int) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.0d + "'", double10 == 50.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2L + "'", long29 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2136.8055555555557d + "'", double72 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2564.166666666667d + "'", double73 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2564.166666666667d + "'", double74 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2564.1666666666665d + "'", double76 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 12820.833333333334d + "'", double77 == 12820.833333333334d);
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        variance13.increment(1641.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        double double25 = secondMoment23.getResult();
        secondMoment23.clear();
        secondMoment23.clear();
        secondMoment23.increment((double) 10.0f);
        long long30 = secondMoment23.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        secondMoment31.incrementAll(doubleArray53);
        double double57 = secondMoment23.evaluate(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = variance13.evaluate(doubleArray53, (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12820.833333333334d + "'", double57 == 12820.833333333334d);
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double20 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        secondMoment18.incrementAll(doubleArray28);
        boolean boolean31 = variance11.equals((java.lang.Object) secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        boolean boolean41 = secondMoment18.equals((java.lang.Object) boolean40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = secondMoment18.evaluate(doubleArray51);
        long long56 = secondMoment18.getN();
        double double57 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        double double68 = secondMoment66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment66);
        secondMoment66.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        secondMoment66.incrementAll(doubleArray76);
        boolean boolean79 = variance59.equals((java.lang.Object) secondMoment66);
        variance59.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment82);
        double double84 = secondMoment82.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment82);
        secondMoment82.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance88 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double89 = variance88.getResult();
        double[] doubleArray92 = new double[] { 0L, (byte) 10 };
        double double93 = variance88.evaluate(doubleArray92);
        secondMoment82.incrementAll(doubleArray92);
        double double95 = variance59.evaluate(doubleArray92);
        boolean boolean96 = secondMoment18.equals((java.lang.Object) double95);
        secondMoment18.increment((double) (short) 0);
        boolean boolean99 = secondMoment1.equals((java.lang.Object) secondMoment18);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2L + "'", long56 == 2L);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 25.0d + "'", double95 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        double double15 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.increment((double) (byte) 0);
        double double22 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        variance25.increment((double) 0.0f);
        boolean boolean41 = variance25.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        double double45 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double63 = variance55.evaluate(doubleArray62);
        double double64 = variance48.evaluate(doubleArray62);
        double double65 = secondMoment43.evaluate(doubleArray62);
        double double66 = variance25.evaluate(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = variance23.evaluate(doubleArray62, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.8055555555557d + "'", double63 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2564.166666666667d + "'", double64 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 12820.833333333334d + "'", double65 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        secondMoment24.incrementAll(doubleArray34);
        double double37 = variance1.evaluate(doubleArray34);
        variance1.setBiasCorrected(false);
        double double40 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 25.0d + "'", double37 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment(10.0d);
        double double17 = variance1.getResult();
        variance1.increment(1152.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        double double22 = secondMoment20.getResult();
        boolean boolean24 = secondMoment20.equals((java.lang.Object) 1.0d);
        double double25 = secondMoment20.getResult();
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        long long29 = secondMoment27.getN();
        secondMoment27.clear();
        secondMoment27.clear();
        secondMoment27.increment((double) (byte) 100);
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.increment(2136.805555555555d);
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        variance40.setBiasCorrected(false);
        variance40.increment((double) 100L);
        boolean boolean47 = variance40.isBiasCorrected();
        boolean boolean48 = variance40.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray57 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double58 = variance50.evaluate(doubleArray57);
        double double60 = variance40.evaluate(doubleArray57, (double) (byte) 10);
        secondMoment27.incrementAll(doubleArray57);
        double double62 = secondMoment20.evaluate(doubleArray57);
        double double65 = variance1.evaluate(doubleArray57, 1, 1);
        variance1.increment((double) 1);
        double double68 = variance1.getResult();
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 12820.833333333334d + "'", double62 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        long long15 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        variance16.increment(1152.0d);
        variance16.setBiasCorrected(true);
        variance16.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        variance34.increment((double) (short) 0);
        variance34.clear();
        double double38 = variance34.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double15 = variance7.evaluate(doubleArray14);
        variance1.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        double double19 = secondMoment17.getResult();
        secondMoment17.increment((double) 7L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double47 = secondMoment30.evaluate(doubleArray41, (int) (short) 0, 1);
        long long48 = secondMoment30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean53 = variance51.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double63 = variance55.evaluate(doubleArray62);
        double double64 = variance51.evaluate(doubleArray62);
        java.lang.Class<?> wildcardClass65 = doubleArray62.getClass();
        boolean boolean66 = variance49.equals((java.lang.Object) wildcardClass65);
        variance49.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance70.increment((-1.0d));
        variance70.setBiasCorrected(false);
        boolean boolean75 = variance70.isBiasCorrected();
        double[] doubleArray76 = new double[] {};
        double double77 = variance70.evaluate(doubleArray76);
        variance70.setBiasCorrected(false);
        variance70.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment82);
        double double84 = secondMoment82.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment82);
        secondMoment82.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance88 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double89 = variance88.getResult();
        double[] doubleArray92 = new double[] { 0L, (byte) 10 };
        double double93 = variance88.evaluate(doubleArray92);
        secondMoment82.incrementAll(doubleArray92);
        variance70.incrementAll(doubleArray92);
        variance49.incrementAll(doubleArray92);
        double double97 = secondMoment17.evaluate(doubleArray92);
        double double99 = variance1.evaluate(doubleArray92, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2136.8055555555557d + "'", double15 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.8055555555557d + "'", double63 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2564.166666666667d + "'", double64 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 50.0d + "'", double97 == 50.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 25.0d + "'", double99 == 25.0d);
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        long long9 = variance1.getN();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        long long15 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        variance18.incrementAll(doubleArray34);
        variance16.incrementAll(doubleArray34);
        double double42 = variance12.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        double double46 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment44);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double double51 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        secondMoment49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        secondMoment49.incrementAll(doubleArray59);
        double double62 = variance47.evaluate(doubleArray59);
        double double63 = variance12.evaluate(doubleArray59);
        variance1.incrementAll(doubleArray59);
        java.lang.Class<?> wildcardClass65 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 25.0d + "'", double62 == 25.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        long long11 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean15 = variance13.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = variance13.evaluate(doubleArray24);
        double double27 = variance7.evaluate(doubleArray24);
        double[] doubleArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance7.incrementAll(doubleArray28, (int) (short) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2564.166666666667d + "'", double26 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2564.166666666667d + "'", double27 == 2564.166666666667d);
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        secondMoment47.increment(10.0d);
        double double53 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double[] doubleArray72 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double73 = variance55.evaluate(doubleArray72);
        double double74 = secondMoment47.evaluate(doubleArray72);
        double double76 = variance4.evaluate(doubleArray72, (double) (short) 100);
        boolean boolean77 = variance4.isBiasCorrected();
        double double78 = variance4.getResult();
        variance4.setBiasCorrected(true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2024039.120370371d + "'", double73 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4048078.240740742d + "'", double74 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1349359.4135802472d + "'", double76 == 1349359.4135802472d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance15.evaluate(doubleArray29);
        variance13.incrementAll(doubleArray29);
        double double36 = secondMoment8.evaluate(doubleArray29);
        secondMoment8.clear();
        long long38 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        long long42 = secondMoment40.getN();
        secondMoment40.clear();
        double double44 = secondMoment40.getResult();
        secondMoment40.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        double[] doubleArray48 = new double[] {};
        double double49 = secondMoment40.evaluate(doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = variance39.evaluate(doubleArray48, (int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean26 = variance24.equals((java.lang.Object) (short) 10);
        boolean boolean27 = variance18.equals((java.lang.Object) variance24);
        long long28 = variance24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean32 = variance30.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double42 = variance34.evaluate(doubleArray41);
        double double43 = variance30.evaluate(doubleArray41);
        double double44 = variance24.evaluate(doubleArray41);
        double double46 = variance16.evaluate(doubleArray41, (double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        boolean boolean57 = variance48.equals((java.lang.Object) variance54);
        long long58 = variance54.getN();
        variance54.setBiasCorrected(false);
        variance54.increment(2310.1428571428573d);
        double double63 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean67 = variance65.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double77 = variance69.evaluate(doubleArray76);
        double double78 = variance65.evaluate(doubleArray76);
        variance65.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean83 = variance81.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray92 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double93 = variance85.evaluate(doubleArray92);
        double double94 = variance81.evaluate(doubleArray92);
        variance65.incrementAll(doubleArray92);
        double double96 = variance54.evaluate(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance16.evaluate(doubleArray92, (int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2564.166666666667d + "'", double43 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2564.166666666667d + "'", double44 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2564.1666666666665d + "'", double46 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2136.8055555555557d + "'", double77 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2564.166666666667d + "'", double78 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2136.8055555555557d + "'", double93 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2564.166666666667d + "'", double94 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2136.8055555555557d + "'", double96 == 2136.8055555555557d);
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 2L);
        double double9 = secondMoment2.getResult();
        secondMoment2.increment(50.0d);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        double[] doubleArray21 = new double[] {};
        double double22 = variance15.evaluate(doubleArray21);
        long long23 = variance15.getN();
        variance15.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean34 = variance27.equals((java.lang.Object) secondMoment33);
        double double35 = secondMoment33.getResult();
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        secondMoment33.increment((double) 10.0f);
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        java.lang.Object obj42 = null;
        boolean boolean43 = variance41.equals(obj42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double45 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long48 = secondMoment46.getN();
        secondMoment46.clear();
        secondMoment46.clear();
        secondMoment46.increment((double) (byte) 100);
        long long53 = secondMoment46.getN();
        double[] doubleArray55 = new double[] { 2024039.1203703713d };
        double double56 = secondMoment46.evaluate(doubleArray55);
        secondMoment44.incrementAll(doubleArray55);
        variance41.incrementAll(doubleArray55);
        variance15.incrementAll(doubleArray55);
        double double60 = variance13.evaluate(doubleArray55);
        variance13.setBiasCorrected(true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        variance8.increment((double) 100L);
        boolean boolean15 = variance8.isBiasCorrected();
        boolean boolean16 = variance8.isBiasCorrected();
        boolean boolean17 = secondMoment1.equals((java.lang.Object) boolean16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance18.clear();
        boolean boolean20 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double double24 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        secondMoment22.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        secondMoment22.clear();
        secondMoment22.increment(12820.833333333334d);
        boolean boolean39 = variance18.equals((java.lang.Object) secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double47 = variance41.getResult();
        variance41.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        long long53 = secondMoment51.getN();
        secondMoment51.clear();
        secondMoment51.clear();
        double double56 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        double double68 = secondMoment66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment66);
        secondMoment66.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        secondMoment66.incrementAll(doubleArray76);
        boolean boolean79 = variance59.equals((java.lang.Object) secondMoment66);
        variance59.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment82);
        double double84 = secondMoment82.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment82);
        secondMoment82.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance88 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double89 = variance88.getResult();
        double[] doubleArray92 = new double[] { 0L, (byte) 10 };
        double double93 = variance88.evaluate(doubleArray92);
        secondMoment82.incrementAll(doubleArray92);
        double double95 = variance59.evaluate(doubleArray92);
        double double96 = variance57.evaluate(doubleArray92);
        double double97 = variance41.evaluate(doubleArray92);
        secondMoment22.incrementAll(doubleArray92);
        double double99 = secondMoment22.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 25.0d + "'", double95 == 25.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 50.0d + "'", double96 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 50.0d + "'", double97 == 50.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1.0949710601851854E8d + "'", double99 == 1.0949710601851854E8d);
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray8 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double9 = variance1.evaluate(doubleArray8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        variance12.increment((double) (short) -1);
        boolean boolean16 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double20 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        secondMoment18.clear();
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.clear();
        secondMoment24.increment((double) (byte) 100);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance33.evaluate(doubleArray42);
        double[] doubleArray50 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double51 = variance33.evaluate(doubleArray50);
        double double52 = secondMoment24.evaluate(doubleArray50);
        double double55 = secondMoment18.evaluate(doubleArray50, 0, (int) (short) 1);
        double double57 = variance12.evaluate(doubleArray50, 651942.9897959187d);
        double double59 = variance1.evaluate(doubleArray50, (double) 10);
        long long60 = variance1.getN();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2136.8055555555557d + "'", double9 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2024039.120370371d + "'", double51 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 4048078.240740742d + "'", double52 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2024039.1204833984d + "'", double57 == 2024039.1204833984d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1349359.4135802474d + "'", double59 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean12 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        double double24 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        secondMoment22.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean37 = variance30.equals((java.lang.Object) secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double53 = variance30.evaluate(doubleArray46, (double) (short) 0, 0, (int) (short) 0);
        double double56 = secondMoment22.evaluate(doubleArray46, 0, 0);
        variance14.incrementAll(doubleArray46);
        double double58 = variance11.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double[] doubleArray77 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double78 = variance60.evaluate(doubleArray77);
        double double80 = variance11.evaluate(doubleArray77, (double) 100);
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double86 = variance85.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance88 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double89 = variance88.getResult();
        double[] doubleArray92 = new double[] { 0L, (byte) 10 };
        double double93 = variance88.evaluate(doubleArray92);
        double double95 = variance85.evaluate(doubleArray92, (double) 10L);
        double double96 = variance83.evaluate(doubleArray92);
        variance11.incrementAll(doubleArray92);
        variance11.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2024039.120370371d + "'", double78 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2024039.1203703708d + "'", double80 == 2024039.1203703708d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 50.0d + "'", double96 == 50.0d);
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        boolean boolean23 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean25 = variance18.equals((java.lang.Object) secondMoment24);
        variance18.increment((double) 100L);
        variance18.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double44 = variance31.evaluate(doubleArray40);
        double[] doubleArray48 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double49 = variance31.evaluate(doubleArray48);
        variance18.incrementAll(doubleArray48);
        variance16.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.setBiasCorrected(false);
        boolean boolean61 = variance56.isBiasCorrected();
        double[] doubleArray62 = new double[] {};
        double double63 = variance56.evaluate(doubleArray62);
        variance56.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray74 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double75 = variance67.evaluate(doubleArray74);
        double double76 = variance56.evaluate(doubleArray74);
        double double80 = variance53.evaluate(doubleArray74, (double) (short) 100, (int) (byte) 0, (int) (byte) 1);
        variance16.incrementAll(doubleArray74, (int) (short) 1, (int) (byte) 1);
        double double86 = variance1.evaluate(doubleArray74, (int) (short) 1, 1);
        java.lang.Class<?> wildcardClass87 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2024039.120370371d + "'", double49 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2136.8055555555557d + "'", double75 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2136.8055555555557d + "'", double76 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.increment((-1.0d));
        variance5.setBiasCorrected(false);
        variance5.increment((double) 100L);
        boolean boolean12 = variance5.isBiasCorrected();
        variance5.clear();
        long long14 = variance5.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        secondMoment16.incrementAll(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean33 = variance31.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        double double43 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double46 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        double double55 = variance45.evaluate(doubleArray52, (double) 10L);
        double double58 = secondMoment41.evaluate(doubleArray52, (int) (short) 0, 1);
        double double59 = variance31.evaluate(doubleArray52);
        secondMoment16.incrementAll(doubleArray52);
        double double61 = variance5.evaluate(doubleArray52);
        variance1.incrementAll(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        variance64.increment((double) (short) -1);
        double double68 = variance64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double76 = variance64.evaluate(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = variance1.evaluate(doubleArray74, (int) (short) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 25.0d + "'", double61 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double9 = variance8.getResult();
        double double10 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        double[] doubleArray18 = new double[] {};
        double double19 = variance12.evaluate(doubleArray18);
        variance12.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double47 = secondMoment30.evaluate(doubleArray41, (int) (short) 0, 1);
        long long48 = secondMoment30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        long long62 = variance51.getN();
        variance51.increment((double) 0L);
        double[] doubleArray66 = new double[] { 10.0d };
        variance51.incrementAll(doubleArray66);
        double double68 = variance49.evaluate(doubleArray66);
        double double72 = variance12.evaluate(doubleArray66, (double) 1L, 0, (int) (byte) 1);
        double double73 = variance8.evaluate(doubleArray66);
        boolean boolean74 = variance8.isBiasCorrected();
        double double75 = variance8.getResult();
        double double76 = variance8.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance1.evaluate(doubleArray15);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double double44 = variance25.evaluate(doubleArray39);
        variance23.incrementAll(doubleArray39);
        variance21.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        boolean boolean54 = variance21.equals((java.lang.Object) double53);
        double double55 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        double double65 = secondMoment63.getResult();
        secondMoment63.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment63);
        double double68 = secondMoment63.getResult();
        long long69 = secondMoment63.getN();
        secondMoment63.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double[] doubleArray89 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double90 = variance72.evaluate(doubleArray89);
        secondMoment63.incrementAll(doubleArray89);
        double double93 = variance21.evaluate(doubleArray89, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance1.evaluate(doubleArray89, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2024039.120370371d + "'", double90 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2024039.1203703708d + "'", double93 == 2024039.1203703708d);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.clear();
        double double16 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        variance18.increment((double) 100L);
        boolean boolean25 = variance18.isBiasCorrected();
        variance18.clear();
        long long27 = variance18.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        secondMoment29.incrementAll(doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean46 = variance44.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double71 = secondMoment54.evaluate(doubleArray65, (int) (short) 0, 1);
        double double72 = variance44.evaluate(doubleArray65);
        secondMoment29.incrementAll(doubleArray65);
        double double74 = variance18.evaluate(doubleArray65);
        variance14.incrementAll(doubleArray65);
        secondMoment8.incrementAll(doubleArray65);
        secondMoment8.increment(1.0d);
        double double79 = secondMoment8.getResult();
        double double80 = secondMoment8.getResult();
        java.lang.Class<?> wildcardClass81 = secondMoment8.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 25.0d + "'", double74 == 25.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 60.666666666666664d + "'", double79 == 60.666666666666664d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 60.666666666666664d + "'", double80 == 60.666666666666664d);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment((double) '4');
        long long6 = secondMoment0.getN();
        secondMoment0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        variance10.clear();
        variance10.increment(2024039.1203703713d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        long long21 = secondMoment19.getN();
        secondMoment19.clear();
        secondMoment19.increment(10.0d);
        double double25 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double40 = variance27.evaluate(doubleArray36);
        double[] doubleArray44 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double45 = variance27.evaluate(doubleArray44);
        double double46 = secondMoment19.evaluate(doubleArray44);
        long long47 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        long long52 = variance49.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double65 = variance64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double[] doubleArray71 = new double[] { 0L, (byte) 10 };
        double double72 = variance67.evaluate(doubleArray71);
        double double74 = variance64.evaluate(doubleArray71, (double) 10L);
        double double75 = variance62.evaluate(doubleArray71);
        double double76 = variance57.evaluate(doubleArray71);
        variance55.incrementAll(doubleArray71);
        variance53.incrementAll(doubleArray71);
        double double79 = variance49.evaluate(doubleArray71);
        double double82 = secondMoment19.evaluate(doubleArray71, (int) (byte) 0, 1);
        variance10.incrementAll(doubleArray71);
        double double84 = secondMoment0.evaluate(doubleArray71);
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2024039.120370371d + "'", double45 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 4048078.240740742d + "'", double46 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3L + "'", long47 == 3L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray33 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double34 = variance26.evaluate(doubleArray33);
        double double35 = variance19.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean54 = variance52.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double69 = variance56.evaluate(doubleArray65);
        double[] doubleArray73 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double74 = variance56.evaluate(doubleArray73);
        double double76 = variance52.evaluate(doubleArray73, (double) (byte) 1);
        double double77 = variance37.evaluate(doubleArray73);
        double double79 = variance19.evaluate(doubleArray73, 2310.1428571428573d);
        variance16.incrementAll(doubleArray73);
        variance16.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2136.8055555555557d + "'", double34 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2564.166666666667d + "'", double35 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2024039.120370371d + "'", double74 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2024039.120370371d + "'", double76 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2024039.120370371d + "'", double77 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2024039.1203703713d + "'", double79 == 2024039.1203703713d);
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        double double19 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        secondMoment17.incrementAll(doubleArray27);
        double double30 = variance15.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        secondMoment39.increment((double) (short) 0);
        secondMoment39.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = secondMoment39.evaluate(doubleArray53);
        secondMoment31.incrementAll(doubleArray53);
        variance15.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long60 = secondMoment58.getN();
        secondMoment58.clear();
        secondMoment58.increment(10.0d);
        double double64 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double79 = variance66.evaluate(doubleArray75);
        double[] doubleArray83 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double84 = variance66.evaluate(doubleArray83);
        double double85 = secondMoment58.evaluate(doubleArray83);
        double double87 = variance15.evaluate(doubleArray83, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance1.evaluate(doubleArray83, (int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 25.0d + "'", double30 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12820.833333333334d + "'", double55 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2024039.120370371d + "'", double84 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4048078.240740742d + "'", double85 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1349359.4135802472d + "'", double87 == 1349359.4135802472d);
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        double double2 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        double double7 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.setBiasCorrected(false);
        boolean boolean16 = variance11.isBiasCorrected();
        double[] doubleArray17 = new double[] {};
        double double18 = variance11.evaluate(doubleArray17);
        secondMoment5.incrementAll(doubleArray17);
        double double20 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        double double26 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        secondMoment24.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        secondMoment24.clear();
        secondMoment24.increment(Double.NaN);
        secondMoment24.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean47 = variance45.equals((java.lang.Object) (short) 10);
        double double48 = variance45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        double double61 = variance45.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean70 = variance63.equals((java.lang.Object) secondMoment69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double76 = variance75.getResult();
        double[] doubleArray79 = new double[] { 0L, (byte) 10 };
        double double80 = variance75.evaluate(doubleArray79);
        double double82 = variance72.evaluate(doubleArray79, (double) 10L);
        double double86 = variance63.evaluate(doubleArray79, (double) (short) 0, 0, (int) (short) 0);
        double double89 = variance45.evaluate(doubleArray79, 0, (int) (byte) 1);
        secondMoment24.incrementAll(doubleArray79, (int) (short) 0, (int) (byte) 1);
        double double93 = variance21.evaluate(doubleArray79);
        double double94 = secondMoment0.evaluate(doubleArray79);
        secondMoment0.increment((double) (byte) 1);
        double double97 = secondMoment0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 25.0d + "'", double93 == 25.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 60.666666666666664d + "'", double97 == 60.666666666666664d);
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        boolean boolean5 = variance1.isBiasCorrected();
        variance1.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        double[] doubleArray15 = new double[] {};
        double double16 = variance9.evaluate(doubleArray15);
        variance9.setBiasCorrected(false);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        secondMoment21.incrementAll(doubleArray31);
        variance9.incrementAll(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = variance1.evaluate(doubleArray31, (int) (byte) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        double[] doubleArray31 = new double[] { 0L, (byte) 10 };
        double double32 = variance27.evaluate(doubleArray31);
        boolean boolean33 = variance0.equals((java.lang.Object) double32);
        double double34 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.setBiasCorrected(false);
        boolean boolean41 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean43 = variance36.equals((java.lang.Object) secondMoment42);
        double double44 = secondMoment42.getResult();
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double double47 = secondMoment42.getResult();
        long long48 = secondMoment42.getN();
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        double[] doubleArray60 = new double[] { 0L, (byte) 10 };
        double double61 = variance56.evaluate(doubleArray60);
        double double63 = variance53.evaluate(doubleArray60, (double) 10L);
        double double64 = variance51.evaluate(doubleArray60);
        double[] doubleArray68 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double69 = variance51.evaluate(doubleArray68);
        secondMoment42.incrementAll(doubleArray68);
        double double72 = variance0.evaluate(doubleArray68, (double) 100);
        double double73 = variance0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2024039.120370371d + "'", double69 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2024039.1203703708d + "'", double72 == 2024039.1203703708d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray7, (int) (byte) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        variance9.increment((double) (short) -1);
        long long13 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double21 = variance20.getResult();
        double[] doubleArray24 = new double[] { 0L, (byte) 10 };
        double double25 = variance20.evaluate(doubleArray24);
        double double27 = variance17.evaluate(doubleArray24, (double) 10L);
        double double28 = variance15.evaluate(doubleArray24);
        variance15.increment((double) 0.0f);
        boolean boolean31 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        variance38.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean44 = variance42.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray53 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double54 = variance46.evaluate(doubleArray53);
        double double55 = variance42.evaluate(doubleArray53);
        double double57 = variance38.evaluate(doubleArray53, (double) 1.0f);
        double double60 = variance15.evaluate(doubleArray53, (int) (byte) 0, 1);
        double double61 = variance9.evaluate(doubleArray53);
        boolean boolean62 = variance1.equals((java.lang.Object) doubleArray53);
        java.lang.Object obj63 = null;
        boolean boolean64 = variance1.equals(obj63);
        long long65 = variance1.getN();
        variance1.increment(2024039.1204833984d);
        variance1.increment(5.415271412037037E7d);
        long long70 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2564.166666666667d + "'", double55 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2136.805555555555d + "'", double57 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4L + "'", long70 == 4L);
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double5 = secondMoment4.getResult();
        double double6 = secondMoment4.getResult();
        boolean boolean7 = variance1.equals((java.lang.Object) double6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        variance9.increment((double) 100L);
        boolean boolean16 = variance9.isBiasCorrected();
        variance9.clear();
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean22 = variance20.equals((java.lang.Object) (short) 10);
        double double23 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double36 = variance20.evaluate(doubleArray32);
        double double37 = variance9.evaluate(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = variance1.evaluate(doubleArray32, 5011295.755555557d, (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 25.0d + "'", double37 == 25.0d);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        secondMoment3.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        secondMoment3.clear();
        long long18 = secondMoment3.getN();
        double double19 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        secondMoment3.increment((double) 0.0f);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        long long7 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance8.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        double double21 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        secondMoment19.incrementAll(doubleArray29);
        boolean boolean32 = variance12.equals((java.lang.Object) secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean41 = variance34.equals((java.lang.Object) secondMoment40);
        boolean boolean42 = secondMoment19.equals((java.lang.Object) boolean41);
        double double43 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean47 = variance45.equals((java.lang.Object) (short) 10);
        double double48 = variance45.getResult();
        variance45.clear();
        boolean boolean50 = variance45.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance52.increment((-1.0d));
        variance52.setBiasCorrected(false);
        boolean boolean57 = variance52.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean59 = variance52.equals((java.lang.Object) secondMoment58);
        secondMoment58.increment((double) (short) 0);
        secondMoment58.increment((double) 1.0f);
        double double64 = secondMoment58.getResult();
        double double65 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        double double68 = secondMoment66.getResult();
        boolean boolean69 = secondMoment58.equals((java.lang.Object) double68);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        long long72 = secondMoment70.getN();
        secondMoment70.clear();
        secondMoment70.clear();
        secondMoment70.increment((double) (byte) 100);
        long long77 = secondMoment70.getN();
        double[] doubleArray79 = new double[] { 2024039.1203703713d };
        double double80 = secondMoment70.evaluate(doubleArray79);
        double double81 = secondMoment58.evaluate(doubleArray79);
        double double82 = variance45.evaluate(doubleArray79);
        secondMoment19.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = variance8.evaluate(doubleArray79, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.5d + "'", double64 == 0.5d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.5d + "'", double65 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance8.setBiasCorrected(false);
        variance8.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        double[] doubleArray20 = new double[] {};
        double double21 = variance14.evaluate(doubleArray20);
        variance14.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance25.increment((-1.0d));
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean32 = variance30.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double[] doubleArray51 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double52 = variance34.evaluate(doubleArray51);
        double double54 = variance30.evaluate(doubleArray51, (double) (byte) 1);
        double double56 = variance25.evaluate(doubleArray51, 4048078.240740742d);
        double double57 = variance14.evaluate(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = variance8.evaluate(doubleArray51, (int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2024039.120370371d + "'", double52 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2024039.120370371d + "'", double54 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2024039.12109375d + "'", double56 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1349359.4135802474d + "'", double57 == 1349359.4135802474d);
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance16.clear();
        variance16.setBiasCorrected(true);
        variance16.increment((double) 2L);
        double double22 = variance16.getResult();
        double[] doubleArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = variance16.evaluate(doubleArray23, (double) 3L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double[] doubleArray6 = new double[] { 'a', (-1.0f), '4' };
        variance2.incrementAll(doubleArray6);
        variance2.increment((double) 10.0f);
        variance2.increment((double) 100);
        variance2.clear();
        variance2.increment((double) (byte) -1);
        variance2.increment(1652.4444444444443d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, -1.0, 52.0]");
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        double[] doubleArray16 = new double[] { 10.0d };
        variance1.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double37 = variance24.evaluate(doubleArray33);
        double double38 = variance19.evaluate(doubleArray33);
        variance1.incrementAll(doubleArray33);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance43.increment((-1.0d));
        variance43.setBiasCorrected(false);
        boolean boolean48 = variance43.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean50 = variance43.equals((java.lang.Object) secondMoment49);
        secondMoment49.increment((double) (short) 0);
        secondMoment49.increment((double) 1.0f);
        double double55 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double double57 = secondMoment49.getResult();
        secondMoment49.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance62.clear();
        long long64 = variance62.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        long long68 = secondMoment66.getN();
        secondMoment66.clear();
        secondMoment66.clear();
        double double71 = secondMoment66.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment66);
        variance72.increment((double) (byte) -1);
        long long75 = variance72.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment76);
        long long78 = secondMoment76.getN();
        secondMoment76.clear();
        secondMoment76.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment82);
        long long84 = secondMoment82.getN();
        secondMoment82.clear();
        double double86 = secondMoment82.getResult();
        secondMoment82.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance89 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment82);
        double[] doubleArray90 = new double[] {};
        double double91 = secondMoment82.evaluate(doubleArray90);
        secondMoment76.incrementAll(doubleArray90);
        double double93 = variance72.evaluate(doubleArray90);
        double double94 = variance62.evaluate(doubleArray90);
        variance60.incrementAll(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance1.evaluate(doubleArray90, 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5d + "'", double57 == 0.5d);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(50.0d);
        secondMoment1.clear();
        secondMoment1.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance10.setBiasCorrected(true);
        java.lang.Class<?> wildcardClass13 = variance10.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean14 = variance7.equals((java.lang.Object) secondMoment13);
        variance7.increment((double) 100L);
        variance7.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double38 = variance20.evaluate(doubleArray37);
        variance7.incrementAll(doubleArray37);
        double double40 = variance5.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long43 = secondMoment41.getN();
        secondMoment41.clear();
        secondMoment41.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        variance47.setBiasCorrected(false);
        double double50 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        long long53 = secondMoment51.getN();
        secondMoment51.clear();
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        boolean boolean63 = variance58.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean65 = variance58.equals((java.lang.Object) secondMoment64);
        variance58.increment((double) 100L);
        variance58.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        double[] doubleArray80 = new double[] { 0L, (byte) 10 };
        double double81 = variance76.evaluate(doubleArray80);
        double double83 = variance73.evaluate(doubleArray80, (double) 10L);
        double double84 = variance71.evaluate(doubleArray80);
        double[] doubleArray88 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double89 = variance71.evaluate(doubleArray88);
        variance58.incrementAll(doubleArray88);
        double double91 = variance56.evaluate(doubleArray88);
        variance47.incrementAll(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance5.evaluate(doubleArray88, 2564.166666666686d, (int) (byte) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2024039.120370371d + "'", double38 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2024039.120370371d + "'", double89 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2024039.120370371d + "'", double91 == 2024039.120370371d);
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        double double10 = secondMoment6.getResult();
        secondMoment6.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double[] doubleArray14 = new double[] {};
        double double15 = secondMoment6.evaluate(doubleArray14);
        secondMoment0.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double18 = variance17.getResult();
        variance17.setBiasCorrected(true);
        variance17.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        long long5 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        double double19 = variance9.evaluate(doubleArray16, (double) 10L);
        double double20 = variance7.evaluate(doubleArray16);
        variance7.increment((double) 0.0f);
        boolean boolean23 = variance7.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        variance30.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean36 = variance34.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double47 = variance34.evaluate(doubleArray45);
        double double49 = variance30.evaluate(doubleArray45, (double) 1.0f);
        double double52 = variance7.evaluate(doubleArray45, (int) (byte) 0, 1);
        double double53 = variance1.evaluate(doubleArray45);
        double[] doubleArray58 = new double[] { (short) 1, (short) 10, 1.0d, 50.0d };
        double double59 = variance1.evaluate(doubleArray58);
        variance1.increment(4048078.240740742d);
        boolean boolean62 = variance1.isBiasCorrected();
        variance1.clear();
        variance1.increment(1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2564.166666666667d + "'", double47 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.805555555555d + "'", double49 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2564.166666666667d + "'", double53 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0, 1.0, 50.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 547.0d + "'", double59 == 547.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(Double.NaN);
        secondMoment2.increment(0.0d);
        secondMoment2.clear();
        long long22 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.clear();
        secondMoment2.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        double double11 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean20 = variance13.equals((java.lang.Object) secondMoment19);
        variance13.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double37 = variance24.evaluate(doubleArray33);
        variance24.increment((double) 0.0f);
        boolean boolean40 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long43 = secondMoment41.getN();
        secondMoment41.clear();
        secondMoment41.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        variance47.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean53 = variance51.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double63 = variance55.evaluate(doubleArray62);
        double double64 = variance51.evaluate(doubleArray62);
        double double66 = variance47.evaluate(doubleArray62, (double) 1.0f);
        double double69 = variance24.evaluate(doubleArray62, (int) (byte) 0, 1);
        double double70 = variance13.evaluate(doubleArray62);
        double double71 = variance1.evaluate(doubleArray62);
        java.lang.Class<?> wildcardClass72 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.8055555555557d + "'", double63 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2564.166666666667d + "'", double64 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.805555555555d + "'", double66 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2136.8055555555557d + "'", double71 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        double double22 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean26 = variance24.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double36 = variance28.evaluate(doubleArray35);
        double double37 = variance24.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = variance42.evaluate(doubleArray51);
        double double56 = variance39.evaluate(doubleArray51);
        double double57 = variance24.evaluate(doubleArray51);
        double double61 = variance1.evaluate(doubleArray51, (double) 0L, (int) (short) 0, (int) (byte) 0);
        long long62 = variance1.getN();
        variance1.clear();
        long long64 = variance1.getN();
        variance1.increment(2268035.8522376535d);
        long long67 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2136.8055555555557d + "'", double36 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2564.166666666667d + "'", double37 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        boolean boolean4 = secondMoment0.equals((java.lang.Object) 1.0d);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double7 = secondMoment0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean16 = variance9.equals((java.lang.Object) secondMoment15);
        double double17 = secondMoment15.getResult();
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        long long23 = secondMoment21.getN();
        secondMoment21.clear();
        double double25 = secondMoment21.getResult();
        secondMoment21.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance33.evaluate(doubleArray42);
        double double47 = variance30.evaluate(doubleArray42);
        variance28.incrementAll(doubleArray42);
        variance28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance51.increment((-1.0d));
        variance51.setBiasCorrected(false);
        boolean boolean56 = variance51.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double69 = variance51.evaluate(doubleArray65);
        double double71 = variance28.evaluate(doubleArray65, 2310.1428571428573d);
        secondMoment15.incrementAll(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray65, (int) (short) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 25.0d + "'", double69 == 25.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        variance1.increment(1349359.4135802474d);
        variance1.setBiasCorrected(true);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        variance14.increment((double) (short) -1);
        long long18 = variance14.getN();
        variance14.setBiasCorrected(false);
        double double21 = variance14.getResult();
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long25 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.clear();
        secondMoment23.increment((double) (byte) 100);
        long long30 = secondMoment23.getN();
        double[] doubleArray32 = new double[] { 2024039.1203703713d };
        double double33 = secondMoment23.evaluate(doubleArray32);
        variance14.incrementAll(doubleArray32);
        variance1.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        variance37.increment((double) (short) -1);
        variance37.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        long long46 = secondMoment44.getN();
        secondMoment44.clear();
        double double48 = secondMoment44.getResult();
        secondMoment44.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        double[] doubleArray52 = new double[] {};
        double double53 = secondMoment44.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        double double75 = variance65.evaluate(doubleArray72, (double) 10L);
        double double76 = variance63.evaluate(doubleArray72);
        double double77 = variance60.evaluate(doubleArray72);
        double double78 = variance56.evaluate(doubleArray72);
        double double79 = variance54.evaluate(doubleArray72);
        variance37.incrementAll(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = variance1.evaluate(doubleArray72, 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance6.evaluate(doubleArray18);
        secondMoment0.incrementAll(doubleArray18, 1, (int) (byte) 0);
        secondMoment0.clear();
        double double28 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double30 = variance29.getResult();
        double double31 = variance29.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        boolean boolean9 = variance1.isBiasCorrected();
        long long10 = variance1.getN();
        variance1.increment(18.666666666666668d);
        boolean boolean13 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double15 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        double double28 = variance18.evaluate(doubleArray25, (double) 10L);
        long long29 = variance18.getN();
        variance18.setBiasCorrected(false);
        boolean boolean32 = variance18.isBiasCorrected();
        double double33 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance37.evaluate(doubleArray44, (double) 10L);
        double double48 = variance35.evaluate(doubleArray44);
        variance35.increment((double) 0.0f);
        boolean boolean51 = variance35.isBiasCorrected();
        long long52 = variance35.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        secondMoment60.increment((double) (short) 0);
        secondMoment60.increment((double) 1.0f);
        double double66 = secondMoment60.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        boolean boolean69 = variance35.equals((java.lang.Object) variance68);
        double[] doubleArray70 = new double[] {};
        double double71 = variance68.evaluate(doubleArray70);
        double double72 = variance18.evaluate(doubleArray70);
        secondMoment14.incrementAll(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance1.evaluate(doubleArray70, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.5d + "'", double66 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        variance7.increment((double) 100L);
        boolean boolean14 = variance7.isBiasCorrected();
        variance7.clear();
        long long16 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance41.evaluate(doubleArray55);
        double double58 = variance20.evaluate(doubleArray55);
        double double59 = secondMoment17.evaluate(doubleArray55);
        double double60 = variance7.evaluate(doubleArray55);
        double double61 = variance1.evaluate(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean71 = variance69.equals((java.lang.Object) (short) 10);
        boolean boolean72 = variance63.equals((java.lang.Object) variance69);
        long long73 = variance69.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean77 = variance75.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray86 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double87 = variance79.evaluate(doubleArray86);
        double double88 = variance75.evaluate(doubleArray86);
        double double89 = variance69.evaluate(doubleArray86);
        double double90 = variance1.evaluate(doubleArray86);
        variance1.setBiasCorrected(false);
        variance1.setBiasCorrected(false);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 12820.833333333334d + "'", double59 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2136.8055555555557d + "'", double87 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2564.166666666667d + "'", double88 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2564.166666666667d + "'", double89 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2564.166666666667d + "'", double90 == 2564.166666666667d);
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance44.evaluate(doubleArray58);
        double double64 = secondMoment0.evaluate(doubleArray58);
        long long65 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long67 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance71.clear();
        variance71.increment((double) (short) -1);
        boolean boolean75 = variance71.isBiasCorrected();
        variance71.increment((double) 6L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance79.increment((-1.0d));
        variance79.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray92 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double93 = variance85.evaluate(doubleArray92);
        variance79.incrementAll(doubleArray92);
        variance71.incrementAll(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance68.evaluate(doubleArray92, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2L + "'", long67 == 2L);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2136.8055555555557d + "'", double93 == 2136.8055555555557d);
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long14 = secondMoment12.getN();
        secondMoment12.clear();
        double double16 = secondMoment12.getResult();
        secondMoment12.increment((double) (short) 0);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double21 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        double[] doubleArray27 = new double[] { 0L, (byte) 10 };
        double double28 = variance23.evaluate(doubleArray27);
        double double29 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double double40 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        secondMoment38.incrementAll(doubleArray48);
        boolean boolean51 = variance31.equals((java.lang.Object) secondMoment38);
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        variance54.increment((double) 100L);
        variance54.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        double[] doubleArray84 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double85 = variance67.evaluate(doubleArray84);
        variance54.incrementAll(doubleArray84);
        variance31.incrementAll(doubleArray84);
        double double90 = variance23.evaluate(doubleArray84, (int) (byte) 0, 1);
        double double92 = variance20.evaluate(doubleArray84, 18.666666666666668d);
        double double95 = secondMoment7.evaluate(doubleArray84, 0, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance96 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.0d + "'", double28 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2024039.120370371d + "'", double85 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2024039.1203703706d + "'", double92 == 2024039.1203703706d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        secondMoment9.clear();
        secondMoment9.increment((double) (byte) 100);
        long long16 = secondMoment9.getN();
        double[] doubleArray18 = new double[] { 2024039.1203703713d };
        double double19 = secondMoment9.evaluate(doubleArray18);
        secondMoment7.incrementAll(doubleArray18);
        double double21 = secondMoment1.evaluate(doubleArray18);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.increment(25.00000011920929d);
        secondMoment1.increment(2024039.1203703706d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        secondMoment30.incrementAll(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        secondMoment30.clear();
        secondMoment30.increment(Double.NaN);
        secondMoment30.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment30);
        long long50 = variance49.getN();
        boolean boolean51 = variance49.isBiasCorrected();
        long long52 = variance49.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        secondMoment60.increment((double) (short) 0);
        secondMoment60.increment((double) 1.0f);
        long long66 = secondMoment60.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment67);
        long long69 = secondMoment67.getN();
        secondMoment67.clear();
        double double71 = secondMoment67.getResult();
        secondMoment67.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment67);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance76.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance84 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double85 = variance84.getResult();
        double[] doubleArray88 = new double[] { 0L, (byte) 10 };
        double double89 = variance84.evaluate(doubleArray88);
        double double91 = variance81.evaluate(doubleArray88, (double) 10L);
        double double92 = variance79.evaluate(doubleArray88);
        double double93 = variance76.evaluate(doubleArray88);
        variance74.incrementAll(doubleArray88);
        double double95 = secondMoment60.evaluate(doubleArray88);
        variance49.incrementAll(doubleArray88);
        secondMoment1.incrementAll(doubleArray88);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2L + "'", long50 == 2L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2L + "'", long66 == 2L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 50.0d + "'", double95 == 50.0d);
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray21 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double22 = variance14.evaluate(doubleArray21);
        double double23 = secondMoment7.evaluate(doubleArray21);
        secondMoment7.increment((double) 8L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        variance29.clear();
        boolean boolean32 = variance27.equals((java.lang.Object) variance29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double42 = variance34.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double52 = variance44.evaluate(doubleArray51);
        double double54 = variance34.evaluate(doubleArray51, (double) '#');
        double double55 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double double74 = variance57.evaluate(doubleArray69);
        variance34.incrementAll(doubleArray69);
        double double76 = variance27.evaluate(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray69, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2136.8055555555557d + "'", double22 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 12820.833333333334d + "'", double23 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2136.8055555555557d + "'", double52 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        variance33.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean44 = variance37.equals((java.lang.Object) secondMoment43);
        double double45 = secondMoment43.getResult();
        secondMoment43.clear();
        secondMoment43.clear();
        secondMoment43.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        double double53 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment51);
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        double[] doubleArray63 = new double[] {};
        double double64 = variance57.evaluate(doubleArray63);
        secondMoment51.incrementAll(doubleArray63);
        secondMoment43.incrementAll(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            variance33.incrementAll(doubleArray63, 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        double double8 = variance6.getResult();
        boolean boolean9 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.clear();
        double double13 = variance11.getResult();
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double34 = variance21.evaluate(doubleArray30);
        double double35 = variance16.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double52 = variance44.evaluate(doubleArray51);
        double double53 = variance37.evaluate(doubleArray51);
        double double54 = variance16.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double69 = variance56.evaluate(doubleArray65);
        variance16.incrementAll(doubleArray65, (int) (byte) 0, (int) (byte) 0);
        double double73 = variance11.evaluate(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance6.evaluate(doubleArray65, 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2136.8055555555557d + "'", double52 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2564.166666666667d + "'", double53 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666667d + "'", double54 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double13 = variance5.evaluate(doubleArray12);
        double double14 = variance1.evaluate(doubleArray12);
        variance1.clear();
        boolean boolean16 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2136.8055555555557d + "'", double13 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2564.166666666667d + "'", double14 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = variance6.evaluate(doubleArray18, 0.0d, (int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment((double) '4');
        long long6 = secondMoment0.getN();
        long long7 = secondMoment0.getN();
        secondMoment0.clear();
        double double9 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long15 = secondMoment13.getN();
        secondMoment13.clear();
        secondMoment13.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        variance20.increment((double) 100L);
        boolean boolean27 = variance20.isBiasCorrected();
        boolean boolean28 = variance20.isBiasCorrected();
        boolean boolean29 = secondMoment13.equals((java.lang.Object) boolean28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.clear();
        secondMoment32.increment((double) (byte) 100);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        secondMoment32.increment(2136.805555555555d);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance45.increment((-1.0d));
        variance45.setBiasCorrected(false);
        variance45.increment((double) 100L);
        boolean boolean52 = variance45.isBiasCorrected();
        boolean boolean53 = variance45.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double63 = variance55.evaluate(doubleArray62);
        double double65 = variance45.evaluate(doubleArray62, (double) (byte) 10);
        secondMoment32.incrementAll(doubleArray62);
        double double68 = variance31.evaluate(doubleArray62, 2564.166666666686d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance70.increment((-1.0d));
        variance70.setBiasCorrected(false);
        boolean boolean75 = variance70.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        double[] doubleArray84 = new double[] { 0L, (byte) 10 };
        double double85 = variance80.evaluate(doubleArray84);
        double double87 = variance77.evaluate(doubleArray84, (double) 10L);
        double double88 = variance70.evaluate(doubleArray84);
        double double89 = variance31.evaluate(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = secondMoment0.evaluate(doubleArray84, (int) (short) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.8055555555557d + "'", double63 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2136.8055555559695d + "'", double68 == 2136.8055555559695d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 25.0d + "'", double88 == 25.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 25.0d + "'", double89 == 25.0d);
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double24 = variance1.evaluate(doubleArray17, (double) (short) 0, 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        boolean boolean31 = variance26.isBiasCorrected();
        double[] doubleArray32 = new double[] {};
        double double33 = variance26.evaluate(doubleArray32);
        variance26.setBiasCorrected(false);
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double double40 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        secondMoment38.incrementAll(doubleArray48);
        variance26.incrementAll(doubleArray48);
        double[] doubleArray52 = new double[] {};
        double double53 = variance26.evaluate(doubleArray52);
        boolean boolean54 = variance1.equals((java.lang.Object) doubleArray52);
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        long long3 = variance1.getN();
        variance1.clear();
        boolean boolean5 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        secondMoment6.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        secondMoment21.increment((double) (short) 0);
        secondMoment21.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray35 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double36 = variance28.evaluate(doubleArray35);
        double double37 = secondMoment21.evaluate(doubleArray35);
        variance12.incrementAll(doubleArray35);
        double double39 = variance1.evaluate(doubleArray35);
        double double40 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2136.8055555555557d + "'", double36 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 12820.833333333334d + "'", double37 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2564.166666666667d + "'", double39 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = secondMoment9.evaluate(doubleArray42);
        long long47 = secondMoment9.getN();
        double double48 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance50.increment((-1.0d));
        variance50.setBiasCorrected(false);
        boolean boolean55 = variance50.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        double double59 = secondMoment57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment57);
        secondMoment57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        double[] doubleArray67 = new double[] { 0L, (byte) 10 };
        double double68 = variance63.evaluate(doubleArray67);
        secondMoment57.incrementAll(doubleArray67);
        boolean boolean70 = variance50.equals((java.lang.Object) secondMoment57);
        variance50.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment73);
        double double75 = secondMoment73.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment73);
        secondMoment73.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        double[] doubleArray83 = new double[] { 0L, (byte) 10 };
        double double84 = variance79.evaluate(doubleArray83);
        secondMoment73.incrementAll(doubleArray83);
        double double86 = variance50.evaluate(doubleArray83);
        boolean boolean87 = secondMoment9.equals((java.lang.Object) double86);
        long long88 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance89 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        long long90 = variance89.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2L + "'", long47 == 2L);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 25.0d + "'", double86 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 2L + "'", long88 == 2L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 2L + "'", long90 == 2L);
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        double double26 = variance9.evaluate(doubleArray21);
        variance7.incrementAll(doubleArray21);
        variance7.clear();
        long long29 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.setBiasCorrected(false);
        boolean boolean36 = variance31.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double double40 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        secondMoment38.incrementAll(doubleArray48);
        boolean boolean51 = variance31.equals((java.lang.Object) secondMoment38);
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        double double56 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment54);
        secondMoment54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        secondMoment54.incrementAll(doubleArray64);
        double double67 = variance31.evaluate(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = variance7.evaluate(doubleArray64, (double) '#', (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 25.0d + "'", double67 == 25.0d);
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance17.evaluate(doubleArray29);
        double double35 = variance13.evaluate(doubleArray29);
        double double36 = variance11.evaluate(doubleArray29);
        double double37 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        long long40 = secondMoment38.getN();
        secondMoment38.clear();
        double double42 = secondMoment38.getResult();
        secondMoment38.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double[] doubleArray46 = new double[] {};
        double double47 = secondMoment38.evaluate(doubleArray46);
        double double48 = secondMoment38.getResult();
        secondMoment38.clear();
        secondMoment38.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double53 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        secondMoment52.increment(2024039.120370371d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        variance58.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean70 = variance63.equals((java.lang.Object) secondMoment69);
        double double71 = secondMoment69.getResult();
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment75);
        double double77 = secondMoment75.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment75);
        secondMoment75.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance81.increment((-1.0d));
        variance81.setBiasCorrected(false);
        boolean boolean86 = variance81.isBiasCorrected();
        double[] doubleArray87 = new double[] {};
        double double88 = variance81.evaluate(doubleArray87);
        secondMoment75.incrementAll(doubleArray87);
        double double90 = variance73.evaluate(doubleArray87);
        double double91 = variance58.evaluate(doubleArray87);
        secondMoment52.incrementAll(doubleArray87);
        double double93 = secondMoment38.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance11.evaluate(doubleArray87, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long8 = secondMoment6.getN();
        secondMoment6.clear();
        double double10 = secondMoment6.getResult();
        secondMoment6.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double[] doubleArray14 = new double[] {};
        double double15 = secondMoment6.evaluate(doubleArray14);
        secondMoment0.incrementAll(doubleArray14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance17.setBiasCorrected(true);
        variance17.increment(2268035.8522376535d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean31 = variance29.equals((java.lang.Object) (short) 10);
        boolean boolean32 = variance23.equals((java.lang.Object) variance29);
        long long33 = variance29.getN();
        long long34 = variance29.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long37 = secondMoment35.getN();
        secondMoment35.clear();
        double double39 = secondMoment35.getResult();
        secondMoment35.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        double[] doubleArray43 = new double[] {};
        double double44 = secondMoment35.evaluate(doubleArray43);
        double double45 = secondMoment35.getResult();
        secondMoment35.clear();
        double double47 = secondMoment35.getResult();
        long long48 = secondMoment35.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean52 = variance50.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double62 = variance54.evaluate(doubleArray61);
        double double63 = variance50.evaluate(doubleArray61);
        variance50.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean68 = variance66.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray77 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double78 = variance70.evaluate(doubleArray77);
        double double79 = variance66.evaluate(doubleArray77);
        variance50.incrementAll(doubleArray77);
        secondMoment35.incrementAll(doubleArray77, 1, (int) (short) 1);
        boolean boolean84 = variance29.equals((java.lang.Object) doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = variance17.evaluate(doubleArray77, (int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2136.8055555555557d + "'", double62 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2564.166666666667d + "'", double63 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2136.8055555555557d + "'", double78 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2564.166666666667d + "'", double79 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long16 = secondMoment2.getN();
        double double17 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double[] doubleArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double22 = variance18.evaluate(doubleArray19, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        double double22 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long25 = secondMoment23.getN();
        secondMoment23.clear();
        secondMoment23.increment(10.0d);
        secondMoment23.increment(25.0d);
        secondMoment23.clear();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        variance37.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray65 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double66 = variance58.evaluate(doubleArray65);
        double double67 = variance54.evaluate(doubleArray65);
        variance37.incrementAll(doubleArray65);
        double double69 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance71.increment((-1.0d));
        variance71.setBiasCorrected(false);
        boolean boolean76 = variance71.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean78 = variance71.equals((java.lang.Object) secondMoment77);
        secondMoment77.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment81);
        long long83 = secondMoment81.getN();
        secondMoment81.clear();
        double double85 = secondMoment81.getResult();
        secondMoment81.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance88 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment81);
        double[] doubleArray89 = new double[] {};
        double double90 = secondMoment81.evaluate(doubleArray89);
        double double91 = secondMoment77.evaluate(doubleArray89);
        double double92 = variance37.evaluate(doubleArray89);
        variance35.incrementAll(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance1.evaluate(doubleArray89, (int) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2136.8055555555557d + "'", double66 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2564.166666666667d + "'", double67 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2310.1428571428573d + "'", double69 == 2310.1428571428573d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double7 = variance6.getResult();
        variance6.increment(0.0d);
        long long10 = variance6.getN();
        variance6.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double[] doubleArray25 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double26 = variance8.evaluate(doubleArray25);
        double double27 = secondMoment0.evaluate(doubleArray25);
        long long28 = secondMoment0.getN();
        long long29 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        boolean boolean31 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        double[] doubleArray39 = new double[] {};
        double double40 = variance33.evaluate(doubleArray39);
        variance33.increment((double) (-1.0f));
        double double43 = variance33.getResult();
        long long44 = variance33.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance46.increment((double) 10L);
        boolean boolean49 = variance46.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        long long53 = secondMoment51.getN();
        secondMoment51.clear();
        secondMoment51.clear();
        double double56 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment51);
        variance57.increment((double) (byte) -1);
        long long60 = variance57.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        long long63 = secondMoment61.getN();
        secondMoment61.clear();
        secondMoment61.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment67);
        long long69 = secondMoment67.getN();
        secondMoment67.clear();
        double double71 = secondMoment67.getResult();
        secondMoment67.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment67);
        double[] doubleArray75 = new double[] {};
        double double76 = secondMoment67.evaluate(doubleArray75);
        secondMoment61.incrementAll(doubleArray75);
        double double78 = variance57.evaluate(doubleArray75);
        double double80 = variance46.evaluate(doubleArray75, 227.3d);
        variance33.incrementAll(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = variance30.evaluate(doubleArray75, 1557016.8402777782d, 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2024039.120370371d + "'", double26 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4048078.240740742d + "'", double27 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        variance1.clear();
        double double24 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double24 = secondMoment7.evaluate(doubleArray18, (int) (short) 0, 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean26 = variance25.isBiasCorrected();
        variance25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.setBiasCorrected(false);
        boolean boolean34 = variance29.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean36 = variance29.equals((java.lang.Object) secondMoment35);
        secondMoment35.increment((double) (short) 0);
        secondMoment35.increment((double) 1.0f);
        double double41 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        double double46 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment44);
        secondMoment44.clear();
        secondMoment44.increment((double) 2L);
        double double51 = secondMoment44.getResult();
        secondMoment44.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        secondMoment44.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance60.increment((-1.0d));
        variance60.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean68 = variance66.equals((java.lang.Object) (short) 10);
        boolean boolean69 = variance60.equals((java.lang.Object) variance66);
        long long70 = variance66.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean74 = variance72.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray83 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double84 = variance76.evaluate(doubleArray83);
        double double85 = variance72.evaluate(doubleArray83);
        double double86 = variance66.evaluate(doubleArray83);
        double double88 = variance58.evaluate(doubleArray83, (double) 1.0f);
        double double89 = secondMoment35.evaluate(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            variance25.incrementAll(doubleArray83, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.5d + "'", double41 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2136.8055555555557d + "'", double84 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.166666666667d + "'", double85 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2564.166666666667d + "'", double86 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2564.1666666666665d + "'", double88 == 2564.1666666666665d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 12820.833333333334d + "'", double89 == 12820.833333333334d);
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double[] doubleArray26 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double27 = variance9.evaluate(doubleArray26);
        double double28 = secondMoment0.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        double double32 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        secondMoment30.clear();
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long38 = secondMoment36.getN();
        secondMoment36.clear();
        secondMoment36.clear();
        secondMoment36.increment((double) (byte) 100);
        secondMoment36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double[] doubleArray62 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double63 = variance45.evaluate(doubleArray62);
        double double64 = secondMoment36.evaluate(doubleArray62);
        double double67 = secondMoment30.evaluate(doubleArray62, 0, (int) (short) 1);
        double double68 = secondMoment0.evaluate(doubleArray62);
        secondMoment0.clear();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2024039.120370371d + "'", double27 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4048078.240740742d + "'", double28 == 4048078.240740742d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.120370371d + "'", double63 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4048078.240740742d + "'", double64 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4048078.240740742d + "'", double68 == 4048078.240740742d);
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment(10.0d);
        long long17 = variance1.getN();
        long long18 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long22 = secondMoment20.getN();
        secondMoment20.clear();
        secondMoment20.clear();
        double double25 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean30 = variance28.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        double double44 = variance34.evaluate(doubleArray41, (double) 10L);
        double double45 = variance32.evaluate(doubleArray41);
        double[] doubleArray49 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double50 = variance32.evaluate(doubleArray49);
        double double52 = variance28.evaluate(doubleArray49, (double) (byte) 1);
        variance28.clear();
        double double54 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        double double66 = variance56.evaluate(doubleArray63, (double) 10L);
        long long67 = variance56.getN();
        variance56.increment((double) 0L);
        double[] doubleArray71 = new double[] { 10.0d };
        variance56.incrementAll(doubleArray71);
        double double73 = variance28.evaluate(doubleArray71);
        variance26.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray71, (int) (byte) 1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2024039.120370371d + "'", double50 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2024039.120370371d + "'", double52 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 7L);
        long long5 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray18 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double19 = variance11.evaluate(doubleArray18);
        double double20 = variance7.evaluate(doubleArray18);
        variance7.setBiasCorrected(false);
        variance7.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean34 = variance32.equals((java.lang.Object) (short) 10);
        boolean boolean35 = variance26.equals((java.lang.Object) variance32);
        long long36 = variance32.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean40 = variance38.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray49 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double50 = variance42.evaluate(doubleArray49);
        double double51 = variance38.evaluate(doubleArray49);
        double double52 = variance32.evaluate(doubleArray49);
        double double54 = variance7.evaluate(doubleArray49, 24.5d);
        boolean boolean55 = secondMoment0.equals((java.lang.Object) 24.5d);
        double double56 = secondMoment0.getResult();
        secondMoment0.increment(1349359.4135802984d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2136.8055555555557d + "'", double19 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2564.166666666667d + "'", double20 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2136.8055555555557d + "'", double50 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2564.166666666667d + "'", double51 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2564.166666666667d + "'", double52 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.8055555555557d + "'", double54 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        double double5 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        double[] doubleArray15 = new double[] {};
        double double16 = variance9.evaluate(doubleArray15);
        secondMoment3.incrementAll(doubleArray15);
        secondMoment3.clear();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        double double21 = secondMoment3.getResult();
        long long22 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.clear();
        secondMoment24.increment((double) (byte) 100);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        secondMoment24.clear();
        secondMoment24.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        secondMoment24.increment((double) (short) 1);
        secondMoment24.increment(227.3d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance46.evaluate(doubleArray58);
        double double64 = variance42.evaluate(doubleArray58);
        long long65 = variance42.getN();
        variance42.increment(50.0d);
        long long68 = variance42.getN();
        variance42.increment(12820.833333333334d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment71);
        long long73 = secondMoment71.getN();
        secondMoment71.clear();
        double double75 = secondMoment71.getResult();
        secondMoment71.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment71);
        double[] doubleArray79 = new double[] {};
        double double80 = secondMoment71.evaluate(doubleArray79);
        double double81 = variance42.evaluate(doubleArray79);
        boolean boolean82 = secondMoment24.equals((java.lang.Object) doubleArray79);
        double double83 = variance23.evaluate(doubleArray79);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance5.evaluate(doubleArray17);
        double double23 = variance1.evaluate(doubleArray17);
        long long24 = variance1.getN();
        variance1.increment(50.0d);
        boolean boolean27 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray48 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double49 = variance41.evaluate(doubleArray48);
        double double50 = variance34.evaluate(doubleArray48);
        double double51 = secondMoment29.evaluate(doubleArray48);
        double double53 = variance1.evaluate(doubleArray48, 2310.1428571428573d);
        variance1.increment(0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.8055555555557d + "'", double49 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2564.166666666667d + "'", double50 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12820.833333333334d + "'", double51 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2564.1666666679084d + "'", double53 == 2564.1666666679084d);
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean4 = variance2.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance6.increment((-1.0d));
        variance6.setBiasCorrected(false);
        boolean boolean11 = variance6.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean13 = variance6.equals((java.lang.Object) secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        double[] doubleArray23 = new double[] { 0L, (byte) 10 };
        double double24 = variance19.evaluate(doubleArray23);
        double double26 = variance16.evaluate(doubleArray23, (double) 10L);
        double double29 = secondMoment12.evaluate(doubleArray23, (int) (short) 0, 1);
        double double30 = variance2.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        secondMoment31.clear();
        secondMoment31.increment((double) (byte) 100);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        secondMoment31.clear();
        secondMoment31.increment(2310.1428571428573d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        boolean boolean44 = variance2.equals((java.lang.Object) secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double57 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double60 = variance59.getResult();
        double[] doubleArray63 = new double[] { 0L, (byte) 10 };
        double double64 = variance59.evaluate(doubleArray63);
        double double66 = variance56.evaluate(doubleArray63, (double) 10L);
        double double67 = variance54.evaluate(doubleArray63);
        double double68 = variance49.evaluate(doubleArray63);
        variance47.incrementAll(doubleArray63);
        variance45.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.increment((-1.0d));
        variance73.setBiasCorrected(false);
        boolean boolean78 = variance73.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean80 = variance73.equals((java.lang.Object) secondMoment79);
        secondMoment79.increment((double) (short) 0);
        secondMoment79.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance86 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray93 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double94 = variance86.evaluate(doubleArray93);
        double double95 = secondMoment79.evaluate(doubleArray93);
        secondMoment71.incrementAll(doubleArray93);
        double double97 = variance45.evaluate(doubleArray93);
        secondMoment31.incrementAll(doubleArray93);
        org.apache.commons.math.stat.descriptive.moment.Variance variance99 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment31);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2136.8055555555557d + "'", double94 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 12820.833333333334d + "'", double95 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2564.166666666667d + "'", double97 == 2564.166666666667d);
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        variance8.increment((double) 100L);
        boolean boolean15 = variance8.isBiasCorrected();
        boolean boolean16 = variance8.isBiasCorrected();
        boolean boolean17 = secondMoment1.equals((java.lang.Object) boolean16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double19 = variance18.getResult();
        variance18.clear();
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        secondMoment29.clear();
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        long long37 = variance35.getN();
        long long38 = variance35.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        double[] doubleArray44 = new double[] { 0L, (byte) 10 };
        double double45 = variance40.evaluate(doubleArray44);
        double double47 = variance35.evaluate(doubleArray44, (double) (short) -1);
        double double48 = secondMoment29.evaluate(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            variance18.incrementAll(doubleArray44, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        secondMoment8.clear();
        double double28 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.clear();
        variance31.increment((double) (short) -1);
        boolean boolean35 = variance31.isBiasCorrected();
        variance31.increment((double) 6L);
        long long38 = variance31.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance40.increment((-1.0d));
        variance40.setBiasCorrected(false);
        boolean boolean45 = variance40.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean47 = variance40.equals((java.lang.Object) secondMoment46);
        variance40.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean53 = variance51.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray62 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double63 = variance55.evaluate(doubleArray62);
        double double64 = variance51.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        double double82 = variance69.evaluate(doubleArray78);
        double double83 = variance66.evaluate(doubleArray78);
        double double84 = variance51.evaluate(doubleArray78);
        double double86 = variance40.evaluate(doubleArray78, (double) 0L);
        double double87 = variance31.evaluate(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment8.incrementAll(doubleArray78, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2136.8055555555557d + "'", double63 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2564.166666666667d + "'", double64 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 25.0d + "'", double86 == 25.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.clear();
        secondMoment7.clear();
        long long18 = secondMoment7.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.clear();
        secondMoment5.increment((double) (byte) 100);
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment5);
        variance14.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance19.increment((-1.0d));
        variance19.setBiasCorrected(false);
        boolean boolean24 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean26 = variance19.equals((java.lang.Object) secondMoment25);
        double double27 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        double[] doubleArray36 = new double[] { 0L, (byte) 10 };
        double double37 = variance32.evaluate(doubleArray36);
        double double39 = variance29.evaluate(doubleArray36, (double) 10L);
        double double42 = secondMoment25.evaluate(doubleArray36, (int) (short) 0, 1);
        long long43 = secondMoment25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        long long57 = variance46.getN();
        variance46.increment((double) 0L);
        double[] doubleArray61 = new double[] { 10.0d };
        variance46.incrementAll(doubleArray61);
        double double63 = variance44.evaluate(doubleArray61);
        variance14.incrementAll(doubleArray61);
        secondMoment0.incrementAll(doubleArray61);
        long long66 = secondMoment0.getN();
        secondMoment0.increment((double) 100);
        java.lang.Class<?> wildcardClass69 = secondMoment0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.increment((double) (byte) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance10.increment((double) 2L);
        double double13 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        long long17 = secondMoment15.getN();
        secondMoment15.clear();
        double double19 = secondMoment15.getResult();
        secondMoment15.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double[] doubleArray23 = new double[] {};
        double double24 = secondMoment15.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance31.evaluate(doubleArray43);
        double double49 = variance27.evaluate(doubleArray43);
        double double50 = variance25.evaluate(doubleArray43);
        double double51 = variance10.evaluate(doubleArray43);
        double double52 = variance10.getResult();
        variance10.increment(9.536988751020409E7d);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean16 = variance14.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray25 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double26 = variance18.evaluate(doubleArray25);
        double double27 = variance14.evaluate(doubleArray25);
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean32 = variance30.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray41 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double42 = variance34.evaluate(doubleArray41);
        double double43 = variance30.evaluate(doubleArray41);
        variance14.incrementAll(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = secondMoment1.evaluate(doubleArray41, (int) 'a', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2136.8055555555557d + "'", double26 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2564.166666666667d + "'", double27 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2136.8055555555557d + "'", double42 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2564.166666666667d + "'", double43 == 2564.166666666667d);
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((-1.0d));
        variance7.setBiasCorrected(false);
        boolean boolean12 = variance7.isBiasCorrected();
        double[] doubleArray13 = new double[] {};
        double double14 = variance7.evaluate(doubleArray13);
        secondMoment1.incrementAll(doubleArray13);
        secondMoment1.increment(1349359.4135802984d);
        double double18 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance21.increment((-1.0d));
        variance21.setBiasCorrected(false);
        boolean boolean26 = variance21.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        double double44 = secondMoment27.evaluate(doubleArray38, (int) (short) 0, 1);
        long long45 = secondMoment27.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        double[] doubleArray55 = new double[] { 0L, (byte) 10 };
        double double56 = variance51.evaluate(doubleArray55);
        double double58 = variance48.evaluate(doubleArray55, (double) 10L);
        long long59 = variance48.getN();
        variance48.increment((double) 0L);
        double[] doubleArray63 = new double[] { 10.0d };
        variance48.incrementAll(doubleArray63);
        double double65 = variance46.evaluate(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray63, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        // The following exception was thrown during execution in test generation
        try {
            long long3 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        double double8 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((-1.0d));
        variance10.setBiasCorrected(false);
        boolean boolean15 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment16);
        double double18 = secondMoment16.getResult();
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        double double31 = variance21.evaluate(doubleArray28, (double) 10L);
        long long32 = variance21.getN();
        variance21.increment((double) 0L);
        double[] doubleArray36 = new double[] { 10.0d };
        variance21.incrementAll(doubleArray36);
        secondMoment16.incrementAll(doubleArray36);
        double double40 = variance6.evaluate(doubleArray36, (double) 100.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        boolean boolean45 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.setBiasCorrected(false);
        variance47.increment((double) 100L);
        boolean boolean54 = variance47.isBiasCorrected();
        boolean boolean55 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray64 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double65 = variance57.evaluate(doubleArray64);
        double double67 = variance47.evaluate(doubleArray64, (double) (byte) 10);
        double double68 = variance42.evaluate(doubleArray64);
        double double69 = variance6.evaluate(doubleArray64);
        variance6.increment((double) (short) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2136.8055555555557d + "'", double67 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2564.166666666667d + "'", double68 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2564.166666666667d + "'", double69 == 2564.166666666667d);
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        variance17.clear();
        variance17.increment(2024039.1203703713d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        long long28 = secondMoment26.getN();
        secondMoment26.clear();
        secondMoment26.increment(10.0d);
        double double32 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double[] doubleArray51 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double52 = variance34.evaluate(doubleArray51);
        double double53 = secondMoment26.evaluate(doubleArray51);
        long long54 = secondMoment26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        long long59 = variance56.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance64.increment((-1.0d));
        variance64.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        double[] doubleArray78 = new double[] { 0L, (byte) 10 };
        double double79 = variance74.evaluate(doubleArray78);
        double double81 = variance71.evaluate(doubleArray78, (double) 10L);
        double double82 = variance69.evaluate(doubleArray78);
        double double83 = variance64.evaluate(doubleArray78);
        variance62.incrementAll(doubleArray78);
        variance60.incrementAll(doubleArray78);
        double double86 = variance56.evaluate(doubleArray78);
        double double89 = secondMoment26.evaluate(doubleArray78, (int) (byte) 0, 1);
        variance17.incrementAll(doubleArray78);
        variance17.increment(2024039.1203703713d);
        boolean boolean93 = variance14.equals((java.lang.Object) 2024039.1203703713d);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2024039.120370371d + "'", double52 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 4048078.240740742d + "'", double53 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3L + "'", long54 == 3L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray12 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double13 = variance5.evaluate(doubleArray12);
        double double14 = variance1.evaluate(doubleArray12);
        long long15 = variance1.getN();
        variance1.clear();
        variance1.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2136.8055555555557d + "'", double13 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2564.166666666667d + "'", double14 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        double double24 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        double double39 = secondMoment22.evaluate(doubleArray33, (int) (short) 0, 1);
        long long40 = secondMoment22.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double double44 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray61 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double62 = variance54.evaluate(doubleArray61);
        double double63 = variance47.evaluate(doubleArray61);
        double double64 = secondMoment42.evaluate(doubleArray61);
        double double65 = secondMoment22.evaluate(doubleArray61);
        double double66 = variance1.evaluate(doubleArray61);
        variance1.increment(25.0d);
        long long69 = variance1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2136.8055555555557d + "'", double62 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2564.166666666667d + "'", double63 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 12820.833333333334d + "'", double64 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 12820.833333333334d + "'", double65 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2564.166666666667d + "'", double66 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) 10.0f);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long18 = secondMoment16.getN();
        secondMoment16.clear();
        secondMoment16.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        variance22.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        variance30.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean36 = variance34.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double47 = variance34.evaluate(doubleArray45);
        double double49 = variance30.evaluate(doubleArray45, (double) 1.0f);
        double double50 = variance22.evaluate(doubleArray45);
        double double51 = variance15.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean60 = variance53.equals((java.lang.Object) secondMoment59);
        double double61 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double73 = variance63.evaluate(doubleArray70, (double) 10L);
        double double76 = secondMoment59.evaluate(doubleArray70, (int) (short) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = variance15.evaluate(doubleArray70, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2564.166666666667d + "'", double47 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2136.805555555555d + "'", double49 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2564.166666666667d + "'", double50 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2564.166666666667d + "'", double51 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray36 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double37 = variance29.evaluate(doubleArray36);
        double double38 = variance22.evaluate(doubleArray36);
        double double39 = variance1.evaluate(doubleArray36);
        java.lang.Class<?> wildcardClass40 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2136.8055555555557d + "'", double37 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2564.166666666667d + "'", double38 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2564.166666666667d + "'", double39 == 2564.166666666667d);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray14 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double15 = variance7.evaluate(doubleArray14);
        variance1.incrementAll(doubleArray14);
        long long17 = variance1.getN();
        variance1.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2136.8055555555557d + "'", double15 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7L + "'", long17 == 7L);
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        double double11 = secondMoment1.getResult();
        secondMoment1.clear();
        double double13 = secondMoment1.getResult();
        long long14 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        secondMoment23.increment((double) (short) 0);
        secondMoment23.increment((double) 1.0f);
        double double29 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        long long35 = secondMoment33.getN();
        secondMoment33.clear();
        secondMoment33.clear();
        secondMoment33.increment((double) (byte) 100);
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment33);
        variance42.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.setBiasCorrected(false);
        boolean boolean52 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean54 = variance47.equals((java.lang.Object) secondMoment53);
        double double55 = secondMoment53.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double70 = secondMoment53.evaluate(doubleArray64, (int) (short) 0, 1);
        long long71 = secondMoment53.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        long long85 = variance74.getN();
        variance74.increment((double) 0L);
        double[] doubleArray89 = new double[] { 10.0d };
        variance74.incrementAll(doubleArray89);
        double double91 = variance72.evaluate(doubleArray89);
        variance42.incrementAll(doubleArray89);
        double double95 = variance30.evaluate(doubleArray89, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            variance15.incrementAll(doubleArray89, 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        long long4 = secondMoment0.getN();
        double double5 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double20 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        double double25 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        secondMoment23.incrementAll(doubleArray33);
        double double36 = variance21.evaluate(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = variance1.evaluate(doubleArray33, (double) (-1), (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 25.0d + "'", double36 == 25.0d);
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 10L);
        boolean boolean4 = variance1.isBiasCorrected();
        double double5 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        double[] doubleArray20 = new double[] {};
        double double21 = variance14.evaluate(doubleArray20);
        secondMoment8.incrementAll(doubleArray20);
        secondMoment8.clear();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        double double29 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        secondMoment27.clear();
        secondMoment27.increment((double) 2L);
        double double34 = secondMoment27.getResult();
        secondMoment27.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        secondMoment37.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        variance43.setBiasCorrected(false);
        double double46 = variance43.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        variance54.increment((double) 100L);
        variance54.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        double[] doubleArray84 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double85 = variance67.evaluate(doubleArray84);
        variance54.incrementAll(doubleArray84);
        double double87 = variance52.evaluate(doubleArray84);
        variance43.incrementAll(doubleArray84);
        secondMoment27.incrementAll(doubleArray84);
        double double92 = variance25.evaluate(doubleArray84, 0, (int) (short) 1);
        double double93 = variance1.evaluate(doubleArray84);
        variance1.clear();
        long long95 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2024039.120370371d + "'", double85 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2024039.120370371d + "'", double87 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1349359.4135802474d + "'", double93 == 1349359.4135802474d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        double double7 = secondMoment1.getResult();
        secondMoment1.increment((double) 100.0f);
        secondMoment1.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double14 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.increment((-1.0d));
        variance17.setBiasCorrected(false);
        boolean boolean22 = variance17.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment23);
        variance17.increment((double) 100L);
        variance17.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double33 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        double[] doubleArray39 = new double[] { 0L, (byte) 10 };
        double double40 = variance35.evaluate(doubleArray39);
        double double42 = variance32.evaluate(doubleArray39, (double) 10L);
        double double43 = variance30.evaluate(doubleArray39);
        double[] doubleArray47 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double48 = variance30.evaluate(doubleArray47);
        variance17.incrementAll(doubleArray47);
        variance15.incrementAll(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray47, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.0d + "'", double40 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2024039.120370371d + "'", double48 == 2024039.120370371d);
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        double[] doubleArray12 = new double[] { 0L, (byte) 10 };
        double double13 = variance8.evaluate(doubleArray12);
        secondMoment2.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long16 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double18 = secondMoment2.getResult();
        secondMoment2.clear();
        secondMoment2.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        double double21 = variance11.evaluate(doubleArray18, (double) 10L);
        double double22 = variance9.evaluate(doubleArray18);
        double double23 = variance4.evaluate(doubleArray18);
        variance2.incrementAll(doubleArray18);
        variance0.incrementAll(doubleArray18);
        variance0.clear();
        long long27 = variance0.getN();
        variance0.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double44 = variance31.evaluate(doubleArray40);
        variance31.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean50 = variance48.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray59 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double60 = variance52.evaluate(doubleArray59);
        double double61 = variance48.evaluate(doubleArray59);
        variance31.incrementAll(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = variance0.evaluate(doubleArray59, 227.2998046875d, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 50.0d + "'", double23 == 50.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2136.8055555555557d + "'", double60 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2564.166666666667d + "'", double61 == 2564.166666666667d);
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean20 = variance13.equals((java.lang.Object) secondMoment19);
        double double21 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double36 = secondMoment19.evaluate(doubleArray30, (int) (short) 0, 1);
        long long37 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        long long51 = variance40.getN();
        variance40.increment((double) 0L);
        double[] doubleArray55 = new double[] { 10.0d };
        variance40.incrementAll(doubleArray55);
        double double57 = variance38.evaluate(doubleArray55);
        double double61 = variance1.evaluate(doubleArray55, (double) 1L, 0, (int) (byte) 1);
        long long62 = variance1.getN();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        variance1.increment((double) (-1.0f));
        variance1.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double15 = secondMoment13.getResult();
        secondMoment13.increment((double) 0.0f);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        long long23 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = variance33.evaluate(doubleArray42);
        double double47 = variance28.evaluate(doubleArray42);
        variance26.incrementAll(doubleArray42);
        variance24.incrementAll(doubleArray42);
        double double50 = variance20.evaluate(doubleArray42);
        long long51 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        double double65 = secondMoment63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double80 = secondMoment63.evaluate(doubleArray74, (int) (short) 0, 1);
        double double81 = variance53.evaluate(doubleArray74);
        double double83 = variance20.evaluate(doubleArray74, (double) 2L);
        secondMoment13.incrementAll(doubleArray74, 1, (int) (short) 1);
        double double87 = variance1.evaluate(doubleArray74);
        variance1.increment((double) '#');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 50.0d + "'", double83 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 25.0d + "'", double87 == 25.0d);
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        double double19 = variance9.evaluate(doubleArray16, (double) 10L);
        double double20 = variance7.evaluate(doubleArray16);
        double[] doubleArray24 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double25 = variance7.evaluate(doubleArray24);
        double double28 = variance1.evaluate(doubleArray24, 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double double32 = variance30.getResult();
        double double33 = variance30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((-1.0d));
        variance35.setBiasCorrected(false);
        boolean boolean40 = variance35.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment41);
        double double43 = secondMoment41.getResult();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        secondMoment41.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance49.increment((-1.0d));
        variance49.setBiasCorrected(false);
        boolean boolean54 = variance49.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean56 = variance49.equals((java.lang.Object) secondMoment55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double72 = variance49.evaluate(doubleArray65, (double) (short) 0, 0, (int) (short) 0);
        double double75 = secondMoment41.evaluate(doubleArray65, 0, 0);
        variance30.incrementAll(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = variance1.evaluate(doubleArray65, (int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.clear();
        double double8 = variance6.getResult();
        long long9 = variance6.getN();
        java.lang.Class<?> wildcardClass10 = variance6.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        double double18 = variance5.evaluate(doubleArray14);
        double[] doubleArray22 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double23 = variance5.evaluate(doubleArray22);
        double double25 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment(10.0d);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        double double33 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        double double52 = variance35.evaluate(doubleArray47);
        secondMoment29.incrementAll(doubleArray47, 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean60 = variance58.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance58.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance73.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double79 = variance78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double82 = variance81.getResult();
        double[] doubleArray85 = new double[] { 0L, (byte) 10 };
        double double86 = variance81.evaluate(doubleArray85);
        double double88 = variance78.evaluate(doubleArray85, (double) 10L);
        double double89 = variance76.evaluate(doubleArray85);
        double double90 = variance73.evaluate(doubleArray85);
        double double91 = variance58.evaluate(doubleArray85);
        double double92 = secondMoment29.evaluate(doubleArray85);
        variance1.incrementAll(doubleArray85);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2024039.120370371d + "'", double23 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2564.166666666667d + "'", double71 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long10 = secondMoment8.getN();
        secondMoment8.clear();
        secondMoment8.clear();
        secondMoment8.increment((double) (byte) 100);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        double double29 = variance19.evaluate(doubleArray26, (double) 10L);
        double double30 = variance17.evaluate(doubleArray26);
        double[] doubleArray34 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double35 = variance17.evaluate(doubleArray34);
        double double36 = secondMoment8.evaluate(doubleArray34);
        double double39 = secondMoment2.evaluate(doubleArray34, 0, (int) (short) 1);
        long long40 = secondMoment2.getN();
        secondMoment2.increment(2564.166666666667d);
        double double43 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        long long50 = variance47.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double double74 = variance55.evaluate(doubleArray69);
        variance53.incrementAll(doubleArray69);
        variance51.incrementAll(doubleArray69);
        double double77 = variance47.evaluate(doubleArray69);
        secondMoment2.incrementAll(doubleArray69);
        secondMoment2.increment(1988.7755102040815d);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2024039.120370371d + "'", double35 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4048078.240740742d + "'", double36 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        boolean boolean23 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean25 = variance18.equals((java.lang.Object) secondMoment24);
        long long26 = secondMoment24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance28.increment((-1.0d));
        variance28.setBiasCorrected(false);
        variance28.increment((double) 100L);
        boolean boolean35 = variance28.isBiasCorrected();
        boolean boolean36 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray45 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double46 = variance38.evaluate(doubleArray45);
        double double48 = variance28.evaluate(doubleArray45, (double) (byte) 10);
        secondMoment24.incrementAll(doubleArray45);
        secondMoment8.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.increment(4.5d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2136.8055555555557d + "'", double46 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2136.8055555555557d + "'", double48 == 2136.8055555555557d);
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment(100.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        double[] doubleArray16 = new double[] { 10.0d };
        variance1.incrementAll(doubleArray16);
        variance1.clear();
        variance1.setBiasCorrected(true);
        boolean boolean21 = variance1.isBiasCorrected();
        long long22 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        double[] doubleArray30 = new double[] {};
        double double31 = variance24.evaluate(doubleArray30);
        long long32 = variance24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        variance34.increment((double) (short) -1);
        variance34.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long43 = secondMoment41.getN();
        secondMoment41.clear();
        double double45 = secondMoment41.getResult();
        secondMoment41.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        double[] doubleArray49 = new double[] {};
        double double50 = secondMoment41.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double double74 = variance57.evaluate(doubleArray69);
        double double75 = variance53.evaluate(doubleArray69);
        double double76 = variance51.evaluate(doubleArray69);
        variance34.incrementAll(doubleArray69);
        double double79 = variance24.evaluate(doubleArray69, 26761.69230769231d);
        double double80 = variance24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double88 = variance24.evaluate(doubleArray86);
        double double89 = variance1.evaluate(doubleArray86);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 25.00000011920929d + "'", double79 == 25.00000011920929d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 25.0d + "'", double88 == 25.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment(50.0009765625d);
        long long11 = secondMoment7.getN();
        long long12 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long14 = secondMoment7.getN();
        secondMoment7.clear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        secondMoment8.clear();
        secondMoment8.increment(0.0d);
        secondMoment8.increment((double) 'a');
        secondMoment8.clear();
        secondMoment8.clear();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        double double39 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        double double44 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment42);
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double49 = variance48.getResult();
        double[] doubleArray52 = new double[] { 0L, (byte) 10 };
        double double53 = variance48.evaluate(doubleArray52);
        secondMoment42.incrementAll(doubleArray52);
        double double55 = variance40.evaluate(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = secondMoment8.evaluate(doubleArray52, (int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 50.0d + "'", double53 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 25.0d + "'", double55 == 25.0d);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        long long4 = secondMoment2.getN();
        secondMoment2.clear();
        secondMoment2.increment((double) '4');
        long long8 = secondMoment2.getN();
        long long9 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance11.clear();
        variance11.clear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.increment((double) 0L);
        double[] doubleArray16 = new double[] { 10.0d };
        variance1.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        variance19.increment((double) (short) -1);
        double double23 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double31 = variance19.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        double double41 = secondMoment39.getResult();
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        secondMoment39.increment((double) 10.0f);
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        java.lang.Object obj48 = null;
        boolean boolean49 = variance47.equals(obj48);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double51 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        long long54 = secondMoment52.getN();
        secondMoment52.clear();
        secondMoment52.clear();
        secondMoment52.increment((double) (byte) 100);
        long long59 = secondMoment52.getN();
        double[] doubleArray61 = new double[] { 2024039.1203703713d };
        double double62 = secondMoment52.evaluate(doubleArray61);
        secondMoment50.incrementAll(doubleArray61);
        variance47.incrementAll(doubleArray61);
        variance19.incrementAll(doubleArray61);
        double double68 = variance1.evaluate(doubleArray61, 1, 0);
        variance1.clear();
        variance1.increment((-1.0d));
        variance1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment((double) 0.0f);
        boolean boolean17 = variance1.isBiasCorrected();
        long long18 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.setBiasCorrected(false);
        boolean boolean25 = variance20.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean27 = variance20.equals((java.lang.Object) secondMoment26);
        secondMoment26.increment((double) (short) 0);
        secondMoment26.increment((double) 1.0f);
        double double32 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        boolean boolean35 = variance1.equals((java.lang.Object) variance34);
        variance34.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        double double24 = secondMoment8.evaluate(doubleArray22);
        long long25 = secondMoment8.getN();
        long long26 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        variance27.setBiasCorrected(false);
        double double30 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        secondMoment31.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        variance37.clear();
        double double39 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.increment((-1.0d));
        variance41.setBiasCorrected(false);
        boolean boolean46 = variance41.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment47);
        double double49 = secondMoment47.getResult();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double53 = variance52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        double double62 = variance52.evaluate(doubleArray59, (double) 10L);
        long long63 = variance52.getN();
        variance52.increment((double) 0L);
        double[] doubleArray67 = new double[] { 10.0d };
        variance52.incrementAll(doubleArray67);
        secondMoment47.incrementAll(doubleArray67);
        double double71 = variance37.evaluate(doubleArray67, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = variance27.evaluate(doubleArray67, (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 12820.833333333334d + "'", double24 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6L + "'", long25 == 6L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2136.8055555555557d + "'", double30 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        boolean boolean7 = secondMoment1.equals((java.lang.Object) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        variance9.increment((double) (short) -1);
        double double13 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        double double21 = variance9.evaluate(doubleArray19);
        double double22 = variance9.getResult();
        boolean boolean23 = secondMoment1.equals((java.lang.Object) variance9);
        secondMoment1.increment(60.5d);
        java.lang.Class<?> wildcardClass26 = secondMoment1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        variance1.increment(10.0d);
        double double17 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        long long21 = secondMoment19.getN();
        secondMoment19.clear();
        secondMoment19.clear();
        secondMoment19.increment((double) (byte) 100);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        double double38 = variance32.getResult();
        variance32.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.increment((-1.0d));
        variance42.setBiasCorrected(false);
        boolean boolean47 = variance42.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean49 = variance42.equals((java.lang.Object) secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double65 = variance42.evaluate(doubleArray58, (double) (short) 0, 0, (int) (short) 0);
        double double66 = variance32.evaluate(doubleArray58);
        double double67 = variance30.evaluate(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray58, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        long long16 = secondMoment1.getN();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        double double31 = variance21.evaluate(doubleArray28, (double) 10L);
        double double32 = variance19.evaluate(doubleArray28);
        variance19.increment((double) 0.0f);
        boolean boolean35 = variance19.isBiasCorrected();
        long long36 = variance19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance38.increment((-1.0d));
        variance38.setBiasCorrected(false);
        boolean boolean43 = variance38.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean45 = variance38.equals((java.lang.Object) secondMoment44);
        secondMoment44.increment((double) (short) 0);
        secondMoment44.increment((double) 1.0f);
        double double50 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        boolean boolean53 = variance19.equals((java.lang.Object) variance52);
        double[] doubleArray54 = new double[] {};
        double double55 = variance52.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean65 = variance63.equals((java.lang.Object) (short) 10);
        boolean boolean66 = variance57.equals((java.lang.Object) variance63);
        long long67 = variance63.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean71 = variance69.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray80 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double81 = variance73.evaluate(doubleArray80);
        double double82 = variance69.evaluate(doubleArray80);
        double double83 = variance63.evaluate(doubleArray80);
        double double84 = variance52.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = secondMoment1.evaluate(doubleArray80, (int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2136.8055555555557d + "'", double81 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2564.166666666667d + "'", double82 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2564.166666666667d + "'", double83 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((-1.0d));
        variance4.setBiasCorrected(false);
        boolean boolean9 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean11 = variance4.equals((java.lang.Object) secondMoment10);
        secondMoment10.increment((double) (short) 0);
        secondMoment10.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = secondMoment10.evaluate(doubleArray24);
        long long27 = secondMoment10.getN();
        long long28 = secondMoment10.getN();
        secondMoment10.clear();
        double double30 = secondMoment10.getResult();
        secondMoment10.clear();
        boolean boolean32 = secondMoment0.equals((java.lang.Object) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        double[] doubleArray48 = new double[] { 0L, (byte) 10 };
        double double49 = variance44.evaluate(doubleArray48);
        double double51 = variance41.evaluate(doubleArray48, (double) 10L);
        double double52 = variance34.evaluate(doubleArray48);
        variance34.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray63 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double64 = variance56.evaluate(doubleArray63);
        double double65 = variance34.evaluate(doubleArray63);
        java.lang.Class<?> wildcardClass66 = doubleArray63.getClass();
        boolean boolean67 = secondMoment10.equals((java.lang.Object) wildcardClass66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        secondMoment10.increment((double) 3L);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 12820.833333333334d + "'", double26 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 25.0d + "'", double52 == 25.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2136.8055555555557d + "'", double64 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2136.8055555555557d + "'", double65 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        secondMoment30.increment((double) (short) 0);
        secondMoment30.increment((double) 1.0f);
        double double36 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        double double38 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        long long40 = variance39.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        long long44 = variance42.getN();
        variance42.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        double[] doubleArray62 = new double[] { 0L, (byte) 10 };
        double double63 = variance58.evaluate(doubleArray62);
        double double65 = variance55.evaluate(doubleArray62, (double) 10L);
        double double66 = variance48.evaluate(doubleArray62);
        variance42.incrementAll(doubleArray62);
        variance39.incrementAll(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = variance1.evaluate(doubleArray62, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.5d + "'", double36 == 0.5d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.5d + "'", double38 == 0.5d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2L + "'", long40 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 25.0d + "'", double66 == 25.0d);
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray8 = new double[] {};
        double double9 = secondMoment0.evaluate(doubleArray8);
        double double10 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        secondMoment0.clear();
        long long15 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double20 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        secondMoment18.incrementAll(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        secondMoment18.clear();
        long long33 = secondMoment18.getN();
        double double34 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long38 = secondMoment36.getN();
        secondMoment36.clear();
        secondMoment36.increment(10.0d);
        double double42 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        double double57 = variance44.evaluate(doubleArray53);
        double[] doubleArray61 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double62 = variance44.evaluate(doubleArray61);
        double double63 = secondMoment36.evaluate(doubleArray61);
        long long64 = secondMoment36.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        long long67 = secondMoment65.getN();
        secondMoment65.clear();
        double double69 = secondMoment65.getResult();
        secondMoment65.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance74.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double89 = variance79.evaluate(doubleArray86, (double) 10L);
        double double90 = variance77.evaluate(doubleArray86);
        double double91 = variance74.evaluate(doubleArray86);
        variance72.incrementAll(doubleArray86);
        secondMoment36.incrementAll(doubleArray86);
        double double94 = secondMoment18.evaluate(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = secondMoment0.evaluate(doubleArray86, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2024039.120370371d + "'", double62 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4048078.240740742d + "'", double63 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3L + "'", long64 == 3L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 50.0d + "'", double94 == 50.0d);
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long6 = variance5.getN();
        variance5.increment(10.0d);
        variance5.clear();
        boolean boolean10 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        long long14 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        double double24 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        double double30 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment28);
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance34.increment((-1.0d));
        variance34.setBiasCorrected(false);
        boolean boolean39 = variance34.isBiasCorrected();
        double[] doubleArray40 = new double[] {};
        double double41 = variance34.evaluate(doubleArray40);
        secondMoment28.incrementAll(doubleArray40);
        double double43 = variance26.evaluate(doubleArray40);
        variance26.increment(2564.1666666666665d);
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        secondMoment47.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        variance53.clear();
        variance53.clear();
        boolean boolean56 = variance53.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean60 = variance58.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray69 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double70 = variance62.evaluate(doubleArray69);
        double double71 = variance58.evaluate(doubleArray69);
        variance53.incrementAll(doubleArray69);
        double double73 = variance26.evaluate(doubleArray69);
        double double74 = variance12.evaluate(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            variance5.incrementAll(doubleArray69, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2136.8055555555557d + "'", double70 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2564.166666666667d + "'", double71 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2564.166666666667d + "'", double73 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2564.166666666667d + "'", double74 == 2564.166666666667d);
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        double double13 = variance1.getResult();
        double double14 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray27 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double28 = variance20.evaluate(doubleArray27);
        double double29 = variance16.evaluate(doubleArray27);
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean34 = variance32.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray43 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double44 = variance36.evaluate(doubleArray43);
        double double45 = variance32.evaluate(doubleArray43);
        variance16.incrementAll(doubleArray43);
        variance16.clear();
        long long48 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double double51 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance54.increment((-1.0d));
        variance54.setBiasCorrected(false);
        boolean boolean59 = variance54.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean61 = variance54.equals((java.lang.Object) secondMoment60);
        variance54.increment((double) 100L);
        variance54.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double70 = variance69.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double73 = variance72.getResult();
        double[] doubleArray76 = new double[] { 0L, (byte) 10 };
        double double77 = variance72.evaluate(doubleArray76);
        double double79 = variance69.evaluate(doubleArray76, (double) 10L);
        double double80 = variance67.evaluate(doubleArray76);
        double[] doubleArray84 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double85 = variance67.evaluate(doubleArray84);
        variance54.incrementAll(doubleArray84);
        variance52.incrementAll(doubleArray84);
        double double89 = variance16.evaluate(doubleArray84, (double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance1.evaluate(doubleArray84, 9.536988751020409E7d, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2136.8055555555557d + "'", double28 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2564.166666666667d + "'", double29 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2136.8055555555557d + "'", double44 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2564.166666666667d + "'", double45 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 50.0d + "'", double79 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2024039.120370371d + "'", double85 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2024039.1203703706d + "'", double89 == 2024039.1203703706d);
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance6.increment(4.5d);
        variance6.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass11 = variance6.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        variance1.setBiasCorrected(false);
        boolean boolean15 = variance1.isBiasCorrected();
        long long16 = variance1.getN();
        long long17 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        variance19.increment((double) (short) -1);
        double double23 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double31 = variance19.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance33.increment((-1.0d));
        variance33.setBiasCorrected(false);
        boolean boolean38 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean40 = variance33.equals((java.lang.Object) secondMoment39);
        double double41 = secondMoment39.getResult();
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        secondMoment39.increment((double) 10.0f);
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        java.lang.Object obj48 = null;
        boolean boolean49 = variance47.equals(obj48);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double51 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        long long54 = secondMoment52.getN();
        secondMoment52.clear();
        secondMoment52.clear();
        secondMoment52.increment((double) (byte) 100);
        long long59 = secondMoment52.getN();
        double[] doubleArray61 = new double[] { 2024039.1203703713d };
        double double62 = secondMoment52.evaluate(doubleArray61);
        secondMoment50.incrementAll(doubleArray61);
        variance47.incrementAll(doubleArray61);
        variance19.incrementAll(doubleArray61);
        double double66 = variance1.evaluate(doubleArray61);
        double[] doubleArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        variance1.increment((double) (short) -1);
        boolean boolean5 = variance1.isBiasCorrected();
        variance1.increment((double) 6L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray22 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double23 = variance15.evaluate(doubleArray22);
        variance9.incrementAll(doubleArray22);
        variance1.incrementAll(doubleArray22);
        java.lang.Class<?> wildcardClass26 = doubleArray22.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2136.8055555555557d + "'", double23 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double8 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        secondMoment6.incrementAll(doubleArray16);
        double double19 = variance4.evaluate(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((-1.0d));
        variance22.setBiasCorrected(false);
        boolean boolean27 = variance22.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean29 = variance22.equals((java.lang.Object) secondMoment28);
        secondMoment28.increment((double) (short) 0);
        secondMoment28.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray42 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double43 = variance35.evaluate(doubleArray42);
        double double44 = secondMoment28.evaluate(doubleArray42);
        secondMoment20.incrementAll(doubleArray42);
        variance4.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        long long49 = secondMoment47.getN();
        secondMoment47.clear();
        secondMoment47.increment(10.0d);
        double double53 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double61 = variance60.getResult();
        double[] doubleArray64 = new double[] { 0L, (byte) 10 };
        double double65 = variance60.evaluate(doubleArray64);
        double double67 = variance57.evaluate(doubleArray64, (double) 10L);
        double double68 = variance55.evaluate(doubleArray64);
        double[] doubleArray72 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double73 = variance55.evaluate(doubleArray72);
        double double74 = secondMoment47.evaluate(doubleArray72);
        double double76 = variance4.evaluate(doubleArray72, (double) (short) 100);
        boolean boolean77 = variance4.isBiasCorrected();
        double double78 = variance4.getResult();
        variance4.increment(4684796.354166668d);
        boolean boolean81 = variance4.isBiasCorrected();
        variance4.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 25.0d + "'", double19 == 25.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2136.8055555555557d + "'", double43 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 12820.833333333334d + "'", double44 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2024039.120370371d + "'", double73 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4048078.240740742d + "'", double74 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1349359.4135802472d + "'", double76 == 1349359.4135802472d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        variance33.increment((double) (short) 0);
        boolean boolean36 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double38 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long41 = secondMoment39.getN();
        secondMoment39.clear();
        secondMoment39.clear();
        secondMoment39.increment((double) (byte) 100);
        long long46 = secondMoment39.getN();
        double[] doubleArray48 = new double[] { 2024039.1203703713d };
        double double49 = secondMoment39.evaluate(doubleArray48);
        secondMoment37.incrementAll(doubleArray48);
        double double52 = variance33.evaluate(doubleArray48, 651942.9897959187d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((-1.0d));
        variance58.setBiasCorrected(false);
        boolean boolean63 = variance58.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean65 = variance58.equals((java.lang.Object) secondMoment64);
        double double66 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        double double81 = secondMoment64.evaluate(doubleArray75, (int) (short) 0, 1);
        double double82 = variance54.evaluate(doubleArray75);
        variance33.incrementAll(doubleArray75);
        long long84 = variance33.getN();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 2L + "'", long84 == 2L);
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.setBiasCorrected(false);
        boolean boolean21 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean23 = variance16.equals((java.lang.Object) secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double35 = variance25.evaluate(doubleArray32, (double) 10L);
        double double39 = variance16.evaluate(doubleArray32, (double) (short) 0, 0, (int) (short) 0);
        double double42 = secondMoment8.evaluate(doubleArray32, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        double double44 = secondMoment8.getResult();
        double double45 = secondMoment8.getResult();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray9 = new double[] {};
        double double10 = secondMoment1.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double double34 = variance17.evaluate(doubleArray29);
        double double35 = variance13.evaluate(doubleArray29);
        double double36 = variance11.evaluate(doubleArray29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long39 = secondMoment37.getN();
        secondMoment37.clear();
        secondMoment37.increment(10.0d);
        double double43 = secondMoment37.getResult();
        boolean boolean44 = variance11.equals((java.lang.Object) secondMoment37);
        double double45 = variance11.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = secondMoment9.evaluate(doubleArray23);
        long long26 = secondMoment9.getN();
        long long27 = secondMoment9.getN();
        secondMoment9.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean40 = variance38.equals((java.lang.Object) (short) 10);
        boolean boolean41 = variance32.equals((java.lang.Object) variance38);
        long long42 = variance38.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean46 = variance44.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray55 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double56 = variance48.evaluate(doubleArray55);
        double double57 = variance44.evaluate(doubleArray55);
        double double58 = variance38.evaluate(doubleArray55);
        secondMoment9.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        variance60.setBiasCorrected(false);
        double double63 = variance60.getResult();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2136.8055555555557d + "'", double56 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2564.166666666667d + "'", double57 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2564.166666666667d + "'", double58 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2058.591715976331d + "'", double63 == 2058.591715976331d);
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double5 = variance4.getResult();
        double[] doubleArray8 = new double[] { 0L, (byte) 10 };
        double double9 = variance4.evaluate(doubleArray8);
        double double11 = variance1.evaluate(doubleArray8, (double) 10L);
        long long12 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance14.increment((-1.0d));
        variance14.setBiasCorrected(false);
        boolean boolean19 = variance14.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        double double31 = variance21.evaluate(doubleArray28, (double) 10L);
        double double32 = variance14.evaluate(doubleArray28);
        variance1.incrementAll(doubleArray28, (int) (short) 0, (int) (byte) 1);
        java.lang.Class<?> wildcardClass36 = doubleArray28.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.0d + "'", double9 == 50.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 25.0d + "'", double32 == 25.0d);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double12 = secondMoment7.getResult();
        secondMoment7.increment(2310.1428571428573d);
        secondMoment7.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        long long19 = secondMoment17.getN();
        secondMoment17.clear();
        double double21 = secondMoment17.getResult();
        secondMoment17.increment((double) (short) 0);
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        double double26 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        double[] doubleArray32 = new double[] { 0L, (byte) 10 };
        double double33 = variance28.evaluate(doubleArray32);
        double double34 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance36.increment((-1.0d));
        variance36.setBiasCorrected(false);
        boolean boolean41 = variance36.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        double double45 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment43);
        secondMoment43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        secondMoment43.incrementAll(doubleArray53);
        boolean boolean56 = variance36.equals((java.lang.Object) secondMoment43);
        variance36.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance59.increment((-1.0d));
        variance59.setBiasCorrected(false);
        boolean boolean64 = variance59.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean66 = variance59.equals((java.lang.Object) secondMoment65);
        variance59.increment((double) 100L);
        variance59.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double[] doubleArray89 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double90 = variance72.evaluate(doubleArray89);
        variance59.incrementAll(doubleArray89);
        variance36.incrementAll(doubleArray89);
        double double95 = variance28.evaluate(doubleArray89, (int) (byte) 0, 1);
        double double97 = variance25.evaluate(doubleArray89, 18.666666666666668d);
        double double98 = secondMoment7.evaluate(doubleArray89);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2024039.120370371d + "'", double90 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2024039.1203703706d + "'", double97 == 2024039.1203703706d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 4048078.240740742d + "'", double98 == 4048078.240740742d);
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment(50.0009765625d);
        double double11 = secondMoment7.getResult();
        double double12 = secondMoment7.getResult();
        java.lang.Class<?> wildcardClass13 = secondMoment7.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray8 = new double[] {};
        double double9 = secondMoment0.evaluate(doubleArray8);
        long long10 = secondMoment0.getN();
        double double11 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double19 = variance13.getResult();
        variance13.increment(1349359.4135802474d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double31 = variance23.evaluate(doubleArray30);
        double double32 = variance13.evaluate(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = secondMoment0.evaluate(doubleArray30, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2136.8055555555557d + "'", double31 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2564.166666666667d + "'", double32 == 2564.166666666667d);
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        double double17 = variance1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean21 = variance19.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        double double31 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double34 = variance33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        double[] doubleArray40 = new double[] { 0L, (byte) 10 };
        double double41 = variance36.evaluate(doubleArray40);
        double double43 = variance33.evaluate(doubleArray40, (double) 10L);
        double double46 = secondMoment29.evaluate(doubleArray40, (int) (short) 0, 1);
        double double47 = variance19.evaluate(doubleArray40);
        double double50 = variance1.evaluate(doubleArray40, 0, 0);
        double double51 = variance1.getResult();
        variance1.increment((double) (-1L));
        long long54 = variance1.getN();
        variance1.clear();
        double[] doubleArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double60 = variance1.evaluate(doubleArray56, 1.3655713734911543E12d, (int) '4', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double9 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.clear();
        secondMoment10.increment((double) (byte) 100);
        long long17 = secondMoment10.getN();
        double[] doubleArray19 = new double[] { 2024039.1203703713d };
        double double20 = secondMoment10.evaluate(doubleArray19);
        secondMoment8.incrementAll(doubleArray19);
        double double22 = secondMoment2.evaluate(doubleArray19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long26 = secondMoment24.getN();
        secondMoment24.clear();
        secondMoment24.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        long long32 = secondMoment30.getN();
        secondMoment30.clear();
        double double34 = secondMoment30.getResult();
        secondMoment30.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        double[] doubleArray38 = new double[] {};
        double double39 = secondMoment30.evaluate(doubleArray38);
        secondMoment24.incrementAll(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = variance23.evaluate(doubleArray38, (double) 13L, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        double[] doubleArray11 = new double[] { 0L, (byte) 10 };
        double double12 = variance7.evaluate(doubleArray11);
        secondMoment1.incrementAll(doubleArray11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        long long16 = secondMoment1.getN();
        double double17 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double19 = variance18.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.0d + "'", double12 == 50.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        secondMoment8.increment((double) (short) 0);
        secondMoment8.increment((double) 1.0f);
        double double14 = secondMoment8.getResult();
        long long15 = secondMoment8.getN();
        double double16 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        variance17.clear();
        variance17.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long2 = secondMoment0.getN();
        secondMoment0.clear();
        double double4 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance7.setBiasCorrected(true);
        variance7.increment(25.000000029802322d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((-1.0d));
        variance13.setBiasCorrected(false);
        boolean boolean18 = variance13.isBiasCorrected();
        double[] doubleArray19 = new double[] {};
        double double20 = variance13.evaluate(doubleArray19);
        long long21 = variance13.getN();
        long long22 = variance13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        long long27 = variance24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        double[] doubleArray46 = new double[] { 0L, (byte) 10 };
        double double47 = variance42.evaluate(doubleArray46);
        double double49 = variance39.evaluate(doubleArray46, (double) 10L);
        double double50 = variance37.evaluate(doubleArray46);
        double double51 = variance32.evaluate(doubleArray46);
        variance30.incrementAll(doubleArray46);
        variance28.incrementAll(doubleArray46);
        double double54 = variance24.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        double double58 = secondMoment56.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment56);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment61);
        double double63 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment61);
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        double[] doubleArray71 = new double[] { 0L, (byte) 10 };
        double double72 = variance67.evaluate(doubleArray71);
        secondMoment61.incrementAll(doubleArray71);
        double double74 = variance59.evaluate(doubleArray71);
        double double75 = variance24.evaluate(doubleArray71);
        variance13.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = variance7.evaluate(doubleArray71, 2282968.9911265434d, (int) (short) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 25.0d + "'", double74 == 25.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double15 = secondMoment7.getResult();
        secondMoment7.increment(25.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        boolean boolean40 = variance20.isBiasCorrected();
        double double41 = variance20.getResult();
        double double42 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean52 = variance50.equals((java.lang.Object) (short) 10);
        boolean boolean53 = variance44.equals((java.lang.Object) variance50);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        long long56 = secondMoment54.getN();
        secondMoment54.clear();
        double double58 = secondMoment54.getResult();
        secondMoment54.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.setBiasCorrected(false);
        boolean boolean68 = variance63.isBiasCorrected();
        double[] doubleArray69 = new double[] {};
        double double70 = variance63.evaluate(doubleArray69);
        variance63.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        double[] doubleArray83 = new double[] { 0L, (byte) 10 };
        double double84 = variance79.evaluate(doubleArray83);
        double double86 = variance76.evaluate(doubleArray83, (double) 10L);
        double double87 = variance74.evaluate(doubleArray83);
        variance63.incrementAll(doubleArray83);
        double double89 = variance61.evaluate(doubleArray83);
        double double90 = variance44.evaluate(doubleArray83);
        double double92 = variance20.evaluate(doubleArray83, 100.0d);
        double double93 = secondMoment7.evaluate(doubleArray83);
        java.lang.Class<?> wildcardClass94 = doubleArray83.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 25.0d + "'", double90 == 25.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long6 = variance5.getN();
        boolean boolean7 = variance5.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long18 = secondMoment16.getN();
        secondMoment16.clear();
        secondMoment16.clear();
        secondMoment16.increment((double) (byte) 100);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double[] doubleArray42 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double43 = variance25.evaluate(doubleArray42);
        double double44 = secondMoment16.evaluate(doubleArray42);
        double double47 = secondMoment10.evaluate(doubleArray42, 0, (int) (short) 1);
        long long48 = secondMoment10.getN();
        secondMoment10.increment(2564.166666666667d);
        double double51 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        long long58 = variance55.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance68.evaluate(doubleArray77);
        double double82 = variance63.evaluate(doubleArray77);
        variance61.incrementAll(doubleArray77);
        variance59.incrementAll(doubleArray77);
        double double85 = variance55.evaluate(doubleArray77);
        secondMoment10.incrementAll(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance5.evaluate(doubleArray77, (-1.0d), (int) (byte) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2024039.120370371d + "'", double43 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4048078.240740742d + "'", double44 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        secondMoment5.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        variance11.clear();
        double double13 = variance11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance15.increment((-1.0d));
        variance15.setBiasCorrected(false);
        boolean boolean20 = variance15.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean22 = variance15.equals((java.lang.Object) secondMoment21);
        double double23 = secondMoment21.getResult();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double30 = variance29.getResult();
        double[] doubleArray33 = new double[] { 0L, (byte) 10 };
        double double34 = variance29.evaluate(doubleArray33);
        double double36 = variance26.evaluate(doubleArray33, (double) 10L);
        long long37 = variance26.getN();
        variance26.increment((double) 0L);
        double[] doubleArray41 = new double[] { 10.0d };
        variance26.incrementAll(doubleArray41);
        secondMoment21.incrementAll(doubleArray41);
        double double45 = variance11.evaluate(doubleArray41, (double) 100.0f);
        boolean boolean46 = secondMoment0.equals((java.lang.Object) 100.0f);
        secondMoment0.increment(Double.NaN);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean60 = variance53.equals((java.lang.Object) secondMoment59);
        secondMoment59.increment((double) (short) 0);
        secondMoment59.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray73 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double74 = variance66.evaluate(doubleArray73);
        double double75 = secondMoment59.evaluate(doubleArray73);
        long long76 = secondMoment59.getN();
        long long77 = secondMoment59.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment59);
        secondMoment59.clear();
        secondMoment59.increment(0.0d);
        secondMoment59.increment((double) 'a');
        secondMoment59.clear();
        secondMoment59.clear();
        boolean boolean86 = variance50.equals((java.lang.Object) secondMoment59);
        variance50.increment((double) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2136.8055555555557d + "'", double74 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 12820.833333333334d + "'", double75 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 6L + "'", long76 == 6L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 6L + "'", long77 == 6L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        long long5 = variance1.getN();
        variance1.setBiasCorrected(false);
        double double8 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.clear();
        secondMoment10.increment((double) (byte) 100);
        long long17 = secondMoment10.getN();
        double[] doubleArray19 = new double[] { 2024039.1203703713d };
        double double20 = secondMoment10.evaluate(doubleArray19);
        variance1.incrementAll(doubleArray19);
        java.lang.Class<?> wildcardClass22 = variance1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        secondMoment10.clear();
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long18 = secondMoment16.getN();
        secondMoment16.clear();
        secondMoment16.clear();
        secondMoment16.increment((double) (byte) 100);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double[] doubleArray42 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double43 = variance25.evaluate(doubleArray42);
        double double44 = secondMoment16.evaluate(doubleArray42);
        double double47 = secondMoment10.evaluate(doubleArray42, 0, (int) (short) 1);
        long long48 = secondMoment10.getN();
        secondMoment10.increment(2564.166666666667d);
        double double51 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        long long58 = variance55.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance63.increment((-1.0d));
        variance63.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double74 = variance73.getResult();
        double[] doubleArray77 = new double[] { 0L, (byte) 10 };
        double double78 = variance73.evaluate(doubleArray77);
        double double80 = variance70.evaluate(doubleArray77, (double) 10L);
        double double81 = variance68.evaluate(doubleArray77);
        double double82 = variance63.evaluate(doubleArray77);
        variance61.incrementAll(doubleArray77);
        variance59.incrementAll(doubleArray77);
        double double85 = variance55.evaluate(doubleArray77);
        secondMoment10.incrementAll(doubleArray77);
        secondMoment1.incrementAll(doubleArray77);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2024039.120370371d + "'", double43 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4048078.240740742d + "'", double44 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 50.0d + "'", double80 == 50.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance7.increment((double) (byte) -1);
        long long10 = variance7.getN();
        long long11 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean15 = variance13.equals((java.lang.Object) (short) 10);
        double double16 = variance13.getResult();
        variance13.increment((double) 13L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        double double40 = variance20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double43 = variance42.getResult();
        variance42.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.setBiasCorrected(false);
        boolean boolean52 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean54 = variance47.equals((java.lang.Object) secondMoment53);
        double double55 = secondMoment53.getResult();
        secondMoment53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        double double61 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment59);
        secondMoment59.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance65.increment((-1.0d));
        variance65.setBiasCorrected(false);
        boolean boolean70 = variance65.isBiasCorrected();
        double[] doubleArray71 = new double[] {};
        double double72 = variance65.evaluate(doubleArray71);
        secondMoment59.incrementAll(doubleArray71);
        double double74 = variance57.evaluate(doubleArray71);
        double double75 = variance42.evaluate(doubleArray71);
        double double76 = variance20.evaluate(doubleArray71);
        variance13.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = variance7.evaluate(doubleArray71, (int) 'a', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        variance1.increment((double) 100L);
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.clear();
        double double10 = variance1.getResult();
        double double11 = variance1.getResult();
        java.lang.Class<?> wildcardClass12 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        double[] doubleArray14 = new double[] {};
        double double15 = variance8.evaluate(doubleArray14);
        secondMoment2.incrementAll(doubleArray14);
        secondMoment2.clear();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double double23 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        secondMoment21.clear();
        secondMoment21.increment((double) 2L);
        double double28 = secondMoment21.getResult();
        secondMoment21.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        secondMoment31.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        variance37.setBiasCorrected(false);
        double double40 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long43 = secondMoment41.getN();
        secondMoment41.clear();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance48.increment((-1.0d));
        variance48.setBiasCorrected(false);
        boolean boolean53 = variance48.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean55 = variance48.equals((java.lang.Object) secondMoment54);
        variance48.increment((double) 100L);
        variance48.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double64 = variance63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double67 = variance66.getResult();
        double[] doubleArray70 = new double[] { 0L, (byte) 10 };
        double double71 = variance66.evaluate(doubleArray70);
        double double73 = variance63.evaluate(doubleArray70, (double) 10L);
        double double74 = variance61.evaluate(doubleArray70);
        double[] doubleArray78 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double79 = variance61.evaluate(doubleArray78);
        variance48.incrementAll(doubleArray78);
        double double81 = variance46.evaluate(doubleArray78);
        variance37.incrementAll(doubleArray78);
        secondMoment21.incrementAll(doubleArray78);
        double double86 = variance19.evaluate(doubleArray78, 0, (int) (short) 1);
        long long87 = variance19.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 50.0d + "'", double74 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2024039.120370371d + "'", double79 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2024039.120370371d + "'", double81 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        double double3 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance8.increment((-1.0d));
        variance8.setBiasCorrected(false);
        boolean boolean13 = variance8.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double17 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double22 = variance21.getResult();
        double[] doubleArray25 = new double[] { 0L, (byte) 10 };
        double double26 = variance21.evaluate(doubleArray25);
        secondMoment15.incrementAll(doubleArray25);
        boolean boolean28 = variance8.equals((java.lang.Object) secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance30.increment((-1.0d));
        variance30.setBiasCorrected(false);
        boolean boolean35 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean37 = variance30.equals((java.lang.Object) secondMoment36);
        boolean boolean38 = secondMoment15.equals((java.lang.Object) boolean37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long43 = secondMoment41.getN();
        secondMoment41.clear();
        secondMoment41.clear();
        secondMoment41.increment((double) (byte) 100);
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment41);
        variance50.increment((double) 2L);
        double double53 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        long long57 = secondMoment55.getN();
        secondMoment55.clear();
        double double59 = secondMoment55.getResult();
        secondMoment55.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        double[] doubleArray63 = new double[] {};
        double double64 = secondMoment55.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance71.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double77 = variance76.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        double[] doubleArray83 = new double[] { 0L, (byte) 10 };
        double double84 = variance79.evaluate(doubleArray83);
        double double86 = variance76.evaluate(doubleArray83, (double) 10L);
        double double87 = variance74.evaluate(doubleArray83);
        double double88 = variance71.evaluate(doubleArray83);
        double double89 = variance67.evaluate(doubleArray83);
        double double90 = variance65.evaluate(doubleArray83);
        double double91 = variance50.evaluate(doubleArray83);
        variance39.incrementAll(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            variance5.incrementAll(doubleArray83, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 50.0d + "'", double26 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        long long4 = variance1.getN();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double8 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        double[] doubleArray14 = new double[] { 0L, (byte) 10 };
        double double15 = variance10.evaluate(doubleArray14);
        double double17 = variance7.evaluate(doubleArray14, (double) 10L);
        long long18 = variance7.getN();
        variance7.increment((double) 0L);
        double[] doubleArray22 = new double[] { 10.0d };
        variance7.incrementAll(doubleArray22);
        variance1.incrementAll(doubleArray22);
        java.lang.Class<?> wildcardClass25 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.0d + "'", double15 == 50.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.setBiasCorrected(false);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean10 = variance3.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment((double) (short) 0);
        secondMoment9.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray23 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double24 = variance16.evaluate(doubleArray23);
        double double25 = secondMoment9.evaluate(doubleArray23);
        long long26 = secondMoment9.getN();
        long long27 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double35 = variance34.getResult();
        double[] doubleArray38 = new double[] { 0L, (byte) 10 };
        double double39 = variance34.evaluate(doubleArray38);
        double double41 = variance31.evaluate(doubleArray38, (double) 10L);
        long long42 = variance31.getN();
        variance31.increment((double) 0L);
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double58 = variance57.getResult();
        double[] doubleArray61 = new double[] { 0L, (byte) 10 };
        double double62 = variance57.evaluate(doubleArray61);
        double double64 = variance54.evaluate(doubleArray61, (double) 10L);
        double double65 = variance52.evaluate(doubleArray61);
        double double66 = variance47.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        double[] doubleArray72 = new double[] { 0L, (byte) 10 };
        double double73 = variance68.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double83 = variance75.evaluate(doubleArray82);
        double double84 = variance68.evaluate(doubleArray82);
        double double85 = variance47.evaluate(doubleArray82);
        double double87 = variance31.evaluate(doubleArray82, 227.3d);
        double double88 = secondMoment9.evaluate(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Variance variance89 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        long long90 = secondMoment9.getN();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2136.8055555555557d + "'", double24 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12820.833333333334d + "'", double25 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6L + "'", long26 == 6L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2136.8055555555557d + "'", double83 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2564.166666666667d + "'", double84 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2564.166666666667d + "'", double85 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2564.166666666686d + "'", double87 == 2564.166666666686d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 12820.833333333334d + "'", double88 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 6L + "'", long90 == 6L);
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean9 = variance7.equals((java.lang.Object) (short) 10);
        boolean boolean10 = variance1.equals((java.lang.Object) variance7);
        long long11 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean15 = variance13.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray24 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double25 = variance17.evaluate(doubleArray24);
        double double26 = variance13.evaluate(doubleArray24);
        double double27 = variance7.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance31.increment((-1.0d));
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        double double48 = variance38.evaluate(doubleArray45, (double) 10L);
        double double49 = variance36.evaluate(doubleArray45);
        double double50 = variance31.evaluate(doubleArray45);
        variance29.incrementAll(doubleArray45);
        double double52 = variance7.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean56 = variance54.equals((java.lang.Object) (short) 10);
        double double57 = variance54.getResult();
        variance54.clear();
        double double59 = variance54.getResult();
        double double60 = variance54.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance67.increment((-1.0d));
        variance67.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double75 = variance74.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double78 = variance77.getResult();
        double[] doubleArray81 = new double[] { 0L, (byte) 10 };
        double double82 = variance77.evaluate(doubleArray81);
        double double84 = variance74.evaluate(doubleArray81, (double) 10L);
        double double85 = variance72.evaluate(doubleArray81);
        double double86 = variance67.evaluate(doubleArray81);
        variance65.incrementAll(doubleArray81);
        double double88 = variance62.evaluate(doubleArray81);
        double double89 = variance54.evaluate(doubleArray81);
        double double91 = variance7.evaluate(doubleArray81, 50.0009765625d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2136.8055555555557d + "'", double25 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2564.166666666667d + "'", double26 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2564.166666666667d + "'", double27 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 50.0d + "'", double49 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 50.0d + "'", double82 == 50.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 50.0d + "'", double84 == 50.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 50.0d + "'", double85 == 50.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 50.0d + "'", double86 == 50.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double12 = secondMoment10.getResult();
        boolean boolean14 = secondMoment10.equals((java.lang.Object) 1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        long long19 = secondMoment17.getN();
        secondMoment17.clear();
        secondMoment17.clear();
        secondMoment17.increment((double) (byte) 100);
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double29 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double32 = variance31.getResult();
        double[] doubleArray35 = new double[] { 0L, (byte) 10 };
        double double36 = variance31.evaluate(doubleArray35);
        double double38 = variance28.evaluate(doubleArray35, (double) 10L);
        double double39 = variance26.evaluate(doubleArray35);
        long long40 = variance26.getN();
        double[] doubleArray41 = new double[] {};
        variance26.incrementAll(doubleArray41);
        double double44 = variance15.evaluate(doubleArray41, (-1.0d));
        double double45 = variance8.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        double double49 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment47);
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance53.increment((-1.0d));
        variance53.setBiasCorrected(false);
        boolean boolean58 = variance53.isBiasCorrected();
        double[] doubleArray59 = new double[] {};
        double double60 = variance53.evaluate(doubleArray59);
        secondMoment47.incrementAll(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = variance8.evaluate(doubleArray59, 0.0d, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 50.0d + "'", double36 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        boolean boolean5 = secondMoment1.equals((java.lang.Object) 1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long10 = secondMoment8.getN();
        secondMoment8.clear();
        secondMoment8.clear();
        secondMoment8.increment((double) (byte) 100);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        double double29 = variance19.evaluate(doubleArray26, (double) 10L);
        double double30 = variance17.evaluate(doubleArray26);
        long long31 = variance17.getN();
        double[] doubleArray32 = new double[] {};
        variance17.incrementAll(doubleArray32);
        double double35 = variance6.evaluate(doubleArray32, (-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance37.increment((-1.0d));
        variance37.setBiasCorrected(false);
        boolean boolean42 = variance37.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        double[] doubleArray51 = new double[] { 0L, (byte) 10 };
        double double52 = variance47.evaluate(doubleArray51);
        double double54 = variance44.evaluate(doubleArray51, (double) 10L);
        double double55 = variance37.evaluate(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = variance6.evaluate(doubleArray51, (int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 25.0d + "'", double55 == 25.0d);
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        double[] doubleArray10 = new double[] { 0L, (byte) 10 };
        double double11 = variance6.evaluate(doubleArray10);
        double double13 = variance3.evaluate(doubleArray10, (double) 10L);
        double double14 = variance1.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double38 = variance20.evaluate(doubleArray37);
        double double40 = variance16.evaluate(doubleArray37, (double) (byte) 1);
        double double41 = variance1.evaluate(doubleArray37);
        variance1.clear();
        variance1.clear();
        double[] doubleArray44 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double45 = variance1.evaluate(doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50.0d + "'", double11 == 50.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.0d + "'", double13 == 50.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2024039.120370371d + "'", double38 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2024039.120370371d + "'", double41 == 2024039.120370371d);
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double9 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean13 = variance11.equals((java.lang.Object) (short) 10);
        double double14 = variance11.getResult();
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        double double29 = variance19.evaluate(doubleArray26, (double) 10L);
        double double30 = variance17.evaluate(doubleArray26);
        double[] doubleArray34 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double35 = variance17.evaluate(doubleArray34);
        double double38 = variance11.evaluate(doubleArray34, 0, (int) (short) 1);
        double double39 = secondMoment7.evaluate(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray34, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2024039.120370371d + "'", double35 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 4048078.240740742d + "'", double39 == 4048078.240740742d);
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        variance1.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double18 = variance17.getResult();
        double[] doubleArray21 = new double[] { 0L, (byte) 10 };
        double double22 = variance17.evaluate(doubleArray21);
        double double24 = variance14.evaluate(doubleArray21, (double) 10L);
        double double25 = variance12.evaluate(doubleArray21);
        variance12.increment((double) 0.0f);
        boolean boolean28 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        secondMoment29.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        variance35.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean41 = variance39.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray50 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double51 = variance43.evaluate(doubleArray50);
        double double52 = variance39.evaluate(doubleArray50);
        double double54 = variance35.evaluate(doubleArray50, (double) 1.0f);
        double double57 = variance12.evaluate(doubleArray50, (int) (byte) 0, 1);
        double double58 = variance1.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        long long61 = secondMoment59.getN();
        secondMoment59.clear();
        secondMoment59.clear();
        secondMoment59.increment((double) (byte) 100);
        boolean boolean66 = variance1.equals((java.lang.Object) (byte) 100);
        variance1.clear();
        double[] doubleArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double70 = variance1.evaluate(doubleArray68, (double) 6L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.0d + "'", double25 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2136.8055555555557d + "'", double51 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2564.166666666667d + "'", double52 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2136.805555555555d + "'", double54 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2136.8055555555557d + "'", double58 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double9 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double12 = variance11.getResult();
        double[] doubleArray15 = new double[] { 0L, (byte) 10 };
        double double16 = variance11.evaluate(doubleArray15);
        double double18 = variance8.evaluate(doubleArray15, (double) 10L);
        double double19 = variance6.evaluate(doubleArray15);
        double double20 = variance1.evaluate(doubleArray15);
        boolean boolean21 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance26.increment((-1.0d));
        variance26.setBiasCorrected(false);
        boolean boolean31 = variance26.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean33 = variance26.equals((java.lang.Object) secondMoment32);
        secondMoment32.increment((double) (short) 0);
        secondMoment32.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray46 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double47 = variance39.evaluate(doubleArray46);
        double double48 = secondMoment32.evaluate(doubleArray46);
        long long49 = secondMoment32.getN();
        long long50 = secondMoment32.getN();
        secondMoment32.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance55.increment((-1.0d));
        variance55.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean63 = variance61.equals((java.lang.Object) (short) 10);
        boolean boolean64 = variance55.equals((java.lang.Object) variance61);
        long long65 = variance61.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean69 = variance67.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray78 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double79 = variance71.evaluate(doubleArray78);
        double double80 = variance67.evaluate(doubleArray78);
        double double81 = variance61.evaluate(doubleArray78);
        secondMoment32.incrementAll(doubleArray78);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance85.increment((-1.0d));
        variance85.setBiasCorrected(false);
        boolean boolean90 = variance85.isBiasCorrected();
        double[] doubleArray91 = new double[] {};
        double double92 = variance85.evaluate(doubleArray91);
        secondMoment32.incrementAll(doubleArray91);
        double double94 = variance1.evaluate(doubleArray91);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2136.8055555555557d + "'", double47 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 12820.833333333334d + "'", double48 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 6L + "'", long49 == 6L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 6L + "'", long50 == 6L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2136.8055555555557d + "'", double79 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2564.166666666667d + "'", double80 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2564.166666666667d + "'", double81 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double3 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 2L);
        double double8 = secondMoment1.getResult();
        double double9 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance11.increment((-1.0d));
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean18 = variance16.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        double double32 = variance22.evaluate(doubleArray29, (double) 10L);
        double double33 = variance20.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double38 = variance20.evaluate(doubleArray37);
        double double40 = variance16.evaluate(doubleArray37, (double) (byte) 1);
        double double42 = variance11.evaluate(doubleArray37, 4048078.240740742d);
        double double43 = secondMoment1.evaluate(doubleArray37);
        double double44 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance47.increment((-1.0d));
        variance47.setBiasCorrected(false);
        boolean boolean52 = variance47.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean54 = variance47.equals((java.lang.Object) secondMoment53);
        variance47.increment((double) 100L);
        variance47.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double63 = variance62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double66 = variance65.getResult();
        double[] doubleArray69 = new double[] { 0L, (byte) 10 };
        double double70 = variance65.evaluate(doubleArray69);
        double double72 = variance62.evaluate(doubleArray69, (double) 10L);
        double double73 = variance60.evaluate(doubleArray69);
        double[] doubleArray77 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double78 = variance60.evaluate(doubleArray77);
        variance47.incrementAll(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = secondMoment1.evaluate(doubleArray77, (int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2024039.120370371d + "'", double38 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2024039.120370371d + "'", double40 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2024039.12109375d + "'", double42 == 2024039.12109375d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4048078.240740742d + "'", double43 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4048078.240740742d + "'", double44 == 4048078.240740742d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 50.0d + "'", double72 == 50.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2024039.120370371d + "'", double78 == 2024039.120370371d);
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        double double3 = variance1.getResult();
        variance1.setBiasCorrected(true);
        double double6 = variance1.getResult();
        variance1.increment((double) 0.0f);
        double double9 = variance1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance3.increment((-1.0d));
        variance3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double14 = variance13.getResult();
        double[] doubleArray17 = new double[] { 0L, (byte) 10 };
        double double18 = variance13.evaluate(doubleArray17);
        double double20 = variance10.evaluate(doubleArray17, (double) 10L);
        double double21 = variance8.evaluate(doubleArray17);
        double double22 = variance3.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double25 = variance24.getResult();
        double[] doubleArray28 = new double[] { 0L, (byte) 10 };
        double double29 = variance24.evaluate(doubleArray28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = variance24.evaluate(doubleArray38);
        double double41 = variance3.evaluate(doubleArray38);
        double double42 = secondMoment0.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance44.increment((-1.0d));
        variance44.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double55 = variance54.getResult();
        double[] doubleArray58 = new double[] { 0L, (byte) 10 };
        double double59 = variance54.evaluate(doubleArray58);
        double double61 = variance51.evaluate(doubleArray58, (double) 10L);
        double double62 = variance49.evaluate(doubleArray58);
        double double63 = variance44.evaluate(doubleArray58);
        double double64 = secondMoment0.evaluate(doubleArray58);
        long long65 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long67 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double69 = variance68.getResult();
        double double70 = variance68.getResult();
        double[] doubleArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance68.incrementAll(doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 50.0d + "'", double18 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 50.0d + "'", double22 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.0d + "'", double29 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2564.166666666667d + "'", double40 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2564.166666666667d + "'", double41 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12820.833333333334d + "'", double42 == 12820.833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 50.0d + "'", double62 == 50.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2L + "'", long67 == 2L);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double4 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.increment(50.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double9 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long12 = secondMoment10.getN();
        secondMoment10.clear();
        secondMoment10.clear();
        secondMoment10.increment((double) (byte) 100);
        long long17 = secondMoment10.getN();
        double[] doubleArray19 = new double[] { 2024039.1203703713d };
        double double20 = secondMoment10.evaluate(doubleArray19);
        secondMoment8.incrementAll(doubleArray19);
        double double22 = secondMoment2.evaluate(doubleArray19);
        secondMoment2.increment((double) (short) -1);
        secondMoment2.increment(25.00000011920929d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.increment(10.0d);
        java.lang.Object obj30 = null;
        boolean boolean31 = secondMoment2.equals(obj30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long38 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean42 = variance40.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double50 = variance49.getResult();
        double[] doubleArray53 = new double[] { 0L, (byte) 10 };
        double double54 = variance49.evaluate(doubleArray53);
        double double56 = variance46.evaluate(doubleArray53, (double) 10L);
        double double57 = variance44.evaluate(doubleArray53);
        double[] doubleArray61 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double62 = variance44.evaluate(doubleArray61);
        double double64 = variance40.evaluate(doubleArray61, (double) (byte) 1);
        variance40.clear();
        double double66 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double69 = variance68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double72 = variance71.getResult();
        double[] doubleArray75 = new double[] { 0L, (byte) 10 };
        double double76 = variance71.evaluate(doubleArray75);
        double double78 = variance68.evaluate(doubleArray75, (double) 10L);
        long long79 = variance68.getN();
        variance68.increment((double) 0L);
        double[] doubleArray83 = new double[] { 10.0d };
        variance68.incrementAll(doubleArray83);
        double double85 = variance40.evaluate(doubleArray83);
        variance37.incrementAll(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment2.incrementAll(doubleArray83, (int) (byte) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2024039.120370371d + "'", double62 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2024039.120370371d + "'", double64 == 2024039.120370371d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 50.0d + "'", double76 == 50.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 50.0d + "'", double78 == 50.0d);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean3 = variance1.equals((java.lang.Object) (short) 10);
        double double4 = variance1.getResult();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double13 = variance12.getResult();
        double[] doubleArray16 = new double[] { 0L, (byte) 10 };
        double double17 = variance12.evaluate(doubleArray16);
        double double19 = variance9.evaluate(doubleArray16, (double) 10L);
        double double20 = variance7.evaluate(doubleArray16);
        double[] doubleArray24 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double25 = variance7.evaluate(doubleArray24);
        double double28 = variance1.evaluate(doubleArray24, 0, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        long long31 = secondMoment29.getN();
        secondMoment29.clear();
        secondMoment29.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long38 = secondMoment36.getN();
        secondMoment36.clear();
        double double40 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double double59 = variance42.evaluate(doubleArray54);
        secondMoment36.incrementAll(doubleArray54, 1, (int) (byte) 0);
        double double65 = variance35.evaluate(doubleArray54, (int) (byte) 1, (int) (short) 1);
        double double66 = variance1.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance68.increment((-1.0d));
        variance68.setBiasCorrected(false);
        boolean boolean73 = variance68.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean75 = variance68.equals((java.lang.Object) secondMoment74);
        secondMoment74.increment((double) (short) 0);
        secondMoment74.increment((double) 1.0f);
        double double80 = secondMoment74.getResult();
        double double81 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment82);
        double double84 = secondMoment82.getResult();
        boolean boolean85 = secondMoment74.equals((java.lang.Object) double84);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment86 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance87 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment86);
        long long88 = secondMoment86.getN();
        secondMoment86.clear();
        secondMoment86.clear();
        secondMoment86.increment((double) (byte) 100);
        long long93 = secondMoment86.getN();
        double[] doubleArray95 = new double[] { 2024039.1203703713d };
        double double96 = secondMoment86.evaluate(doubleArray95);
        double double97 = secondMoment74.evaluate(doubleArray95);
        boolean boolean98 = variance1.equals((java.lang.Object) double97);
        boolean boolean99 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2024039.120370371d + "'", double25 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 50.0d + "'", double59 == 50.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.5d + "'", double80 == 0.5d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.5d + "'", double81 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[2024039.1203703713]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean9 = variance2.equals((java.lang.Object) secondMoment8);
        double double10 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double13 = secondMoment8.getResult();
        long long14 = secondMoment8.getN();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        double double18 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        long long21 = secondMoment19.getN();
        secondMoment19.clear();
        secondMoment19.increment(10.0d);
        secondMoment19.increment(25.0d);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance29.increment((-1.0d));
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        double double48 = variance29.evaluate(doubleArray43);
        double double49 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double52 = variance51.getResult();
        variance51.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance56.increment((-1.0d));
        variance56.setBiasCorrected(false);
        boolean boolean61 = variance56.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean63 = variance56.equals((java.lang.Object) secondMoment62);
        double double64 = secondMoment62.getResult();
        secondMoment62.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        double double70 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment68);
        secondMoment68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance74.increment((-1.0d));
        variance74.setBiasCorrected(false);
        boolean boolean79 = variance74.isBiasCorrected();
        double[] doubleArray80 = new double[] {};
        double double81 = variance74.evaluate(doubleArray80);
        secondMoment68.incrementAll(doubleArray80);
        double double83 = variance66.evaluate(doubleArray80);
        double double84 = variance51.evaluate(doubleArray80);
        double double85 = variance29.evaluate(doubleArray80);
        double double86 = secondMoment19.evaluate(doubleArray80);
        double double87 = variance17.evaluate(doubleArray80);
        java.lang.Class<?> wildcardClass88 = variance17.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        secondMoment7.clear();
        long long15 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance18.increment((-1.0d));
        variance18.setBiasCorrected(false);
        boolean boolean23 = variance18.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean25 = variance18.equals((java.lang.Object) secondMoment24);
        secondMoment24.increment((double) (short) 0);
        secondMoment24.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray38 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double39 = variance31.evaluate(doubleArray38);
        double double40 = secondMoment24.evaluate(doubleArray38);
        long long41 = secondMoment24.getN();
        long long42 = secondMoment24.getN();
        secondMoment24.clear();
        double double44 = secondMoment24.getResult();
        secondMoment24.clear();
        boolean boolean46 = variance16.equals((java.lang.Object) secondMoment24);
        double[] doubleArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double50 = variance16.evaluate(doubleArray47, (int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2136.8055555555557d + "'", double39 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 12820.833333333334d + "'", double40 == 12820.833333333334d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 6L + "'", long41 == 6L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6L + "'", long42 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        secondMoment7.increment((double) (short) 0);
        secondMoment7.increment((double) 1.0f);
        double double13 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment(Double.NaN);
        double double17 = secondMoment7.getResult();
        secondMoment7.increment(2564.1666666679084d);
        long long20 = secondMoment7.getN();
        double double21 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray30 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double31 = variance23.evaluate(doubleArray30);
        variance23.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double37 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double40 = variance39.getResult();
        double[] doubleArray43 = new double[] { 0L, (byte) 10 };
        double double44 = variance39.evaluate(doubleArray43);
        double double46 = variance36.evaluate(doubleArray43, (double) 10L);
        double double47 = variance34.evaluate(doubleArray43);
        variance23.incrementAll(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment7.incrementAll(doubleArray43, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4L + "'", long20 == 4L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2136.8055555555557d + "'", double31 == 2136.8055555555557d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 50.0d + "'", double47 == 50.0d);
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        double[] doubleArray5 = new double[] { 0L, (byte) 10 };
        double double6 = variance1.evaluate(doubleArray5);
        double double7 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance9.increment((-1.0d));
        variance9.setBiasCorrected(false);
        boolean boolean14 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        double double18 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double23 = variance22.getResult();
        double[] doubleArray26 = new double[] { 0L, (byte) 10 };
        double double27 = variance22.evaluate(doubleArray26);
        secondMoment16.incrementAll(doubleArray26);
        boolean boolean29 = variance9.equals((java.lang.Object) secondMoment16);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance32.increment((-1.0d));
        variance32.setBiasCorrected(false);
        boolean boolean37 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean39 = variance32.equals((java.lang.Object) secondMoment38);
        variance32.increment((double) 100L);
        variance32.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double48 = variance47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        double[] doubleArray54 = new double[] { 0L, (byte) 10 };
        double double55 = variance50.evaluate(doubleArray54);
        double double57 = variance47.evaluate(doubleArray54, (double) 10L);
        double double58 = variance45.evaluate(doubleArray54);
        double[] doubleArray62 = new double[] { 2564.166666666667d, 100L, (byte) 100 };
        double double63 = variance45.evaluate(doubleArray62);
        variance32.incrementAll(doubleArray62);
        variance9.incrementAll(doubleArray62);
        double double68 = variance1.evaluate(doubleArray62, (int) (byte) 0, 1);
        variance1.increment(0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.0d + "'", double6 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.0d + "'", double27 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 50.0d + "'", double57 == 50.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[2564.166666666667, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2024039.120370371d + "'", double63 == 2024039.120370371d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean8 = variance1.equals((java.lang.Object) secondMoment7);
        double double9 = secondMoment7.getResult();
        secondMoment7.clear();
        secondMoment7.clear();
        secondMoment7.increment(60.5d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance16.increment((-1.0d));
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double24 = variance23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double27 = variance26.getResult();
        double[] doubleArray30 = new double[] { 0L, (byte) 10 };
        double double31 = variance26.evaluate(doubleArray30);
        double double33 = variance23.evaluate(doubleArray30, (double) 10L);
        double double34 = variance21.evaluate(doubleArray30);
        double double35 = variance16.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double38 = variance37.getResult();
        double[] doubleArray41 = new double[] { 0L, (byte) 10 };
        double double42 = variance37.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray51 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double52 = variance44.evaluate(doubleArray51);
        double double53 = variance37.evaluate(doubleArray51);
        double double54 = variance16.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double59 = variance58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double62 = variance61.getResult();
        double[] doubleArray65 = new double[] { 0L, (byte) 10 };
        double double66 = variance61.evaluate(doubleArray65);
        double double68 = variance58.evaluate(doubleArray65, (double) 10L);
        double double69 = variance56.evaluate(doubleArray65);
        variance16.incrementAll(doubleArray65, (int) (byte) 0, (int) (byte) 0);
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray82 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double83 = variance75.evaluate(doubleArray82);
        org.apache.commons.math.stat.descriptive.moment.Variance variance85 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray92 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double93 = variance85.evaluate(doubleArray92);
        double double95 = variance75.evaluate(doubleArray92, (double) '#');
        double double96 = variance16.evaluate(doubleArray92);
        boolean boolean97 = variance14.equals((java.lang.Object) doubleArray92);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 50.0d + "'", double31 == 50.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 50.0d + "'", double33 == 50.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2136.8055555555557d + "'", double52 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2564.166666666667d + "'", double53 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2564.166666666667d + "'", double54 == 2564.166666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 50.0d + "'", double66 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2136.8055555555557d + "'", double83 == 2136.8055555555557d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2136.8055555555557d + "'", double93 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2136.8055555555557d + "'", double95 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2564.166666666667d + "'", double96 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long3 = secondMoment1.getN();
        secondMoment1.clear();
        secondMoment1.clear();
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        secondMoment9.increment((double) 2L);
        double double16 = secondMoment9.getResult();
        secondMoment9.increment(50.0d);
        double double19 = secondMoment9.getResult();
        long long20 = secondMoment9.getN();
        boolean boolean21 = variance7.equals((java.lang.Object) secondMoment9);
        secondMoment9.increment(4671050.520833335d);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance27.increment((-1.0d));
        variance27.setBiasCorrected(false);
        boolean boolean32 = variance27.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean34 = variance27.equals((java.lang.Object) secondMoment33);
        variance27.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double41 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double44 = variance43.getResult();
        double[] doubleArray47 = new double[] { 0L, (byte) 10 };
        double double48 = variance43.evaluate(doubleArray47);
        double double50 = variance40.evaluate(doubleArray47, (double) 10L);
        double double51 = variance38.evaluate(doubleArray47);
        variance38.increment((double) 0.0f);
        boolean boolean54 = variance38.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        long long57 = secondMoment55.getN();
        secondMoment55.clear();
        secondMoment55.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        variance61.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean67 = variance65.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        double[] doubleArray76 = new double[] { (byte) 100, 0, 10.0d, 100, (short) 0, (-1L) };
        double double77 = variance69.evaluate(doubleArray76);
        double double78 = variance65.evaluate(doubleArray76);
        double double80 = variance61.evaluate(doubleArray76, (double) 1.0f);
        double double83 = variance38.evaluate(doubleArray76, (int) (byte) 0, 1);
        double double84 = variance27.evaluate(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = variance25.evaluate(doubleArray76, (double) (short) 100, (int) (short) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1152.0d + "'", double19 == 1152.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 50.0d + "'", double48 == 50.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 50.0d + "'", double50 == 50.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 0.0, 10.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2136.8055555555557d + "'", double77 == 2136.8055555555557d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 2564.166666666667d + "'", double78 == 2564.166666666667d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2136.805555555555d + "'", double80 == 2136.805555555555d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2136.8055555555557d + "'", double84 == 2136.8055555555557d);
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance2.increment((-1.0d));
        variance2.setBiasCorrected(false);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double11 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double16 = variance15.getResult();
        double[] doubleArray19 = new double[] { 0L, (byte) 10 };
        double double20 = variance15.evaluate(doubleArray19);
        secondMoment9.incrementAll(doubleArray19);
        boolean boolean22 = variance2.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((-1.0d));
        variance24.setBiasCorrected(false);
        boolean boolean29 = variance24.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean31 = variance24.equals((java.lang.Object) secondMoment30);
        boolean boolean32 = secondMoment9.equals((java.lang.Object) boolean31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double36 = variance35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double39 = variance38.getResult();
        double[] doubleArray42 = new double[] { 0L, (byte) 10 };
        double double43 = variance38.evaluate(doubleArray42);
        double double45 = variance35.evaluate(doubleArray42, (double) 10L);
        double double46 = secondMoment9.evaluate(doubleArray42);
        long long47 = secondMoment9.getN();
        long long48 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double51 = variance50.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double54 = variance53.getResult();
        double[] doubleArray57 = new double[] { 0L, (byte) 10 };
        double double58 = variance53.evaluate(doubleArray57);
        double double60 = variance50.evaluate(doubleArray57, (double) 10L);
        long long61 = variance50.getN();
        variance50.increment((double) 0L);
        double[] doubleArray65 = new double[] { 10.0d };
        variance50.incrementAll(doubleArray65);
        variance50.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        long long71 = secondMoment69.getN();
        secondMoment69.clear();
        secondMoment69.clear();
        secondMoment69.increment((double) (byte) 100);
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double81 = variance80.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double84 = variance83.getResult();
        double[] doubleArray87 = new double[] { 0L, (byte) 10 };
        double double88 = variance83.evaluate(doubleArray87);
        double double90 = variance80.evaluate(doubleArray87, (double) 10L);
        double double91 = variance78.evaluate(doubleArray87);
        double double92 = variance50.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = secondMoment9.evaluate(doubleArray87, (int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.0d + "'", double20 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 50.0d + "'", double45 == 50.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2L + "'", long47 == 2L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2L + "'", long48 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 50.0d + "'", double88 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        boolean boolean4 = variance1.isBiasCorrected();
        double double5 = variance1.getResult();
        double double6 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        double[] doubleArray7 = new double[] {};
        double double8 = variance1.evaluate(doubleArray7);
        long long9 = variance1.getN();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        long long15 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance20.increment((-1.0d));
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double28 = variance27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double31 = variance30.getResult();
        double[] doubleArray34 = new double[] { 0L, (byte) 10 };
        double double35 = variance30.evaluate(doubleArray34);
        double double37 = variance27.evaluate(doubleArray34, (double) 10L);
        double double38 = variance25.evaluate(doubleArray34);
        double double39 = variance20.evaluate(doubleArray34);
        variance18.incrementAll(doubleArray34);
        variance16.incrementAll(doubleArray34);
        double double42 = variance12.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        double double46 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment44);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double double51 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        secondMoment49.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double56 = variance55.getResult();
        double[] doubleArray59 = new double[] { 0L, (byte) 10 };
        double double60 = variance55.evaluate(doubleArray59);
        secondMoment49.incrementAll(doubleArray59);
        double double62 = variance47.evaluate(doubleArray59);
        double double63 = variance12.evaluate(doubleArray59);
        variance1.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance66.increment((-1.0d));
        variance66.setBiasCorrected(false);
        variance66.increment(2136.8055555555557d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance74.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double80 = variance79.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double83 = variance82.getResult();
        double[] doubleArray86 = new double[] { 0L, (byte) 10 };
        double double87 = variance82.evaluate(doubleArray86);
        double double89 = variance79.evaluate(doubleArray86, (double) 10L);
        double double90 = variance77.evaluate(doubleArray86);
        double double91 = variance74.evaluate(doubleArray86);
        variance66.incrementAll(doubleArray86);
        double double94 = variance1.evaluate(doubleArray86, 5011295.755555557d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 50.0d + "'", double35 == 50.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 50.0d + "'", double60 == 50.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 25.0d + "'", double62 == 25.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 50.0d + "'", double63 == 50.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 50.0d + "'", double87 == 50.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 50.0d + "'", double89 == 50.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 50.0d + "'", double90 == 50.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 50.0d + "'", double91 == 50.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 25.0d + "'", double94 == 25.0d);
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance2.increment(2564.166666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double7 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double10 = variance9.getResult();
        double[] doubleArray13 = new double[] { 0L, (byte) 10 };
        double double14 = variance9.evaluate(doubleArray13);
        double double16 = variance6.evaluate(doubleArray13, (double) 10L);
        long long17 = variance6.getN();
        variance6.increment((double) 0L);
        double[] doubleArray21 = new double[] { 10.0d };
        variance6.incrementAll(doubleArray21);
        double double24 = variance2.evaluate(doubleArray21, (double) 2L);
        java.lang.Class<?> wildcardClass25 = variance2.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.0d + "'", double14 == 50.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.0d + "'", double16 == 50.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((-1.0d));
        variance1.setBiasCorrected(false);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double10 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double15 = variance14.getResult();
        double[] doubleArray18 = new double[] { 0L, (byte) 10 };
        double double19 = variance14.evaluate(doubleArray18);
        secondMoment8.incrementAll(doubleArray18);
        boolean boolean21 = variance1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance23.increment((-1.0d));
        variance23.setBiasCorrected(false);
        boolean boolean28 = variance23.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean30 = variance23.equals((java.lang.Object) secondMoment29);
        boolean boolean31 = secondMoment8.equals((java.lang.Object) boolean30);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double35 = variance34.getResult();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 50.0d + "'", double19 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        variance1.increment((double) (short) -1);
        long long5 = variance1.getN();
        variance1.setBiasCorrected(false);
        double double8 = variance1.getResult();
        long long9 = variance1.getN();
        long long10 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((-1.0d));
        variance12.setBiasCorrected(false);
        boolean boolean17 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        double double21 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double26 = variance25.getResult();
        double[] doubleArray29 = new double[] { 0L, (byte) 10 };
        double double30 = variance25.evaluate(doubleArray29);
        secondMoment19.incrementAll(doubleArray29);
        boolean boolean32 = variance12.equals((java.lang.Object) secondMoment19);
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        double double37 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment35);
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double42 = variance41.getResult();
        double[] doubleArray45 = new double[] { 0L, (byte) 10 };
        double double46 = variance41.evaluate(doubleArray45);
        secondMoment35.incrementAll(doubleArray45);
        double double48 = variance12.evaluate(doubleArray45);
        variance12.setBiasCorrected(false);
        long long51 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean55 = variance53.equals((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance57.increment((-1.0d));
        variance57.setBiasCorrected(false);
        boolean boolean62 = variance57.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        boolean boolean64 = variance57.equals((java.lang.Object) secondMoment63);
        double double65 = secondMoment63.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double68 = variance67.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double71 = variance70.getResult();
        double[] doubleArray74 = new double[] { 0L, (byte) 10 };
        double double75 = variance70.evaluate(doubleArray74);
        double double77 = variance67.evaluate(doubleArray74, (double) 10L);
        double double80 = secondMoment63.evaluate(doubleArray74, (int) (short) 0, 1);
        double double81 = variance53.evaluate(doubleArray74);
        double double82 = variance12.evaluate(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = variance1.evaluate(doubleArray74, (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 50.0d + "'", double46 == 50.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 25.0d + "'", double48 == 25.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 50.0d + "'", double77 == 50.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 50.0d + "'", double81 == 50.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 25.0d + "'", double82 == 25.0d);
    }
}


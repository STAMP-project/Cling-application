import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest32 {

    public static boolean debug = false;

    @Test
    public void test16001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16001");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022");
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        java.lang.String str4 = timeZone1.getID();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
    }

    @Test
    public void test16002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16002");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime5.toMutableDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTime.Property property11 = dateTime5.era();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = property11.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test16003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16003");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 459);
        dateTimeParserBucket5.setOffset(54634662);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 999, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime37.plus(12L);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours((int) (byte) 0);
        boolean boolean47 = dateTime45.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        boolean boolean52 = dateTime45.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTime();
        org.joda.time.DateTime dateTime55 = dateTime51.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.weekyear();
        boolean boolean61 = dateTime55.equals((java.lang.Object) localDateTime57);
        org.joda.time.DateTime dateTime63 = dateTime55.minusMonths(54616882);
        org.joda.time.DateTime.Property property64 = dateTime63.millisOfSecond();
        boolean boolean65 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology67, locale68, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField72 = null;
        dateTimeParserBucket71.saveField(dateTimeField72, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale77 = java.util.Locale.ROOT;
        dateTimeParserBucket71.saveField(dateTimeFieldType75, "it", locale77);
        boolean boolean79 = dateTime37.isSupported(dateTimeFieldType75);
        int int80 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone83 = dateTimeZone82.toTimeZone();
        org.joda.time.DateTime dateTime84 = dateTime37.withZone(dateTimeZone82);
        dateTimeParserBucket5.setZone(dateTimeZone82);
        int int87 = dateTimeZone82.getStandardOffset(1586790399767L);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
    }

    @Test
    public void test16004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16004");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property7.addWrapFieldToCopy((int) 'x');
        java.lang.String str10 = property7.getAsString();
        org.joda.time.LocalDateTime localDateTime11 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test16005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16005");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.weekyear();
        boolean boolean19 = dateTime13.equals((java.lang.Object) localDateTime15);
        int int20 = localDateTime15.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = localDateTime15.toString(dateTimeFormatter21);
        int int23 = localDateTime15.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.052" + "'", str22, "1970-01-01T00:00:00.052");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test16006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16006");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime3.secondOfDay();
        org.joda.time.DateTime.Property property12 = dateTime3.dayOfWeek();
        org.joda.time.DateTime.Property property13 = dateTime3.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readablePeriod18);
        org.joda.time.DateTime dateTime20 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        int int24 = localDateTime22.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int26 = localDateTime22.indexOf(dateTimeFieldType25);
        int int27 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = property31.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfEra((int) 'x');
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        int int36 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = localDateTime22.getFields();
        int int38 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTime dateTime39 = property13.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test16007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16007");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.era();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.property(dateTimeFieldType18);
        dateTimeParserBucket5.saveField(dateTimeFieldType18, 483);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        int int23 = dateTimeParserBucket5.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test16008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16008");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone1);
        java.lang.String str4 = timeZone1.getID();
        timeZone1.setRawOffset(18);
        java.lang.String str7 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.052" + "'", str4, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT+00:00" + "'", str7, "GMT+00:00");
    }

    @Test
    public void test16009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16009");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("40");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.Object obj3 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "");
    }

    @Test
    public void test16010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16010");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        boolean boolean5 = dateTime1.isBeforeNow();
        boolean boolean6 = dateTime1.isBeforeNow();
        int int7 = dateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond(1);
        org.joda.time.Chronology chronology17 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusYears(54647283);
        org.joda.time.DateTime dateTime20 = dateTime1.withFields((org.joda.time.ReadablePartial) localDateTime14);
        java.util.Date date21 = dateTime1.toDate();
        org.joda.time.DateTime dateTime22 = dateTime1.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Feb 21 15:14:48 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test16011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16011");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        int int6 = dateTime1.getDayOfYear();
        int int7 = dateTime1.getDayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime1.plus((long) 21);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyear();
        org.joda.time.DurationField durationField12 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.halfdayOfDay();
        int int16 = dateTimeField14.getMinimumValue((long) 104);
        long long19 = dateTimeField14.addWrapField((long) 1868400000, 721);
        int int20 = dateTimeField14.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1825200000L + "'", long19 == 1825200000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test16012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16012");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-21T15:13:10.366+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test16013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16013");
        java.util.Locale locale1 = new java.util.Locale("51");
        org.junit.Assert.assertEquals(locale1.toString(), "51");
    }

    @Test
    public void test16014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16014");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        int int9 = dateTime8.getMinuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(54623847);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime8.getZone();
        org.joda.time.DateTime dateTime14 = dateTime8.minusDays(1999);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean26 = dateTime25.isEqualNow();
        org.joda.time.DateTime.Property property27 = dateTime25.secondOfMinute();
        org.joda.time.DateTime dateTime29 = property27.addToCopy(0L);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        java.lang.Object obj31 = null;
        boolean boolean32 = dateTime29.equals(obj31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        java.lang.String str38 = chronology36.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.Chronology chronology42 = chronology36.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField43 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField44 = chronology36.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(35999999L, chronology36);
        org.joda.time.DurationField durationField46 = chronology36.months();
        org.joda.time.DateTime dateTime47 = dateTime29.toDateTime(chronology36);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTime dateTime49 = dateTime8.withChronology(chronology36);
        org.joda.time.Instant instant50 = dateTime8.toInstant();
        org.joda.time.Chronology chronology51 = dateTime8.getChronology();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test16015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16015");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str7 = dateTimeFieldType6.toString();
        int int8 = dateTime1.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime9 = dateTime1.withTimeAtStartOfDay();
        boolean boolean11 = dateTime9.isAfter(1645456021841L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minuteOfHour" + "'", str7, "minuteOfHour");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16016");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property4.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property4.addWrapFieldToCopy(733);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test16017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16017");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withWeekyear((-1));
        org.joda.time.DateTime dateTime12 = dateTime8.plus(12L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours((int) (byte) 0);
        boolean boolean18 = dateTime16.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int) 'a');
        boolean boolean23 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime22.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.weekyear();
        boolean boolean32 = dateTime26.equals((java.lang.Object) localDateTime28);
        org.joda.time.DateTime dateTime34 = dateTime26.minusMonths(54616882);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfSecond();
        boolean boolean36 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime39 = dateTime34.withDurationAdded(readableDuration37, 54848886);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfCentury();
        int int41 = dateTime39.getMinuteOfHour();
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = property46.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYear((int) (short) 100);
        int int50 = localDateTime49.getDayOfYear();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plus(readableDuration51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.minusWeeks(449);
        int[] intArray56 = chronology42.get((org.joda.time.ReadablePartial) localDateTime49, (long) 54694783);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(586, 54661560, 69051, 69222119, 54850, 54622011, 54773030, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69222119 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 14 + "'", int41 == 14);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 54694835]");
    }

    @Test
    public void test16018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16018");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        java.util.Locale locale8 = new java.util.Locale("15");
        java.lang.String str9 = dateTimeField5.getAsShortText(2922789, locale8);
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals(locale8.toString(), "15");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2922789" + "'", str9, "2922789");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test16019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16019");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withDurationAdded(readableDuration6, 332);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test16020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16020");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.era();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale17.getDisplayCountry();
        java.lang.String str19 = property16.getAsText(locale17);
        int int20 = dateTimeField11.getMaximumTextLength(locale17);
        java.lang.String str23 = nameProvider0.getName(locale17, "-0001-02-22T15:06:25.002+00:00:00.052", "2022-02-21T00:00:00.000+00:00:00.052");
        java.util.Locale locale26 = new java.util.Locale("weekOfWeekyear", "-0001-02-22T15:06:41.898+00:00:00.052");
        java.lang.String str29 = nameProvider0.getShortName(locale26, "-0001-02-22T15:06:33.492+00:00:00.052", "2022-02-21T15:06:22.606+00:00:00.052");
        java.util.Locale locale31 = new java.util.Locale("2022-02-21T15:07:10.867+00:00:00.052");
        java.util.Locale.setDefault(locale31);
        java.lang.String str35 = nameProvider0.getName(locale31, "\u4e8c\u6708", "54709");
        boolean boolean36 = locale31.hasExtensions();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc911\uad6d" + "'", str18, "\uc911\uad6d");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "52" + "'", str19, "52");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals(locale26.toString(), "weekofweekyear_-0001-02-22T15:06:41.898+00:00:00.052");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals(locale31.toString(), "2022-02-21t15:07:10.867+00:00:00.052");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test16021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16021");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("weekOfWeekyear");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property9 = dateTime6.centuryOfEra();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = property9.getAsText(locale10);
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleKeys();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        java.lang.Integer int23 = dateTimeParserBucket19.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        long long27 = dateTimeZone24.convertLocalToUTC(0L, false);
        dateTimeParserBucket19.setZone(dateTimeZone24);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.years();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.dayOfWeek();
        boolean boolean32 = strSet13.equals((java.lang.Object) dateTimeField31);
        java.lang.Object obj33 = null;
        boolean boolean34 = strSet13.contains(obj33);
        boolean boolean35 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.Iterator<java.lang.String> strItor36 = strSet13.iterator();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "20" + "'", str12, "20");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-52L) + "'", long27 == (-52L));
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strItor36);
    }

    @Test
    public void test16022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16022");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Feb");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setLanguageTag("-0001-02-22T15:14:09.930+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test16023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16023");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTime(dateTimeZone6);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = dateTimeZone6.getShortName((long) (short) 100, locale10);
        java.lang.String str13 = dateTimeZone6.getNameKey((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((-1));
        org.joda.time.DateTime dateTime19 = dateTime15.plusHours((int) (byte) 100);
        boolean boolean21 = dateTime19.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime(dateTimeZone22);
        int int24 = dateTime19.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime19.minus(readableDuration25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMonths(60590228);
        org.joda.time.DateTime dateTime29 = dateTime28.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        int int35 = dateTimeZone32.getOffset(26099L);
        boolean boolean36 = dateTimeZone32.isFixed();
        org.joda.time.DateTime dateTime37 = dateTime29.withZoneRetainFields(dateTimeZone32);
        boolean boolean39 = dateTimeZone32.isStandardOffset(0L);
        long long41 = dateTimeZone6.getMillisKeepLocal(dateTimeZone32, 54377972L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.052" + "'", str11, "+00:00:00.052");
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 25 + "'", int24 == 25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 54377972L + "'", long41 == 54377972L);
    }

    @Test
    public void test16024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16024");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "cinese");
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("coreano");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("999");
        java.util.Locale.Builder builder9 = builder7.setLanguage("ja");
        java.util.Locale.Builder builder12 = builder9.setExtension('u', "57703690");
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("Feb");
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder19 = builder16.setExtension('a', "French");
        java.util.Locale locale20 = builder19.build();
        java.util.Locale.Builder builder21 = builder9.setLocale(locale20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        boolean boolean28 = localDateTime26.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekyear();
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayCountry();
        java.util.Locale locale37 = java.util.Locale.UK;
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder38.setExtension('a', "cinese");
        java.util.Locale locale42 = builder38.build();
        java.lang.String str43 = locale37.getDisplayName(locale42);
        java.lang.String str44 = locale35.getDisplayLanguage(locale37);
        int int45 = property34.getMaximumShortTextLength(locale35);
        java.util.Locale.Builder builder46 = builder9.setLocale(locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder48 = builder9.setLanguageTag("2022-02-21T15:12:45.641+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "China" + "'", str36, "China");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "English (United Kingdom)" + "'", str43, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese" + "'", str44, "Chinese");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test16025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16025");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight4 = dateTime1.toDateMidnight();
        org.joda.time.LocalDate localDate5 = dateTime1.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        int int7 = dateTime1.get(dateTimeFieldType6);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        int int21 = dateTimeZone18.getStandardOffset((long) 1969);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long25 = dateTimeZone18.getMillisKeepLocal(dateTimeZone23, (long) 99);
        org.joda.time.DateTime dateTime26 = dateTime1.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime1.getZone();
        int int29 = dateTime1.getMonthOfYear();
        org.joda.time.DateTime.Property property30 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime31 = property30.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 150L + "'", long25 == 150L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test16026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16026");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTime.Property property5 = dateTime3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear((-1));
        org.joda.time.DateTime dateTime11 = dateTime7.plusHours((int) (byte) 100);
        org.joda.time.DateTime.Property property12 = dateTime7.era();
        int int13 = property5.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime7.toString(dateTimeFormatter14);
        org.joda.time.DateTime.Property property16 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime17 = property16.roundCeilingCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(258);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime25 = dateTime21.plusSeconds(26);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime27 = property26.roundCeilingCopy();
        org.joda.time.DateTime dateTime28 = property26.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime30 = property26.addWrapFieldToCopy(667);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket45.setZone(dateTimeZone50);
        dateTimeParserBucket36.setZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusHours((int) (byte) 0);
        boolean boolean58 = dateTime56.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks((int) 'a');
        boolean boolean63 = dateTime56.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime();
        org.joda.time.DateTime dateTime66 = dateTime62.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.weekyear();
        boolean boolean72 = dateTime66.equals((java.lang.Object) localDateTime68);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime66.getZone();
        dateTimeParserBucket36.setZone(dateTimeZone73);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket36.getChronology();
        dateTimeParserBucket36.setOffset(6);
        org.joda.time.Chronology chronology79 = null;
        java.util.Locale locale80 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology79, locale80, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField84 = null;
        dateTimeParserBucket83.saveField(dateTimeField84, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale89 = java.util.Locale.ROOT;
        dateTimeParserBucket83.saveField(dateTimeFieldType87, "it", locale89);
        java.lang.String str91 = dateTimeFieldType87.toString();
        java.lang.String str92 = dateTimeFieldType87.toString();
        dateTimeParserBucket36.saveField(dateTimeFieldType87, 54637049);
        org.joda.time.DateTime.Property property95 = dateTime30.property(dateTimeFieldType87);
        boolean boolean96 = dateTime19.isSupported(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-21T15:14:48.589+00:00:00.052" + "'", str15, "2022-02-21T15:14:48.589+00:00:00.052");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "weekOfWeekyear" + "'", str91, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "weekOfWeekyear" + "'", str92, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test16027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16027");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.weeks();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusDays(212);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfEvenCopy();
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfSecond();
        int[] intArray23 = chronology2.get((org.joda.time.ReadablePartial) localDateTime19, (long) 365);
        org.joda.time.DurationField durationField24 = chronology2.months();
        java.lang.String str25 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology2.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekyearOfCentury();
        java.lang.String str34 = dateTimeField32.getAsShortText(10L);
        boolean boolean36 = dateTimeField32.isLeap((long) 977);
        long long39 = dateTimeField32.add((long) 57, (long) 2000);
        java.lang.String str41 = dateTimeField32.getAsText(1645456098616L);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusDays(212);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime localDateTime52 = property51.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = property51.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readableDuration54);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.secondOfMinute();
        org.joda.time.DurationField durationField62 = dateTimeField61.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusYears(10);
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.lang.String str70 = locale69.getLanguage();
        java.lang.String str71 = locale69.getScript();
        java.lang.String str72 = dateTimeField61.getAsShortText((org.joda.time.ReadablePartial) localDateTime66, locale69);
        java.lang.String str73 = locale69.getISO3Language();
        java.lang.String str74 = locale69.getDisplayScript();
        java.lang.String str75 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, 822, locale69);
        java.lang.String str76 = dateTimeField26.getAsShortText(1645456181846L, locale69);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1978 + "'", int20 == 1978);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 365]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "70" + "'", str34, "70");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 63113904000057L + "'", long39 == 63113904000057L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNull(durationField62);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "it" + "'", str70, "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "48" + "'", str72, "48");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ita" + "'", str73, "ita");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "822" + "'", str75, "822");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "lun" + "'", str76, "lun");
    }

    @Test
    public void test16028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16028");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 54619321);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime dateTime16 = dateTime12.plusHours((int) (byte) 100);
        int int17 = dateTime12.getDayOfYear();
        int int18 = dateTime12.getDayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime12.plus((long) 21);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyear();
        int int24 = dateTimeField22.getMinimumValue((long) 'x');
        dateTimeParserBucket5.saveField(dateTimeField22, 54401609);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 514);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime35 = property32.addWrapFieldToCopy(28);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.millisOfSecond();
        long long42 = dateTimeField40.roundHalfEven((long) 54564935);
        long long44 = dateTimeField40.roundCeiling((long) 411);
        long long47 = dateTimeField40.add(0L, (long) 164);
        dateTimeParserBucket5.saveField(dateTimeField40, 26646);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket5.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-292275054) + "'", int24 == (-292275054));
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 54564935L + "'", long42 == 54564935L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 411L + "'", long44 == 411L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 164L + "'", long47 == 164L);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test16029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16029");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-17276168));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test16030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16030");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(99);
        int int3 = dateTimeZone1.getOffsetFromLocal((-3379860L));
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear((-1));
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths(10);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfDay();
        int int17 = dateTime15.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = dateTime15.withZone(dateTimeZone19);
        long long23 = dateTimeZone19.nextTransition(1645455982776L);
        org.joda.time.DateTime dateTime24 = dateTime9.withZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) 0);
        boolean boolean30 = dateTime28.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime28.toMutableDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime40 = property37.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withWeekyear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withWeekyear((-1));
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths(10);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfDay();
        int int50 = dateTime48.getYearOfEra();
        org.joda.time.DateTime.Property property51 = dateTime48.secondOfDay();
        int int52 = property51.getMaximumValue();
        org.joda.time.DateTime dateTime53 = property51.getDateTime();
        org.joda.time.DateTime dateTime55 = dateTime53.plus(12L);
        org.joda.time.DateTime dateTime56 = localDateTime42.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean57 = dateTimeZone31.isLocalDateTimeGap(localDateTime42);
        long long59 = dateTimeZone19.getMillisKeepLocal(dateTimeZone31, 62135596800972L);
        org.joda.time.DateTime dateTime60 = localDateTime4.toDateTime(dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime63 = dateTime60.withPeriodAdded(readablePeriod61, 68962671);
        java.lang.String str64 = dateTime60.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 99 + "'", int3 == 99);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645455982776L + "'", long23 == 1645455982776L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 86399 + "'", int52 == 86399);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 62135596800972L + "'", long59 == 62135596800972L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-21T15:14:48.735+00:00:00.052" + "'", str64, "2022-02-21T15:14:48.735+00:00:00.052");
    }

    @Test
    public void test16031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16031");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        long long8 = durationField5.getDifferenceAsLong((long) 948, (long) 519);
        long long11 = durationField5.getValueAsLong((-31948L), (-31948L));
        long long14 = durationField5.add((-1L), (int) (short) 0);
        long long17 = durationField5.add(1645455977932L, (long) 2922789);
        java.lang.String str18 = durationField5.toString();
        long long20 = durationField5.getMillis((long) 671);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        java.lang.String str26 = chronology24.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology30 = chronology24.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField31 = chronology24.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology24.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(35999999L, chronology24);
        org.joda.time.DurationField durationField34 = chronology24.minutes();
        int int35 = durationField5.compareTo(durationField34);
        long long38 = durationField5.subtract((long) 'a', (-327674264L));
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 12167496377932L + "'", long17 == 12167496377932L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DurationField[hours]" + "'", str18, "DurationField[hours]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2415600000L + "'", long20 == 2415600000L);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1179627350400097L + "'", long38 == 1179627350400097L);
    }

    @Test
    public void test16032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16032");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-21T15:43:26.297+00:00:00.052");
    }

    @Test
    public void test16033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16033");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int4 = localDateTime1.get(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withMillisOfDay(0);
        java.lang.String str7 = localDateTime1.toString();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusMillis(839);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.052" + "'", str7, "1970-01-01T00:00:00.052");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test16034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16034");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        boolean boolean13 = dateTime11.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) 'a');
        boolean boolean18 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.weekyear();
        boolean boolean27 = dateTime21.equals((java.lang.Object) localDateTime23);
        int[] intArray29 = chronology7.get((org.joda.time.ReadablePartial) localDateTime23, (long) (byte) 1);
        org.joda.time.DateTimeField dateTimeField30 = chronology7.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        java.lang.Integer int50 = dateTimeParserBucket46.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket46.setZone(dateTimeZone51);
        dateTimeParserBucket37.setZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours((int) (byte) 0);
        boolean boolean59 = dateTime57.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusWeeks((int) 'a');
        boolean boolean64 = dateTime57.isAfter((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime65 = dateTime63.toDateTime();
        org.joda.time.DateTime dateTime67 = dateTime63.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.weekyear();
        boolean boolean73 = dateTime67.equals((java.lang.Object) localDateTime69);
        org.joda.time.DateTimeZone dateTimeZone74 = dateTime67.getZone();
        dateTimeParserBucket37.setZone(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.LocalDateTime.Property property79 = localDateTime77.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime80 = property79.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime85 = property83.addWrapFieldToCopy((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property83.getFieldType();
        java.util.Locale locale88 = java.util.Locale.ITALY;
        dateTimeParserBucket37.saveField(dateTimeFieldType86, "2022-02-21T15:06:22.606+00:00:00.052", locale88);
        java.lang.String str90 = locale88.getDisplayLanguage();
        java.lang.String str91 = dateTimeField30.getAsShortText((-4718898604799868L), locale88);
        java.lang.String str92 = locale88.toLanguageTag();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Italian" + "'", str90, "Italian");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "21" + "'", str91, "21");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "it-IT" + "'", str92, "it-IT");
    }

    @Test
    public void test16035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16035");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(72000052L, dateTimeZone1);
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minus(readableDuration10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        boolean boolean17 = dateTime15.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        boolean boolean22 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property24 = dateTime15.secondOfDay();
        int int25 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime15);
        java.lang.String str26 = dateTime6.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime6.withMonthOfYear(54877);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54877 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T20:00:59.104+00:00:00.052" + "'", str26, "1970-01-01T20:00:59.104+00:00:00.052");
    }

    @Test
    public void test16036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16036");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.clockhourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getVariant();
        java.lang.String str8 = dateTimeField4.getAsText((-1), locale6);
        boolean boolean9 = locale6.hasExtensions();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.getCountry();
        java.util.Set<java.lang.Character> charSet12 = locale6.getExtensionKeys();
        java.util.Set<java.lang.String> strSet13 = locale6.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1" + "'", str8, "-1");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test16037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16037");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        org.joda.time.DurationField durationField5 = property4.getRangeDurationField();
        int int6 = property4.getMaximumValue();
        org.joda.time.DateTime dateTime7 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime8 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plusDays(26);
        int int11 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime12 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((-1));
        org.joda.time.DateTime.Property property17 = dateTime14.centuryOfEra();
        org.joda.time.DateTime.Property property18 = dateTime14.minuteOfHour();
        boolean boolean19 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime22 = dateTime14.withDurationAdded(readableDuration20, 896);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2922789 + "'", int6 == 2922789);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test16038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16038");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.weekyear();
        boolean boolean19 = dateTime13.equals((java.lang.Object) localDateTime15);
        org.joda.time.DateTime dateTime21 = dateTime13.minusMonths(54616882);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundHalfEvenCopy();
        int int26 = property23.get();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        boolean boolean33 = localDateTime31.isSupported(dateTimeFieldType32);
        java.util.Date date34 = null; // flaky: localDateTime31.toDate();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusSeconds(4);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.plusYears(536);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plus(readablePeriod39);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        int int42 = property23.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime44 = property23.addToCopy(54715);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 13 + "'", int26 == 13);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test16039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16039");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int) 'a');
        boolean boolean9 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear((-1));
        org.joda.time.DateTime dateTime15 = dateTime11.plusHours((int) (byte) 100);
        boolean boolean17 = dateTime15.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime15.toMutableDateTime(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = dateTime15.toTimeOfDay();
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded((long) '4', 54616882);
        org.joda.time.DateTime.Property property24 = dateTime23.year();
        boolean boolean26 = dateTime23.isAfter((long) 54437);
        boolean boolean27 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime1.toDateTime(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime1.toString(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-21T15:14:48.853+00:00:00.052" + "'", str31, "2022-02-21T15:14:48.853+00:00:00.052");
    }

    @Test
    public void test16040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16040");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology2);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.monthOfYear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test16041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16041");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int4 = localDateTime1.get(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        int int6 = localDateTime1.indexOf(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy(1645455960000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455960000 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test16042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16042");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test16043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16043");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = dateTime5.withZone(dateTimeZone9);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = dateTimeZone9.getName((long) 26, locale13);
        long long17 = dateTimeZone9.adjustOffset((long) 657, false);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        java.util.Date date22 = dateTime19.toDate();
        org.joda.time.DateTime.Property property23 = dateTime19.dayOfMonth();
        org.joda.time.DateTime.Property property24 = dateTime19.dayOfMonth();
        java.lang.String str25 = property24.getAsString();
        org.joda.time.DateTime dateTime27 = property24.addToCopy((int) 'a');
        org.joda.time.LocalDateTime localDateTime28 = dateTime27.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.plus(readableDuration29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime30.toMutableDateTimeISO();
        int int32 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) mutableDateTime31);
        long long35 = dateTimeZone9.adjustOffset(1586790520176L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.052" + "'", str14, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 657L + "'", long17 == 657L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Mon Feb 21 15:14:48 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "21" + "'", str25, "21");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1586790520176L + "'", long35 == 1586790520176L);
    }

    @Test
    public void test16044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16044");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone5);
        java.lang.String str8 = dateTimeZone5.getID();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale10.getScript();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleKeys();
        java.lang.String str14 = dateTimeZone5.getShortName((long) 60639663, locale10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.052" + "'", str8, "+00:00:00.052");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.052" + "'", str14, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test16045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16045");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("28");
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        boolean boolean4 = timeZone1.observesDaylightTime();
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId5);
        boolean boolean7 = timeZone6.observesDaylightTime();
        int int9 = timeZone6.getOffset((-9223372012585698203L));
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test16046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16046");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(289, 292275055, 54612179, 54377, 720, 1868400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54377 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16047");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(0L);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        java.lang.Object obj16 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        java.lang.String str21 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj16, chronology19);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime14.toMutableDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.clockhourOfDay();
        org.joda.time.DurationField durationField26 = chronology19.halfdays();
        java.lang.String str27 = durationField26.getName();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "halfdays" + "'", str27, "halfdays");
    }

    @Test
    public void test16048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16048");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        java.util.Date date7 = localDateTime4.toDate();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusSeconds(4);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withFieldAdded(durationFieldType10, 213);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.year();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology16);
        java.lang.String str18 = chronology16.toString();
        org.joda.time.DurationField durationField19 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfDay();
        boolean boolean21 = localDateTime12.equals((java.lang.Object) dateTimeField20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField20.getType();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfMinute();
        org.joda.time.DurationField durationField29 = chronology26.millis();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusSeconds((int) ' ');
        long long35 = chronology26.set((org.joda.time.ReadablePartial) localDateTime33, (long) 99);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = locale36.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology26, locale36, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfDay();
        dateTimeParserBucket40.saveField(dateTimeFieldType41, 577);
        java.lang.Object obj44 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        boolean boolean51 = localDateTime49.isSupported(dateTimeFieldType50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfMinute();
        boolean boolean57 = dateTimeFieldType50.isSupported(chronology54);
        org.joda.time.DateTimeField dateTimeField58 = chronology54.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj44, chronology54);
        org.joda.time.DateTimeField dateTimeField60 = chronology54.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType41.getField(chronology54);
        org.joda.time.DateTimeField dateTimeField63 = chronology54.yearOfEra();
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType22.getField(chronology54);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.secondOfMinute();
        org.joda.time.DurationField durationField70 = dateTimeField69.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray77 = localDateTime76.getValues();
        int int78 = dateTimeField69.getMaximumValue((org.joda.time.ReadablePartial) localDateTime72, intArray77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime72.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property81 = localDateTime72.weekyear();
        org.joda.time.LocalDateTime localDateTime82 = property81.withMinimumValue();
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime85 = property83.addToCopy(671);
        org.joda.time.LocalDateTime localDateTime86 = property83.roundFloorCopy();
        long long88 = chronology54.set((org.joda.time.ReadablePartial) localDateTime86, (long) 100);
        org.joda.time.DurationField durationField89 = chronology54.centuries();
        int int92 = durationField89.getDifference(1645456293645L, 2623804000L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-31948L) + "'", long35 == (-31948L));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNull(durationField70);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(intArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 59 + "'", int78 == 59);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-9223372016870400000L) + "'", long88 == (-9223372016870400000L));
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test16049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16049");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime8 = dateTime6.withYear(1146);
        int int9 = dateTime6.getYearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property11 = dateTime6.millisOfDay();
        org.joda.time.DateTime.Property property12 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime13 = property12.getDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.Chronology chronology24 = chronology18.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField25 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(35999999L, chronology18);
        org.joda.time.DurationField durationField28 = chronology18.minutes();
        org.joda.time.DurationField durationField29 = chronology18.hours();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 559, chronology18, locale30, (java.lang.Integer) 822, 54381);
        org.joda.time.DateTimeField dateTimeField34 = chronology18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField35 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology18.weekyearOfCentury();
        org.joda.time.DurationField durationField37 = chronology18.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) property12, chronology18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test16050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16050");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Feb");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale.Builder builder9 = builder4.setExtension('u', "33");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = builder10.build();
        java.util.Locale.Builder builder13 = builder10.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test16051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16051");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property3.addWrapFieldToCopy(2000);
        org.joda.time.LocalDateTime localDateTime8 = property3.roundCeilingCopy();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test16052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16052");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "cinese");
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("coreano");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("999");
        java.util.Locale.Builder builder9 = builder7.setLanguage("ja");
        java.util.Locale.Builder builder12 = builder9.setExtension('u', "57703690");
        java.util.Locale.Builder builder13 = builder9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder9.setUnicodeLocaleKeyword("2022-02-21T15:07:09.276Z", "-0001-02-22T15:06:50.369+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-21T15:07:09.276Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test16053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16053");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        int int6 = dateTime3.getWeekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.minus(readablePeriod7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        boolean boolean12 = dateTimeZone10.isStandardOffset((-54596000L));
        int int14 = dateTimeZone10.getOffset((long) 54448917);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
    }

    @Test
    public void test16054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16054");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.era();
        boolean boolean12 = localDateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        boolean boolean18 = dateTimeFieldType11.isSupported(chronology15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(0L, chronology15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int) 'a');
        int int24 = dateTime23.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime dateTime27 = dateTime23.withField(dateTimeFieldType25, 2);
        boolean boolean28 = dateTime19.isSupported(dateTimeFieldType25);
        boolean boolean29 = dateTime3.isSupported(dateTimeFieldType25);
        java.lang.String str30 = dateTimeFieldType25.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 24 + "'", int24 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "weekOfWeekyear" + "'", str30, "weekOfWeekyear");
    }

    @Test
    public void test16055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16055");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField5 = chronology2.monthOfYear();
        org.joda.time.DurationField durationField6 = chronology2.years();
        int int8 = durationField6.getValue(195760800000L);
        java.lang.String str9 = durationField6.getName();
        int int12 = durationField6.getDifference(1385046867171L, 27424214L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "years" + "'", str9, "years");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 43 + "'", int12 == 43);
    }

    @Test
    public void test16056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16056");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime8.minusDays(54475);
        java.lang.String str13 = dateTime12.toString();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1820-11-08T00:00:00.999+00:00:00.052" + "'", str13, "1820-11-08T00:00:00.999+00:00:00.052");
    }

    @Test
    public void test16057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16057");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((int) ' ');
        long long11 = chronology2.set((org.joda.time.ReadablePartial) localDateTime9, (long) 99);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDurationAdded(readableDuration12, 0);
        int int15 = localDateTime9.getMillisOfSecond();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.parse("2022-02-21T15:06:35.241+00:00:00.052");
        boolean boolean18 = localDateTime9.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        java.lang.String str26 = chronology24.toString();
        org.joda.time.DurationField durationField27 = chronology24.hours();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology30);
        java.lang.String str32 = chronology30.toString();
        org.joda.time.DurationField durationField33 = chronology30.hours();
        int int34 = durationField27.compareTo(durationField33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        java.lang.String str39 = chronology37.toString();
        org.joda.time.DurationField durationField40 = chronology37.hours();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        java.lang.String str45 = chronology43.toString();
        org.joda.time.DurationField durationField46 = chronology43.hours();
        int int47 = durationField40.compareTo(durationField46);
        int int48 = durationField27.compareTo(durationField46);
        org.joda.time.DurationFieldType durationFieldType49 = durationField27.getType();
        long long51 = durationField27.getMillis(2022);
        long long54 = durationField27.getMillis(536, (long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        java.lang.String str59 = chronology57.toString();
        org.joda.time.DurationField durationField60 = chronology57.hours();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology63);
        java.lang.String str65 = chronology63.toString();
        org.joda.time.DurationField durationField66 = chronology63.hours();
        int int67 = durationField60.compareTo(durationField66);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(chronology70);
        java.lang.String str72 = chronology70.toString();
        org.joda.time.DurationField durationField73 = chronology70.hours();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology76 = localDateTime75.getChronology();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology76);
        java.lang.String str78 = chronology76.toString();
        org.joda.time.DurationField durationField79 = chronology76.hours();
        int int80 = durationField73.compareTo(durationField79);
        int int81 = durationField60.compareTo(durationField79);
        org.joda.time.DurationFieldType durationFieldType82 = durationField60.getType();
        long long84 = durationField60.getMillis(2022);
        java.lang.String str85 = durationField60.getName();
        int int86 = durationField27.compareTo(durationField60);
        long long89 = durationField27.add(977L, (long) 767);
        long long92 = durationField27.add((-1645487999896L), 3);
        org.joda.time.DurationFieldType durationFieldType93 = durationField27.getType();
        java.lang.String str94 = durationFieldType93.getName();
        boolean boolean95 = localDateTime20.isSupported(durationFieldType93);
        java.lang.String str96 = durationFieldType93.getName();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-31948L) + "'", long11 == (-31948L));
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[UTC]" + "'", str32, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 7279200000L + "'", long51 == 7279200000L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1929600000L + "'", long54 == 1929600000L);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[UTC]" + "'", str59, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[UTC]" + "'", str65, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[UTC]" + "'", str72, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ISOChronology[UTC]" + "'", str78, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 7279200000L + "'", long84 == 7279200000L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hours" + "'", str85, "hours");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 2761200977L + "'", long89 == 2761200977L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1645477199896L) + "'", long92 == (-1645477199896L));
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "hours" + "'", str94, "hours");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "hours" + "'", str96, "hours");
    }

    @Test
    public void test16058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16058");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        boolean boolean15 = dateTime13.isAfter(7279200000L);
        org.joda.time.DateTime dateTime17 = dateTime13.minusMonths(887);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(577);
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(52596048);
        int int22 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime.Property property23 = dateTime17.yearOfCentury();
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime17.withCenturyOfEra(57772586);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57772586 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test16059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16059");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        int int4 = property3.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundFloorCopy();
        org.joda.time.Interval interval7 = property3.toInterval();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(interval7);
    }

    @Test
    public void test16060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16060");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(54756, 12, 39, 604, 54738, 836, 54509);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 604 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16061");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        double double2 = languageRange1.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Set<java.lang.String> strSet6 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.Locale.FilteringMode filteringMode17 = null;
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15, filteringMode17);
        java.lang.String str19 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.Locale.FilteringMode filteringMode27 = null;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList25, filteringMode27);
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList25, filteringMode29);
        boolean boolean31 = strSet6.removeAll((java.util.Collection<java.lang.String>) strList25);
        java.util.stream.Stream<java.lang.String> strStream32 = strSet6.stream();
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet6);
        boolean boolean34 = strSet6.isEmpty();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode29.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertNotNull(strList33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test16062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16062");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusMinutes(207);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.DurationField durationField18 = property16.getRangeDurationField();
        int int19 = property16.get();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "70" + "'", str6, "70");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1969 + "'", int19 == 1969);
    }

    @Test
    public void test16063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16063");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.weekyear();
        boolean boolean19 = dateTime13.equals((java.lang.Object) localDateTime15);
        org.joda.time.DateTime dateTime21 = dateTime13.minusMonths(54616882);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusMonths(766);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear(405);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withSecondOfMinute(0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMillisOfDay(54494992);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusHours(54456949);
        int int34 = localDateTime33.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test16064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16064");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        long long7 = dateTimeField4.add((long) 2922789, 100L);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        dateTimeParserBucket13.saveField(dateTimeFieldType17, "it", locale19);
        int int21 = dateTimeField4.getMaximumShortTextLength(locale19);
        java.lang.String str23 = dateTimeField4.getAsText((long) '4');
        org.joda.time.DurationField durationField24 = dateTimeField4.getDurationField();
        int int26 = dateTimeField4.getMaximumValue((long) (-948));
        java.lang.String str28 = dateTimeField4.getAsShortText((long) 54656);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property43 = dateTime40.centuryOfEra();
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = property43.getAsText(locale44);
        java.lang.String str47 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime37, (-1), locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = localDateTime37.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime37.minusDays(51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusHours((int) (byte) 0);
        java.util.Date date60 = dateTime57.toDate();
        org.joda.time.DateTime.Property property61 = dateTime57.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
        boolean boolean63 = localDateTime55.isSupported(dateTimeFieldType62);
        org.joda.time.DateTimeField[] dateTimeFieldArray64 = localDateTime55.getFields();
        int int65 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = localDateTime51.toString(dateTimeFormatter66);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.millisOfSecond();
        int int73 = property72.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime74 = property72.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plus(readableDuration75);
        int int77 = localDateTime74.getYearOfCentury();
        int[] intArray78 = localDateTime74.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField4.addWrapField((org.joda.time.ReadablePartial) localDateTime51, (-3), intArray78, 708);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3155762922789L + "'", long7 == 3155762922789L);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 99 + "'", int26 == 99);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "70" + "'", str28, "70");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "20" + "'", str46, "20");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1" + "'", str47, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Mon Feb 21 15:14:49 GMT 2022");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-01-01T15:14:49.132" + "'", str67, "2022-01-01T15:14:49.132");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 70 + "'", int77 == 70);
        org.junit.Assert.assertNotNull(intArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1, 52]");
    }

    @Test
    public void test16065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16065");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant2 = null;
        int int3 = dateTimeZone1.getOffset(readableInstant2);
        java.lang.String str5 = dateTimeZone1.getName(0L);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone1);
        int int8 = dateTimeZone1.getOffset((long) 25);
        java.lang.String str10 = dateTimeZone1.getName((long) 768);
        java.lang.String str11 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((-58380393599053L), dateTimeZone1);
        long long16 = dateTimeZone1.convertLocalToUTC((-958L), false, 1645456007886L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.052" + "'", str5, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.052" + "'", str10, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.052" + "'", str11, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1010L) + "'", long16 == (-1010L));
    }

    @Test
    public void test16066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16066");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = chronology3.millis();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        long long12 = chronology3.set((org.joda.time.ReadablePartial) localDateTime10, (long) 99);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology3, locale13, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(72000052L, dateTimeZone19);
        dateTimeParserBucket17.setZone(dateTimeZone19);
        java.util.Locale locale23 = dateTimeParserBucket17.getLocale();
        java.util.Locale locale24 = dateTimeParserBucket17.getLocale();
        dateTimeParserBucket17.setOffset((java.lang.Integer) 661);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-31948L) + "'", long12 == (-31948L));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
    }

    @Test
    public void test16067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16067");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField5 = chronology2.monthOfYear();
        long long8 = dateTimeField5.getDifferenceAsLong((long) 836, (long) 538);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test16068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16068");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean2 = strSet0.add("10");
        java.util.stream.Stream<java.lang.String> strStream3 = strSet0.parallelStream();
        java.util.Set<java.lang.String> strSet4 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean5 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet0.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.Locale.FilteringMode filteringMode17 = null;
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15, filteringMode17);
        java.lang.String str19 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.Locale.FilteringMode filteringMode27 = null;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList25, filteringMode27);
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList28, filteringMode29);
        java.util.Set<java.lang.String> strSet31 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.Locale.FilteringMode filteringMode42 = null;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList40, filteringMode42);
        java.lang.String str44 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strList40);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.util.Locale.FilteringMode filteringMode52 = null;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList50, filteringMode52);
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strList53, filteringMode54);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet31, filteringMode54);
        java.util.Iterator<java.lang.String> strItor57 = strSet31.iterator();
        boolean boolean58 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet31);
        java.util.stream.Stream<java.lang.String> strStream59 = strSet31.parallelStream();
        strSet31.clear();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode29.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strStream59);
    }

    @Test
    public void test16069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16069");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = dateTime5.withZone(dateTimeZone9);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = dateTimeZone9.getName((long) 26, locale13);
        long long17 = dateTimeZone9.adjustOffset((long) 657, false);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        boolean boolean23 = dateTime21.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime21.toMutableDateTime(dateTimeZone24);
        long long28 = dateTimeZone9.getMillisKeepLocal(dateTimeZone24, 657L);
        java.lang.String str30 = dateTimeZone24.getName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.052" + "'", str14, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 657L + "'", long17 == 657L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 657L + "'", long28 == 657L);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.052" + "'", str30, "+00:00:00.052");
    }

    @Test
    public void test16070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16070");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.weekyear();
        boolean boolean19 = dateTime13.equals((java.lang.Object) localDateTime15);
        org.joda.time.DateTime dateTime21 = dateTime13.minusMonths(54616882);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundCeilingCopy();
        int int27 = localDateTime26.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withDate(524, 815, 681);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 815 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test16071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16071");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekyear();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        boolean boolean6 = locale5.hasExtensions();
        boolean boolean7 = property4.equals((java.lang.Object) boolean6);
        org.joda.time.LocalDateTime localDateTime9 = property4.setCopy(25);
        int int10 = property4.getMinimumValue();
        java.lang.String str11 = property4.toString();
        boolean boolean12 = property4.isLeap();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[weekyear]" + "'", str11, "Property[weekyear]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test16072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16072");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("cinese");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        int int6 = strSet5.size();
        java.lang.Object[] objArray7 = strSet5.toArray();
        java.util.Iterator<java.lang.String> strItor8 = strSet5.iterator();
        boolean boolean9 = strSet5.isEmpty();
        java.util.Set<java.lang.String> strSet10 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Iterator<java.lang.String> strItor11 = strSet10.iterator();
        java.util.Iterator<java.lang.String> strItor12 = strSet10.iterator();
        java.lang.Object[] objArray13 = strSet10.toArray();
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray15 = strSet14.toArray();
        boolean boolean16 = strSet14.isEmpty();
        int int17 = strSet14.size();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet14.stream();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        java.lang.String str25 = dateTimeField23.getAsShortText((-31948L));
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYear((int) (short) 100);
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime30, locale33);
        long long37 = dateTimeField23.add((-31948L), 54391);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfDay();
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = locale44.getVariant();
        java.lang.String str46 = dateTimeField42.getAsText((-1), locale44);
        boolean boolean47 = locale44.hasExtensions();
        int int48 = dateTimeField23.getMaximumTextLength(locale44);
        boolean boolean49 = strSet14.equals((java.lang.Object) int48);
        int int50 = strSet14.size();
        boolean boolean51 = strSet10.retainAll((java.util.Collection<java.lang.String>) strSet14);
        int int52 = strSet14.size();
        boolean boolean53 = strSet5.addAll((java.util.Collection<java.lang.String>) strSet14);
        boolean boolean55 = strSet14.add("-0001-02-22T15:06:45.260+00:00:00.052");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 575 + "'", int6 == 575);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 575 + "'", int17 == 575);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "28" + "'", str25, "28");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 54359052L + "'", long37 == 54359052L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1" + "'", str46, "-1");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 575 + "'", int50 == 575);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 575 + "'", int52 == 575);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test16073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16073");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusMonths((int) (byte) 100);
        int[] intArray13 = chronology2.get((org.joda.time.ReadablePartial) localDateTime11, 100L);
        org.joda.time.DateTimeField dateTimeField14 = chronology2.minuteOfDay();
        org.joda.time.DurationField durationField15 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = chronology2.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean25 = dateTimeZone24.isFixed();
        java.lang.String str27 = dateTimeZone24.getShortName(1645455975652L);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        long long32 = dateTimeZone24.getMillisKeepLocal(dateTimeZone29, (long) 718);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = dateTimeZone24.getShortName((long) 948, locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((-3155673599531L), chronology20, locale34, (java.lang.Integer) 106, 1970);
        int int40 = dateTimeField16.getMaximumShortTextLength(locale34);
        org.joda.time.DurationField durationField41 = dateTimeField16.getLeapDurationField();
        java.lang.String str42 = dateTimeField16.toString();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.052" + "'", str27, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 718L + "'", long32 == 718L);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.052" + "'", str36, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str42, "DateTimeField[minuteOfDay]");
    }

    @Test
    public void test16074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16074");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        boolean boolean5 = dateTime1.isBeforeNow();
        boolean boolean6 = dateTime1.isBeforeNow();
        int int7 = dateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond(1);
        org.joda.time.Chronology chronology17 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusYears(54647283);
        org.joda.time.DateTime dateTime20 = dateTime1.withFields((org.joda.time.ReadablePartial) localDateTime14);
        int int21 = localDateTime14.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property22 = localDateTime14.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime29 = property26.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int35 = localDateTime33.indexOf(dateTimeFieldType34);
        boolean boolean36 = localDateTime14.isSupported(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test16075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16075");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology11);
        java.lang.String str13 = chronology11.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology11.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField18 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.secondOfMinute();
        org.joda.time.DurationField durationField20 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology11.secondOfMinute();
        boolean boolean23 = localDateTime8.equals((java.lang.Object) dateTimeField22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekyear(429);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withPeriodAdded(readablePeriod32, 54439881);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withYearOfEra(457071);
        int int37 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime36);
        long long40 = dateTimeField22.add(1586790657971L, (long) 54637);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1586845294971L + "'", long40 == 1586845294971L);
    }

    @Test
    public void test16076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16076");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.property(dateTimeFieldType12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.joda.time.DateTime dateTime20 = dateTime17.withWeekyear((int) 'x');
        int int21 = property13.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder23.setExtension('a', "cinese");
        java.util.Locale locale27 = builder23.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(3061065600001L, chronology22, locale27);
        org.joda.time.DateTimeField dateTimeField29 = chronology22.millisOfSecond();
        long long31 = dateTimeField29.roundCeiling((long) 54634662);
        int int33 = dateTimeField29.getLeapAmount((long) 61039738);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 54634662L + "'", long31 == 54634662L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test16077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16077");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology12.add(readablePeriod13, (long) 536, 784);
        org.joda.time.DurationField durationField17 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusDays(212);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekyear();
        int int30 = localDateTime28.getYearOfEra();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = locale32.getCountry();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        dateTimeParserBucket40.saveField(dateTimeFieldType44, "it", locale46);
        java.lang.String str48 = locale32.getDisplayName(locale46);
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleKeys();
        java.lang.String str50 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime28, 292278922, locale46);
        int int53 = dateTimeField19.getDifference((long) 54794584, (long) 149);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 536L + "'", long16 == 536L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1978 + "'", int30 == 1978);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English" + "'", str48, "English");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "292278922" + "'", str50, "292278922");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test16078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16078");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(15);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.minus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test16079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16079");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((-1));
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths(10);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfDay();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = dateTime6.withZone(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withWeekyear(54634888);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test16080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16080");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        org.joda.time.DurationField durationField5 = property4.getRangeDurationField();
        org.joda.time.DateTime dateTime6 = property4.withMaximumValue();
        java.lang.String str7 = property4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = property4.setCopy("+00:00:00.229");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+00:00:00.229\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[centuryOfEra]" + "'", str7, "Property[centuryOfEra]");
    }

    @Test
    public void test16081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16081");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        int int9 = dateTime8.getMinuteOfHour();
        int int10 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusHours((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.minus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) (byte) -1);
        boolean boolean18 = dateTime16.isAfter((long) (-3));
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test16082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16082");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = property9.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekyear((int) (short) 10);
        int int15 = localDateTime14.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusDays(31);
        boolean boolean18 = localDateTime5.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        java.lang.String str19 = localDateTime14.toString();
        int int20 = localDateTime14.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.plus(readableDuration21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMonthOfYear(54642810);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54642810 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0010-01-07T00:00:00.080" + "'", str19, "0010-01-07T00:00:00.080");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test16083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16083");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime5.toMutableDateTime(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = dateTime5.toTimeOfDay();
        org.joda.time.DateTime dateTime12 = dateTime5.minusDays(0);
        org.joda.time.DateTime.Property property13 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime14 = property13.roundFloorCopy();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours((int) (byte) 0);
        boolean boolean21 = dateTime19.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime19.toMutableDateTime(dateTimeZone22);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = dateTimeZone22.getName((long) (byte) 1, locale26);
        java.lang.String str28 = locale26.getScript();
        java.lang.String str29 = locale15.getDisplayScript(locale26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar34 = dateTime33.toGregorianCalendar();
        int int35 = dateTime33.getMillisOfSecond();
        org.joda.time.DateTime.Property property36 = dateTime33.minuteOfHour();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property42 = dateTime39.centuryOfEra();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = property42.getAsText(locale43);
        java.lang.String str46 = locale37.getDisplayName(locale43);
        int int47 = property36.getMaximumTextLength(locale43);
        java.util.Set<java.lang.String> strSet48 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str49 = locale15.getDisplayLanguage(locale43);
        java.lang.String str50 = property13.getAsText(locale43);
        org.joda.time.DurationField durationField51 = property13.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.052" + "'", str27, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 489 + "'", int35 == 489);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "it" + "'", str44, "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "20" + "'", str45, "20");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "coreano" + "'", str46, "coreano");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "coreano" + "'", str49, "coreano");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "febbraio" + "'", str50, "febbraio");
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test16084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16084");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTime dateTime6 = dateTime3.withWeekyear((int) 'x');
        org.joda.time.DateTime.Property property7 = dateTime3.minuteOfDay();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readableDuration8);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test16085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16085");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1970-01-01T00:00:00.080");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek(2049);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2049 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test16086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16086");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        boolean boolean7 = timeZone1.hasSameRules(timeZone6);
        int int9 = timeZone6.getOffset(1645455975652L);
        int int11 = timeZone6.getOffset(12167496377932L);
        timeZone6.setRawOffset(284);
        timeZone6.setID("2022-02-21T15:06:31.876+00:00:00.052");
        java.util.TimeZone.setDefault(timeZone6);
        java.lang.Object obj17 = timeZone6.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "java.util.SimpleTimeZone[id=2022-02-21T15:06:31.876+00:00:00.052,offset=284,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "java.util.SimpleTimeZone[id=2022-02-21T15:06:31.876+00:00:00.052,offset=284,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "java.util.SimpleTimeZone[id=2022-02-21T15:06:31.876+00:00:00.052,offset=284,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test16087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16087");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        java.util.Date date15 = dateTime12.toDate();
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        boolean boolean18 = localDateTime10.isSupported(dateTimeFieldType17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.plus(readablePeriod19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusYears(0);
        int int23 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property24 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime.Property property25 = localDateTime6.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime6.withYearOfCentury(60595082);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 60595082 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Feb 21 15:14:49 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test16088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16088");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfSecond(1);
        org.joda.time.Chronology chronology10 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(212);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property21.addWrapFieldToCopy(576);
        org.joda.time.LocalDateTime localDateTime24 = property21.withMinimumValue();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfMonth();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale26.getVariant();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.lang.Integer int46 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone47);
        dateTimeParserBucket33.setZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours((int) (byte) 0);
        boolean boolean55 = dateTime53.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusWeeks((int) 'a');
        boolean boolean60 = dateTime53.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = dateTime59.toDateTime();
        org.joda.time.DateTime dateTime63 = dateTime59.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.weekyear();
        boolean boolean69 = dateTime63.equals((java.lang.Object) localDateTime65);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime63.getZone();
        dateTimeParserBucket33.setZone(dateTimeZone70);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology74 = localDateTime73.getChronology();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime76 = property75.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime81 = property79.addWrapFieldToCopy((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property79.getFieldType();
        java.util.Locale locale84 = java.util.Locale.ITALY;
        dateTimeParserBucket33.saveField(dateTimeFieldType82, "2022-02-21T15:06:22.606+00:00:00.052", locale84);
        java.lang.String str86 = locale26.getDisplayVariant(locale84);
        int int87 = property25.getMaximumTextLength(locale84);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) 54395, chronology10, locale84);
        org.joda.time.DateTimeField dateTimeField89 = chronology10.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long94 = chronology10.getDateTimeMillis(357, 831, 54790, 54649);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 831 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test16089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16089");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("54634700");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test16090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16090");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight4 = dateTime1.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear((-1));
        org.joda.time.DateTime dateTime11 = dateTime7.withMillisOfDay(0);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        int int13 = property12.getMaximumValue();
        boolean boolean14 = dateTimeZone5.equals((java.lang.Object) property12);
        boolean boolean16 = dateTimeZone5.equals((java.lang.Object) "37");
        java.lang.String str17 = dateTimeZone5.getID();
        java.lang.String str19 = dateTimeZone5.getShortName(1645456209631L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.052" + "'", str17, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.052" + "'", str19, "+00:00:00.052");
    }

    @Test
    public void test16091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16091");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        int int5 = localDateTime4.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        org.joda.time.DurationField durationField11 = dateTimeField10.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray18 = localDateTime17.getValues();
        int int19 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime4.minusMonths(2035);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekyear(54642);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMinutes(865);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar38 = dateTime37.toGregorianCalendar();
        org.joda.time.DateTime dateTime40 = dateTime37.withWeekyear((int) 'x');
        org.joda.time.DateTime.Property property41 = dateTime37.minuteOfDay();
        org.joda.time.DateTime dateTime42 = localDateTime31.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        java.lang.String str43 = localDateTime31.toString();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime31.withWeekyear(952);
        int int46 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gregorianCalendar38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:00:00.999" + "'", str43, "1970-01-01T00:00:00.999");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test16092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16092");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        boolean boolean13 = dateTime11.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) 'a');
        boolean boolean18 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.weekyear();
        boolean boolean27 = dateTime21.equals((java.lang.Object) localDateTime23);
        int[] intArray29 = chronology7.get((org.joda.time.ReadablePartial) localDateTime23, (long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.minusMinutes(54410);
        int int32 = localDateTime23.getHourOfDay();
        int int33 = localDateTime23.getYear();
        org.joda.time.DateTime dateTime34 = localDateTime23.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks(527);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test16093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16093");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekyear((-1));
        org.joda.time.DateTime dateTime9 = dateTime5.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths((int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) 0);
        boolean boolean19 = dateTime17.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime17.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.era();
        int int24 = mutableDateTime22.get(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology27.millis();
        boolean boolean31 = dateTimeFieldType23.isSupported(chronology27);
        boolean boolean32 = dateTime13.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDateTime.Property property33 = localDateTime1.property(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime1.plus(readableDuration34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withWeekyear(54647556);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks(0);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minus(readableDuration40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime37.withWeekOfWeekyear(4539);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4539 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test16094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16094");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = chronology3.millis();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        long long12 = chronology3.set((org.joda.time.ReadablePartial) localDateTime10, (long) 99);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology3, locale13, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeField dateTimeField18 = chronology3.dayOfYear();
        org.joda.time.DurationField durationField19 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = chronology3.secondOfMinute();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = dateTimeField20.getAsText(28800610L, locale22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekyearOfCentury();
        java.lang.String str31 = dateTimeField29.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = property35.roundHalfEvenCopy();
        int int37 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime36.getFieldTypes();
        int int39 = localDateTime36.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.withWeekyear(54421);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withPeriodAdded(readablePeriod42, 318);
        int int45 = localDateTime44.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusWeeks(75);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime54 = property51.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusWeeks(162);
        boolean boolean59 = localDateTime44.isEqual((org.joda.time.ReadablePartial) localDateTime56);
        java.lang.Object obj60 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.LocalDateTime.Property property64 = localDateTime62.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime65 = property64.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.era();
        boolean boolean67 = localDateTime65.isSupported(dateTimeFieldType66);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.secondOfMinute();
        boolean boolean73 = dateTimeFieldType66.isSupported(chronology70);
        org.joda.time.DateTimeField dateTimeField74 = chronology70.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(obj60, chronology70);
        org.joda.time.DateTimeField dateTimeField76 = chronology70.minuteOfDay();
        java.util.Locale locale78 = java.util.Locale.US;
        java.lang.String str79 = dateTimeField76.getAsShortText(54409056, locale78);
        java.lang.String str80 = locale78.getDisplayLanguage();
        java.lang.String str81 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDateTime56, locale78);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime56.plusYears(54671);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-31948L) + "'", long12 == (-31948L));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "70" + "'", str31, "70");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "54409056" + "'", str79, "54409056");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "English" + "'", str80, "English");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0" + "'", str81, "0");
        org.junit.Assert.assertNotNull(localDateTime83);
    }

    @Test
    public void test16095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16095");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = dateTimeField4.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray12 = localDateTime11.getValues();
        int int13 = dateTimeField4.getMaximumValue((org.joda.time.ReadablePartial) localDateTime7, intArray12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMaximumValue();
        int int25 = localDateTime24.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withDayOfYear((int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localDateTime31.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withMillisOfSecond(576);
        int int37 = property26.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        boolean boolean38 = localDateTime7.equals((java.lang.Object) property26);
        org.joda.time.LocalDateTime localDateTime39 = property26.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test16096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16096");
        java.util.Locale locale2 = new java.util.Locale("2022-02-21T15:13:02.156+00:00:00.052", "2001-02-25T19:13:50.569+00:00:00.052");
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-21t15:13:02.156+00:00:00.052_2001-02-25T19:13:50.569+00:00:00.052");
    }

    @Test
    public void test16097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16097");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(35999999L, chronology3);
        org.joda.time.DurationField durationField13 = chronology3.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology3.dayOfWeek();
        java.lang.String str16 = dateTimeField14.getAsText((long) 211);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Thursday" + "'", str16, "Thursday");
    }

    @Test
    public void test16098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16098");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        int int4 = property3.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusHours(82800);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test16099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16099");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        int int6 = dateTime1.getDayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime1.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.minus((long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getRangeDurationType();
        int int13 = dateTime10.get(dateTimeFieldType11);
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime10.plusYears(896);
        int int17 = dateTime16.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 773 + "'", int13 == 773);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test16100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16100");
        java.util.Locale locale2 = new java.util.Locale("DurationField[weekyears]", "60595082-05-28T15:10:36.408+00:00:00.052");
        java.lang.Object obj3 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "durationfield[weekyears]_60595082-05-28T15:10:36.408+00:00:00.052");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "durationfield[weekyears]_60595082-05-28T15:10:36.408+00:00:00.052");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "durationfield[weekyears]_60595082-05-28T15:10:36.408+00:00:00.052");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "durationfield[weekyears]_60595082-05-28T15:10:36.408+00:00:00.052");
    }

    @Test
    public void test16101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16101");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName(3061065600001L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfEvenCopy();
        int int8 = localDateTime7.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.DurationField durationField14 = dateTimeField13.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray21 = localDateTime20.getValues();
        int int22 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16, intArray21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(54596);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusDays(54616882);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.year();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfEvenCopy();
        boolean boolean32 = dateTimeZone0.isLocalDateTimeGap(localDateTime31);
        java.lang.String str33 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight38 = dateTime35.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone39 = dateMidnight38.getZone();
        java.lang.String str41 = dateTimeZone39.getName(1645456049161L);
        long long43 = dateTimeZone0.getMillisKeepLocal(dateTimeZone39, (long) 434);
        boolean boolean45 = dateTimeZone39.isStandardOffset((long) 435);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.052" + "'", str2, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.052" + "'", str33, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.052" + "'", str41, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 434L + "'", long43 == 434L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test16102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16102");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.era();
        org.joda.time.DurationField durationField7 = chronology2.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = durationField7.add(54612000L, 54856290);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test16103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16103");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime7.withMillisOfDay(86399);
        org.joda.time.DateTime.Property property12 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        long long14 = property12.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test16104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16104");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2922789-04-13T15:14:10.357+00:00:00.052");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test16105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16105");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        int int9 = property8.getMaximumValue();
        org.joda.time.DateTime dateTime10 = property8.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        boolean boolean16 = dateTime14.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        boolean boolean21 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime20.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.weekyear();
        boolean boolean30 = dateTime24.equals((java.lang.Object) localDateTime26);
        org.joda.time.DateTime dateTime32 = dateTime24.minusMonths(54616882);
        org.joda.time.LocalDateTime localDateTime33 = dateTime32.toLocalDateTime();
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        int int35 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTime dateTime37 = property8.addToCopy(641);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours((int) (byte) 0);
        boolean boolean43 = dateTime41.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        boolean boolean48 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime();
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        java.lang.String str51 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfDay();
        long long56 = chronology50.add((long) 15, 120L, (int) (byte) -1);
        org.joda.time.DateTime dateTime57 = dateTime37.withChronology(chronology50);
        boolean boolean59 = dateTime57.isAfter(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86399 + "'", int9 == 86399);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str51, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-105L) + "'", long56 == (-105L));
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test16106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16106");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.Locale.FilteringMode filteringMode11 = null;
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList9, filteringMode11);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList9);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.Locale.FilteringMode filteringMode21 = null;
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList19, filteringMode21);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList19, filteringMode23);
        boolean boolean25 = strSet0.removeAll((java.util.Collection<java.lang.String>) strList19);
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet27 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean29 = strSet27.add("10");
        java.util.stream.Stream<java.lang.String> strStream30 = strSet27.parallelStream();
        java.util.Set<java.lang.String> strSet31 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean32 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet31);
        int int33 = strSet27.size();
        boolean boolean34 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet27);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime40 = dateTime36.plusSeconds(26);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        java.util.Date date42 = dateTime40.toDate();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromDateFields(date42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        int int48 = dateTime47.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime dateTime51 = dateTime47.withField(dateTimeFieldType49, 2);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = property55.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime61 = property59.addWrapFieldToCopy((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property59.getFieldType();
        org.joda.time.DateTime.Property property63 = dateTime47.property(dateTimeFieldType62);
        java.util.Date date64 = dateTime47.toDate();
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.fromDateFields(date64);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withWeekyear((-1));
        int int70 = dateTime67.getMillisOfDay();
        java.util.Date date71 = dateTime67.toDate();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime73.minusWeeks((int) 'a');
        int int76 = dateTime75.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime dateTime79 = dateTime75.withField(dateTimeFieldType77, 2);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology82 = localDateTime81.getChronology();
        org.joda.time.LocalDateTime.Property property83 = localDateTime81.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime84 = property83.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property87 = localDateTime86.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime89 = property87.addWrapFieldToCopy((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property87.getFieldType();
        org.joda.time.DateTime.Property property91 = dateTime75.property(dateTimeFieldType90);
        java.util.Date date92 = dateTime75.toDate();
        java.util.Date[] dateArray93 = new java.util.Date[] { date42, date64, date71, date92 };
        java.util.Date[] dateArray94 = strSet27.toArray(dateArray93);
        boolean boolean95 = strSet27.isEmpty();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 577 + "'", int33 == 577);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Mon Feb 21 15:15:16 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 858 + "'", int48 == 858);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(date64);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Mon Apr 13 15:14:50 GMT+00:00 2020");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 54889858 + "'", int70 == 54889858);
        org.junit.Assert.assertNotNull(date71);
// flaky:         org.junit.Assert.assertEquals(date71.toString(), "Mon Feb 21 15:14:50 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 858 + "'", int76 == 858);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(date92);
// flaky:         org.junit.Assert.assertEquals(date92.toString(), "Mon Apr 13 15:14:50 GMT+00:00 2020");
        org.junit.Assert.assertNotNull(dateArray93);
        org.junit.Assert.assertNotNull(dateArray94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test16107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16107");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra(54589);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYearOfCentury(1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours(333);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDurationAdded(readableDuration12, 204);
        int int15 = localDateTime9.getWeekyear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1901 + "'", int15 == 1901);
    }

    @Test
    public void test16108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16108");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(20);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plus(readableDuration11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(536);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours((int) (byte) 0);
        boolean boolean21 = dateTime19.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        boolean boolean26 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology33 = dateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) dateTime27, chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = chronology33.getZone();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(788923800000L, chronology33);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekyear((-1));
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths(10);
        org.joda.time.DateTime.Property property45 = dateTime44.minuteOfDay();
        int int46 = dateTime44.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = dateTime44.withZone(dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.withPeriodAdded(readablePeriod51, 13);
        boolean boolean54 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime55 = localDateTime14.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime14.minus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime14.withPeriodAdded(readablePeriod58, 686);
        org.joda.time.LocalDateTime.Property property61 = localDateTime14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField62 = property61.getField();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test16109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16109");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        int int6 = dateTime1.getDayOfYear();
        int int7 = dateTime1.getDayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime1.plus((long) 21);
        org.joda.time.DateTime dateTime11 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime1.withYearOfEra(54587);
        int int14 = dateTime1.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear((-1));
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths(10);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        org.joda.time.DateTime dateTime23 = property21.withMaximumValue();
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 2922789);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra(660);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.plus(readablePeriod28);
        boolean boolean30 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = dateTime25.plusMinutes(643);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 54889946 + "'", int14 == 54889946);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test16110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16110");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfMonth();
        long long9 = dateTimeField6.add((long) 660, 54634221);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField6.getType();
        java.lang.String str11 = dateTimeFieldType10.toString();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4720396694400660L + "'", long9 == 4720396694400660L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfMonth" + "'", str11, "dayOfMonth");
    }

    @Test
    public void test16111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16111");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime1.withChronology(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime1.minusMillis(887);
        int int9 = dateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime1.toString(dateTimeFormatter10);
        org.joda.time.DateTime.Property property12 = dateTime1.dayOfWeek();
        int int13 = dateTime1.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T15:14:49.983+00:00:00.052" + "'", str11, "2022-02-21T15:14:49.983+00:00:00.052");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test16112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16112");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfDay(104);
        int int14 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withMillisOfSecond(43);
        java.util.Date date17 = localDateTime16.toDate();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.hourOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 78 + "'", int14 == 78);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon May 01 00:00:00 GMT+00:00 1978");
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test16113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16113");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property4.addWrapFieldToCopy(608);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test16114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16114");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        java.util.Date date15 = dateTime12.toDate();
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        boolean boolean18 = localDateTime10.isSupported(dateTimeFieldType17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.plus(readablePeriod19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusYears(0);
        int int23 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property24 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withTime(0, 73, 1963, 203);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 73 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Feb 21 15:14:50 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test16115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16115");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        java.lang.String str5 = property3.getAsText();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        java.lang.String str9 = dateTimeZone7.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        int int12 = dateTimeZone7.getOffset(0L);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(948);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateTime dateTime20 = dateTime16.withDurationAdded((long) 26, 1901);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "52" + "'", str5, "52");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.052" + "'", str9, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test16116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16116");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray17 = localDateTime16.getValues();
        int int18 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12, intArray17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime25 = property22.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = property28.withMaximumValue();
        int int30 = localDateTime29.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withDayOfYear((int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime36.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.withMillisOfSecond(576);
        int int42 = property31.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        boolean boolean43 = localDateTime12.equals((java.lang.Object) property31);
        int int44 = property31.getLeapAmount();
        boolean boolean45 = languageRange1.equals((java.lang.Object) int44);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test16117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16117");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        int int9 = localDateTime8.size();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test16118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16118");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        boolean boolean29 = localDateTime27.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        boolean boolean35 = dateTimeFieldType28.isSupported(chronology32);
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.DateTime dateTime39 = dateTime22.withField(dateTimeFieldType37, 24);
        org.joda.time.Instant instant40 = dateTime39.toInstant();
        long long41 = instant40.getMillis();
        boolean boolean43 = instant40.isAfter(915728400028L);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1614212090021L + "'", long41 == 1614212090021L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test16119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16119");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        boolean boolean29 = localDateTime27.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        boolean boolean35 = dateTimeFieldType28.isSupported(chronology32);
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.DateTime dateTime39 = dateTime22.withField(dateTimeFieldType37, 24);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime44 = property43.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean47 = dateTimeZone46.isFixed();
        org.joda.time.DateTime dateTime48 = localDateTime44.toDateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekyear((-1));
        org.joda.time.DateTime dateTime54 = dateTime50.plusHours((int) (byte) 100);
        int int55 = dateTime50.getDayOfYear();
        int int56 = dateTime50.getDayOfWeek();
        boolean boolean57 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        int int59 = dateTime50.get(dateTimeFieldType58);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.secondOfMinute();
        org.joda.time.DurationField durationField66 = chronology63.millis();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusSeconds((int) ' ');
        long long72 = chronology63.set((org.joda.time.ReadablePartial) localDateTime70, (long) 99);
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.lang.String str74 = locale73.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology63, locale73, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeField dateTimeField78 = chronology63.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField79 = chronology63.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField80 = chronology63.hourOfDay();
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType58.getField(chronology63);
        org.joda.time.DateTimeField dateTimeField82 = chronology63.era();
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType37.getField(chronology63);
        org.joda.time.DateTimeField dateTimeField84 = chronology63.clockhourOfHalfday();
        org.joda.time.DurationField durationField85 = chronology63.minutes();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(localDateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-31948L) + "'", long72 == (-31948L));
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
    }

    @Test
    public void test16120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16120");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-25T11:11:43.010+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-25t11:11:43.010+00:00:00.052");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16121");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime5.toMutableDateTime(dateTimeZone8);
        int int10 = dateTime5.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime5.minus(readableDuration11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(60590228);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        java.util.Date date16 = dateTime14.toDate();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromDateFields(date16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 25 + "'", int10 == 25);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Oct 25 19:14:50 GMT+00:00 5051207");
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test16122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16122");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekyear((-1));
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths(10);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfDay();
        int int24 = dateTime22.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTime dateTime28 = dateTime22.withZone(dateTimeZone26);
        long long30 = dateTimeZone26.nextTransition(1645455982776L);
        org.joda.time.DateTime dateTime31 = dateTime16.withZone(dateTimeZone26);
        boolean boolean32 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime34 = dateTime11.minusMinutes(120);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("19");
        boolean boolean37 = dateTime11.equals((java.lang.Object) timeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        boolean boolean39 = dateTimeZone38.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645455982776L + "'", long30 == 1645455982776L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test16123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16123");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = dateTime5.withZone(dateTimeZone9);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = dateTimeZone9.getName((long) 26, locale13);
        long long17 = dateTimeZone9.adjustOffset((long) 657, false);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        boolean boolean23 = dateTime21.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime21.toMutableDateTime(dateTimeZone24);
        long long28 = dateTimeZone9.getMillisKeepLocal(dateTimeZone24, 657L);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plus(readableDuration39);
        int int41 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime31.minusMonths(15);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.weekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfDay(68903284);
        boolean boolean49 = dateTime29.equals((java.lang.Object) 68903284);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.052" + "'", str14, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 657L + "'", long17 == 657L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 657L + "'", long28 == 657L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test16124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16124");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.Locale.FilteringMode filteringMode10 = null;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList8, filteringMode10);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.Locale.FilteringMode filteringMode20 = null;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList18, filteringMode20);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList18, filteringMode22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap24);
        java.util.Set<java.lang.String> strSet26 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.Locale.FilteringMode filteringMode37 = null;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList35, filteringMode37);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList35);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.util.Locale.FilteringMode filteringMode47 = null;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strList45, filteringMode47);
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList45, filteringMode49);
        boolean boolean51 = strSet26.removeAll((java.util.Collection<java.lang.String>) strList45);
        java.util.Spliterator<java.lang.String> strSpliterator52 = strSet26.spliterator();
        java.lang.String str53 = java.util.Locale.lookupTag(languageRangeList25, (java.util.Collection<java.lang.String>) strSet26);
        java.util.Set<java.lang.String> strSet54 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        java.util.Locale.FilteringMode filteringMode65 = null;
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList63, filteringMode65);
        java.lang.String str67 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList63);
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.Locale.FilteringMode filteringMode75 = null;
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.lang.String>) strList73, filteringMode75);
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList73, filteringMode77);
        boolean boolean79 = strSet54.removeAll((java.util.Collection<java.lang.String>) strList73);
        java.util.Locale.FilteringMode filteringMode80 = null;
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags(languageRangeList25, (java.util.Collection<java.lang.String>) strSet54, filteringMode80);
        boolean boolean82 = strSet54.isEmpty();
        org.joda.time.tz.Provider provider83 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone85 = provider83.getZone("-0001-02-22T00:07:37.724+00:00:00.052");
        java.util.Set<java.lang.String> strSet86 = provider83.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone88 = provider83.getZone("2022-02-21T15:06:28.281+00:00:00.052");
        java.util.Set<java.lang.String> strSet89 = provider83.getAvailableIDs();
        boolean boolean90 = strSet54.containsAll((java.util.Collection<java.lang.String>) strSet89);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode49.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode77.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test16125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16125");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime5.toMutableDateTime(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = dateTime5.toTimeOfDay();
        org.joda.time.DateTime dateTime13 = dateTime5.withDurationAdded((long) '4', 54616882);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        int int15 = dateTime13.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-1));
        org.joda.time.DateTime dateTime21 = dateTime17.withMillisOfDay(0);
        int int22 = dateTime21.getCenturyOfEra();
        org.joda.time.DateTime.Property property23 = dateTime21.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfHalfday();
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.getDefault(category31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        boolean boolean38 = dateTime36.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime36.toMutableDateTime(dateTimeZone39);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = dateTimeZone39.getName((long) (byte) 1, locale43);
        java.lang.String str45 = locale43.getScript();
        java.lang.String str46 = locale32.getDisplayScript(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 54596, chronology29, locale43, (java.lang.Integer) 212, (-948));
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket49.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        java.lang.String str53 = dateTimeZone51.toString();
        java.lang.String str55 = dateTimeZone51.getName((long) (short) 0);
        long long57 = dateTimeZone50.getMillisKeepLocal(dateTimeZone51, (long) 9);
        org.joda.time.DateTime dateTime58 = dateTime21.withZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusHours((int) (byte) 0);
        java.util.Date date63 = dateTime60.toDate();
        org.joda.time.DateTime.Property property64 = dateTime60.dayOfMonth();
        org.joda.time.DateTime.Property property65 = dateTime60.dayOfMonth();
        int int66 = property65.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property65.getFieldType();
        boolean boolean68 = dateTime21.isSupported(dateTimeFieldType67);
        boolean boolean69 = dateTime13.isSupported(dateTimeFieldType67);
        org.joda.time.DateTime.Property property70 = dateTime13.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 58168150 + "'", int15 == 58168150);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.052" + "'", str44, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.052" + "'", str53, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.052" + "'", str55, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 9L + "'", long57 == 9L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Mon Feb 21 15:14:50 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test16126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16126");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readableDuration5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = property8.addWrapFieldToCopy(2020);
        boolean boolean12 = localDateTime10.equals((java.lang.Object) 69034888L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test16127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16127");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime3.secondOfDay();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        boolean boolean19 = localDateTime17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        boolean boolean25 = dateTimeFieldType18.isSupported(chronology22);
        int int26 = dateTime12.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime28 = dateTime12.plusMillis(441);
        int int29 = dateTime28.getHourOfDay();
        org.joda.time.DateTime.Property property30 = dateTime28.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(26);
        long long37 = dateTime32.getMillis();
        org.joda.time.DateTime.Property property38 = dateTime32.year();
        org.joda.time.DateTime dateTime40 = dateTime32.withYear(86348052);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property60 = dateTime57.centuryOfEra();
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = property60.getAsText(locale61);
        java.lang.String str64 = dateTimeField50.getAsText((org.joda.time.ReadablePartial) localDateTime54, (-1), locale61);
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        java.lang.String str67 = locale66.getLanguage();
        java.lang.String str68 = dateTimeField50.getAsShortText((int) (byte) 10, locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 9999, chronology44, locale66, (java.lang.Integer) 54616882);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int75 = localDateTime72.get(dateTimeFieldType74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.era();
        int int77 = localDateTime72.indexOf(dateTimeFieldType76);
        dateTimeParserBucket70.saveField(dateTimeFieldType76, 6);
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType76.getRangeDurationType();
        boolean boolean81 = dateTime32.isSupported(dateTimeFieldType76);
        int int82 = property30.getDifference((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime84 = dateTime32.minusMillis(69243);
        org.joda.time.DateTime dateTime86 = dateTime32.plusHours(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645456490273L + "'", long37 == 1645456490273L);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "it" + "'", str62, "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "20" + "'", str63, "20");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1" + "'", str64, "-1");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "it" + "'", str67, "it");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "10" + "'", str68, "10");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test16128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16128");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-2208988800000L));
        int int2 = localDateTime1.getDayOfMonth();
        int int3 = localDateTime1.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test16129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16129");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(12);
        long long5 = dateTimeZone1.convertLocalToUTC((long) (short) 1, true, (long) 865);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone17.isLocalDateTimeGap(localDateTime28);
        boolean boolean31 = dateTimeZone17.isStandardOffset(1645455983203L);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(1645455979996L, dateTimeZone17);
        boolean boolean33 = dateTimeZone1.isLocalDateTimeGap(localDateTime32);
        int int34 = localDateTime32.getDayOfMonth();
        org.joda.time.DateTime dateTime35 = localDateTime32.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-43199999L) + "'", long5 == (-43199999L));
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21 + "'", int34 == 21);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test16130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16130");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.months();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.hourOfDay();
        java.lang.String str6 = dateTimeField4.getAsText((-58371267042355L));
        long long9 = dateTimeField4.add((long) 128, 72000);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology13.seconds();
        org.joda.time.DurationField durationField18 = chronology13.centuries();
        org.joda.time.DurationField durationField19 = chronology13.minutes();
        org.joda.time.DurationField durationField20 = chronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) 0);
        boolean boolean30 = dateTime28.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks((int) 'a');
        boolean boolean35 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime();
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime36, chronology42);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        long long48 = chronology42.add(readablePeriod45, (long) 1, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField49 = chronology42.era();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = locale50.getDisplayScript();
        java.lang.String str52 = locale50.getCountry();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale55, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField59 = null;
        dateTimeParserBucket58.saveField(dateTimeField59, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale64 = java.util.Locale.ROOT;
        dateTimeParserBucket58.saveField(dateTimeFieldType62, "it", locale64);
        java.lang.String str66 = locale50.getDisplayName(locale64);
        java.lang.String str67 = locale64.getISO3Country();
        int int68 = dateTimeField49.getMaximumTextLength(locale64);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("21");
        java.lang.String str71 = locale64.getDisplayVariant(locale70);
        java.lang.String str72 = locale70.getDisplayScript();
        java.lang.String str73 = dateTimeField23.getAsText(1645456349204L, locale70);
        java.lang.String str74 = dateTimeField4.getAsShortText((long) 54634576, locale70);
        int int76 = dateTimeField4.getLeapAmount((long) 100);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "15" + "'", str6, "15");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 259200000128L + "'", long9 == 259200000128L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "English" + "'", str66, "English");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022" + "'", str73, "2022");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "15" + "'", str74, "15");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test16131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16131");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime7 = property6.getDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.secondOfDay();
        org.joda.time.DurationField durationField9 = property8.getLeapDurationField();
        org.joda.time.DateTime dateTime10 = property8.roundCeilingCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property11.roundCeilingCopy();
        int int13 = property11.getMaximumValue();
        java.lang.String str14 = property11.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "914" + "'", str14, "914");
    }

    @Test
    public void test16132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16132");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(2020);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(336, 914, 54637, 54806180, 54642827, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54806180 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
    }

    @Test
    public void test16133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16133");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withCenturyOfEra(50);
        int int10 = localDateTime6.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.minusMinutes(54644);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.withWeekyear(481);
        int int15 = localDateTime6.size();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test16134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16134");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(54617102, 628, 75, 0, 54623847, 404);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54623847 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16135");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = dateTimeField4.getType();
        org.joda.time.DurationField durationField6 = dateTimeField4.getRangeDurationField();
        long long9 = durationField6.subtract((long) 120, (long) 99);
        long long12 = durationField6.getMillis(0, 1645456006052L);
        long long13 = durationField6.getUnitMillis();
        int int16 = durationField6.getDifference(1716098572800000L, (long) 381);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-8553599880L) + "'", long9 == (-8553599880L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 86400000L + "'", long13 == 86400000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19862251 + "'", int16 == 19862251);
    }

    @Test
    public void test16136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16136");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfMonth();
        org.joda.time.Chronology chronology8 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField10 = chronology3.months();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.millisOfSecond();
        int int15 = property14.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfCeilingCopy();
        int int17 = localDateTime16.size();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int22 = localDateTime19.get(dateTimeFieldType21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.era();
        int int24 = localDateTime19.indexOf(dateTimeFieldType23);
        int int25 = localDateTime16.get(dateTimeFieldType23);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        java.lang.Integer int35 = dateTimeParserBucket31.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        long long39 = dateTimeZone36.convertLocalToUTC(0L, false);
        dateTimeParserBucket31.setZone(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = localDateTime16.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology42 = chronology3.withZone(dateTimeZone36);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str48 = nameProvider44.getName(locale45, "2022-02-21T15:06:28.281+00:00:00.052", "secondOfDay");
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfDay();
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.lang.String str56 = locale55.getVariant();
        java.lang.String str57 = dateTimeField53.getAsText((-1), locale55);
        java.lang.String str60 = nameProvider44.getShortName(locale55, "2022-02-21T15:06:18.239+00:00:00.052", "en_US");
        java.lang.String str61 = locale43.getDisplayLanguage(locale55);
        java.lang.String str62 = locale43.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(1356998400000L, chronology3, locale43);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeParserBucket63.getZone();
        long long65 = dateTimeParserBucket63.computeMillis();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-52L) + "'", long39 == (-52L));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(nameProvider44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1" + "'", str57, "-1");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "French" + "'", str61, "French");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fr-CA" + "'", str62, "fr-CA");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1356998400000L + "'", long65 == 1356998400000L);
    }

    @Test
    public void test16137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16137");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.LocalDateTime localDateTime12 = dateTime10.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime10.minusMillis((-948));
        org.joda.time.Chronology chronology17 = dateTime10.getChronology();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test16138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16138");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours((int) (byte) 0);
        boolean boolean11 = dateTime9.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime9.toMutableDateTime(dateTimeZone12);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = dateTimeZone12.getName((long) (byte) 1, locale16);
        boolean boolean18 = languageRange1.equals((java.lang.Object) locale16);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.052" + "'", str17, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test16139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16139");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("70");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        timeZone1.setID("0120-01-01T00:00:00.999");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId2);
    }

    @Test
    public void test16140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16140");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.LocalDate localDate6 = dateTime5.toLocalDate();
        org.joda.time.DateTime.Property property7 = dateTime5.weekyear();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMillis(149);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test16141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16141");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        int int3 = timeZone1.getOffset((long) 59);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        boolean boolean8 = timeZone7.observesDaylightTime();
        timeZone7.setRawOffset(56);
        boolean boolean11 = timeZone1.hasSameRules(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DurationField durationField20 = chronology17.millis();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusSeconds((int) ' ');
        long long26 = chronology17.set((org.joda.time.ReadablePartial) localDateTime24, (long) 99);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale27.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology17, locale27, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(72000052L, dateTimeZone33);
        dateTimeParserBucket31.setZone(dateTimeZone33);
        long long38 = dateTimeZone13.getMillisKeepLocal(dateTimeZone33, (long) 212);
        java.util.TimeZone timeZone39 = dateTimeZone33.toTimeZone();
        java.util.TimeZone.setDefault(timeZone39);
        boolean boolean41 = timeZone7.hasSameRules(timeZone39);
        int int42 = timeZone7.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-31948L) + "'", long26 == (-31948L));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 212L + "'", long38 == 212L);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test16142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16142");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.era();
        boolean boolean7 = localDateTime5.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfMinute();
        boolean boolean13 = dateTimeFieldType6.isSupported(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj0, chronology10);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField17 = chronology10.centuries();
        org.joda.time.DurationField durationField18 = chronology10.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology10.hourOfDay();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test16143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16143");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.plusSeconds(26);
        org.joda.time.DateTime.Property property6 = dateTime5.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = property6.getRangeDurationField();
        org.joda.time.DateTime dateTime9 = property6.addWrapFieldToCopy(862);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = dateTime9.toString("2022-02-21t15:06:28.271+00:00:00.052_2022-05-29T15:06:28.816");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test16144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16144");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test16145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16145");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Feb");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        boolean boolean15 = localDateTime13.isSupported(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.secondOfMinute();
        boolean boolean21 = dateTimeFieldType14.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.clockhourOfDay();
        boolean boolean24 = dateTimeField22.isLeap(7279200000L);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-292275054));
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.era();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean32 = dateTimeZone31.isFixed();
        java.lang.String str34 = dateTimeZone31.getShortName(1645455975652L);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        long long39 = dateTimeZone31.getMillisKeepLocal(dateTimeZone36, (long) 718);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = dateTimeZone31.getShortName((long) 948, locale41);
        java.lang.String str44 = property29.getAsText(locale41);
        java.lang.String str45 = dateTimeField22.getAsShortText((-26445595L), locale41);
        java.util.Locale.Builder builder46 = builder6.setLocale(locale41);
        java.util.Locale.Builder builder47 = builder46.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder49 = builder47.setLanguageTag("54497");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 54497 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.052" + "'", str34, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 718L + "'", long39 == 718L);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.052" + "'", str43, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AD" + "'", str44, "AD");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "16" + "'", str45, "16");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test16146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16146");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime26 = dateTime24.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime26.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean30 = dateTime29.isEqualNow();
        org.joda.time.DateTime.Property property31 = dateTime29.secondOfMinute();
        org.joda.time.DateTime dateTime33 = property31.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField34 = property31.getField();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = locale36.getScript();
        java.lang.String str39 = dateTimeField34.getAsText(15, locale36);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime47 = dateTime45.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime47.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean51 = dateTime50.isEqualNow();
        org.joda.time.DateTime.Property property52 = dateTime50.secondOfMinute();
        org.joda.time.DateTime dateTime54 = property52.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField55 = property52.getField();
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.lang.String str58 = locale57.getLanguage();
        java.lang.String str59 = locale57.getScript();
        java.lang.String str60 = dateTimeField55.getAsText(15, locale57);
        java.lang.String str61 = locale36.getDisplayVariant(locale57);
        int int62 = property17.getMaximumTextLength(locale36);
        java.lang.String str65 = nameProvider10.getName(locale36, "2022-02-21T15:07:14.729+00:00:00.052", "-0001-02-22T15:07:50.643+00:00:00.052");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((-16377983999200L), chronology3, locale36);
        org.joda.time.DateTimeField dateTimeField67 = chronology3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField69 = chronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField70 = chronology3.minuteOfHour();
        org.joda.time.DurationField durationField71 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField72 = chronology3.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "15" + "'", str39, "15");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "it" + "'", str58, "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "15" + "'", str60, "15");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test16147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16147");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        boolean boolean7 = timeZone1.hasSameRules(timeZone6);
        java.util.TimeZone.setDefault(timeZone1);
        timeZone1.setRawOffset(54645022);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+15:10");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test16148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16148");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        int int16 = dateTime14.getYearOfEra();
        org.joda.time.DateTime.Property property17 = dateTime14.secondOfDay();
        int int18 = property17.getMaximumValue();
        org.joda.time.DateTime dateTime19 = property17.getDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.plus(12L);
        org.joda.time.DateTime dateTime22 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths(52);
        org.joda.time.DateTime dateTime26 = dateTime22.minusDays(918);
        org.joda.time.Instant instant27 = dateTime26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours((int) (byte) 0);
        boolean boolean33 = dateTime31.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        boolean boolean38 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime37.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime37.plusMinutes(977);
        long long44 = dateTime37.getMillis();
        org.joda.time.Chronology chronology45 = dateTime37.getChronology();
        org.joda.time.Chronology chronology46 = dateTime37.getChronology();
        boolean boolean47 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 86399 + "'", int18 == 86399);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1586790890576L + "'", long44 == 1586790890576L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test16149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16149");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T15:08:29.814+00:00:00.052");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withWeekyear((-1));
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        int int9 = dateTime7.getYearOfEra();
        org.joda.time.DateTime.Property property10 = dateTime7.secondOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        java.util.Date date12 = dateTime11.toDate();
        boolean boolean13 = timeZone1.inDaylightTime(date12);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Dec 25 06:25:34 GMT+15:10 2");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test16150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16150");
        java.util.Locale locale0 = java.util.Locale.US;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.clockhourOfDay();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsText((-1), locale7);
        boolean boolean10 = locale7.hasExtensions();
        java.util.Set<java.lang.String> strSet11 = locale7.getUnicodeLocaleKeys();
        java.lang.String str12 = locale0.getDisplayCountry(locale7);
        java.lang.String str13 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1" + "'", str9, "-1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "United States" + "'", str12, "United States");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
    }

    @Test
    public void test16151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16151");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(96, (-1970), 79, 54624, 69120);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54624 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16152");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 54647283);
        java.lang.Object obj11 = dateTimeParserBucket5.saveState();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket5.getZone();
        int int13 = dateTimeParserBucket5.getOffset();
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 54647283 + "'", int13 == 54647283);
    }

    @Test
    public void test16153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16153");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("54391-01-03T00:00:00.052", (double) 1645456048604L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.645456048604E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16154");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((int) ' ');
        long long11 = chronology2.set((org.joda.time.ReadablePartial) localDateTime9, (long) 99);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfEra(21);
        int int14 = localDateTime13.getMonthOfYear();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-31948L) + "'", long11 == (-31948L));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test16155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16155");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField9 = chronology2.years();
        org.joda.time.Chronology chronology10 = chronology2.withUTC();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths(10);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfDay();
        int int19 = dateTime17.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = dateTime17.withZone(dateTimeZone21);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = dateTimeZone21.getName((long) 26, locale25);
        long long29 = dateTimeZone21.adjustOffset((long) 657, false);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours((int) (byte) 0);
        boolean boolean35 = dateTime33.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime33.toMutableDateTime(dateTimeZone36);
        long long40 = dateTimeZone21.getMillisKeepLocal(dateTimeZone36, 657L);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.Chronology chronology42 = chronology2.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField43 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = chronology2.secondOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.052" + "'", str26, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 657L + "'", long29 == 657L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 657L + "'", long40 == 657L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test16156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16156");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withCenturyOfEra(211);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plusYears(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks(671);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addWrapFieldToCopy(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.Chronology chronology19 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 86352, chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusDays(506);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test16157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16157");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology11.seconds();
        org.joda.time.DurationField durationField16 = chronology11.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.millisOfSecond();
        org.joda.time.DurationField durationField18 = chronology11.years();
        org.joda.time.Chronology chronology19 = chronology11.withUTC();
        org.joda.time.DurationField durationField20 = chronology19.months();
        boolean boolean21 = durationFieldType8.isSupported(chronology19);
        org.joda.time.DateTime dateTime23 = dateTime5.withFieldAdded(durationFieldType8, 54370010);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(3);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.minusWeeks(69062);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "8237-08-23T17:17:50.690Z" + "'", str26, "8237-08-23T17:17:50.690Z");
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test16158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16158");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfEra(70);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DurationField durationField12 = dateTimeField11.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray19 = localDateTime18.getValues();
        int int20 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDateTime14, intArray19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property23 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime dateTime30 = dateTime26.plusHours((int) (byte) 100);
        int int31 = dateTime26.getDayOfYear();
        org.joda.time.DateTime dateTime33 = dateTime26.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.minus((long) 0);
        org.joda.time.DateTime.Property property36 = dateTime35.millisOfDay();
        org.joda.time.DateTime dateTime37 = property36.roundFloorCopy();
        org.joda.time.DateTime dateTime38 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = dateTime6.equals((java.lang.Object) dateTime38);
        org.joda.time.DateTime.Property property40 = dateTime6.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test16159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16159");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        int int9 = property8.getMaximumValue();
        org.joda.time.DateTime dateTime10 = property8.getDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plus(12L);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        org.joda.time.DateTime.Property property14 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        java.lang.String str16 = property14.getName();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours((int) (byte) 0);
        java.util.Date date21 = dateTime18.toDate();
        org.joda.time.DateTime.Property property22 = dateTime18.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusMillis(99);
        int int31 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property32 = localDateTime25.dayOfYear();
        org.joda.time.DateTime dateTime33 = localDateTime25.toDateTime();
        int int34 = property14.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean46 = dateTime45.isEqualNow();
        org.joda.time.DateTime.Property property47 = dateTime45.secondOfMinute();
        org.joda.time.DateTime dateTime49 = property47.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField50 = property47.getField();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale52.getScript();
        java.lang.String str55 = dateTimeField50.getAsText(15, locale52);
        java.lang.String str56 = locale52.getVariant();
        java.lang.String str57 = locale52.getDisplayVariant();
        java.lang.String str58 = locale52.getCountry();
        int int59 = property14.getMaximumTextLength(locale52);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86399 + "'", int9 == 86399);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hourOfDay" + "'", str16, "hourOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 06:25:35 GMT+15:10 2022");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "it" + "'", str53, "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "15" + "'", str55, "15");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test16160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16160");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.era();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.property(dateTimeFieldType11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar17 = dateTime16.toGregorianCalendar();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) 'x');
        int int20 = property12.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        boolean boolean29 = dateTime27.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int) 'a');
        boolean boolean34 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime33.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.weekyear();
        boolean boolean43 = dateTime37.equals((java.lang.Object) localDateTime39);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime37.getZone();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime23, dateTimeZone44);
        int int46 = localDateTime45.size();
        long long48 = chronology21.set((org.joda.time.ReadablePartial) localDateTime45, 1645456088160L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(gregorianCalendar17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645456490750L + "'", long48 == 1645456490750L);
    }

    @Test
    public void test16161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16161");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'x');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear(204);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test16162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16162");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(405);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withCenturyOfEra(2);
        int int9 = localDateTime8.getYear();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.millis();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localDateTime8.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMonths(54441130);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int23 = localDateTime21.get(dateTimeFieldType22);
        java.lang.String str24 = dateTimeFieldType22.toString();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType22.getDurationType();
        int int26 = localDateTime14.get(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime14.minusMonths(7);
        int int29 = localDateTime28.getDayOfWeek();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 222 + "'", int9 == 222);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millis" + "'", str11, "millis");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekOfWeekyear" + "'", str24, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 51 + "'", int26 == 51);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test16163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16163");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        int int6 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.lang.String str10 = locale9.getDisplayScript();
        java.lang.String str11 = locale9.getCountry();
        java.util.Locale locale14 = new java.util.Locale("22", "");
        java.lang.String str15 = locale9.getDisplayVariant(locale14);
        boolean boolean16 = locale14.hasExtensions();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        boolean boolean23 = dateTime21.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime21.toMutableDateTime(dateTimeZone24);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = dateTimeZone24.getName((long) (byte) 1, locale28);
        java.lang.String str30 = locale28.getScript();
        java.lang.String str31 = locale17.getDisplayScript(locale28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar36 = dateTime35.toGregorianCalendar();
        int int37 = dateTime35.getMillisOfSecond();
        org.joda.time.DateTime.Property property38 = dateTime35.minuteOfHour();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property44 = dateTime41.centuryOfEra();
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str46 = locale45.getLanguage();
        java.lang.String str47 = property44.getAsText(locale45);
        java.lang.String str48 = locale39.getDisplayName(locale45);
        int int49 = property38.getMaximumTextLength(locale45);
        java.util.Set<java.lang.String> strSet50 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale17.getDisplayLanguage(locale45);
        java.lang.String str52 = locale14.getDisplayName(locale17);
        java.lang.String str53 = locale14.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime54 = property7.setCopy("2022-02-21T00:00:00.000Z", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T00:00:00.000Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 54890800 + "'", int6 == 54890800);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale14.toString(), "22");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.052" + "'", str29, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(gregorianCalendar36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 852 + "'", int37 == 852);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "it" + "'", str46, "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "20" + "'", str47, "20");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "coreano" + "'", str48, "coreano");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "coreano" + "'", str51, "coreano");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "22" + "'", str52, "22");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test16164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16164");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((-1));
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths(10);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfDay();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = dateTime6.withZone(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks(15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusHours(54377);
        boolean boolean22 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test16165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16165");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        double double2 = languageRange1.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Set<java.lang.String> strSet6 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.Locale.FilteringMode filteringMode17 = null;
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15, filteringMode17);
        java.lang.String str19 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.Locale.FilteringMode filteringMode27 = null;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList25, filteringMode27);
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList25, filteringMode29);
        boolean boolean31 = strSet6.removeAll((java.util.Collection<java.lang.String>) strList25);
        java.util.stream.Stream<java.lang.String> strStream32 = strSet6.stream();
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList35, strMap36);
        org.joda.time.tz.Provider provider38 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone40 = provider38.getZone("-0001-02-22T00:07:37.724+00:00:00.052");
        java.util.Set<java.lang.String> strSet41 = provider38.getAvailableIDs();
        boolean boolean42 = strSet41.isEmpty();
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList37, (java.util.Collection<java.lang.String>) strSet41);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode29.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(provider38);
        org.junit.Assert.assertNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test16166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16166");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTime.Property property5 = dateTime3.millisOfSecond();
        boolean boolean7 = dateTime3.equals((java.lang.Object) "Japanese");
        boolean boolean8 = dateTime3.isAfterNow();
        org.joda.time.LocalTime localTime9 = dateTime3.toLocalTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test16167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16167");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime11.getZone();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded(292278922L, 89);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test16168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16168");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withDayOfYear(15);
        org.joda.time.DateTime.Property property6 = dateTime5.year();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight13 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight13.toMutableDateTime();
        int int16 = dateTime8.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        int int17 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        int int18 = dateTime5.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime24.toMutableDateTime(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = dateTime24.toTimeOfDay();
        int int30 = dateTime24.getSecondOfDay();
        org.joda.time.Chronology chronology31 = dateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = dateTimeZone32.getOffset(readableInstant33);
        java.lang.String str36 = dateTimeZone32.getName(0L);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone32);
        int int39 = dateTimeZone32.getOffset((long) 25);
        org.joda.time.DateTime dateTime40 = dateTime24.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime.Property property41 = dateTime24.minuteOfDay();
        boolean boolean42 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime44 = dateTime5.minusMinutes(189);
        org.joda.time.DateTime.Property property45 = dateTime44.weekOfWeekyear();
        int int46 = dateTime44.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 69290 + "'", int30 == 69290);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.052" + "'", str36, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
    }

    @Test
    public void test16169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16169");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getScript();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField9 = chronology6.millis();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds((int) ' ');
        long long15 = chronology6.set((org.joda.time.ReadablePartial) localDateTime13, (long) 99);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.yearOfEra();
        java.util.Locale locale19 = new java.util.Locale("2022-02-21T15:06:54.517+00:00:00.052");
        java.lang.String str20 = dateTimeField16.getAsText(283L, locale19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property45 = dateTime42.centuryOfEra();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = property45.getAsText(locale46);
        java.lang.String str49 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDateTime39, (-1), locale46);
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = dateTimeField35.getAsShortText((int) (byte) 10, locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 9999, chronology29, locale51, (java.lang.Integer) 54616882);
        java.util.Locale.setDefault(locale51);
        int int57 = dateTimeField25.getMaximumTextLength(locale51);
        java.lang.String str58 = locale51.getDisplayScript();
        java.lang.String str59 = locale19.getDisplayLanguage(locale51);
        java.lang.String str60 = locale0.getDisplayLanguage(locale51);
        java.lang.Object obj61 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und-IT-x-lvariant-10" + "'", str2, "und-IT-x-lvariant-10");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-31948L) + "'", long15 == (-31948L));
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale19.toString(), "2022-02-21t15:06:54.517+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "it" + "'", str47, "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "20" + "'", str48, "20");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1" + "'", str49, "-1");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "it" + "'", str52, "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "10" + "'", str53, "10");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-21t15:06:54.517+00:00:00.052" + "'", str59, "2022-02-21t15:06:54.517+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "isochronology[utc]" + "'", str60, "isochronology[utc]");
        org.junit.Assert.assertNotNull(obj61);
// flaky:         org.junit.Assert.assertEquals(obj61.toString(), "isochronology[utc]_IT_10");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "isochronology[utc]_IT_10");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "isochronology[utc]_IT_10");
    }

    @Test
    public void test16170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16170");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property19 = dateTime16.centuryOfEra();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = property19.getAsText(locale20);
        java.lang.String str23 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (-1), locale20);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = dateTimeField9.getAsShortText((int) (byte) 10, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 9999, chronology3, locale25, (java.lang.Integer) 54616882);
        org.joda.time.DurationField durationField30 = chronology3.halfdays();
        long long33 = durationField30.add((long) 281, 470953);
        java.lang.String str34 = durationField30.toString();
        long long36 = durationField30.getValueAsLong((long) 54455867);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20" + "'", str22, "20");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1" + "'", str23, "-1");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20345169600281L + "'", long33 == 20345169600281L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DurationField[halfdays]" + "'", str34, "DurationField[halfdays]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
    }

    @Test
    public void test16171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16171");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(72000052L, dateTimeZone1);
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = property7.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readablePeriod9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, 54616087);
        int int14 = dateTime13.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfEra((int) 'x');
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.withFieldAdded(durationFieldType30, (int) (byte) -1);
        java.lang.String str33 = durationFieldType30.getName();
        boolean boolean34 = localDateTime19.isSupported(durationFieldType30);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfMinute();
        org.joda.time.DurationField durationField40 = chronology37.millis();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusSeconds((int) ' ');
        long long46 = chronology37.set((org.joda.time.ReadablePartial) localDateTime44, (long) 99);
        org.joda.time.DateTimeField dateTimeField47 = chronology37.yearOfEra();
        org.joda.time.DurationField durationField48 = chronology37.days();
        org.joda.time.DurationField durationField49 = durationFieldType30.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField50 = chronology37.minuteOfHour();
        org.joda.time.DurationField durationField51 = chronology37.days();
        org.joda.time.DateTime dateTime52 = dateTime13.toDateTime(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "months" + "'", str33, "months");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-31948L) + "'", long46 == (-31948L));
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test16172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16172");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime8 = dateTime6.withYear(1146);
        int int9 = dateTime6.getYearOfCentury();
        org.joda.time.DateTime dateTime11 = dateTime6.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(7);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime11.getZone();
        org.joda.time.DateTime dateTime16 = dateTime11.minusSeconds(425);
        org.joda.time.LocalDateTime localDateTime17 = dateTime16.toLocalDateTime();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test16173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16173");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        int int16 = dateTime14.getYearOfEra();
        org.joda.time.DateTime.Property property17 = dateTime14.secondOfDay();
        int int18 = property17.getMaximumValue();
        org.joda.time.DateTime dateTime19 = property17.getDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.plus(12L);
        org.joda.time.DateTime dateTime22 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property23 = dateTime22.secondOfDay();
        java.util.Locale locale27 = new java.util.Locale("54391", "-0001-02-22T15:06:23.107+00:00:00.052", "secondOfDay");
        java.lang.String str28 = locale27.getCountry();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.lang.String str30 = property23.getAsText(locale27);
        org.joda.time.DateTime dateTime31 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime32 = property23.roundCeilingCopy();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 86399 + "'", int18 == 86399);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals(locale27.toString(), "54391_-0001-02-22T15:06:23.107+00:00:00.052_secondOfDay");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-0001-02-22T15:06:23.107+00:00:00.052" + "'", str28, "-0001-02-22T15:06:23.107+00:00:00.052");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test16174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16174");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean2 = strSet0.add("10");
        java.util.stream.Stream<java.lang.String> strStream3 = strSet0.parallelStream();
        java.util.Set<java.lang.String> strSet4 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean5 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        long long19 = dateTimeZone16.convertLocalToUTC(0L, false);
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket11.getChronology();
        boolean boolean22 = strSet4.equals((java.lang.Object) chronology21);
        java.util.stream.Stream<java.lang.String> strStream23 = strSet4.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream24 = strSet4.parallelStream();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "15", "coreano", "cinese", "ISOChronology[+00:00:00.052]", "GMT+00:00", "Korean", "28", "2022-02-21T15:06:14.968+00:00:00.052", "52", "24", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        java.lang.Object[] objArray40 = strSet38.toArray();
        boolean boolean41 = strSet4.retainAll((java.util.Collection<java.lang.String>) strSet38);
        java.util.Spliterator<java.lang.String> strSpliterator42 = strSet38.spliterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-52L) + "'", long19 == (-52L));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[hi!, 15, coreano, cinese, ISOChronology[+00:00:00.052], GMT+00:00, Korean, 28, 2022-02-21T15:06:14.968+00:00:00.052, 52, 24]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[hi!, 15, coreano, cinese, ISOChronology[+00:00:00.052], GMT+00:00, Korean, 28, 2022-02-21T15:06:14.968+00:00:00.052, 52, 24]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSpliterator42);
    }

    @Test
    public void test16175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16175");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.era();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minus(readableDuration3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withPeriodAdded(readablePeriod5, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusSeconds(54788227);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withYearOfCentury(248);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 248 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test16176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16176");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 312, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime4 = dateTime3.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test16177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16177");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime8 = dateTime6.withYear(1146);
        int int9 = dateTime6.getYearOfCentury();
        org.joda.time.DateTime dateTime11 = dateTime6.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(7);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime11.getZone();
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.DateTime dateTime16 = property15.getDateTime();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test16178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16178");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        int int7 = dateTimeParserBucket5.getOffset();
        int int8 = dateTimeParserBucket5.getOffset();
        int int9 = dateTimeParserBucket5.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test16179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16179");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.DurationField durationField17 = dateTimeField16.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray24 = localDateTime23.getValues();
        int int25 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localDateTime19, intArray24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime19);
        long long30 = chronology4.set((org.joda.time.ReadablePartial) localDateTime28, (long) 52);
        org.joda.time.Chronology chronology31 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1970, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test16180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16180");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.centuries();
        org.joda.time.DurationField durationField9 = chronology3.minutes();
        org.joda.time.DurationField durationField10 = chronology3.hours();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(160L, chronology3);
        org.joda.time.DateTimeField dateTimeField12 = chronology3.minuteOfHour();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeField dateTimeField14 = chronology3.halfdayOfDay();
        long long16 = dateTimeField14.roundHalfFloor(54625859L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 43200000L + "'", long16 == 43200000L);
    }

    @Test
    public void test16181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16181");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime3.minusDays(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        int int16 = dateTime14.getYearOfEra();
        boolean boolean17 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology18 = dateTime3.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test16182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16182");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property3.setCopy(8);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test16183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16183");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        int int5 = localDateTime4.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        org.joda.time.DurationField durationField11 = dateTimeField10.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray18 = localDateTime17.getValues();
        int int19 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(54596);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusDays(54616882);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.year();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks(54560089);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plusMonths(54522711);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test16184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16184");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime3.minusDays(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime3.plusSeconds(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int12 = dateTime3.get(dateTimeFieldType11);
        org.joda.time.DateTime dateTime13 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        int int15 = dateTime13.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 54891 + "'", int15 == 54891);
    }

    @Test
    public void test16185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16185");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusYears(495);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        java.lang.String str21 = chronology19.toString();
        org.joda.time.DurationField durationField22 = chronology19.hours();
        long long25 = durationField22.getDifferenceAsLong((long) 948, (long) 519);
        org.joda.time.DurationFieldType durationFieldType26 = durationField22.getType();
        boolean boolean27 = localDateTime15.isSupported(durationFieldType26);
        org.joda.time.Chronology chronology28 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime36.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.withPeriodAdded(readablePeriod38, 793);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTime();
        org.joda.time.DateTime dateTime42 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test16186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16186");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyearOfCentury();
        int int17 = dateTimeField15.get((long) 54747);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 70 + "'", int17 == 70);
    }

    @Test
    public void test16187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16187");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'x');
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withFieldAdded(durationFieldType7, (int) (byte) -1);
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.year();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime19 = property16.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMinutes(26);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.withFieldAdded(durationFieldType25, 70);
        int int28 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.millisOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test16188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16188");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekyear((-1));
        org.joda.time.DateTime dateTime9 = dateTime5.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths((int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) 0);
        boolean boolean19 = dateTime17.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime17.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.era();
        int int24 = mutableDateTime22.get(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology27.millis();
        boolean boolean31 = dateTimeFieldType23.isSupported(chronology27);
        boolean boolean32 = dateTime13.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDateTime.Property property33 = localDateTime1.property(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime1.plus(readableDuration34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths(10);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfDay();
        int int43 = dateTime41.getYearOfEra();
        org.joda.time.DateTime.Property property44 = dateTime41.secondOfDay();
        int int45 = property44.getMaximumValue();
        org.joda.time.DateTime dateTime46 = property44.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours((int) (byte) 0);
        boolean boolean52 = dateTime50.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks((int) 'a');
        boolean boolean57 = dateTime50.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = dateTime56.toDateTime();
        org.joda.time.DateTime dateTime60 = dateTime56.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.weekyear();
        boolean boolean66 = dateTime60.equals((java.lang.Object) localDateTime62);
        org.joda.time.DateTime dateTime68 = dateTime60.minusMonths(54616882);
        org.joda.time.LocalDateTime localDateTime69 = dateTime68.toLocalDateTime();
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        int int71 = property44.compareTo((org.joda.time.ReadablePartial) localDateTime69);
        int int72 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime35.plusHours(78);
        int int75 = localDateTime35.getWeekyear();
        org.joda.time.DateTimeField dateTimeField77 = localDateTime35.getField(0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 86399 + "'", int45 == 86399);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test16189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16189");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour((int) (short) 10);
        int int6 = dateTime5.getMillisOfDay();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        int int20 = dateTimeZone17.getStandardOffset((long) 1969);
        org.joda.time.DateTime dateTime21 = dateTime5.toDateTime(dateTimeZone17);
        int int22 = dateTime5.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime5.plus(readablePeriod23);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        boolean boolean48 = dateTimeZone44.isStandardOffset((long) 972);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime5, dateTimeZone44);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 54651489 + "'", int6 == 54651489);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test16190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16190");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.clockhourOfDay();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = dateTimeField6.getAsText((-1), locale8);
        java.lang.String str11 = locale0.getDisplayScript(locale8);
        java.util.Set<java.lang.String> strSet12 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet14 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.DurationField durationField21 = chronology17.seconds();
        org.joda.time.DurationField durationField22 = chronology17.centuries();
        org.joda.time.DurationField durationField23 = chronology17.minutes();
        org.joda.time.DurationField durationField24 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekyear();
        boolean boolean26 = strSet14.contains((java.lang.Object) chronology17);
        org.joda.time.DateTimeField dateTimeField27 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = chronology17.getDateTimeMillis(147567, 54872871, 913, 22, 148, (-19), 862);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 148 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1" + "'", str10, "-1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test16191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16191");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology17);
        org.joda.time.DateTimeZone dateTimeZone20 = chronology17.getZone();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        java.util.Date date27 = dateTime24.toDate();
        org.joda.time.DateTime.Property property28 = dateTime24.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear((-1));
        org.joda.time.DateTime dateTime34 = dateTime30.plusHours((int) (byte) 100);
        int int35 = dateTime30.getDayOfYear();
        int int36 = property28.getDifference((org.joda.time.ReadableInstant) dateTime30);
        int int37 = property28.getLeapAmount();
        org.joda.time.DateTime dateTime38 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((long) 3);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = dateTime38.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = property51.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime54 = property51.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withWeekyear(19);
        int[] intArray57 = localDateTime56.getValues();
        chronology17.validate((org.joda.time.ReadablePartial) localDateTime44, intArray57);
        org.joda.time.DurationField durationField59 = chronology17.millis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Feb 22 06:25:36 GMT+15:10 2022");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[19, 1, 3, 52]");
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test16192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16192");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond(962);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYear(54599);
        org.joda.time.Chronology chronology18 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test16193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16193");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(519);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 100, dateTimeZone2);
        boolean boolean4 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMaximumValue();
        int int10 = localDateTime9.getEra();
        java.lang.String str11 = localDateTime9.toString();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plus(readablePeriod12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = localDateTime9.toString(dateTimeFormatter14);
        boolean boolean16 = dateTimeZone2.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfEvenCopy();
        java.lang.String str22 = property20.getAsText();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        java.lang.String str26 = dateTimeZone24.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        int int29 = dateTimeZone24.getOffset(0L);
        org.joda.time.DateTime dateTime30 = localDateTime23.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        java.lang.String str34 = dateTimeZone32.toString();
        long long36 = dateTimeZone24.getMillisKeepLocal(dateTimeZone32, 1645455977932L);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks(54611);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays(54632138);
        boolean boolean42 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDateTime9.getFieldType(523);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 523");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.999" + "'", str11, "1970-01-01T00:00:00.999");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.999" + "'", str15, "1970-01-01T00:00:00.999");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "52" + "'", str22, "52");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.052" + "'", str26, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.052" + "'", str34, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645455977932L + "'", long36 == 1645455977932L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test16194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16194");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(54749066);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test16195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16195");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, 970);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property31 = dateTime28.centuryOfEra();
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = property31.getAsText(locale32);
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime25, (-1), locale32);
        boolean boolean36 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusDays(212);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusHours((int) ' ');
        boolean boolean46 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMonths(44);
        boolean boolean50 = localDateTime11.equals((java.lang.Object) localDateTime43);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        boolean boolean57 = dateTime55.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        boolean boolean62 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = dateTime61.toDateTime();
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.months();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 956, chronology64);
        org.joda.time.DateTime dateTime67 = dateTime66.toDateTime();
        org.joda.time.DateTime dateTime68 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime68.getZone();
        java.lang.String str70 = dateTimeZone69.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone69);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "20" + "'", str34, "20");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1" + "'", str35, "-1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.052" + "'", str70, "+00:00:00.052");
    }

    @Test
    public void test16196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16196");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean5 = timeZone1.observesDaylightTime();
        timeZone1.setID("English (United Kingdom)");
        int int8 = timeZone1.getRawOffset();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("2022-02-21T15:06:14.968+00:00:00.052");
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        boolean boolean13 = timeZone1.hasSameRules(timeZone12);
        timeZone1.setID("2022-05-29T15:09:44.512");
        java.util.Date date16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = timeZone1.inDaylightTime(date16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test16197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16197");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTime dateTime6 = dateTime3.withWeekyear((int) 'x');
        org.joda.time.DateTime.Property property7 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime9 = dateTime3.withYearOfEra(104);
        org.joda.time.DateTime.Property property10 = dateTime9.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime9.getZone();
        org.joda.time.DateTime dateTime12 = dateTime9.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime12.withMonthOfYear(940);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 940 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test16198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16198");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        java.util.Date date7 = dateTime5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        java.lang.String str10 = dateTimeZone8.getName(2131200000L);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 24 15:14:51 GMT+00:00 2");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.052" + "'", str10, "+00:00:00.052");
    }

    @Test
    public void test16199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16199");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        int int8 = property6.getLeapAmount();
        java.lang.String str9 = property6.getAsString();
        org.joda.time.DateTime dateTime11 = property6.setCopy(99);
        org.joda.time.TimeOfDay timeOfDay12 = dateTime11.toTimeOfDay();
        org.joda.time.DateTime.Property property13 = dateTime11.era();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "914" + "'", str9, "914");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test16200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16200");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        int int9 = property8.getMaximumValue();
        org.joda.time.DateTime dateTime10 = property8.getDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plus(12L);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        org.joda.time.DateTime.Property property14 = dateTime12.hourOfDay();
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime17 = property15.addWrapFieldToCopy(435);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.era();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minus(readableDuration21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDateTime localDateTime35 = dateTime26.toLocalDateTime();
        boolean boolean36 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime38 = dateTime17.plusMillis(665);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86399 + "'", int9 == 86399);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test16201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16201");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology12.add(readablePeriod15, 1645456009657L, 54587);
        org.joda.time.DateTimeZone dateTimeZone19 = chronology12.getZone();
        org.joda.time.DurationField durationField20 = chronology12.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str13, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645456009657L + "'", long18 == 1645456009657L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test16202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16202");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        boolean boolean7 = dateTime5.isBeforeNow();
        int int8 = dateTime5.getYearOfEra();
        org.joda.time.DateTime dateTime10 = dateTime5.withMillisOfDay(3);
        org.joda.time.DateTime.Property property11 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        org.joda.time.DurationField durationField15 = chronology12.eras();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test16203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16203");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        long long8 = durationField5.getDifferenceAsLong((long) 948, (long) 519);
        long long11 = durationField5.getValueAsLong((-31948L), (-31948L));
        long long13 = durationField5.getValueAsLong(23L);
        int int15 = durationField5.getValue((long) 1999);
        long long18 = durationField5.getMillis((-457071), (-53237551602764L));
        long long21 = durationField5.getDifferenceAsLong(1187L, 54729L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1645455600000L) + "'", long18 == (-1645455600000L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test16204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16204");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.clockhourOfDay();
        int int19 = dateTimeField17.get(1645456040439L);
        boolean boolean20 = dateTimeField17.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str13, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test16205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16205");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.centuries();
        org.joda.time.DurationField durationField9 = chronology3.minutes();
        org.joda.time.DurationField durationField10 = chronology3.hours();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(160L, chronology3);
        org.joda.time.DateTimeField dateTimeField12 = chronology3.minuteOfHour();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays(212);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekyear();
        org.joda.time.LocalDateTime localDateTime26 = property24.addWrapFieldToCopy(576);
        boolean boolean27 = property24.isLeap();
        org.joda.time.LocalDateTime localDateTime29 = property24.addWrapFieldToCopy(536);
        org.joda.time.LocalDateTime localDateTime30 = property24.roundHalfFloorCopy();
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusMinutes(54481);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        long long36 = chronology3.set((org.joda.time.ReadablePartial) localDateTime30, (long) 54629);
        java.lang.String str37 = localDateTime30.toString();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 252547200000L + "'", long36 == 252547200000L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1978-01-02T00:00:00.000" + "'", str37, "1978-01-02T00:00:00.000");
    }

    @Test
    public void test16206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16206");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(162);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusMonths(292275055);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.minusDays(54401609);
        int int15 = localDateTime8.getMillisOfDay();
        int int16 = localDateTime8.getYear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = property17.setCopy(619);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 80 + "'", int15 == 80);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test16207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16207");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        java.lang.String str11 = property9.getAsText();
        org.joda.time.LocalDateTime localDateTime12 = property9.roundCeilingCopy();
        int[] intArray14 = chronology3.get((org.joda.time.ReadablePartial) localDateTime12, 70L);
        java.util.Locale locale17 = new java.util.Locale("21", "52");
        boolean boolean18 = locale17.hasExtensions();
        java.lang.String str19 = locale17.toLanguageTag();
        java.lang.String str20 = locale17.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale17);
        java.util.Locale locale22 = dateTimeParserBucket21.getLocale();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        dateTimeParserBucket21.setZone(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "52" + "'", str11, "52");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 70]");
        org.junit.Assert.assertEquals(locale17.toString(), "21_52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "und" + "'", str19, "und");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "21" + "'", str20, "21");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "21_52");
    }

    @Test
    public void test16208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16208");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Object obj9 = dateTimeParserBucket5.saveState();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField16 = chronology13.millis();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds((int) ' ');
        long long22 = chronology13.set((org.joda.time.ReadablePartial) localDateTime20, (long) 99);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology13, locale23, (java.lang.Integer) (-1), (-948));
        long long31 = chronology13.add(19L, (long) 86399, 54487544);
        org.joda.time.DateTimeField dateTimeField32 = chronology13.clockhourOfDay();
        boolean boolean33 = dateTimeParserBucket5.restoreState((java.lang.Object) chronology13);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-31948L) + "'", long22 == (-31948L));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4707669314075L + "'", long31 == 4707669314075L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test16209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16209");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'x');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime9 = property7.withMinimumValue();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test16210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16210");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 54619321);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((-31948L));
        dateTimeParserBucket5.saveField(dateTimeField15, 505);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField15.set((long) 554, 54632138);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54632138 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "28" + "'", str17, "28");
    }

    @Test
    public void test16211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16211");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTime.Property property7 = dateTime5.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.plusSeconds(26);
        long long14 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime9.minus((long) 13);
        int int17 = property7.compareTo((org.joda.time.ReadableInstant) dateTime9);
        boolean boolean19 = dateTime9.isEqual((long) (-16002));
        int int20 = dateTime9.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours((int) (byte) 100);
        boolean boolean28 = dateTime26.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime26.getZone();
        int int30 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime32 = dateTime26.withMillisOfSecond(875);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645456491741L + "'", long14 == 1645456491741L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 793 + "'", int20 == 793);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test16212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16212");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime6 = dateTime3.minus((long) 671);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        dateTimeParserBucket12.saveField(dateTimeFieldType16, "it", locale18);
        int int20 = dateTime3.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        java.lang.String str26 = property24.getAsText();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        java.lang.String str30 = dateTimeZone28.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        int int33 = dateTimeZone28.getOffset(0L);
        org.joda.time.DateTime dateTime34 = localDateTime27.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        java.lang.String str38 = dateTimeZone36.toString();
        long long40 = dateTimeZone28.getMillisKeepLocal(dateTimeZone36, 1645455977932L);
        boolean boolean41 = dateTime3.equals((java.lang.Object) dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime42 = dateTime3.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusHours((int) (byte) 0);
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTime();
        int int48 = dateTime46.getEra();
        boolean boolean49 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours((int) (byte) 0);
        java.util.Date date54 = dateTime51.toDate();
        org.joda.time.DateTime.Property property55 = dateTime51.dayOfMonth();
        java.lang.String str56 = property55.getAsString();
        org.joda.time.DateTimeField dateTimeField57 = property55.getField();
        org.joda.time.DateTime dateTime58 = property55.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime58.getZone();
        boolean boolean61 = dateTimeZone59.isStandardOffset((long) 887);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime3.toMutableDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime64 = dateTime3.plusMillis(54717);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "52" + "'", str26, "52");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.052" + "'", str30, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.052" + "'", str38, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645455977932L + "'", long40 == 1645455977932L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Mon Feb 21 15:14:51 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "21" + "'", str56, "21");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test16213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16213");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        long long5 = dateTime1.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645456491805L + "'", long5 == 1645456491805L);
    }

    @Test
    public void test16214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16214");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(35999999L, chronology3);
        org.joda.time.DurationField durationField13 = chronology3.minutes();
        org.joda.time.Chronology chronology14 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.monthOfYear();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test16215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16215");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours(381);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 357);
        int int17 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getEra();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test16216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16216");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(450);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test16217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16217");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology3.centuryOfEra();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 54856290, chronology3);
        org.joda.time.DateTimeField dateTimeField16 = chronology3.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test16218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16218");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime dateTime6 = dateTime1.minusYears(121);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.toDateTime(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.plus(readablePeriod9);
        java.util.Date date11 = dateTime6.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:14:51 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Feb 21 15:14:51 GMT+00:00 1901");
    }

    @Test
    public void test16219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16219");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears(54381);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withPeriodAdded(readablePeriod8, 283);
        boolean boolean12 = dateTime7.isBefore((long) 781);
        org.joda.time.DateTime dateTime13 = dateTime7.toDateTime();
        int int14 = dateTime7.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 543 + "'", int14 == 543);
    }

    @Test
    public void test16220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16220");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        long long9 = dateTimeField7.roundCeiling((long) 23);
        org.joda.time.ReadablePartial readablePartial10 = null;
        int int11 = dateTimeField7.getMaximumValue(readablePartial10);
        int int12 = dateTimeField7.getMaximumValue();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-1));
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property35 = dateTime32.centuryOfEra();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = property35.getAsText(locale36);
        java.lang.String str39 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime29, (-1), locale36);
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = dateTimeField25.getAsShortText((int) (byte) 10, locale41);
        java.lang.String str44 = property20.getAsShortText(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(1645456040439L, chronology15, locale41, (java.lang.Integer) 132);
        java.lang.String str47 = dateTimeField7.getAsShortText((-31948L), locale41);
        java.lang.String str48 = locale41.getVariant();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 23L + "'", long9 == 23L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 999 + "'", int11 == 999);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 999 + "'", int12 == 999);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "20" + "'", str38, "20");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "10" + "'", str43, "10");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "22" + "'", str44, "22");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "52" + "'", str47, "52");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test16221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16221");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Feb");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder8 = builder5.setExtension('u', "italiano");
        java.util.Locale.Builder builder10 = builder8.addUnicodeLocaleAttribute("54472");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
    }

    @Test
    public void test16222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16222");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMillis(728);
        int int8 = localDateTime1.getValue(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minusHours(154);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = localDateTime1.toString(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.087" + "'", str12, "1970-01-01T00:00:00.087");
    }

    @Test
    public void test16223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16223");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusYears(10);
        int int6 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = localDateTime8.getFieldType(317);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 317");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test16224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16224");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(72000052L, dateTimeZone12);
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime.Property property16 = dateTime14.secondOfMinute();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.weekOfWeekyear();
        int int19 = dateTime17.getMillisOfSecond();
        boolean boolean20 = localDateTime8.equals((java.lang.Object) int19);
        java.util.Date date21 = localDateTime8.toDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours((int) (byte) 0);
        boolean boolean27 = dateTime25.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        boolean boolean32 = dateTime25.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property33 = dateTime25.secondOfDay();
        org.joda.time.DateTime dateTime36 = dateTime25.withDurationAdded(657L, 54391);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime36.getZone();
        org.joda.time.DateTime dateTime38 = localDateTime8.toDateTime(dateTimeZone37);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon May 01 03:32:01 GMT+00:00 1978");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test16225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16225");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.yearOfCentury();
        int int7 = dateTimeField5.get(1586790623348L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
    }

    @Test
    public void test16226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16226");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.convertLocalToUTC((long) 207, true, (long) 211);
        long long6 = dateTimeZone0.nextTransition(0L);
        long long10 = dateTimeZone0.convertLocalToUTC((long) 1999, false, 457071L);
        long long12 = dateTimeZone0.nextTransition(0L);
        long long14 = dateTimeZone0.previousTransition(728000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 207L + "'", long4 == 207L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1999L + "'", long10 == 1999L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 728000L + "'", long14 == 728000L);
    }

    @Test
    public void test16227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16227");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone8);
        long long13 = chronology9.add(0L, 619200L, 0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1920, chronology9);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test16228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16228");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours((int) (byte) 0);
        boolean boolean7 = dateTime5.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        boolean boolean12 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType0.getField(chronology14);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setExtension('a', "cinese");
        java.util.Locale locale22 = builder18.build();
        java.util.Locale locale23 = builder18.build();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale24.getDisplayScript();
        java.lang.String str26 = locale24.getCountry();
        java.util.Locale locale29 = new java.util.Locale("22", "");
        java.lang.String str30 = locale24.getDisplayVariant(locale29);
        boolean boolean31 = locale29.hasExtensions();
        java.lang.String str32 = locale23.getDisplayCountry(locale29);
        java.lang.String str33 = locale29.getCountry();
        java.lang.String str34 = dateTimeField16.getAsShortText(1645456241915L, locale29);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale29.toString(), "22");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Feb" + "'", str34, "Feb");
    }

    @Test
    public void test16229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16229");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(26099L, chronology1, locale2, (java.lang.Integer) 0, 34);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Integer int7 = dateTimeParserBucket5.getOffsetInteger();
        dateTimeParserBucket5.setOffset((java.lang.Integer) 4534795);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test16230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16230");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        boolean boolean11 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "cinese");
        java.util.Locale.Builder builder20 = builder15.setLanguageTag("coreano");
        java.util.Locale.Builder builder22 = builder20.setLanguage("en");
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusDays(212);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.dayOfMonth();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str35 = property33.getAsShortText(locale34);
        java.util.Locale.Builder builder36 = builder20.setLocale(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(31556952000L, chronology13, locale34);
        org.joda.time.DateTimeField dateTimeField38 = chronology13.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test16231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16231");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        int int6 = dateTime1.getDayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime1.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime8.minusMillis(657);
        org.joda.time.DateTime dateTime13 = dateTime11.plus((long) 671);
        org.joda.time.DateTime dateTime14 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime16 = dateTime11.withMillis(318L);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfDay();
        org.joda.time.DateTime dateTime18 = property17.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test16232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16232");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale3.getDisplayName(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale5.getScript();
        java.lang.String str12 = nameProvider0.getName(locale5, "-0001-02-22T00:07:32.255+00:00:00.052", "Chinese");
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale13.getDisplayScript();
        java.lang.String str15 = locale13.getCountry();
        java.util.Locale locale18 = new java.util.Locale("22", "");
        java.lang.String str19 = locale13.getDisplayVariant(locale18);
        java.util.Locale locale20 = locale18.stripExtensions();
        java.lang.String str23 = nameProvider0.getName(locale18, "54625758", "DateTimeField[monthOfYear]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale18.toString(), "22");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "22");
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test16233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16233");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int12 = localDateTime10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withYearOfEra(68782378);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test16234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16234");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.DateTime dateTime9 = property6.addToCopy((long) 15);
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfDay();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(441);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:14:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "21" + "'", str7, "21");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test16235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16235");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DurationField durationField5 = chronology2.millis();
        long long8 = durationField5.getMillis((-31556952000L), (long) 333);
        long long11 = durationField5.getValueAsLong((long) 54411540, 2685600000L);
        org.joda.time.DurationFieldType durationFieldType12 = durationField5.getType();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-31556952000L) + "'", long8 == (-31556952000L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 54411540L + "'", long11 == 54411540L);
        org.junit.Assert.assertNotNull(durationFieldType12);
    }

    @Test
    public void test16236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16236");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(chronology4);
        java.lang.String str6 = chronology4.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.Chronology chronology10 = chronology4.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField11 = chronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(35999999L, chronology4);
        org.joda.time.DurationField durationField14 = chronology4.minutes();
        org.joda.time.DurationField durationField15 = chronology4.hours();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 559, chronology4, locale16, (java.lang.Integer) 822, 54381);
        dateTimeParserBucket19.setOffset(7);
        java.lang.Object obj22 = dateTimeParserBucket19.saveState();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekOfWeekyear();
        boolean boolean27 = dateTimeField26.isLenient();
        dateTimeParserBucket19.saveField(dateTimeField26, 0);
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = dateTimeField26.getAsText(432, locale31);
        java.util.Locale.setDefault(locale31);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "432" + "'", str33, "432");
    }

    @Test
    public void test16237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16237");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        int int11 = dateTime7.getDayOfMonth();
        org.joda.time.DateTime.Property property12 = dateTime7.yearOfEra();
        org.joda.time.DurationField durationField13 = property12.getDurationField();
        java.lang.String str14 = property12.getAsText();
        org.joda.time.DateTime dateTime16 = property12.addToCopy((long) 55);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2035" + "'", str14, "2035");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test16238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16238");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        int int6 = dateTime1.getDayOfYear();
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property7.getAsShortText(locale9);
        org.joda.time.DateTime dateTime11 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology15.millis();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) ' ');
        long long24 = chronology15.set((org.joda.time.ReadablePartial) localDateTime22, (long) 99);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology15, locale25, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        dateTimeParserBucket29.saveField(dateTimeFieldType30, 577);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone35);
        long long39 = dateTimeZone35.nextTransition(0L);
        dateTimeParserBucket29.setZone(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        long long43 = dateTimeZone35.previousTransition(173L);
        org.joda.time.DateTime dateTime44 = dateTime11.withZone(dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.plus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = dateTime44.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-31948L) + "'", long24 == (-31948L));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 173L + "'", long43 == 173L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test16239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16239");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.LocalDateTime localDateTime12 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime.Property property13 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime15 = property13.addToCopy(5);
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra(564);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        long long19 = dateTime15.getMillis();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2057325494426L + "'", long19 == 2057325494426L);
    }

    @Test
    public void test16240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16240");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusDays(212);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = property14.addWrapFieldToCopy(576);
        boolean boolean17 = property14.isLeap();
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime19 = property14.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes(54647556);
        boolean boolean24 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime3.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test16241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16241");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy(576);
        boolean boolean12 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime14 = property9.addWrapFieldToCopy(536);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        boolean boolean27 = dateTimeFieldType20.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours((int) (byte) 0);
        java.util.Date date34 = dateTime31.toDate();
        org.joda.time.DateTime.Property property35 = dateTime31.dayOfMonth();
        org.joda.time.DateTime.Property property36 = dateTime31.dayOfMonth();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = property36.getAsText(locale37);
        java.lang.String str40 = dateTimeField28.getAsShortText((long) 99, locale37);
        int int42 = dateTimeField28.get((long) 121);
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder44.setExtension('a', "cinese");
        java.util.Locale locale48 = builder44.build();
        java.lang.String str49 = dateTimeField28.getAsText(0L, locale48);
        boolean boolean50 = property9.equals((java.lang.Object) locale48);
        java.lang.String str51 = property9.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Mon Feb 21 15:14:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "21" + "'", str39, "21");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "24" + "'", str40, "24");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 24 + "'", int42 == 24);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "24" + "'", str49, "24");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "weekyear" + "'", str51, "weekyear");
    }

    @Test
    public void test16242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16242");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        boolean boolean5 = dateTime1.isBeforeNow();
        boolean boolean6 = dateTime1.isBeforeNow();
        int int7 = dateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond(1);
        org.joda.time.Chronology chronology17 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusYears(54647283);
        org.joda.time.DateTime dateTime20 = dateTime1.withFields((org.joda.time.ReadablePartial) localDateTime14);
        int int21 = localDateTime14.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property22 = localDateTime14.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withMinuteOfHour(40);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusDays(301);
        int[] intArray27 = localDateTime24.getValues();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 4, 10, 2400999]");
    }

    @Test
    public void test16243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16243");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.withMillisOfSecond(659);
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours(57703690);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test16244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16244");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTime(dateTimeZone6);
        java.util.TimeZone timeZone9 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone6);
        int int11 = dateTime10.getDayOfYear();
        java.lang.String str12 = dateTime10.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T15:14:52.375+00:00:00.052" + "'", str12, "2022-02-21T15:14:52.375+00:00:00.052");
    }

    @Test
    public void test16245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16245");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale6 = new java.util.Locale("1978-05-01T03:32:00.087", "2022-02-21T15:06:23.483+00:00:00.052", "centuries");
        java.lang.String str9 = nameProvider0.getName(locale6, "118", "2022-02-21T15:06:59.270+00:00:00.052");
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale16.getVariant();
        java.lang.String str18 = dateTimeField14.getAsText((-1), locale16);
        java.lang.String str19 = locale16.getScript();
        java.lang.String str22 = nameProvider0.getName(locale16, "-0001-02-22T15:07:08.804Z", "Japanese");
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale23.toLanguageTag();
        java.lang.String str28 = nameProvider0.getShortName(locale23, "java.io.IOException: java.io.IOException: 15", "2022-02-21T15:06:59.270+00:00:00.052");
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.removeUnicodeLocaleAttribute("Feb");
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder32.removeUnicodeLocaleAttribute("Feb");
        java.util.Locale.Builder builder35 = builder32.clearExtensions();
        java.util.Locale.Builder builder37 = builder32.setVariant("years");
        java.util.Locale locale38 = builder37.build();
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder40 = builder31.setLocale(locale38);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.removeUnicodeLocaleAttribute("Feb");
        java.util.Locale.Builder builder44 = builder41.clearExtensions();
        java.util.Locale.Builder builder45 = builder41.clear();
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale.Builder builder47 = builder45.clear();
        java.util.Locale locale48 = builder47.build();
        java.util.Locale.Builder builder49 = builder31.setLocale(locale48);
        java.util.Locale locale50 = builder49.build();
        java.lang.String str53 = nameProvider0.getShortName(locale50, "54628033", "1970-01-01T00:00:00.087");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale6.toString(), "1978-05-01t03:32:00.087_2022-02-21T15:06:23.483+00:00:00.052_centuries");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "it" + "'", str25, "it");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test16246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16246");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime6 = dateTime1.minusSeconds(2022);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology12.millis();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) ' ');
        long long21 = chronology12.set((org.joda.time.ReadablePartial) localDateTime19, (long) 99);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology12, locale22, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(72000052L, dateTimeZone28);
        dateTimeParserBucket26.setZone(dateTimeZone28);
        long long33 = dateTimeZone8.getMillisKeepLocal(dateTimeZone28, (long) 212);
        java.util.TimeZone timeZone34 = dateTimeZone28.toTimeZone();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime41 = property38.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.weekyear();
        boolean boolean45 = dateTimeZone28.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime1, dateTimeZone28);
        long long49 = dateTimeZone28.previousTransition(3599487L);
        long long52 = dateTimeZone28.convertLocalToUTC(1645456412090L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-31948L) + "'", long21 == (-31948L));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 212L + "'", long33 == 212L);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3599487L + "'", long49 == 3599487L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645456412038L + "'", long52 == 1645456412038L);
    }

    @Test
    public void test16247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16247");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.centuryOfEra();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        java.util.Locale locale25 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str26 = locale20.getDisplayScript(locale25);
        java.lang.String str28 = locale20.getExtension('x');
        java.lang.String str29 = locale20.getISO3Language();
        java.util.Set<java.lang.Character> charSet30 = locale20.getExtensionKeys();
        java.lang.String str31 = dateTimeField7.getAsText(819, locale20);
        java.util.Locale locale33 = new java.util.Locale("China");
        java.lang.String str34 = locale20.getDisplayScript(locale33);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals(locale25.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "819" + "'", str31, "819");
        org.junit.Assert.assertEquals(locale33.toString(), "china");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test16248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16248");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekyear((-1));
        org.joda.time.DateTime dateTime9 = dateTime5.plus(12L);
        boolean boolean10 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime9.withWeekOfWeekyear(384);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 384 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test16249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16249");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra(54589);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property27 = dateTime24.centuryOfEra();
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = property27.getAsText(locale28);
        java.lang.String str31 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime21, (-1), locale28);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = dateTimeField17.getAsShortText((int) (byte) 10, locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 9999, chronology11, locale33, (java.lang.Integer) 54616882);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int42 = localDateTime39.get(dateTimeFieldType41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        int int44 = localDateTime39.indexOf(dateTimeFieldType43);
        dateTimeParserBucket37.saveField(dateTimeFieldType43, 6);
        boolean boolean47 = localDateTime5.isSupported(dateTimeFieldType43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = localDateTime5.withMonthOfYear(639);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 639 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it" + "'", str29, "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "20" + "'", str30, "20");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1" + "'", str31, "-1");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10" + "'", str35, "10");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test16250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16250");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int) 'a');
        boolean boolean9 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime6);
        java.lang.String str10 = dateTime1.toString();
        boolean boolean12 = dateTime1.isAfter(1645455987640L);
        org.joda.time.DateTime dateTime14 = dateTime1.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.era();
        boolean boolean31 = localDateTime29.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        boolean boolean37 = dateTimeFieldType30.isSupported(chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.clockhourOfDay();
        boolean boolean40 = dateTimeField38.isLeap(7279200000L);
        org.joda.time.DurationField durationField41 = dateTimeField38.getRangeDurationField();
        dateTimeParserBucket20.saveField(dateTimeField38, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField38.getType();
        org.joda.time.DateTime.Property property45 = dateTime14.property(dateTimeFieldType44);
        org.joda.time.DateTime dateTime47 = property45.addToCopy(54000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T15:14:52.468+00:00:00.052" + "'", str10, "2022-02-21T15:14:52.468+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test16251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16251");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        java.lang.String str2 = timeZone1.getID();
        int int3 = timeZone1.getRawOffset();
        boolean boolean4 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.052" + "'", str2, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test16252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16252");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        org.joda.time.DateTime.Property property24 = dateTime22.weekyear();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test16253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16253");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy(576);
        boolean boolean12 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime13 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMinutes(54616882);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.secondOfMinute();
        org.joda.time.DurationField durationField23 = chronology20.millis();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) ' ');
        long long29 = chronology20.set((org.joda.time.ReadablePartial) localDateTime27, (long) 99);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale30.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology20, locale30, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeField dateTimeField35 = chronology20.minuteOfHour();
        org.joda.time.DurationField durationField36 = chronology20.years();
        org.joda.time.DateTimeField dateTimeField37 = chronology20.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime16, chronology20);
        org.joda.time.DateTimeField dateTimeField39 = chronology20.hourOfDay();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths(0);
        java.util.Date date43 = dateTime42.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = dateTime42.withMillisOfSecond(54804);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54804 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-31948L) + "'", long29 == (-31948L));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Mon Feb 21 15:14:52 GMT+00:00 2022");
    }

    @Test
    public void test16254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16254");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears(1146);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField23 = chronology19.seconds();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        org.joda.time.DurationField durationField25 = chronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone26.getOffset(readableInstant27);
        java.lang.String str30 = dateTimeZone26.getName(0L);
        java.lang.String str32 = dateTimeZone26.getNameKey((long) (short) 10);
        org.joda.time.Chronology chronology33 = chronology19.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekyear();
        org.joda.time.DateTime dateTime35 = dateTime14.withChronology(chronology33);
        org.joda.time.DateTime dateTime37 = dateTime14.withMinuteOfHour(10);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.secondOfMinute();
        org.joda.time.DurationField durationField48 = chronology45.millis();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusSeconds((int) ' ');
        long long54 = chronology45.set((org.joda.time.ReadablePartial) localDateTime52, (long) 99);
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale55.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology45, locale55, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(72000052L, dateTimeZone61);
        dateTimeParserBucket59.setZone(dateTimeZone61);
        long long66 = dateTimeZone41.getMillisKeepLocal(dateTimeZone61, (long) 212);
        java.util.TimeZone timeZone67 = dateTimeZone61.toTimeZone();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime.Property property71 = localDateTime69.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime74 = property71.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.weekyear();
        boolean boolean78 = dateTimeZone61.isLocalDateTimeGap(localDateTime76);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((java.lang.Object) readableDuration38, dateTimeZone61);
        java.lang.String str82 = dateTimeZone61.getNameKey((long) 911);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str13, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.052" + "'", str30, "+00:00:00.052");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-31948L) + "'", long54 == (-31948L));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 212L + "'", long66 == 212L);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test16255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16255");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        int int9 = property8.getMaximumValue();
        org.joda.time.DateTime dateTime11 = property8.addWrapFieldToCopy(693);
        org.joda.time.DateTimeField dateTimeField12 = property8.getField();
        org.joda.time.DateTime dateTime13 = property8.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86399 + "'", int9 == 86399);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test16256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16256");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.weekyear();
        boolean boolean19 = dateTime13.equals((java.lang.Object) localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime13.getZone();
        org.joda.time.DateTime.Property property21 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime23 = property21.addToCopy(1645456049161L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.era();
        boolean boolean31 = localDateTime29.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        boolean boolean37 = dateTimeFieldType30.isSupported(chronology34);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(0L, chronology34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks((int) 'a');
        int int43 = dateTime42.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime42.withField(dateTimeFieldType44, 2);
        boolean boolean47 = dateTime38.isSupported(dateTimeFieldType44);
        org.joda.time.DateTime dateTime49 = dateTime38.withYearOfCentury(0);
        int int50 = property21.compareTo((org.joda.time.ReadableInstant) dateTime38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime38.withWeekOfWeekyear(54541721);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54541721 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 555 + "'", int43 == 555);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test16257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16257");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        java.util.Date date7 = localDateTime4.toDate();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusSeconds(4);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withFieldAdded(durationFieldType10, 213);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.year();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((-1));
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths(10);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime17.toMutableDateTime();
        int int21 = property13.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime22 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test16258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16258");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = chronology3.millis();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        long long12 = chronology3.set((org.joda.time.ReadablePartial) localDateTime10, (long) 99);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology3, locale13, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeField dateTimeField18 = chronology3.minuteOfHour();
        org.joda.time.DurationField durationField19 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField20 = chronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = chronology3.minuteOfHour();
        org.joda.time.DurationField durationField22 = chronology3.hours();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeField dateTimeField24 = chronology3.hourOfDay();
        long long27 = dateTimeField24.addWrapField(1645456022509L, 331);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-31948L) + "'", long12 == (-31948L));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645438022509L + "'", long27 == 1645438022509L);
    }

    @Test
    public void test16259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16259");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getID();
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale11.getScript();
        java.lang.String str13 = locale11.toLanguageTag();
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleKeys();
        java.lang.String str15 = dateTimeZone6.getShortName((long) 60639663, locale11);
        long long19 = dateTimeZone6.convertLocalToUTC(122400000L, false, (long) 284);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(1396224000000L, dateTimeZone6);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minus(readableDuration22);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.052" + "'", str9, "+00:00:00.052");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.052" + "'", str15, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 122399948L + "'", long19 == 122399948L);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test16260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16260");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withTime(54675, 54798, 262, 975);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54675 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test16261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16261");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfHour();
        org.joda.time.Chronology chronology8 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfWeek();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(1722978022302632L, chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 685 + "'", int6 == 685);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test16262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16262");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        int int6 = dateTime1.getDayOfYear();
        int int7 = dateTime1.getDayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime1.plus((long) 21);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test16263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16263");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = dateTime3.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.withMillisOfDay(0);
        org.joda.time.DateTime.Property property25 = dateTime24.millisOfSecond();
        org.joda.time.DateTime.Property property26 = dateTime24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusDays(212);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        org.joda.time.LocalDateTime localDateTime38 = property36.addWrapFieldToCopy(576);
        boolean boolean39 = property36.isLeap();
        org.joda.time.LocalDateTime localDateTime40 = property36.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = property41.getLocalDateTime();
        org.joda.time.DateTime dateTime43 = dateTime24.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.DateTime dateTime44 = dateTime18.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.minusWeeks(559);
        org.joda.time.LocalDateTime.Property property47 = localDateTime42.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType49 = localDateTime42.getFieldType(54603403);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 54603403");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.052" + "'", str17, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test16264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16264");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = property9.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks(15);
        boolean boolean23 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekyearOfCentury();
        org.joda.time.DurationField durationField30 = durationFieldType24.getField(chronology27);
        java.lang.String str31 = durationFieldType24.getName();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime20.withFieldAdded(durationFieldType24, (int) (byte) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusYears(54441130);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.era();
        boolean boolean43 = localDateTime41.isSupported(dateTimeFieldType42);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.secondOfMinute();
        boolean boolean49 = dateTimeFieldType42.isSupported(chronology46);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.weeks();
        boolean boolean52 = localDateTime50.isSupported(durationFieldType51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime36.withFieldAdded(durationFieldType51, 68971);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyearOfCentury();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DurationField durationField61 = durationFieldType51.getField(chronology57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(25237, 2514, 54642196, 612, 907, 54764, chronology57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 612 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weeks" + "'", str31, "weeks");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test16265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16265");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = dateTime3.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime.Property property23 = dateTime20.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime20.minusSeconds(2022);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.secondOfMinute();
        org.joda.time.DurationField durationField34 = chronology31.millis();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusSeconds((int) ' ');
        long long40 = chronology31.set((org.joda.time.ReadablePartial) localDateTime38, (long) 99);
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale41.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology31, locale41, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(72000052L, dateTimeZone47);
        dateTimeParserBucket45.setZone(dateTimeZone47);
        long long52 = dateTimeZone27.getMillisKeepLocal(dateTimeZone47, (long) 212);
        java.util.TimeZone timeZone53 = dateTimeZone47.toTimeZone();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime58 = property57.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime60 = property57.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.weekyear();
        boolean boolean64 = dateTimeZone47.isLocalDateTimeGap(localDateTime62);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime20, dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime67 = dateTime18.toMutableDateTime(dateTimeZone47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = dateTime18.withDayOfWeek(54730830);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54730830 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.052" + "'", str17, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-31948L) + "'", long40 == (-31948L));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 212L + "'", long52 == 212L);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mutableDateTime67);
    }

    @Test
    public void test16266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16266");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.lang.String str3 = locale2.getVariant();
        java.lang.String str4 = locale0.getDisplayName(locale2);
        java.lang.String str5 = locale0.getISO3Language();
        java.lang.String str6 = locale0.getDisplayCountry();
        java.lang.String str8 = locale0.getExtension('a');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime10.withMillisOfDay(0);
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.DateTime.Property property16 = dateTime14.era();
        int int17 = dateTime14.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMillis((long) 897);
        org.joda.time.DateTime.Property property21 = dateTime20.weekyear();
        boolean boolean22 = locale0.equals((java.lang.Object) dateTime20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Italian" + "'", str4, "Italian");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ita" + "'", str5, "ita");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test16267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16267");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.millis();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 576, chronology3);
        org.joda.time.DurationField durationField8 = chronology3.eras();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test16268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16268");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.DateTime dateTime8 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        java.util.Date date13 = dateTime10.toDate();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfMonth();
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfMonth();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = property15.getAsText(locale16);
        int int19 = property6.getMaximumTextLength(locale16);
        org.joda.time.DurationField durationField20 = property6.getDurationField();
        int int21 = property6.getLeapAmount();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withWeekyear((-1));
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths(10);
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfDay();
        org.joda.time.DateTime dateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withWeekyear((-1));
        org.joda.time.DateTime dateTime35 = dateTime31.withMillisOfDay(0);
        org.joda.time.DateTime.Property property36 = dateTime35.millisOfDay();
        boolean boolean37 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property38 = dateTime35.yearOfCentury();
        org.joda.time.DateTime dateTime40 = dateTime35.plusMillis(741);
        int int41 = property6.getDifference((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withWeekyear((-1));
        org.joda.time.DateTime dateTime47 = dateTime45.minusHours(15);
        org.joda.time.DateTime dateTime49 = dateTime45.minusHours(212);
        int int50 = dateTime49.getMillisOfSecond();
        org.joda.time.DateTime.Property property51 = dateTime49.year();
        org.joda.time.DateTime dateTime52 = property51.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property51.getFieldType();
        org.joda.time.DateTime.Property property54 = dateTime40.property(dateTimeFieldType53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime40.minus(readableDuration55);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:14:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "21" + "'", str7, "21");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 21 15:14:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it" + "'", str17, "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "21" + "'", str18, "21");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 790 + "'", int50 == 790);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test16269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16269");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology25 = chronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.centuryOfEra();
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test16270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16270");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = dateTimeField4.getLeapDurationField();
        java.lang.String str6 = dateTimeField4.toString();
        int int8 = dateTimeField4.getMaximumValue(1645455994623L);
        org.joda.time.DurationField durationField9 = dateTimeField4.getRangeDurationField();
        boolean boolean10 = dateTimeField4.isSupported();
        boolean boolean11 = dateTimeField4.isSupported();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str6, "DateTimeField[secondOfMinute]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test16271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16271");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(435, 609, 54616207, (-1834413124), 26782964, 333);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1834413124 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16272");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withDurationAdded(readableDuration9, 34);
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.year();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test16273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16273");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy(576);
        boolean boolean12 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime14 = property9.addWrapFieldToCopy(536);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours((int) (byte) 0);
        boolean boolean20 = dateTime18.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int) 'a');
        boolean boolean25 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekyearOfCentury();
        java.util.Locale locale34 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        int int35 = dateTimeField30.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale34.getISO3Country();
        java.lang.String str37 = property9.getAsShortText(locale34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = property9.setCopy("-0001-02-22T15:11:22.223+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-0001-02-22T15:11:22.223+00:00:00.052\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ITA" + "'", str36, "ITA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1978" + "'", str37, "1978");
    }

    @Test
    public void test16274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16274");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int4 = localDateTime1.get(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        int int6 = localDateTime1.indexOf(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths(772);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test16275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16275");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime1.plus(1645455977932L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        boolean boolean21 = localDateTime19.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        boolean boolean27 = dateTimeFieldType20.isSupported(chronology24);
        boolean boolean28 = localDateTime14.isSupported(dateTimeFieldType20);
        boolean boolean29 = dateTime9.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime.Property property30 = dateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfEvenCopy();
        java.lang.String str36 = property34.getAsText();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusMonths((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readableDuration43);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField51 = null;
        dateTimeParserBucket50.saveField(dateTimeField51, (int) (short) 0);
        java.lang.Integer int54 = dateTimeParserBucket50.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        long long58 = dateTimeZone55.convertLocalToUTC(0L, false);
        dateTimeParserBucket50.setZone(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime64 = property63.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withYearOfEra((int) 'x');
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusHours((int) (byte) 0);
        boolean boolean73 = dateTime71.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone75 = dateTimeZone74.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime71.toMutableDateTime(dateTimeZone74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.era();
        int int78 = mutableDateTime76.get(dateTimeFieldType77);
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType77.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType77.getDurationType();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime66.withField(dateTimeFieldType77, 0);
        java.util.Locale locale84 = java.util.Locale.ITALY;
        dateTimeParserBucket50.saveField(dateTimeFieldType77, "5", locale84);
        boolean boolean86 = localDateTime44.isSupported(dateTimeFieldType77);
        boolean boolean87 = localDateTime37.isSupported(dateTimeFieldType77);
        java.lang.String str88 = dateTimeFieldType77.toString();
        org.joda.time.DateTime.Property property89 = dateTime9.property(dateTimeFieldType77);
        org.joda.time.DateTime dateTime91 = dateTime9.plusMonths(58665600);
        int int92 = dateTime9.getMinuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = null;
        java.lang.String str94 = dateTime9.toString(dateTimeFormatter93);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:14:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "52" + "'", str36, "52");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-52L) + "'", long58 == (-52L));
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(timeZone75);
        org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNull(durationFieldType79);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "era" + "'", str88, "era");
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 21 + "'", int92 == 21);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "2074-04-14T06:21:10.829+00:00:00.052" + "'", str94, "2074-04-14T06:21:10.829+00:00:00.052");
    }

    @Test
    public void test16276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16276");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("-0001-02-22T15:10:25.080+00:00:00.052", (double) 69184188);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=6.9184188E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16277");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 54749066, dateTimeZone1);
    }

    @Test
    public void test16278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16278");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test16279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16279");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.centuries();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField10 = chronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str14 = dateTimeZone12.toString();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale22.getVariant();
        java.lang.String str24 = dateTimeField20.getAsText((-1), locale22);
        boolean boolean25 = locale22.hasExtensions();
        java.lang.String str26 = dateTimeZone12.getName(1645455983203L, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(32400000L, chronology3, locale22, (java.lang.Integer) 483);
        java.util.Locale locale29 = dateTimeParserBucket28.getLocale();
        int int30 = dateTimeParserBucket28.getOffset();
        long long33 = dateTimeParserBucket28.computeMillis(true, "2022-02-21T15:10:08.292+00:00:00.052");
        org.joda.time.Chronology chronology34 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.052" + "'", str14, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.052" + "'", str26, "+00:00:00.052");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32400000L + "'", long33 == 32400000L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test16280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16280");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        dateTimeParserBucket5.saveField(dateTimeFieldType9, "it", locale11);
        java.lang.String str13 = locale11.toLanguageTag();
        boolean boolean14 = locale11.hasExtensions();
        java.lang.String str15 = locale11.getScript();
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test16281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16281");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property19 = dateTime16.centuryOfEra();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = property19.getAsText(locale20);
        java.lang.String str23 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (-1), locale20);
        boolean boolean24 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusDays(212);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusHours((int) ' ');
        boolean boolean34 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusDays(212);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.weekyear();
        org.joda.time.LocalDateTime localDateTime47 = property45.addWrapFieldToCopy(576);
        boolean boolean48 = property45.isLeap();
        org.joda.time.LocalDateTime localDateTime50 = property45.addWrapFieldToCopy(536);
        org.joda.time.DateTime dateTime51 = localDateTime50.toDateTime();
        org.joda.time.DateTime dateTime53 = dateTime51.withMillis(7200000L);
        org.joda.time.DateTime dateTime54 = localDateTime31.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime60 = property59.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime62 = property59.addWrapFieldToCopy(28);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.dayOfYear();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-21L), chronology63);
        org.joda.time.DateTime dateTime67 = dateTime54.withChronology(chronology63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusHours((int) (byte) 0);
        java.util.Date date72 = dateTime69.toDate();
        org.joda.time.DateTime.Property property73 = dateTime69.dayOfMonth();
        org.joda.time.DateTime.Property property74 = dateTime69.dayOfMonth();
        org.joda.time.DateTime dateTime75 = dateTime69.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime77 = dateTime69.plusMillis(536);
        org.joda.time.Chronology chronology78 = dateTime77.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.centuryOfEra();
        int int80 = dateTimeField79.getMinimumValue();
        int int81 = dateTime54.get(dateTimeField79);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20" + "'", str22, "20");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1" + "'", str23, "-1");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Mon Feb 21 15:14:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 19 + "'", int81 == 19);
    }

    @Test
    public void test16282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16282");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(801, 921, 562, 605, 54612179, 54840);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 605 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16283");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(2922789);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        int int16 = dateTime14.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = dateTime14.withZone(dateTimeZone18);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = dateTimeZone18.getName((long) 26, locale22);
        long long26 = dateTimeZone18.adjustOffset((long) 657, false);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime30.toMutableDateTime(dateTimeZone33);
        long long37 = dateTimeZone18.getMillisKeepLocal(dateTimeZone33, 657L);
        org.joda.time.DateTime dateTime38 = dateTime7.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime40 = dateTime38.withCenturyOfEra(121);
        org.joda.time.DateTime.Property property41 = dateTime40.minuteOfDay();
        org.joda.time.DateTime dateTime43 = dateTime40.withMillisOfSecond(35);
        org.joda.time.DateTime.Property property44 = dateTime40.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2922789-04-13T15:14:53.027+00:00:00.052" + "'", str8, "2922789-04-13T15:14:53.027+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.052" + "'", str23, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 657L + "'", long26 == 657L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 657L + "'", long37 == 657L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test16284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16284");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.LocalDateTime localDateTime12 = dateTime10.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.minus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime10.minusMillis((-948));
        org.joda.time.DateTime.Property property17 = dateTime10.monthOfYear();
        org.joda.time.DateTime dateTime18 = property17.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks(958);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test16285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16285");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        org.joda.time.DurationField durationField8 = chronology2.minutes();
        org.joda.time.DurationField durationField9 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology2.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readablePeriod16);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        java.lang.Integer int36 = dateTimeParserBucket32.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket32.setZone(dateTimeZone37);
        dateTimeParserBucket23.setZone(dateTimeZone37);
        dateTimeParserBucket23.setPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket23.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = property46.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withDayOfYear((int) (short) 100);
        int[] intArray51 = chronology42.get((org.joda.time.ReadablePartial) localDateTime47, (long) 'x');
        int int52 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime15.minus(readableDuration53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType56 = localDateTime15.getFieldType(662);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 662");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1, 120]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test16286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16286");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight8 = dateTime5.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear((-1));
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours(15);
        org.joda.time.DateTime dateTime17 = dateTime13.minusHours(212);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime13.withDurationAdded(readableDuration18, 4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime13.toString(dateTimeFormatter21);
        boolean boolean23 = dateMidnight8.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property24 = dateTime13.millisOfDay();
        org.joda.time.DateTime dateTime26 = dateTime13.withMillisOfDay(483);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.plus(readablePeriod27);
        int int29 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime1.minusYears(54642196);
        boolean boolean32 = dateTime1.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-0001-02-22T15:14:53.069+00:00:00.052" + "'", str22, "-0001-02-22T15:14:53.069+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test16287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16287");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        java.lang.String str8 = localDateTime6.toString("-292275054");
        org.joda.time.Chronology chronology9 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-292275054" + "'", str8, "-292275054");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test16288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16288");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.plusMinutes(977);
        int int16 = dateTime15.getCenturyOfEra();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfDay();
        org.joda.time.DateTime.Property property18 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        int int20 = dateTime19.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2020 + "'", int20 == 2020);
    }

    @Test
    public void test16289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16289");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((int) ' ');
        long long11 = chronology2.set((org.joda.time.ReadablePartial) localDateTime9, (long) 99);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        java.lang.String str17 = property15.toString();
        org.joda.time.LocalDateTime localDateTime18 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.weekyear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) 0);
        java.util.Date date29 = dateTime26.toDate();
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        boolean boolean32 = localDateTime24.isSupported(dateTimeFieldType31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime24.plus(readablePeriod33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusYears(0);
        boolean boolean37 = localDateTime18.isEqual((org.joda.time.ReadablePartial) localDateTime36);
        java.util.Date date38 = localDateTime18.toDate();
        long long40 = chronology2.set((org.joda.time.ReadablePartial) localDateTime18, 0L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-31948L) + "'", long11 == (-31948L));
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[millisOfSecond]" + "'", str17, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Mon Feb 21 15:14:53 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
    }

    @Test
    public void test16290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16290");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        long long9 = property3.remainder();
        java.lang.String str10 = property3.getAsShortText();
        org.joda.time.LocalDateTime localDateTime11 = property3.withMaximumValue();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "52" + "'", str10, "52");
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test16291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16291");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(865);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        org.joda.time.DateTime dateTime13 = dateTime10.withWeekyear((int) 'x');
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime15 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        java.lang.String str16 = localDateTime4.toString();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.withWeekyear(952);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localDateTime18.getValue(54730);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 54730");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.999" + "'", str16, "1970-01-01T00:00:00.999");
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test16292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16292");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        boolean boolean8 = dateTimeField4.isLeap((long) 977);
        long long11 = dateTimeField4.add((long) 57, (long) 2000);
        java.lang.String str13 = dateTimeField4.getAsText(1645456098616L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays(212);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = property23.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readableDuration26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.secondOfMinute();
        org.joda.time.DurationField durationField34 = dateTimeField33.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusYears(10);
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale41.getScript();
        java.lang.String str44 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, locale41);
        java.lang.String str45 = locale41.getISO3Language();
        java.lang.String str46 = locale41.getDisplayScript();
        java.lang.String str47 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime27, 822, locale41);
        java.util.Set<java.lang.Character> charSet48 = locale41.getExtensionKeys();
        java.lang.Object obj49 = locale41.clone();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "70" + "'", str6, "70");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 63113904000057L + "'", long11 == 63113904000057L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "22" + "'", str13, "22");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "53" + "'", str44, "53");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ita" + "'", str45, "ita");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "822" + "'", str47, "822");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "it");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "it");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "it");
    }

    @Test
    public void test16293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16293");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        int int7 = dateTimeParserBucket5.getOffset();
        java.util.Locale locale8 = dateTimeParserBucket5.getLocale();
        long long9 = dateTimeParserBucket5.computeMillis();
        long long11 = dateTimeParserBucket5.computeMillis(true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-52L) + "'", long9 == (-52L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-52L) + "'", long11 == (-52L));
    }

    @Test
    public void test16294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16294");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        int int4 = property3.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) (byte) 0);
        java.util.Date date9 = dateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone10.getOffset(readableInstant11);
        int int14 = dateTimeZone10.getStandardOffset((long) 15);
        org.joda.time.DateTime dateTime15 = dateTime6.withZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours((int) (byte) 0);
        java.util.Date date20 = dateTime17.toDate();
        org.joda.time.DateTime.Property property21 = dateTime17.dayOfMonth();
        org.joda.time.DateTime.Property property22 = dateTime17.dayOfMonth();
        java.lang.String str23 = property22.getAsString();
        org.joda.time.DateTime dateTime24 = property22.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) 0);
        java.util.Date date29 = dateTime26.toDate();
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfMonth();
        org.joda.time.DateTime.Property property31 = dateTime26.dayOfMonth();
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = property31.getAsText(locale32);
        int int35 = property22.getMaximumTextLength(locale32);
        org.joda.time.DateTime dateTime36 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfMonth();
        int int38 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        long long39 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime40 = dateTime36.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withWeekyear((-1));
        org.joda.time.DateTime dateTime46 = dateTime42.plusHours((int) (byte) 100);
        int int47 = dateTime42.getDayOfYear();
        java.util.GregorianCalendar gregorianCalendar48 = dateTime42.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = property52.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.era();
        boolean boolean55 = localDateTime53.isSupported(dateTimeFieldType54);
        java.lang.String str56 = dateTimeFieldType54.toString();
        int int57 = dateTime42.get(dateTimeFieldType54);
        org.joda.time.DateTime dateTime58 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime60 = dateTime42.withYear(68819);
        boolean boolean62 = dateTime60.isAfter(9223372036854775807L);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime60.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 21 15:14:53 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Feb 21 15:14:53 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "21" + "'", str23, "21");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Mon Feb 21 15:14:53 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "21" + "'", str34, "21");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1645487999896L) + "'", long39 == (-1645487999896L));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(gregorianCalendar48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "era" + "'", str56, "era");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mutableDateTime63);
    }

    @Test
    public void test16295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16295");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime11.centuryOfEra();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = property14.getAsText(locale15);
        java.lang.String str18 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime8, (-1), locale15);
        long long21 = dateTimeField4.add((long) 99, (long) 26);
        int int23 = dateTimeField4.getLeapAmount((long) 536);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = property27.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours((int) (byte) 0);
        java.util.Date date35 = dateTime32.toDate();
        org.joda.time.DateTime.Property property36 = dateTime32.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property36.getFieldType();
        boolean boolean38 = localDateTime30.isSupported(dateTimeFieldType37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime30.withDurationAdded(readableDuration39, 68841);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withDurationAdded(readableDuration42, 54608357);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property59 = dateTime56.centuryOfEra();
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = property59.getAsText(locale60);
        java.lang.String str63 = dateTimeField49.getAsText((org.joda.time.ReadablePartial) localDateTime53, (-1), locale60);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime53.minusDays(0);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime53.minusYears(245);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime53.plusMinutes(54675);
        int[] intArray70 = localDateTime53.getValues();
        int int71 = dateTimeField4.getMaximumValue((org.joda.time.ReadablePartial) localDateTime41, intArray70);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "20" + "'", str17, "20");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 26099L + "'", long21 == 26099L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Mon Feb 21 15:14:53 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "it" + "'", str61, "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "20" + "'", str62, "20");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1" + "'", str63, "-1");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2022, 2, 21, 54893163]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 59 + "'", int71 == 59);
    }

    @Test
    public void test16296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16296");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy(576);
        boolean boolean12 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime13 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = property14.addWrapFieldToCopy(54635175);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test16297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16297");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = dateTime5.withZone(dateTimeZone9);
        org.joda.time.DateTime.Property property12 = dateTime5.yearOfEra();
        org.joda.time.DateTime.Property property13 = dateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight18 = dateTime15.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.withMillisOfDay(0);
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfSecond();
        int int27 = property26.getMaximumValue();
        boolean boolean28 = dateTimeZone19.equals((java.lang.Object) property26);
        boolean boolean30 = dateTimeZone19.equals((java.lang.Object) "37");
        boolean boolean32 = dateTimeZone19.isStandardOffset(60590228L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        boolean boolean38 = dateTime36.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime36.toMutableDateTime(dateTimeZone39);
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str44 = dateTimeZone39.getShortName((long) (short) 100, locale43);
        java.lang.String str46 = dateTimeZone39.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        org.joda.time.DurationField durationField54 = chronology51.millis();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusSeconds((int) ' ');
        long long60 = chronology51.set((org.joda.time.ReadablePartial) localDateTime58, (long) 99);
        org.joda.time.DateTimeField dateTimeField61 = chronology51.clockhourOfDay();
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale63 = java.util.Locale.getDefault(category62);
        java.lang.String str64 = locale63.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (-457071), chronology51, locale63, (java.lang.Integer) (-948));
        java.lang.String str67 = dateTimeZone39.getName((long) 2022, locale63);
        boolean boolean68 = dateTimeZone19.equals((java.lang.Object) dateTimeZone39);
        org.joda.time.DateTime dateTime69 = dateTime5.withZone(dateTimeZone39);
        long long73 = dateTimeZone39.convertLocalToUTC(1645456427197L, false, 189L);
        java.lang.String str74 = dateTimeZone39.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 999 + "'", int27 == 999);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.052" + "'", str44, "+00:00:00.052");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-31948L) + "'", long60 == (-31948L));
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "fr" + "'", str64, "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.052" + "'", str67, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1645456427145L + "'", long73 == 1645456427145L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.052" + "'", str74, "+00:00:00.052");
    }

    @Test
    public void test16298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16298");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((long) 766);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime6.toMutableDateTime();
        long long10 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime6.plusMinutes(0);
        org.joda.time.DateTime dateTime13 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withYearOfEra(54643380);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField23 = chronology19.seconds();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.hourOfHalfday();
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeField26.getAsShortText(59, locale28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology32.millis();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusSeconds((int) ' ');
        long long41 = chronology32.set((org.joda.time.ReadablePartial) localDateTime39, (long) 99);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withDurationAdded(readableDuration42, 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays(426);
        int[] intArray47 = localDateTime44.getValues();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.millisOfSecond();
        java.util.Locale locale57 = new java.util.Locale("15");
        java.lang.String str58 = dateTimeField54.getAsShortText(2922789, locale57);
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str60 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime44, 54648495, locale57);
        java.lang.String str61 = locale57.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = localDateTime15.toString("-0001-02-22T15:12:42.068+00:00:00.052", locale57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645456493238L + "'", long10 == 1645456493238L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "59" + "'", str29, "59");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-31948L) + "'", long41 == (-31948L));
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1969, 12, 31, 86368052]");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals(locale57.toString(), "15");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2922789" + "'", str58, "2922789");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "54648495" + "'", str60, "54648495");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "15" + "'", str61, "15");
    }

    @Test
    public void test16299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16299");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property3.addToCopy(36);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfSecond(531);
        int int10 = localDateTime7.getMinuteOfHour();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test16300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16300");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-21T15:06:47.170+00:00:00.052");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = iOException3.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test16301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16301");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        int int10 = mutableDateTime8.get(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField16 = chronology13.millis();
        boolean boolean17 = dateTimeFieldType9.isSupported(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.days();
        org.joda.time.DurationField durationField19 = chronology13.weeks();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = chronology13.hourOfDay();
        java.util.Locale locale27 = new java.util.Locale("54391", "-0001-02-22T15:06:23.107+00:00:00.052", "secondOfDay");
        java.lang.String str28 = locale27.getCountry();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = locale30.getVariant();
        java.lang.String str32 = locale27.getDisplayName(locale30);
        java.lang.String str33 = locale30.getDisplayScript();
        java.lang.String str34 = dateTimeField22.getAsShortText(1586790521548L, locale30);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale27.toString(), "54391_-0001-02-22T15:06:23.107+00:00:00.052_secondOfDay");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-0001-02-22T15:06:23.107+00:00:00.052" + "'", str28, "-0001-02-22T15:06:23.107+00:00:00.052");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "54391 (-0001-02-22T15:06:23.107+00:00:00.052,secondOfDay)" + "'", str32, "54391 (-0001-02-22T15:06:23.107+00:00:00.052,secondOfDay)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "15" + "'", str34, "15");
    }

    @Test
    public void test16302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16302");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        int int6 = dateTime1.getDayOfYear();
        int int7 = dateTime1.getDayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime1.plus((long) 21);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyear();
        org.joda.time.DurationField durationField12 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        org.joda.time.DurationField durationField14 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test16303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16303");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        int int6 = dateTime1.getDayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime1.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.minus((long) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime14.minusDays(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime14.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime14.plusSeconds((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours((int) (byte) -1);
        int int24 = dateTime23.getMillisOfSecond();
        org.joda.time.DateTime dateTime26 = dateTime23.withMillisOfSecond(941);
        boolean boolean27 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        int int32 = dateTime31.getMillisOfSecond();
        org.joda.time.DateTime.Property property33 = dateTime31.secondOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundHalfCeilingCopy();
        boolean boolean35 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime34.withYearOfEra(54626);
        org.joda.time.TimeOfDay timeOfDay38 = dateTime37.toTimeOfDay();
        org.joda.time.DateTime dateTime40 = dateTime37.minusHours(549);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 337 + "'", int24 == 337);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 337 + "'", int32 == 337);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test16304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16304");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears(948);
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) chronology8, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test16305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16305");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readablePeriod10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours((int) (byte) 0);
        boolean boolean20 = dateTime18.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int) 'a');
        boolean boolean25 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime24.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.weekyear();
        boolean boolean34 = dateTime28.equals((java.lang.Object) localDateTime30);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime28.getZone();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime14, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readableDuration37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withWeekyear(54388);
        int int41 = localDateTime36.getWeekOfWeekyear();
        boolean boolean42 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test16306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16306");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.months();
        org.joda.time.DurationField durationField16 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.era();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusYears(100);
        int[] intArray28 = localDateTime23.getValues();
        long long30 = chronology12.set((org.joda.time.ReadablePartial) localDateTime23, (long) 54658957);
        org.joda.time.DateTimeField dateTimeField31 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField32 = chronology12.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusWeeks(15);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.plusYears(15);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.minus(readableDuration41);
        int int43 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDateTime36);
        java.lang.String str44 = localDateTime36.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str13, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[120, 1, 1, 999]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-58380393599053L) + "'", long30 == (-58380393599053L));
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-21T15:14:53.336" + "'", str44, "2022-02-21T15:14:53.336");
    }

    @Test
    public void test16307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16307");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.weekyear();
        long long9 = dateTimeField6.getDifferenceAsLong(954874L, 894L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test16308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16308");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime11.centuryOfEra();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = property14.getAsText(locale15);
        java.lang.String str18 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime8, (-1), locale15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime8.minusDays(0);
        int int21 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property25.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra(54589);
        int int30 = localDateTime27.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight35 = dateTime32.toDateMidnight();
        int int36 = dateTime32.getSecondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime32.toString(dateTimeFormatter37);
        org.joda.time.DateTime dateTime39 = dateTime32.toDateTimeISO();
        org.joda.time.Chronology chronology40 = dateTime32.getChronology();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        dateTimeParserBucket46.saveField(dateTimeFieldType50, "it", locale52);
        int int54 = dateTime32.get(dateTimeFieldType50);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType50.getRangeDurationType();
        boolean boolean56 = localDateTime27.isSupported(durationFieldType55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime8.withFieldAdded(durationFieldType55, 54764730);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "20" + "'", str17, "20");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 51 + "'", int30 == 51);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 54893 + "'", int36 == 54893);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-21T15:14:53.415+00:00:00.052" + "'", str38, "2022-02-21T15:14:53.415+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test16309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16309");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.monthOfYear();
        int int10 = dateTimeField9.getMinimumValue();
        java.lang.String str11 = dateTimeField9.getName();
        boolean boolean12 = dateTimeField9.isLenient();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField9.add((long) 54710, 1645456008871L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 1645456008871");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test16310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16310");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusYears(54636244);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusDays(0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMonths(331);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test16311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16311");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        int int16 = dateTime14.getYearOfEra();
        org.joda.time.DateTime.Property property17 = dateTime14.secondOfDay();
        int int18 = property17.getMaximumValue();
        org.joda.time.DateTime dateTime19 = property17.getDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.plus(12L);
        org.joda.time.DateTime dateTime22 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property23 = dateTime22.secondOfDay();
        org.joda.time.DateTime dateTime24 = property23.getDateTime();
        boolean boolean25 = dateTime24.isAfterNow();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        int int32 = dateTimeParserBucket31.getOffset();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.era();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.plusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property45 = localDateTime39.property(dateTimeFieldType44);
        dateTimeParserBucket31.saveField(dateTimeFieldType44, 483);
        org.joda.time.DateTime.Property property48 = dateTime24.property(dateTimeFieldType44);
        java.lang.String str49 = property48.getAsString();
        java.lang.String str50 = property48.getAsText();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 86399 + "'", int18 == 86399);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0" + "'", str50, "0");
    }

    @Test
    public void test16312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16312");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        int int17 = dateTimeField15.getLeapAmount((long) 26646);
        boolean boolean18 = dateTimeField15.isSupported();
        long long21 = dateTimeField15.add((long) 941, 68837);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) 1586790518945L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.DurationField durationField31 = chronology27.seconds();
        org.joda.time.DurationField durationField32 = chronology27.centuries();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = chronology27.add(readablePeriod33, (long) 'x', (int) '4');
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int41 = localDateTime38.get(dateTimeFieldType40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.withMillisOfDay(0);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readablePeriod44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        org.joda.time.DurationField durationField51 = dateTimeField50.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray58 = localDateTime57.getValues();
        int int59 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localDateTime53, intArray58);
        chronology27.validate((org.joda.time.ReadablePartial) localDateTime43, intArray58);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray62 = dateTimeField15.addWrapPartial((org.joda.time.ReadablePartial) localDateTime23, 78, intArray58, 150);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 68837941L + "'", long21 == 68837941L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 120L + "'", long36 == 120L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNull(durationField51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
    }

    @Test
    public void test16313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16313");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = dateTimeField4.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getScript();
        java.lang.String str15 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime9, locale12);
        java.lang.String str16 = locale12.getISO3Language();
        java.lang.String str17 = locale12.getISO3Country();
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale12.getDisplayScript();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "53" + "'", str15, "53");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ita" + "'", str16, "ita");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test16314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16314");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withDurationAdded(readableDuration10, 54477);
        org.joda.time.DateTime dateTime14 = dateTime8.minusMonths(348);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test16315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16315");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) (-1));
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((-31948L));
        dateTimeParserBucket5.saveField(dateTimeField15, 2);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        dateTimeParserBucket25.setZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours((int) (byte) 0);
        boolean boolean47 = dateTime45.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        boolean boolean52 = dateTime45.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTime();
        org.joda.time.DateTime dateTime55 = dateTime51.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.weekyear();
        boolean boolean61 = dateTime55.equals((java.lang.Object) localDateTime57);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime55.getZone();
        dateTimeParserBucket25.setZone(dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeParserBucket25.getZone();
        long long67 = dateTimeZone64.adjustOffset((long) (-1), true);
        dateTimeParserBucket5.setZone(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone69 = dateTimeParserBucket5.getZone();
        long long71 = dateTimeZone69.convertUTCToLocal((long) 54760967);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "28" + "'", str17, "28");
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 54761019L + "'", long71 == 54761019L);
    }

    @Test
    public void test16316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16316");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy(576);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours((int) (byte) 0);
        boolean boolean18 = dateTime16.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime16.toMutableDateTime(dateTimeZone19);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = dateTimeZone19.getName((long) (byte) 1, locale23);
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = locale12.getDisplayScript(locale23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar31 = dateTime30.toGregorianCalendar();
        int int32 = dateTime30.getMillisOfSecond();
        org.joda.time.DateTime.Property property33 = dateTime30.minuteOfHour();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property39 = dateTime36.centuryOfEra();
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = property39.getAsText(locale40);
        java.lang.String str43 = locale34.getDisplayName(locale40);
        int int44 = property33.getMaximumTextLength(locale40);
        java.util.Set<java.lang.String> strSet45 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale12.getDisplayLanguage(locale40);
        java.lang.String str47 = property9.getAsShortText(locale12);
        int int48 = property9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = property9.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime50 = property9.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.052" + "'", str24, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(gregorianCalendar31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 531 + "'", int32 == 531);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "it" + "'", str41, "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "20" + "'", str42, "20");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "coreano" + "'", str43, "coreano");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "coreano" + "'", str46, "coreano");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1978" + "'", str47, "1978");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test16317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16317");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.Chronology chronology8 = chronology2.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField9 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.year();
        org.joda.time.DurationField durationField11 = chronology2.halfdays();
        long long14 = durationField11.subtract((long) 54437, 1995);
        long long17 = durationField11.getValueAsLong((long) 526510, 35L);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = durationField11.getMillis((-64249977599599L), 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -64249977599599 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-86183945563L) + "'", long14 == (-86183945563L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test16318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16318");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField9 = chronology2.years();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(readableDuration21, 212);
        org.joda.time.DateTime dateTime25 = dateTime20.plusMonths(659);
        boolean boolean26 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str28 = dateTimeFieldType27.toString();
        int int29 = dateTime10.get(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hourOfDay" + "'", str28, "hourOfDay");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
    }

    @Test
    public void test16319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16319");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "cinese");
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("coreano");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("999");
        java.util.Locale.Builder builder9 = builder7.setLanguage("ja");
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("China");
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale13 = builder11.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder11.setLanguageTag("-0001-02-22T15:13:33.040+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
    }

    @Test
    public void test16320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16320");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekyear((-1));
        org.joda.time.DateTime.Property property7 = dateTime4.centuryOfEra();
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear((-1));
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours(15);
        org.joda.time.DateTime dateTime17 = dateTime13.minusHours(212);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime13.withDurationAdded(readableDuration18, 4);
        org.joda.time.DateTime dateTime22 = dateTime13.minusMonths((int) (byte) 0);
        int int23 = dateTime22.getMinuteOfDay();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusDays(212);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plusMinutes(212);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plus(readableDuration42);
        int int44 = localDateTime34.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minus(readableDuration45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusHours((int) (byte) 0);
        boolean boolean53 = dateTime51.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone55 = dateTimeZone54.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime51.toMutableDateTime(dateTimeZone54);
        java.util.Locale locale58 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str59 = dateTimeZone54.getShortName((long) (short) 100, locale58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 999, dateTimeZone54);
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology62, locale63, (java.lang.Integer) (-1), (int) (byte) -1);
        int int67 = dateTimeParserBucket66.getOffset();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime.Property property71 = localDateTime69.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime72 = property71.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.era();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.plusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property80 = localDateTime74.property(dateTimeFieldType79);
        dateTimeParserBucket66.saveField(dateTimeFieldType79, 483);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime60.withField(dateTimeFieldType79, 0);
        boolean boolean85 = localDateTime46.isSupported(dateTimeFieldType79);
        boolean boolean86 = localDateTime32.isSupported(dateTimeFieldType79);
        int int87 = dateTime22.get(dateTimeFieldType79);
        int int88 = dateTime4.get(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 914 + "'", int23 == 914);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.052" + "'", str59, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
    }

    @Test
    public void test16321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16321");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.TimeZone.setDefault(timeZone2);
        int int5 = timeZone2.getOffset((long) 703);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
    }

    @Test
    public void test16322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16322");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.withMillisOfSecond(659);
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours(57703690);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(355);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.joda.time.DateTime dateTime17 = property14.setCopy(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test16323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16323");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property19 = dateTime16.centuryOfEra();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = property19.getAsText(locale20);
        java.lang.String str23 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (-1), locale20);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = dateTimeField9.getAsShortText((int) (byte) 10, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 9999, chronology3, locale25, (java.lang.Integer) 54616882);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket35.setZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withWeekyear((-1));
        org.joda.time.DateTime dateTime47 = dateTime43.plusHours((int) (byte) 100);
        boolean boolean49 = dateTime47.isBefore((long) ' ');
        int int50 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone40.isLocalDateTimeGap(localDateTime51);
        java.lang.String str54 = dateTimeZone40.getNameKey((long) '4');
        org.joda.time.Chronology chronology55 = chronology3.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField56 = chronology55.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long62 = chronology55.getDateTimeMillis((long) 127, 54609840, 869, 54872871, 54771);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54609840 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20" + "'", str22, "20");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1" + "'", str23, "-1");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test16324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16324");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        int int10 = mutableDateTime8.get(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField16 = chronology13.millis();
        boolean boolean17 = dateTimeFieldType9.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.hourOfDay();
        org.joda.time.DurationField durationField20 = chronology13.months();
        org.joda.time.DurationField durationField21 = chronology13.halfdays();
        org.joda.time.DurationField durationField22 = chronology13.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test16325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16325");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        boolean boolean11 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology18 = dateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) dateTime12, chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = chronology18.getZone();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(788923800000L, chronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((-1));
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths(10);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfDay();
        int int31 = dateTime29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTime dateTime35 = dateTime29.withZone(dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.withPeriodAdded(readablePeriod36, 13);
        boolean boolean39 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime41 = dateTime22.withCenturyOfEra(647);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime41.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test16326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16326");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(72000052L, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime1.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfSecond();
        org.joda.time.DateTime.Property property11 = dateTime9.millisOfSecond();
        org.joda.time.DateTime dateTime13 = dateTime9.plusMinutes(373);
        org.joda.time.DateTime.Property property14 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime9.withMillisOfDay(191);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test16327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16327");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        java.lang.String str8 = dateTimeField6.getAsShortText((-31948L));
        java.util.Locale locale9 = java.util.Locale.KOREA;
        int int10 = dateTimeField6.getMaximumShortTextLength(locale9);
        java.lang.String str13 = nameProvider0.getName(locale9, "halfdays", "2022-02-21T15:06:14.968+00:00:00.052");
        java.util.Set<java.lang.String> strSet14 = locale9.getUnicodeLocaleKeys();
        java.lang.Object[] objArray15 = strSet14.toArray();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withWeekyear((-1));
        org.joda.time.DateTime dateTime33 = dateTime29.plusHours((int) (byte) 100);
        boolean boolean35 = dateTime33.isBefore((long) ' ');
        int int36 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean37 = strSet14.remove((java.lang.Object) dateTimeZone26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = strSet14.add("\u571f\u66dc\u65e5");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "28" + "'", str8, "28");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test16328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16328");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology11);
        java.lang.String str13 = chronology11.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology11.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField18 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.secondOfMinute();
        org.joda.time.DurationField durationField20 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology11.secondOfMinute();
        boolean boolean23 = localDateTime8.equals((java.lang.Object) dateTimeField22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withWeekyear(2022);
        int int31 = localDateTime25.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readableDuration33);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test16329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16329");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int8 = localDateTime6.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(13);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.era();
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.getLocalDateTime();
        int int14 = localDateTime13.getMillisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime13.toString(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0100-01-01T00:00:00.999" + "'", str16, "0100-01-01T00:00:00.999");
    }

    @Test
    public void test16330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16330");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfHour();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property13 = dateTime10.centuryOfEra();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = property13.getAsText(locale14);
        java.lang.String str17 = locale8.getDisplayName(locale14);
        int int18 = property7.getMaximumTextLength(locale14);
        java.util.Set<java.lang.String> strSet19 = locale14.getUnicodeLocaleAttributes();
        boolean boolean20 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        java.util.GregorianCalendar gregorianCalendar23 = dateTime22.toGregorianCalendar();
        boolean boolean24 = strSet0.equals((java.lang.Object) dateTime22);
        boolean boolean25 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime22.withTimeAtStartOfDay();
        boolean boolean28 = dateTime26.equals((java.lang.Object) 581);
        java.lang.String str29 = dateTime26.toString();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 735 + "'", int6 == 735);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "it" + "'", str15, "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "20" + "'", str16, "20");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "coreano" + "'", str17, "coreano");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(gregorianCalendar23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-21T00:00:00.000+00:00:00.052" + "'", str29, "2022-02-21T00:00:00.000+00:00:00.052");
    }

    @Test
    public void test16331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16331");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfWeek();
        int int2 = localDateTime0.getCenturyOfEra();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology4, locale5, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField9 = null;
        dateTimeParserBucket8.saveField(dateTimeField9, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property26 = dateTime23.centuryOfEra();
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = property26.getAsText(locale27);
        java.lang.String str30 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime20, (-1), locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = localDateTime20.getFieldType(2);
        dateTimeParserBucket8.saveField(dateTimeFieldType32, 2022);
        org.joda.time.LocalDateTime.Property property35 = localDateTime0.property(dateTimeFieldType32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = property35.setCopy("2922789-04-13T15:14:22.688+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2922789-04-13T15:14:22.688+00:00:00.052\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it" + "'", str28, "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "20" + "'", str29, "20");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1" + "'", str30, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test16332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16332");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.weekyear();
        boolean boolean19 = dateTime13.equals((java.lang.Object) localDateTime15);
        org.joda.time.DateTime dateTime21 = dateTime13.minusMonths(54616882);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundHalfEvenCopy();
        int int26 = property23.get();
        org.joda.time.Interval interval27 = property23.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 13 + "'", int26 == 13);
        org.junit.Assert.assertNotNull(interval27);
    }

    @Test
    public void test16333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16333");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        int int6 = dateTime1.getDayOfYear();
        java.util.GregorianCalendar gregorianCalendar7 = dateTime1.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime1.withDurationAdded(readableDuration8, (int) (short) 1);
        org.joda.time.DateTime dateTime12 = dateTime10.minus((long) 54633);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test16334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16334");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int4 = localDateTime1.get(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        int int6 = localDateTime1.indexOf(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours(505);
        boolean boolean12 = localDateTime8.equals((java.lang.Object) 54501901);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test16335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16335");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime11.minusDays(0);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime11.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekyear((-1));
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths(10);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfDay();
        int int24 = dateTime22.getYearOfEra();
        boolean boolean25 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology26 = dateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime22.getZone();
        java.util.Locale locale31 = new java.util.Locale("-0001-02-22T15:06:25.002+00:00:00.052", "");
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = dateTimeZone27.getShortName(1645456010538L, locale32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(99846448917L, dateTimeZone27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(54840, 54625859, 247, 19044, 54710, 54648, 50859754, dateTimeZone27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19044 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals(locale31.toString(), "-0001-02-22t15:06:25.002+00:00:00.052");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "-0001-02-22t15:06:25.002+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.052" + "'", str33, "+00:00:00.052");
    }

    @Test
    public void test16336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16336");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfHour();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property13 = dateTime10.centuryOfEra();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = property13.getAsText(locale14);
        java.lang.String str17 = locale8.getDisplayName(locale14);
        int int18 = property7.getMaximumTextLength(locale14);
        java.util.Set<java.lang.String> strSet19 = locale14.getUnicodeLocaleAttributes();
        boolean boolean20 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator21 = strSet19.spliterator();
        java.lang.String[] strArray23 = java.util.TimeZone.getAvailableIDs(467);
        java.lang.CharSequence[] charSequenceArray24 = strSet19.toArray((java.lang.CharSequence[]) strArray23);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale36 = java.util.Locale.ROOT;
        dateTimeParserBucket30.saveField(dateTimeFieldType34, "it", locale36);
        java.lang.String str38 = locale36.getISO3Country();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours((int) (byte) 0);
        java.util.Date date43 = dateTime40.toDate();
        org.joda.time.DateTime.Property property44 = dateTime40.dayOfMonth();
        org.joda.time.DateTime.Property property45 = dateTime40.dayOfMonth();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = property45.getAsText(locale46);
        java.lang.String str49 = locale36.getDisplayScript(locale46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours((int) (byte) 0);
        boolean boolean55 = dateTime53.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime53.toMutableDateTime(dateTimeZone56);
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = dateTimeZone56.getShortName((long) (short) 100, locale60);
        java.lang.String str62 = locale60.getLanguage();
        java.lang.String str63 = locale36.getDisplayCountry(locale60);
        java.util.Set<java.lang.String> strSet64 = locale60.getUnicodeLocaleKeys();
        int int65 = strSet64.size();
        boolean boolean66 = strSet19.addAll((java.util.Collection<java.lang.String>) strSet64);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 857 + "'", int6 == 857);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "it" + "'", str15, "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "20" + "'", str16, "20");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "coreano" + "'", str17, "coreano");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSpliterator21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Mon Feb 21 15:14:53 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "it" + "'", str47, "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "21" + "'", str48, "21");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.052" + "'", str61, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test16337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16337");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        int int7 = dateTimeField4.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "70" + "'", str6, "70");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test16338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16338");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        java.util.Date date7 = localDateTime4.toDate();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusSeconds(4);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMillis(54638098);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test16339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16339");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.centuries();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField10 = chronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology3.getZone();
        org.joda.time.DurationField durationField12 = chronology3.minutes();
        org.joda.time.DurationField durationField13 = chronology3.weeks();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(1645455979171L, chronology3);
        org.joda.time.DateTimeField dateTimeField15 = chronology3.monthOfYear();
        org.joda.time.DurationField durationField16 = dateTimeField15.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test16340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16340");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        java.lang.String str19 = localDateTime17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str13, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-21T15:14:53.935" + "'", str19, "2022-02-21T15:14:53.935");
    }

    @Test
    public void test16341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16341");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Feb");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField10 = chronology6.seconds();
        org.joda.time.DurationField durationField11 = chronology6.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        int int17 = property16.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plus(readableDuration19);
        int int21 = localDateTime18.getYearOfCentury();
        java.util.Locale locale23 = new java.util.Locale("15");
        java.lang.String str24 = locale23.getScript();
        java.lang.String str25 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, locale23);
        org.joda.time.LocalDateTime.Property property26 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property46 = dateTime43.centuryOfEra();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = property46.getAsText(locale47);
        java.lang.String str50 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale47);
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = dateTimeField36.getAsShortText((int) (byte) 10, locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 9999, chronology30, locale52, (java.lang.Integer) 54616882);
        java.lang.String str57 = property26.getAsText(locale52);
        java.util.Locale.Builder builder58 = builder3.setLocale(locale52);
        java.util.Locale.Builder builder59 = builder58.clear();
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.lang.String str61 = locale60.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusDays(212);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.weekyear();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.dayOfMonth();
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str74 = property72.getAsShortText(locale73);
        java.util.Set<java.lang.String> strSet75 = locale73.getUnicodeLocaleKeys();
        java.lang.String str76 = locale60.getDisplayCountry(locale73);
        java.util.Locale.setDefault(locale60);
        java.lang.String str78 = locale60.getCountry();
        java.lang.String str79 = locale60.getISO3Country();
        java.util.Locale.Builder builder80 = builder59.setLocale(locale60);
        java.util.Locale.Builder builder81 = builder80.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 70 + "'", int21 == 70);
        org.junit.Assert.assertEquals(locale23.toString(), "15");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "52" + "'", str25, "52");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "it" + "'", str48, "it");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "20" + "'", str49, "20");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1" + "'", str50, "-1");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "it" + "'", str53, "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "10" + "'", str54, "10");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1" + "'", str74, "1");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test16342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16342");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(15);
        org.joda.time.DateTime dateTime7 = dateTime3.minusDays(15);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(355);
        org.joda.time.DateTime dateTime11 = dateTime7.withMillis(36000000000L);
        org.joda.time.DateTime dateTime13 = dateTime7.withYear(265);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime7.withMonthOfYear(301);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 301 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test16343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16343");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        int int5 = localDateTime4.getEra();
        java.lang.String str6 = localDateTime4.toString();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.era();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusYears(100);
        int[] intArray19 = localDateTime14.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withMillisOfDay(800);
        boolean boolean22 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        int int23 = localDateTime14.getHourOfDay();
        int int24 = localDateTime14.getMillisOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.999" + "'", str6, "1970-01-01T00:00:00.999");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[120, 1, 1, 999]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
    }

    @Test
    public void test16344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16344");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.weekyear();
        boolean boolean19 = dateTime13.equals((java.lang.Object) localDateTime15);
        org.joda.time.DateTime dateTime21 = dateTime13.minusMonths(54616882);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfMonth();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.LocalDateTime localDateTime27 = property25.roundHalfCeilingCopy();
        int int28 = localDateTime27.getMinuteOfHour();
        int int29 = localDateTime27.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test16345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16345");
        java.util.Locale locale1 = new java.util.Locale("-0001-02-22T00:09:36.666+00:00:00.052");
        java.lang.String str2 = locale1.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "-0001-02-22t00:09:36.666+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test16346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16346");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(15);
        boolean boolean17 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = durationFieldType18.getField(chronology21);
        java.lang.String str25 = durationFieldType18.getName();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.withFieldAdded(durationFieldType18, (int) (byte) -1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusYears(54441130);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        boolean boolean37 = localDateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        boolean boolean43 = dateTimeFieldType36.isSupported(chronology40);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.weeks();
        boolean boolean46 = localDateTime44.isSupported(durationFieldType45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime30.withFieldAdded(durationFieldType45, 68971);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DurationField durationField55 = durationFieldType45.getField(chronology51);
        boolean boolean56 = durationField55.isPrecise();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "weeks" + "'", str25, "weeks");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test16347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16347");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = dateTime5.withZone(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DateTime dateTime18 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        int int20 = dateTime18.getMinuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime18.minusMonths(0);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        long long39 = dateTimeZone33.getMillisKeepLocal(dateTimeZone36, (long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime22.withZone(dateTimeZone36);
        int int42 = dateTime41.getHourOfDay();
        int int43 = dateTime41.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
    }

    @Test
    public void test16348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16348");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField9 = chronology2.years();
        org.joda.time.Chronology chronology10 = chronology2.withUTC();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths(10);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfDay();
        int int19 = dateTime17.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = dateTime17.withZone(dateTimeZone21);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = dateTimeZone21.getName((long) 26, locale25);
        long long29 = dateTimeZone21.adjustOffset((long) 657, false);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours((int) (byte) 0);
        boolean boolean35 = dateTime33.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime33.toMutableDateTime(dateTimeZone36);
        long long40 = dateTimeZone21.getMillisKeepLocal(dateTimeZone36, 657L);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.Chronology chronology42 = chronology2.withZone(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.052" + "'", str26, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 657L + "'", long29 == 657L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 657L + "'", long40 == 657L);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test16349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16349");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.DateTime dateTime9 = property6.addToCopy((int) 'a');
        java.lang.String str10 = property6.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = property6.addToCopy(1586790724363L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1586790724363 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:14:54 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "21" + "'", str7, "21");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfMonth]" + "'", str10, "Property[dayOfMonth]");
    }

    @Test
    public void test16350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16350");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        long long16 = dateTimeZone10.getMillisKeepLocal(dateTimeZone13, (long) (byte) -1);
        int int18 = dateTimeZone13.getOffset((long) (-4490));
        java.util.TimeZone timeZone19 = dateTimeZone13.toTimeZone();
        boolean boolean20 = timeZone19.useDaylightTime();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test16351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16351");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        int int10 = mutableDateTime8.get(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField16 = chronology13.millis();
        boolean boolean17 = dateTimeFieldType9.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.clockhourOfDay();
        org.joda.time.DurationField durationField19 = chronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.era();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) (short) 100);
        int int28 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusMinutes(24);
        int[] intArray32 = chronology13.get((org.joda.time.ReadablePartial) localDateTime30, (long) 527);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.withYearOfEra(10);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean47 = dateTimeZone46.isFixed();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone46);
        int int51 = dateTimeZone46.getStandardOffset((long) 2922789);
        long long53 = dateTimeZone46.previousTransition((-60778684900838L));
        org.joda.time.DateTime dateTime54 = localDateTime43.toDateTime(dateTimeZone46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((java.lang.Object) intArray32, dateTimeZone46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: [I");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 527]");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-60778684900838L) + "'", long53 == (-60778684900838L));
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test16352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16352");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(52);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond(671);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 26648);
        int int11 = localDateTime7.getEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test16353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16353");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(2922789);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        int int16 = dateTime14.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = dateTime14.withZone(dateTimeZone18);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = dateTimeZone18.getName((long) 26, locale22);
        long long26 = dateTimeZone18.adjustOffset((long) 657, false);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime30.toMutableDateTime(dateTimeZone33);
        long long37 = dateTimeZone18.getMillisKeepLocal(dateTimeZone33, 657L);
        org.joda.time.DateTime dateTime38 = dateTime7.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime40 = dateTime38.withCenturyOfEra(121);
        org.joda.time.DateTime.Property property41 = dateTime40.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight46 = dateTime43.toDateMidnight();
        int int47 = dateTime43.getSecondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = dateTime43.toString(dateTimeFormatter48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.Chronology chronology51 = dateTime43.getChronology();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime43.plus(readablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.withWeekyear((-1));
        org.joda.time.DateTime dateTime59 = dateTime55.plusHours((int) (byte) 100);
        boolean boolean61 = dateTime59.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime59.toMutableDateTime(dateTimeZone62);
        int int64 = dateTime59.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime59.minus(readableDuration65);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant68 = null;
        int int69 = dateTimeZone67.getOffset(readableInstant68);
        int int71 = dateTimeZone67.getStandardOffset((long) 15);
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone67);
        long long75 = dateTimeZone67.convertLocalToUTC((long) 519, false);
        org.joda.time.DateTime dateTime76 = dateTime59.withZoneRetainFields(dateTimeZone67);
        org.joda.time.DateTime dateTime78 = dateTime59.plusHours(1995);
        org.joda.time.DateTime dateTime80 = dateTime59.plusYears(107);
        int int81 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.DateTime dateTime83 = dateTime80.minus(readablePeriod82);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = property41.getDifference((org.joda.time.ReadableInstant) dateTime80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 5291117039");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2922789-04-13T15:14:54.103+00:00:00.052" + "'", str8, "2922789-04-13T15:14:54.103+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.052" + "'", str23, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 657L + "'", long26 == 657L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 657L + "'", long37 == 657L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 54894 + "'", int47 == 54894);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-21T15:14:54.104+00:00:00.052" + "'", str49, "2022-02-21T15:14:54.104+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 25 + "'", int64 == 25);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 467L + "'", long75 == 467L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test16354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16354");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test16355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16355");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(54612102, 320);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 320");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16356");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((-1));
        org.joda.time.DateTime dateTime6 = dateTime2.plusHours((int) (byte) 100);
        int int7 = dateTime2.getDayOfYear();
        java.util.GregorianCalendar gregorianCalendar8 = dateTime2.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime2.getZone();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1645456008871L, dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test16357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16357");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = property7.addToCopy((long) 1970);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths(1978);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        java.lang.String str16 = chronology14.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.Chronology chronology20 = chronology14.withZone(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime9.withZoneRetainFields(dateTimeZone18);
        boolean boolean24 = dateTime9.isBefore(1645456028911L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16358");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(15);
        org.joda.time.DateTime dateTime7 = dateTime3.minusHours(212);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime3.withDurationAdded(readableDuration8, 4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = dateTime3.toString(dateTimeFormatter11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        int int18 = dateTime3.get(dateTimeField17);
        org.joda.time.DateTime dateTime20 = dateTime3.plusMillis(784);
        org.joda.time.DateTime dateTime22 = dateTime3.minusWeeks(2554);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        java.lang.String str27 = dateTimeZone23.getName(0L);
        java.lang.String str29 = dateTimeZone23.getNameKey((long) (short) 10);
        long long31 = dateTimeZone23.convertUTCToLocal(977L);
        java.lang.String str32 = dateTimeZone23.getID();
        java.lang.String str33 = dateTimeZone23.getID();
        int int35 = dateTimeZone23.getStandardOffset((-766797979L));
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime3, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-0001-02-22T15:14:54.191+00:00:00.052" + "'", str12, "-0001-02-22T15:14:54.191+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 54 + "'", int18 == 54);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.052" + "'", str27, "+00:00:00.052");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1029L + "'", long31 == 1029L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.052" + "'", str32, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.052" + "'", str33, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
    }

    @Test
    public void test16359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16359");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime.Property property7 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime5.minusDays(26646);
        java.lang.String str10 = dateTime5.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T00:00:00.000+00:00:00.052" + "'", str10, "2022-02-21T00:00:00.000+00:00:00.052");
    }

    @Test
    public void test16360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16360");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(69066, 54682267, 60588345, 2100, 582, 55088);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16361");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((-1));
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths(10);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfDay();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = dateTime6.withZone(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        int int15 = property14.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfCeilingCopy();
        java.lang.String str18 = localDateTime17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 86399999 + "'", int15 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.052" + "'", str18, "1970-01-01T00:00:00.052");
    }

    @Test
    public void test16362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16362");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withYear(74);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test16363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16363");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology12);
        java.util.Date date16 = dateTime15.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Feb 21 15:14:54 GMT+00:00 2022");
    }

    @Test
    public void test16364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16364");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology12.add(readablePeriod13, (long) 536, 784);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours((int) (byte) 0);
        java.util.Date date21 = dateTime18.toDate();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.fromDateFields(date21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYearOfCentury((int) ' ');
        int[] intArray26 = chronology12.get((org.joda.time.ReadablePartial) localDateTime24, (long) 2);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        dateTimeParserBucket32.saveField(dateTimeFieldType36, "it", locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale42 = null;
        dateTimeParserBucket32.saveField(dateTimeFieldType40, "centuries", locale42);
        int int44 = localDateTime24.get(dateTimeFieldType40);
        int int45 = localDateTime24.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField47 = localDateTime24.getField(42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 42");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 536L + "'", long16 == 536L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Feb 21 15:14:54 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1, 54]");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21 + "'", int44 == 21);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2032 + "'", int45 == 2032);
    }

    @Test
    public void test16365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16365");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.DurationField durationField14 = chronology11.millis();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusSeconds((int) ' ');
        long long20 = chronology11.set((org.joda.time.ReadablePartial) localDateTime18, (long) 99);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withYearOfEra(21);
        int int23 = localDateTime22.getMonthOfYear();
        int int24 = localDateTime22.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plus(readablePeriod25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMinutes(249);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear((-1));
        org.joda.time.DateTime dateTime34 = dateTime30.plusHours((int) (byte) 100);
        boolean boolean36 = dateTime34.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime34.toMutableDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours((int) (byte) 0);
        boolean boolean44 = dateTime42.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks((int) 'a');
        boolean boolean49 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime();
        org.joda.time.DateTime dateTime52 = dateTime48.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.plusMinutes(977);
        boolean boolean55 = mutableDateTime38.isAfter((org.joda.time.ReadableInstant) dateTime48);
        int int56 = dateTime48.getDayOfWeek();
        org.joda.time.Chronology chronology57 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.weekOfWeekyear();
        int int59 = dateTimeField58.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime65 = dateTime63.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime67 = dateTime63.minusDays(0);
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime63.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime70 = dateTime63.plusSeconds(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int72 = dateTime63.get(dateTimeFieldType71);
        org.joda.time.DateTime dateTime73 = dateTime63.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.minus(readableDuration76);
        org.joda.time.DateTime dateTime78 = dateTime73.withFields((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusSeconds(52);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusHours(28);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.plusMillis(405);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.minusWeeks(766);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.plusYears(149);
        int int91 = localDateTime90.getSecondOfMinute();
        int[] intArray92 = localDateTime90.getValues();
        int int93 = dateTimeField58.getMaximumValue((org.joda.time.ReadablePartial) localDateTime77, intArray92);
        int int94 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime26, intArray92);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-31948L) + "'", long20 == (-31948L));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 28 + "'", int24 == 28);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20 + "'", int72 == 20);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[2104, 4, 26, 71948457]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 53 + "'", int93 == 53);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test16366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16366");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-65291359721478L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight8 = dateTime5.toDateMidnight();
        int int9 = dateTime5.getSecondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime5.toString(dateTimeFormatter10);
        org.joda.time.DateTime dateTime12 = dateTime5.toDateTimeISO();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(229);
        boolean boolean18 = dateTimeZone16.isStandardOffset(0L);
        org.joda.time.Chronology chronology19 = chronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = chronology13.weekyear();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 212460000, chronology13);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-52), chronology13);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54894 + "'", int9 == 54894);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T15:14:54.313+00:00:00.052" + "'", str11, "2022-02-21T15:14:54.313+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test16367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16367");
        java.util.Locale locale1 = new java.util.Locale("15");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.hourOfDay();
        boolean boolean8 = locale1.equals((java.lang.Object) chronology4);
        org.junit.Assert.assertEquals(locale1.toString(), "15");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test16368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16368");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.plusSeconds(26);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        java.util.Date date7 = dateTime5.toDate();
        java.util.GregorianCalendar gregorianCalendar8 = dateTime5.toGregorianCalendar();
        org.joda.time.DateTime dateTime10 = dateTime5.plusWeeks(333);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("java.io.IOException: Ora media di Greenwich");
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        long long15 = dateTimeZone13.convertUTCToLocal(20345169600281L);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime10.toMutableDateTime(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 21 15:15:20 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 20345169600281L + "'", long15 == 20345169600281L);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test16369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16369");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = chronology3.millis();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        long long12 = chronology3.set((org.joda.time.ReadablePartial) localDateTime10, (long) 99);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology3, locale13, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeField dateTimeField18 = chronology3.minuteOfHour();
        org.joda.time.DurationField durationField19 = chronology3.years();
        org.joda.time.DurationField durationField20 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology3.dayOfYear();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-31948L) + "'", long12 == (-31948L));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test16370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16370");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        dateTimeParserBucket5.saveField(dateTimeFieldType9, "it", locale11);
        java.lang.String str13 = locale11.getISO3Country();
        java.lang.String str14 = locale11.getCountry();
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale11.getDisplayScript(locale15);
        java.util.Locale.setDefault(locale11);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test16371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16371");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        boolean boolean13 = dateTime11.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) 'a');
        boolean boolean18 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.weekyear();
        boolean boolean27 = dateTime21.equals((java.lang.Object) localDateTime23);
        int[] intArray29 = chronology7.get((org.joda.time.ReadablePartial) localDateTime23, (long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime34 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime23.minusDays(1970);
        int int37 = localDateTime23.getEra();
        int int38 = localDateTime23.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property39 = localDateTime23.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundFloorCopy();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test16372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16372");
        java.util.Locale locale1 = new java.util.Locale("15");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar6 = dateTime5.toGregorianCalendar();
        int int7 = dateTime5.getMillisOfSecond();
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfHour();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime11.centuryOfEra();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = property14.getAsText(locale15);
        java.lang.String str18 = locale9.getDisplayName(locale15);
        int int19 = property8.getMaximumTextLength(locale15);
        java.lang.String str20 = locale1.getDisplayName(locale15);
        java.lang.String str21 = locale1.getLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "15");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 374 + "'", int7 == 374);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "20" + "'", str17, "20");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "coreano" + "'", str18, "coreano");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "15" + "'", str20, "15");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "15" + "'", str21, "15");
    }

    @Test
    public void test16373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16373");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight4 = dateTime1.toDateMidnight();
        org.joda.time.LocalDate localDate5 = dateTime1.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(26);
        long long12 = dateTime7.getMillis();
        boolean boolean13 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime15 = dateTime1.minusMonths((-1));
        org.joda.time.DateTime dateTime17 = dateTime1.plusSeconds(54438);
        int int18 = dateTime1.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645456494356L + "'", long12 == 1645456494356L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 408 + "'", int18 == 408);
    }

    @Test
    public void test16374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16374");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property19 = dateTime16.centuryOfEra();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = property19.getAsText(locale20);
        java.lang.String str23 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (-1), locale20);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = dateTimeField9.getAsShortText((int) (byte) 10, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 9999, chronology3, locale25, (java.lang.Integer) 54616882);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket35.setZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withWeekyear((-1));
        org.joda.time.DateTime dateTime47 = dateTime43.plusHours((int) (byte) 100);
        boolean boolean49 = dateTime47.isBefore((long) ' ');
        int int50 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone40.isLocalDateTimeGap(localDateTime51);
        java.lang.String str54 = dateTimeZone40.getNameKey((long) '4');
        org.joda.time.Chronology chronology55 = chronology3.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField56 = chronology55.millis();
        long long59 = durationField56.add((long) 441, 4718724163200660L);
        long long61 = durationField56.getMillis(745520400028L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20" + "'", str22, "20");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1" + "'", str23, "-1");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 4718724163201101L + "'", long59 == 4718724163201101L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 745520400028L + "'", long61 == 745520400028L);
    }

    @Test
    public void test16375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16375");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        int int4 = property3.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) (byte) 0);
        java.util.Date date9 = dateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone10.getOffset(readableInstant11);
        int int14 = dateTimeZone10.getStandardOffset((long) 15);
        org.joda.time.DateTime dateTime15 = dateTime6.withZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours((int) (byte) 0);
        java.util.Date date20 = dateTime17.toDate();
        org.joda.time.DateTime.Property property21 = dateTime17.dayOfMonth();
        org.joda.time.DateTime.Property property22 = dateTime17.dayOfMonth();
        java.lang.String str23 = property22.getAsString();
        org.joda.time.DateTime dateTime24 = property22.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) 0);
        java.util.Date date29 = dateTime26.toDate();
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfMonth();
        org.joda.time.DateTime.Property property31 = dateTime26.dayOfMonth();
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = property31.getAsText(locale32);
        int int35 = property22.getMaximumTextLength(locale32);
        org.joda.time.DateTime dateTime36 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfMonth();
        int int38 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime36);
        long long39 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime40 = dateTime36.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusSeconds(204);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.minusWeeks(94);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks(345);
        int int47 = localDateTime44.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.plusMinutes(68894);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(54789);
        int int52 = localDateTime49.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = localDateTime49.getValue(54522711);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 54522711");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 21 15:14:54 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Feb 21 15:14:54 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "21" + "'", str23, "21");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Mon Feb 21 15:14:54 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "21" + "'", str34, "21");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1645487999896L) + "'", long39 == (-1645487999896L));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
    }

    @Test
    public void test16376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16376");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfMinute();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.DateTime dateTime10 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = property8.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test16377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16377");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int) 'a');
        boolean boolean9 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime6);
        java.lang.String str10 = dateTime1.toString();
        boolean boolean12 = dateTime1.isAfter(1645455987640L);
        org.joda.time.DateTime dateTime14 = dateTime1.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.era();
        boolean boolean31 = localDateTime29.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        boolean boolean37 = dateTimeFieldType30.isSupported(chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.clockhourOfDay();
        boolean boolean40 = dateTimeField38.isLeap(7279200000L);
        org.joda.time.DurationField durationField41 = dateTimeField38.getRangeDurationField();
        dateTimeParserBucket20.saveField(dateTimeField38, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField38.getType();
        org.joda.time.DateTime.Property property45 = dateTime14.property(dateTimeFieldType44);
        int int46 = property45.getMinimumValueOverall();
        org.joda.time.DateTime dateTime47 = property45.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T15:14:54.459+00:00:00.052" + "'", str10, "2022-02-21T15:14:54.459+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test16378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16378");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(52);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(28);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMillis(405);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(766);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(149);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        boolean boolean17 = dateTime15.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        boolean boolean22 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime.Property property23 = dateTime15.secondOfDay();
        boolean boolean24 = localDateTime11.equals((java.lang.Object) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime dateTime30 = dateTime26.withMillisOfDay(0);
        int int31 = dateTime30.getCenturyOfEra();
        org.joda.time.DateTime.Property property32 = dateTime30.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfHalfday();
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours((int) (byte) 0);
        boolean boolean47 = dateTime45.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime45.toMutableDateTime(dateTimeZone48);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = dateTimeZone48.getName((long) (byte) 1, locale52);
        java.lang.String str54 = locale52.getScript();
        java.lang.String str55 = locale41.getDisplayScript(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 54596, chronology38, locale52, (java.lang.Integer) 212, (-948));
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket58.getZone();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone61 = dateTimeZone60.toTimeZone();
        java.lang.String str62 = dateTimeZone60.toString();
        java.lang.String str64 = dateTimeZone60.getName((long) (short) 0);
        long long66 = dateTimeZone59.getMillisKeepLocal(dateTimeZone60, (long) 9);
        org.joda.time.DateTime dateTime67 = dateTime30.withZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusHours((int) (byte) 0);
        java.util.Date date72 = dateTime69.toDate();
        org.joda.time.DateTime.Property property73 = dateTime69.dayOfMonth();
        org.joda.time.DateTime.Property property74 = dateTime69.dayOfMonth();
        int int75 = property74.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property74.getFieldType();
        boolean boolean77 = dateTime30.isSupported(dateTimeFieldType76);
        java.lang.String str78 = dateTimeFieldType76.toString();
        int int79 = localDateTime11.indexOf(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20 + "'", int31 == 20);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.052" + "'", str53, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.052" + "'", str62, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.052" + "'", str64, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 9L + "'", long66 == 9L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Mon Feb 21 15:14:54 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "dayOfMonth" + "'", str78, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test16379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16379");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        int int6 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy(58665600);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 54894459 + "'", int6 == 54894459);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test16380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16380");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusHours(21);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(577);
        int int11 = localDateTime4.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        boolean boolean20 = localDateTime18.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        boolean boolean26 = dateTimeFieldType19.isSupported(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        java.util.Date date33 = dateTime30.toDate();
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfMonth();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = property35.getAsText(locale36);
        java.lang.String str39 = dateTimeField27.getAsShortText((long) 99, locale36);
        int int41 = dateTimeField27.get((long) 121);
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder43.setExtension('a', "cinese");
        java.util.Locale locale47 = builder43.build();
        java.lang.String str48 = dateTimeField27.getAsText(0L, locale47);
        java.util.Locale locale51 = new java.util.Locale("22", "-0001-02-22T15:06:44.897+00:00:00.052");
        int int52 = dateTimeField27.getMaximumTextLength(locale51);
        boolean boolean53 = localDateTime4.equals((java.lang.Object) int52);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Mon Feb 21 15:14:54 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "21" + "'", str38, "21");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "24" + "'", str39, "24");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 24 + "'", int41 == 24);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "24" + "'", str48, "24");
        org.junit.Assert.assertEquals(locale51.toString(), "22_-0001-02-22T15:06:44.897+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test16381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16381");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(0L);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        long long24 = chronology15.set((org.joda.time.ReadablePartial) localDateTime20, (long) (short) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusYears(151);
        int int27 = localDateTime26.getDayOfMonth();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test16382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16382");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(90);
        int int11 = localDateTime8.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test16383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16383");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property4.addWrapFieldToCopy((int) (short) -1);
        int int7 = property4.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property4.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology12.getZone();
        org.joda.time.DurationField durationField15 = chronology12.centuries();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType9.getField(chronology12);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 54573740, chronology12);
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYearOfEra(54788750);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test16384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16384");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology3.hourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 54494992, chronology3);
        org.joda.time.DateTimeField dateTimeField14 = chronology3.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology3.halfdayOfDay();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test16385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16385");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2022-02-21T15:06:28.281+00:00:00.052", "secondOfDay");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean6 = locale5.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property11 = dateTime8.centuryOfEra();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = property11.getAsText(locale12);
        java.lang.String str15 = locale5.getDisplayLanguage(locale12);
        java.lang.String str16 = locale12.getISO3Language();
        java.lang.String str19 = nameProvider0.getName(locale12, "204", "2922789-04-13T15:07:59.784+00:00:00.052");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale32 = java.util.Locale.ROOT;
        dateTimeParserBucket26.saveField(dateTimeFieldType30, "it", locale32);
        java.util.Locale locale37 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str38 = locale32.getDisplayScript(locale37);
        java.lang.String str41 = nameProvider0.getShortName(locale32, "-0001-02-22T15:08:07.611+00:00:00.052", "2022-02-21T15:12:33.278+00:00:00.052");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "20" + "'", str14, "20");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese" + "'", str15, "cinese");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ita" + "'", str16, "ita");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals(locale37.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test16386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16386");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMonths(753);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis(569);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusDays(54605823);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test16387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16387");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(275, 304, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 304 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test16388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16388");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-05-29T15:06:28.816");
        timeZone1.setRawOffset(55002);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test16389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16389");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = null;
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        timeZone0.setID("");
        java.util.TimeZone.setDefault(timeZone0);
        java.lang.Object obj6 = timeZone0.clone();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "java.util.SimpleTimeZone[id=,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "java.util.SimpleTimeZone[id=,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "java.util.SimpleTimeZone[id=,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test16390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16390");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusHours(21);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.minus(readablePeriod18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        long long21 = dateTime20.getMillis();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 999L + "'", long21 == 999L);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test16391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16391");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime11.centuryOfEra();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = property14.getAsText(locale15);
        java.lang.String str18 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime8, (-1), locale15);
        long long21 = dateTimeField4.add((long) 99, (long) 26);
        long long23 = dateTimeField4.roundFloor(12167496377932L);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.era();
        boolean boolean35 = localDateTime33.isSupported(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        boolean boolean41 = dateTimeFieldType34.isSupported(chronology38);
        boolean boolean42 = localDateTime28.isSupported(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime28.minusSeconds((int) (byte) 1);
        org.joda.time.tz.NameProvider nameProvider45 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider45);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfMinute();
        java.lang.String str53 = dateTimeField51.getAsShortText((-31948L));
        java.util.Locale locale54 = java.util.Locale.KOREA;
        int int55 = dateTimeField51.getMaximumShortTextLength(locale54);
        java.lang.String str58 = nameProvider45.getName(locale54, "halfdays", "2022-02-21T15:06:14.968+00:00:00.052");
        java.lang.String str59 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime44, locale54);
        org.joda.time.DateTime dateTime60 = localDateTime44.toDateTime();
        int int61 = localDateTime44.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property62 = localDateTime44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = property62.roundCeilingCopy();
        java.util.Date date64 = localDateTime63.toDate();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withPeriodAdded(readablePeriod65, (-54501));
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime63.withDurationAdded(readableDuration68, 54765);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "20" + "'", str17, "20");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 26099L + "'", long21 == 26099L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 12167496377000L + "'", long23 == 12167496377000L);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(nameProvider45);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "28" + "'", str53, "28");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "59" + "'", str59, "59");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 19 + "'", int61 == 19);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Mon May 01 00:00:00 GMT+00:00 1978");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test16392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16392");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "cinese");
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("coreano");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("999");
        java.util.Locale.Builder builder9 = builder7.setLanguage("ja");
        java.util.Locale.Builder builder11 = builder9.setVariant("54596");
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.era();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.property(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        org.joda.time.DateTime dateTime32 = dateTime29.withWeekyear((int) 'x');
        int int33 = property25.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology34 = dateTime32.getChronology();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder35.setExtension('a', "cinese");
        java.util.Locale locale39 = builder35.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(3061065600001L, chronology34, locale39);
        java.util.Locale.Builder builder41 = builder9.setLocale(locale39);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology43, locale44, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField48 = null;
        dateTimeParserBucket47.saveField(dateTimeField48, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale53 = java.util.Locale.ROOT;
        dateTimeParserBucket47.saveField(dateTimeFieldType51, "it", locale53);
        java.lang.Integer int55 = dateTimeParserBucket47.getOffsetInteger();
        java.util.Locale locale56 = dateTimeParserBucket47.getLocale();
        java.util.Locale.Builder builder57 = builder9.setLocale(locale56);
        java.util.Locale locale58 = builder57.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder57.addUnicodeLocaleAttribute("-0001-02-22T15:12:39.393+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: -0001-02-22T15:12:39.393+00:00:00.052 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
    }

    @Test
    public void test16393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16393");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime3.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property12 = dateTime9.centuryOfEra();
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = property12.getAsText(locale13);
        java.lang.String str16 = locale7.getDisplayName(locale13);
        int int17 = property6.getMaximumTextLength(locale13);
        java.util.Locale locale18 = locale13.stripExtensions();
        org.joda.time.tz.NameProvider nameProvider19 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider19);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider19);
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("Property[millisOfSecond]");
        java.lang.String str26 = nameProvider19.getName(locale23, "weekOfWeekyear", "-0001-02-22T15:07:08.008Z");
        java.lang.String str27 = locale13.getDisplayLanguage(locale23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 749 + "'", int5 == 749);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "20" + "'", str15, "20");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "coreano" + "'", str16, "coreano");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(nameProvider19);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italian" + "'", str27, "Italian");
    }

    @Test
    public void test16394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16394");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        int int5 = localDateTime4.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        org.joda.time.DurationField durationField11 = dateTimeField10.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray18 = localDateTime17.getValues();
        int int19 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime4.withMillisOfDay(2);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = property25.addWrapFieldToCopy(990);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusMonths(0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test16395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16395");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime dateTime8 = dateTime1.plusDays(576);
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField16 = chronology13.millis();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds((int) ' ');
        long long22 = chronology13.set((org.joda.time.ReadablePartial) localDateTime20, (long) 99);
        org.joda.time.DateTimeField dateTimeField23 = chronology13.clockhourOfDay();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.lang.String str26 = locale25.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (-457071), chronology13, locale25, (java.lang.Integer) (-948));
        java.util.Calendar calendar29 = dateTime8.toCalendar(locale25);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.fromCalendarFields(calendar29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.fromCalendarFields(calendar29);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-31948L) + "'", long22 == (-31948L));
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1695222894720,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=263,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=14,SECOND=54,MILLISECOND=772,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test16396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16396");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean6 = localDateTime4.isSupported(durationFieldType5);
        org.joda.time.Chronology chronology7 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withYear(541);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes(647);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays(88);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.centuryOfEra();
        long long26 = dateTimeField23.add((long) 469, (-1L));
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.clockhourOfDay();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale36.getVariant();
        java.lang.String str38 = dateTimeField34.getAsText((-1), locale36);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusSeconds(52);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime50 = dateTime48.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime53 = dateTime50.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean54 = dateTime53.isEqualNow();
        org.joda.time.DateTime.Property property55 = dateTime53.secondOfMinute();
        org.joda.time.DateTime dateTime57 = property55.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField58 = property55.getField();
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = locale60.getScript();
        java.lang.String str63 = dateTimeField58.getAsText(15, locale60);
        java.lang.String str64 = dateTimeField34.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, locale60);
        java.lang.String str65 = locale60.getVariant();
        java.lang.String str66 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime27, 0, locale60);
        boolean boolean67 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3155673599531L) + "'", long26 == (-3155673599531L));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "it" + "'", str61, "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "15" + "'", str63, "15");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "24" + "'", str64, "24");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test16397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16397");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        org.joda.time.DurationField durationField8 = chronology2.minutes();
        org.joda.time.DurationField durationField9 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField12 = dateTimeField11.getDurationField();
        org.joda.time.DurationField durationField13 = dateTimeField11.getRangeDurationField();
        java.lang.String str14 = dateTimeField11.getName();
        long long16 = dateTimeField11.roundHalfFloor((long) 54624913);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusMonths((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = property24.setCopy(52);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours((int) (byte) 0);
        boolean boolean33 = dateTime31.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime31.toMutableDateTime(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.era();
        int int38 = mutableDateTime36.get(dateTimeFieldType37);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.secondOfMinute();
        org.joda.time.DurationField durationField44 = chronology41.millis();
        boolean boolean45 = dateTimeFieldType37.isSupported(chronology41);
        org.joda.time.DateTimeField dateTimeField46 = chronology41.clockhourOfDay();
        org.joda.time.DurationField durationField47 = chronology41.months();
        org.joda.time.DateTimeField dateTimeField48 = chronology41.era();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = property52.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withDayOfYear((int) (short) 100);
        int int56 = localDateTime55.getWeekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusMinutes(24);
        int[] intArray60 = chronology41.get((org.joda.time.ReadablePartial) localDateTime58, (long) 527);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray62 = dateTimeField11.addWrapField((org.joda.time.ReadablePartial) localDateTime26, (-52), intArray60, 60797851);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hourOfHalfday" + "'", str14, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 54000000L + "'", long16 == 54000000L);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1970, 1, 1, 527]");
    }

    @Test
    public void test16398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16398");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.DateTime dateTime9 = property6.addToCopy((int) 'a');
        org.joda.time.LocalDateTime localDateTime10 = dateTime9.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        org.joda.time.DateTime.Property property13 = dateTime9.year();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("Feb");
        java.util.Locale.Builder builder17 = builder14.clearExtensions();
        java.util.Locale.Builder builder18 = builder14.clear();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale.Builder builder20 = builder18.clear();
        java.util.Locale.Builder builder23 = builder18.setExtension('u', "33");
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale locale25 = builder24.build();
        int int26 = property13.getMaximumTextLength(locale25);
        org.joda.time.DateTime dateTime27 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:14:54 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "21" + "'", str7, "21");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test16399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16399");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(15);
        org.joda.time.DateTime dateTime7 = dateTime3.minusDays(15);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(355);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime9.getZone();
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test16400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16400");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy(28);
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        org.joda.time.DurationField durationField10 = dateTimeField9.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        int int17 = dateTime15.getMillisOfSecond();
        org.joda.time.DateTime.Property property18 = dateTime15.minuteOfHour();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property24 = dateTime21.centuryOfEra();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = property24.getAsText(locale25);
        java.lang.String str28 = locale19.getDisplayName(locale25);
        int int29 = property18.getMaximumTextLength(locale25);
        java.util.Set<java.lang.String> strSet30 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str31 = dateTimeField9.getAsText(1146, locale25);
        java.util.Locale.setDefault(category0, locale25);
        java.util.Locale locale33 = java.util.Locale.getDefault(category0);
        java.util.Locale locale34 = java.util.Locale.getDefault(category0);
        java.lang.String str35 = locale34.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 873 + "'", int17 == 873);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "20" + "'", str27, "20");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "coreano" + "'", str28, "coreano");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1146" + "'", str31, "1146");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ita" + "'", str35, "ita");
    }

    @Test
    public void test16401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16401");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DurationField durationField11 = chronology8.hours();
        int int12 = durationField5.compareTo(durationField11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        java.lang.String str17 = chronology15.toString();
        org.joda.time.DurationField durationField18 = chronology15.hours();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        java.lang.String str23 = chronology21.toString();
        org.joda.time.DurationField durationField24 = chronology21.hours();
        int int25 = durationField18.compareTo(durationField24);
        int int26 = durationField5.compareTo(durationField24);
        org.joda.time.DurationFieldType durationFieldType27 = durationField5.getType();
        long long29 = durationField5.getMillis(2022);
        long long32 = durationField5.getMillis(536, (long) (byte) 1);
        java.lang.String str33 = durationField5.getName();
        long long36 = durationField5.getMillis(362, (long) 54690);
        long long39 = durationField5.subtract((long) 691, 262828800087L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 7279200000L + "'", long29 == 7279200000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1929600000L + "'", long32 == 1929600000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hours" + "'", str33, "hours");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1303200000L + "'", long36 == 1303200000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-946183680313199309L) + "'", long39 == (-946183680313199309L));
    }

    @Test
    public void test16402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16402");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra(54589);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.monthOfYear();
        int int9 = localDateTime5.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(52);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours(28);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(405);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        dateTimeParserBucket23.saveField(dateTimeFieldType27, "it", locale29);
        java.lang.String str31 = dateTimeFieldType27.toString();
        boolean boolean32 = localDateTime15.isSupported(dateTimeFieldType27);
        java.lang.String str33 = dateTimeFieldType27.toString();
        java.lang.String str34 = dateTimeFieldType27.getName();
        int int35 = localDateTime5.get(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekOfWeekyear" + "'", str31, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "weekOfWeekyear" + "'", str33, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekOfWeekyear" + "'", str34, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test16403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16403");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2021-06-21T15:10:29.761+00:00:00.052", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2021-06-21t15:10:29.761+00:00:00.052");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16404");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear((-1));
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths(10);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        int int13 = dateTime11.getYearOfEra();
        org.joda.time.DateTime.Property property14 = dateTime11.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime11.plusWeeks((-1));
        boolean boolean17 = dateTime11.isBeforeNow();
        int int18 = property4.getDifference((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime19 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours((int) (byte) 0);
        boolean boolean25 = dateTime23.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) 'a');
        boolean boolean30 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) dateTime31, chronology37);
        int int40 = dateTime31.getMinuteOfHour();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        java.lang.Integer int50 = dateTimeParserBucket46.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket46.setZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekyear((-1));
        org.joda.time.DateTime dateTime58 = dateTime54.plusHours((int) (byte) 100);
        boolean boolean60 = dateTime58.isBefore((long) ' ');
        int int61 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime58);
        long long63 = dateTimeZone51.previousTransition((long) 977);
        long long65 = dateTimeZone51.previousTransition((long) 365);
        org.joda.time.DateTime dateTime66 = dateTime31.toDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime67 = dateTime19.withZone(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 14 + "'", int40 == 14);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 977L + "'", long63 == 977L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 365L + "'", long65 == 365L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test16405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16405");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        java.lang.String str5 = property3.getAsText();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        java.lang.String str9 = dateTimeZone7.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        int int12 = dateTimeZone7.getOffset(0L);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(948);
        boolean boolean18 = dateTime16.isAfter(63839718000L);
        int int19 = dateTime16.getHourOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "52" + "'", str5, "52");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.052" + "'", str9, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
    }

    @Test
    public void test16406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16406");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        int int9 = dateTimeZone5.getStandardOffset((long) 15);
        org.joda.time.DateTime dateTime10 = dateTime1.withZone(dateTimeZone5);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime.Property property13 = dateTime11.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime11.withTime(0, 318, 476, 54647556);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 318 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:14:54 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test16407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16407");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) 657);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property26 = dateTime23.centuryOfEra();
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = property26.getAsText(locale27);
        java.lang.String str30 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime20, (-1), locale27);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = dateTimeField16.getAsShortText((int) (byte) 10, locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 9999, chronology10, locale32, (java.lang.Integer) 54616882);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.lang.Integer int46 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekyear((-1));
        org.joda.time.DateTime dateTime54 = dateTime50.plusHours((int) (byte) 100);
        boolean boolean56 = dateTime54.isBefore((long) ' ');
        int int57 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime58 = null;
        boolean boolean59 = dateTimeZone47.isLocalDateTimeGap(localDateTime58);
        java.lang.String str61 = dateTimeZone47.getNameKey((long) '4');
        org.joda.time.Chronology chronology62 = chronology10.withZone(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime6.toMutableDateTime(dateTimeZone47);
        int int65 = dateTimeZone47.getOffsetFromLocal(1645456088160L);
        java.lang.String str66 = dateTimeZone47.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it" + "'", str28, "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "20" + "'", str29, "20");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1" + "'", str30, "-1");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "10" + "'", str34, "10");
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.052" + "'", str66, "+00:00:00.052");
    }

    @Test
    public void test16408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16408");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((-1));
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths(10);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfDay();
        int int8 = dateTime6.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = dateTime6.withZone(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone10);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded(69071L, 860);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(54884);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test16409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16409");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str11 = dateTime9.toString();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes(54571);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime13.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2020-04-13T15:14:55.012+00:00:00.052" + "'", str11, "2020-04-13T15:14:55.012+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
    }

    @Test
    public void test16410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16410");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.clockhourOfDay();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsText((-1), locale7);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(52);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime21.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean25 = dateTime24.isEqualNow();
        org.joda.time.DateTime.Property property26 = dateTime24.secondOfMinute();
        org.joda.time.DateTime dateTime28 = property26.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField29 = property26.getField();
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale31.getScript();
        java.lang.String str34 = dateTimeField29.getAsText(15, locale31);
        java.lang.String str35 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime11, locale31);
        java.util.Locale.setDefault(category0, locale31);
        java.util.Locale locale37 = java.util.Locale.getDefault(category0);
        java.util.Locale locale38 = java.util.Locale.getDefault(category0);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getScript();
        java.util.Locale.setDefault(category0, locale39);
        java.util.Locale locale42 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusDays(212);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = property52.addWrapFieldToCopy(576);
        boolean boolean55 = property52.isLeap();
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.lang.String str57 = locale56.getDisplayScript();
        java.lang.String str58 = locale56.getCountry();
        java.util.Locale locale61 = new java.util.Locale("22", "");
        java.lang.String str62 = locale56.getDisplayVariant(locale61);
        int int63 = property52.getMaximumShortTextLength(locale61);
        java.util.Locale.setDefault(category0, locale61);
        java.util.Locale locale65 = java.util.Locale.getDefault(category0);
        java.util.Locale locale66 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1" + "'", str9, "-1");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "15" + "'", str34, "15");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "24" + "'", str35, "24");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals(locale61.toString(), "22");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "22");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "22");
    }

    @Test
    public void test16411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16411");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(chronology4);
        java.lang.String str6 = chronology4.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.Chronology chronology10 = chronology4.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField11 = chronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(35999999L, chronology4);
        org.joda.time.DurationField durationField14 = chronology4.minutes();
        org.joda.time.DurationField durationField15 = chronology4.hours();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 559, chronology4, locale16, (java.lang.Integer) 822, 54381);
        org.joda.time.DateTimeField dateTimeField20 = chronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = chronology4.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology4.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology4);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test16412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16412");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight4 = dateTime1.toDateMidnight();
        org.joda.time.LocalDate localDate5 = dateTime1.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        int int7 = dateTime1.get(dateTimeFieldType6);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        int int21 = dateTimeZone18.getStandardOffset((long) 1969);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long25 = dateTimeZone18.getMillisKeepLocal(dateTimeZone23, (long) 99);
        org.joda.time.DateTime dateTime26 = dateTime1.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime1.getZone();
        int int29 = dateTimeZone27.getOffsetFromLocal(1198800000L);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket35.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withWeekyear((-1));
        org.joda.time.DateTime dateTime46 = dateTime42.plusHours((int) (byte) 100);
        int int47 = dateTime42.getDayOfYear();
        java.util.GregorianCalendar gregorianCalendar48 = dateTime42.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime51 = dateTime42.withDurationAdded(readableDuration49, (int) (short) 1);
        int int52 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime42);
        java.util.TimeZone timeZone53 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone40);
        int int55 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 150L + "'", long25 == 150L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(gregorianCalendar48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
    }

    @Test
    public void test16413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16413");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime5.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int) 'a');
        boolean boolean20 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime19.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime19.plusMinutes(977);
        boolean boolean26 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int27 = dateTime19.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime19.plus(readableDuration28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.era();
        boolean boolean32 = dateTimeField31.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test16414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16414");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        int int6 = dateTime3.getWeekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.minus(readablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime10.plusHours((int) (byte) 100);
        boolean boolean16 = dateTime14.isBefore((long) ' ');
        int int17 = dateTime14.getYearOfEra();
        org.joda.time.TimeOfDay timeOfDay18 = dateTime14.toTimeOfDay();
        boolean boolean19 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property20 = dateTime14.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test16415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16415");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int5 = localDateTime1.get(dateTimeFieldType4);
        int int6 = localDateTime1.getWeekyear();
        int int7 = localDateTime1.size();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.year();
        java.lang.String str9 = localDateTime1.toString();
        org.joda.time.LocalDateTime.Property property10 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int15 = dateTimeField12.getDifference((long) 52, 1586790399819L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.052" + "'", str9, "1970-01-01T00:00:00.052");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-50) + "'", int15 == (-50));
    }

    @Test
    public void test16416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16416");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime5.toMutableDateTime(dateTimeZone8);
        int int10 = dateTime5.getDayOfMonth();
        int int11 = dateTime5.getDayOfWeek();
        org.joda.time.TimeOfDay timeOfDay12 = dateTime5.toTimeOfDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime5.plus(readablePeriod13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withPeriodAdded(readablePeriod15, 37);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(315);
        int int20 = dateTime19.getYearOfCentury();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfDay(54643732);
        boolean boolean24 = dateTime22.isBefore((long) 519);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 25 + "'", int10 == 25);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16417");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.weekyear();
        boolean boolean19 = dateTime13.equals((java.lang.Object) localDateTime15);
        org.joda.time.DateTime dateTime21 = dateTime13.minusMonths(54616882);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        org.joda.time.Chronology chronology24 = localDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekOfWeekyear();
        org.joda.time.DurationField durationField26 = chronology24.days();
        long long29 = durationField26.subtract((long) 54778, (long) 229);
        boolean boolean30 = durationField26.isPrecise();
        long long33 = durationField26.add((long) 'a', 0L);
        long long36 = durationField26.getMillis(495, (long) 54607092);
        long long39 = durationField26.add((long) 54818, (long) 69243);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-19785545222L) + "'", long29 == (-19785545222L));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 97L + "'", long33 == 97L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 42768000000L + "'", long36 == 42768000000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 5982595254818L + "'", long39 == 5982595254818L);
    }

    @Test
    public void test16418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16418");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.Locale.FilteringMode filteringMode10 = null;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList8, filteringMode10);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap13);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(languageRangeList14);
    }

    @Test
    public void test16419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16419");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = dateTime5.withZone(dateTimeZone9);
        org.joda.time.DateTime.Property property12 = dateTime5.yearOfEra();
        org.joda.time.DateTime.Property property13 = dateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight18 = dateTime15.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.withMillisOfDay(0);
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfSecond();
        int int27 = property26.getMaximumValue();
        boolean boolean28 = dateTimeZone19.equals((java.lang.Object) property26);
        boolean boolean30 = dateTimeZone19.equals((java.lang.Object) "37");
        boolean boolean32 = dateTimeZone19.isStandardOffset(60590228L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        boolean boolean38 = dateTime36.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime36.toMutableDateTime(dateTimeZone39);
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str44 = dateTimeZone39.getShortName((long) (short) 100, locale43);
        java.lang.String str46 = dateTimeZone39.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        org.joda.time.DurationField durationField54 = chronology51.millis();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusSeconds((int) ' ');
        long long60 = chronology51.set((org.joda.time.ReadablePartial) localDateTime58, (long) 99);
        org.joda.time.DateTimeField dateTimeField61 = chronology51.clockhourOfDay();
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale63 = java.util.Locale.getDefault(category62);
        java.lang.String str64 = locale63.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (-457071), chronology51, locale63, (java.lang.Integer) (-948));
        java.lang.String str67 = dateTimeZone39.getName((long) 2022, locale63);
        boolean boolean68 = dateTimeZone19.equals((java.lang.Object) dateTimeZone39);
        org.joda.time.DateTime dateTime69 = dateTime5.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime71 = dateTime5.minus((long) 767);
        int int72 = dateTime71.getMonthOfYear();
        org.joda.time.DateTime.Property property73 = dateTime71.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 999 + "'", int27 == 999);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.052" + "'", str44, "+00:00:00.052");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-31948L) + "'", long60 == (-31948L));
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.052" + "'", str67, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test16420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16420");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 54619321);
        java.util.Locale locale11 = dateTimeParserBucket5.getLocale();
        java.util.Locale locale12 = dateTimeParserBucket5.getLocale();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test16421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16421");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        int int5 = dateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int14 = localDateTime12.get(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusMinutes(13);
        org.joda.time.DateTime dateTime17 = dateTime1.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plus(readableDuration18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = localDateTime19.getFields();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra(485);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.DurationField durationField28 = chronology25.millis();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusSeconds((int) ' ');
        long long34 = chronology25.set((org.joda.time.ReadablePartial) localDateTime32, (long) 99);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withDurationAdded(readableDuration35, 0);
        int int38 = localDateTime32.getMillisOfSecond();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.parse("2022-02-21T15:06:35.241+00:00:00.052");
        boolean boolean41 = localDateTime32.equals((java.lang.Object) dateTime40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime32.monthOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = property46.withMaximumValue();
        java.lang.String str48 = property46.toString();
        org.joda.time.LocalDateTime localDateTime49 = property46.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfMonth();
        boolean boolean52 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-31948L) + "'", long34 == (-31948L));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[millisOfSecond]" + "'", str48, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test16422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16422");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Feb");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale locale6 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.setUnicodeLocaleKeyword("-0001-02-22T00:11:12.576+00:00:00.052", "48");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: -0001-02-22T00:11:12.576+00:00:00.052 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test16423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16423");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("10");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet6.spliterator();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours((int) (byte) 100);
        boolean boolean28 = dateTime26.isBefore((long) ' ');
        int int29 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone19.isLocalDateTimeGap(localDateTime30);
        boolean boolean33 = dateTimeZone19.isStandardOffset(1645455983203L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(1645455979996L, dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = strSet6.remove((java.lang.Object) 1645455979996L);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to java.lang.Long");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test16424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16424");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(chronology4);
        java.lang.String str6 = chronology4.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.Chronology chronology10 = chronology4.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField11 = chronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(35999999L, chronology4);
        org.joda.time.DurationField durationField14 = chronology4.minutes();
        org.joda.time.DurationField durationField15 = chronology4.hours();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 559, chronology4, locale16, (java.lang.Integer) 822, 54381);
        dateTimeParserBucket19.setOffset(7);
        java.lang.Object obj22 = dateTimeParserBucket19.saveState();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekOfWeekyear();
        boolean boolean27 = dateTimeField26.isLenient();
        dateTimeParserBucket19.saveField(dateTimeField26, 0);
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = dateTimeField26.getAsText(432, locale31);
        java.util.Locale locale36 = new java.util.Locale("441", "2022-02-21T15:10:53.175+00:00:00.052");
        java.lang.String str37 = locale31.getDisplayLanguage(locale36);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "432" + "'", str33, "432");
        org.junit.Assert.assertEquals(locale36.toString(), "441_2022-02-21T15:10:53.175+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "French" + "'", str37, "French");
    }

    @Test
    public void test16425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16425");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = dateTimeField4.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getScript();
        java.lang.String str15 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime9, locale12);
        java.lang.String str16 = locale12.getLanguage();
        java.util.Set<java.lang.Character> charSet17 = locale12.getExtensionKeys();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "55" + "'", str15, "55");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertNotNull(charSet17);
    }

    @Test
    public void test16426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16426");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(0L);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        java.lang.Object obj16 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        java.lang.String str21 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj16, chronology19);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime14.toMutableDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.secondOfMinute();
        int int27 = dateTimeField26.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = dateTimeField26.set(1645456376450L, 54942);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54942 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
    }

    @Test
    public void test16427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16427");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(213);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 99);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property19 = dateTime16.centuryOfEra();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = property19.getAsText(locale20);
        java.lang.String str23 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (-1), locale20);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = dateTimeField9.getAsShortText((int) (byte) 10, locale25);
        java.lang.String str28 = locale25.getVariant();
        java.lang.String str29 = dateTimeZone1.getShortName((long) 70, locale25);
        java.util.Locale locale30 = locale25.stripExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20" + "'", str22, "20");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1" + "'", str23, "-1");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+213:00" + "'", str29, "+213:00");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
    }

    @Test
    public void test16428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16428");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant2 = null;
        int int3 = dateTimeZone1.getOffset(readableInstant2);
        java.lang.String str5 = dateTimeZone1.getName(0L);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone1);
        int int8 = dateTimeZone1.getOffset((long) 25);
        java.lang.String str10 = dateTimeZone1.getName((long) 768);
        java.lang.String str11 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((-58380393599053L), dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(212);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = property22.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readableDuration25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 74, chronology28);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale41, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField45 = null;
        dateTimeParserBucket44.saveField(dateTimeField45, (int) (short) 0);
        java.lang.Integer int48 = dateTimeParserBucket44.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket44.setZone(dateTimeZone49);
        dateTimeParserBucket35.setZone(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        boolean boolean57 = dateTime55.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        boolean boolean62 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = dateTime61.toDateTime();
        org.joda.time.DateTime dateTime65 = dateTime61.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.weekyear();
        boolean boolean71 = dateTime65.equals((java.lang.Object) localDateTime67);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime65.getZone();
        dateTimeParserBucket35.setZone(dateTimeZone72);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology76 = localDateTime75.getChronology();
        org.joda.time.LocalDateTime.Property property77 = localDateTime75.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime78 = property77.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime83 = property81.addWrapFieldToCopy((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property81.getFieldType();
        java.util.Locale locale86 = java.util.Locale.ITALY;
        dateTimeParserBucket35.saveField(dateTimeFieldType84, "2022-02-21T15:06:22.606+00:00:00.052", locale86);
        int int88 = localDateTime29.get(dateTimeFieldType84);
        boolean boolean89 = localDateTime24.isSupported(dateTimeFieldType84);
        boolean boolean90 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.052" + "'", str5, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.052" + "'", str10, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.052" + "'", str11, "+00:00:00.052");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 19 + "'", int88 == 19);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test16429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16429");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean12 = dateTime11.isEqualNow();
        org.joda.time.LocalDateTime localDateTime13 = dateTime11.toLocalDateTime();
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(5);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(564);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withDurationAdded(readableDuration19, 194);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        java.util.Locale locale26 = new java.util.Locale("-0001-02-22T00:07:02.630+00:00:00.052", "28", "zh");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((-958L), chronology22, locale26);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals(locale26.toString(), "-0001-02-22t00:07:02.630+00:00:00.052_28_zh");
    }

    @Test
    public void test16430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16430");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime(dateTimeZone5);
        java.lang.String str8 = dateTimeZone5.getID();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withTime(853, 54439881, 3068, 54651287);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 853 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.052" + "'", str8, "+00:00:00.052");
    }

    @Test
    public void test16431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16431");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        int int8 = dateTime5.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.plus(readableDuration9);
        org.joda.time.DateTime dateTime12 = dateTime10.minus((long) 54481);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((-1));
        org.joda.time.DateTime dateTime18 = dateTime14.plusHours((int) (byte) 100);
        boolean boolean20 = dateTime18.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime18.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime32.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.plusMinutes(977);
        boolean boolean39 = mutableDateTime22.isAfter((org.joda.time.ReadableInstant) dateTime32);
        int int40 = dateTime32.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime32.plus(readableDuration41);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime42.plusWeeks(59);
        boolean boolean46 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test16432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16432");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(0L);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        java.util.GregorianCalendar gregorianCalendar17 = dateTime15.toGregorianCalendar();
        org.joda.time.DateTime.Property property18 = dateTime15.monthOfYear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(gregorianCalendar17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test16433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16433");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight4 = dateTime1.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear((-1));
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours(15);
        org.joda.time.DateTime dateTime13 = dateTime9.minusHours(212);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.withDurationAdded(readableDuration14, 4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = dateTime9.toString(dateTimeFormatter17);
        boolean boolean19 = dateMidnight4.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.withMillisOfDay(0);
        org.joda.time.LocalDate localDate26 = dateTime25.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime30.toMutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        int int37 = mutableDateTime35.get(dateTimeFieldType36);
        boolean boolean38 = dateTime25.isSupported(dateTimeFieldType36);
        boolean boolean39 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime41 = dateTime25.minusYears(2);
        org.joda.time.DateTime dateTime43 = dateTime25.minus((long) 35);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis(766);
        org.joda.time.Instant instant46 = dateTime43.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-0001-02-22T15:14:55.455+00:00:00.052" + "'", str18, "-0001-02-22T15:14:55.455+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(instant46);
    }

    @Test
    public void test16434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16434");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = durationFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.weekyear();
        org.joda.time.DurationField durationField9 = chronology3.centuries();
        long long12 = durationField9.getMillis((long) 149, (long) 949);
        org.joda.time.DurationFieldType durationFieldType13 = durationField9.getType();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 470198649600000L + "'", long12 == 470198649600000L);
        org.junit.Assert.assertNotNull(durationFieldType13);
    }

    @Test
    public void test16435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16435");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'x');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        boolean boolean13 = dateTime11.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime11.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        int int18 = mutableDateTime16.get(dateTimeFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType17.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType17.getDurationType();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime6.withField(dateTimeFieldType17, 0);
        int int23 = localDateTime6.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime26 = property24.addWrapFieldToCopy(551);
        org.joda.time.LocalDateTime localDateTime28 = property24.addWrapFieldToCopy(54764730);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusYears(54825149);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(durationFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test16436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16436");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(72000052L, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime1.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime.Property property10 = dateTime1.weekyear();
        org.joda.time.DateTime.Property property11 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.DurationField durationField13 = property11.getLeapDurationField();
        long long15 = durationField13.getMillis(54695707);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 33079963593600000L + "'", long15 == 33079963593600000L);
    }

    @Test
    public void test16437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16437");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        int int6 = dateTime1.getDayOfYear();
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime1.plusMinutes(54637049);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTimeISO();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale11.getCountry();
        java.util.Locale locale16 = new java.util.Locale("22", "");
        java.lang.String str17 = locale11.getDisplayVariant(locale16);
        boolean boolean18 = dateTime1.equals((java.lang.Object) locale16);
        org.joda.time.DateTime.Property property19 = dateTime1.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale16.toString(), "22");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test16438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16438");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = dateTime5.withZone(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DateTime dateTime18 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateTime dateTime21 = dateTime5.withDurationAdded((long) 1, 68841);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime5.toMutableDateTime();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime5.withPeriodAdded(readablePeriod23, 54914);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test16439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16439");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getCountry();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TW" + "'", str3, "TW");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test16440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16440");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime3.minusDays(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear((-1));
        org.joda.time.DateTime dateTime15 = dateTime11.plusHours((int) (byte) 100);
        int int16 = dateTime11.getDayOfYear();
        int int17 = dateTime11.getDayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime11.plus((long) 21);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekyear();
        org.joda.time.DurationField durationField22 = chronology20.hours();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.year();
        int int26 = mutableDateTime9.get(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2020 + "'", int26 == 2020);
    }

    @Test
    public void test16441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16441");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, 970);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property31 = dateTime28.centuryOfEra();
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = property31.getAsText(locale32);
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime25, (-1), locale32);
        boolean boolean36 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusDays(212);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusHours((int) ' ');
        boolean boolean46 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMonths(44);
        boolean boolean50 = localDateTime11.equals((java.lang.Object) localDateTime43);
        org.joda.time.LocalDateTime.Property property51 = localDateTime11.era();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "20" + "'", str34, "20");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1" + "'", str35, "-1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test16442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16442");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        long long13 = dateTimeZone10.convertLocalToUTC(0L, false);
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        int int29 = dateTimeZone26.getStandardOffset((long) 1969);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long33 = dateTimeZone26.getMillisKeepLocal(dateTimeZone31, (long) 99);
        boolean boolean35 = dateTimeZone31.isStandardOffset(1645456054726L);
        java.lang.String str37 = dateTimeZone31.getNameKey(52L);
        dateTimeParserBucket5.setZone(dateTimeZone31);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = dateTimeParserBucket5.computeMillis();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-52L) + "'", long13 == (-52L));
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 150L + "'", long33 == 150L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test16443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16443");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        java.lang.String str24 = dateTimeZone10.getNameKey((long) '4');
        java.util.TimeZone timeZone25 = dateTimeZone10.toTimeZone();
        timeZone25.setRawOffset(538);
        java.lang.String str28 = timeZone25.getID();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        org.joda.time.DurationField durationField35 = chronology32.millis();
        java.util.Locale locale39 = new java.util.Locale("\u897f\u66a6", "minuteOfHour", "118");
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(69000764L, chronology32, locale39);
        java.lang.String str42 = timeZone25.getDisplayName(locale39);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.052" + "'", str28, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertEquals(locale39.toString(), "\u897f\u66a6_MINUTEOFHOUR_118");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GMT+00:00" + "'", str42, "GMT+00:00");
    }

    @Test
    public void test16444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16444");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.weekyear();
        boolean boolean19 = dateTime13.equals((java.lang.Object) localDateTime15);
        org.joda.time.DateTime dateTime21 = dateTime13.minusMonths(54616882);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime25 = property24.getLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test16445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16445");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property19 = dateTime16.centuryOfEra();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = property19.getAsText(locale20);
        java.lang.String str23 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (-1), locale20);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDateTime13.getFieldType(2);
        int int26 = dateTime4.get(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = dateTime4.plus((-1L));
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        boolean boolean31 = dateTimeZone30.isFixed();
        java.lang.String str32 = dateTimeZone30.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20" + "'", str22, "20");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1" + "'", str23, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 21 + "'", int26 == 21);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.052" + "'", str32, "+00:00:00.052");
    }

    @Test
    public void test16446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16446");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.DateTime dateTime9 = property6.addToCopy((int) 'a');
        org.joda.time.LocalDateTime localDateTime10 = dateTime9.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        boolean boolean20 = localDateTime18.isSupported(dateTimeFieldType19);
        java.util.Date date21 = localDateTime18.toDate();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusSeconds(4);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFieldAdded(durationFieldType24, 213);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean28 = localDateTime23.isSupported(dateTimeFieldType27);
        boolean boolean29 = mutableDateTime13.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withWeekyear(2022);
        int int37 = localDateTime31.getDayOfWeek();
        int int38 = localDateTime31.size();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        boolean boolean45 = localDateTime43.isSupported(dateTimeFieldType44);
        java.lang.String str46 = dateTimeFieldType44.toString();
        int int47 = localDateTime31.get(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology52 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType44.getField(chronology52);
        org.joda.time.DurationField durationField55 = chronology52.weeks();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.era();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        int int58 = dateTimeField56.getMaximumTextLength(locale57);
        int int59 = mutableDateTime13.get(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:14:55 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "21" + "'", str7, "21");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "era" + "'", str46, "era");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test16447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16447");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfYear(12);
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.year();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test16448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16448");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.DateTime dateTime9 = property6.addToCopy((int) 'a');
        org.joda.time.LocalDateTime localDateTime10 = dateTime9.toLocalDateTime();
        java.lang.String str11 = localDateTime10.toString();
        int int12 = localDateTime10.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfYear((int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime17.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withFieldAdded(durationFieldType21, 54391);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(12);
        long long29 = dateTimeZone25.convertLocalToUTC((long) (short) 1, true, (long) 865);
        org.joda.time.DateTime dateTime30 = localDateTime17.toDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plus(readableDuration40);
        int int42 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minus(readableDuration43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusHours((int) (byte) 0);
        boolean boolean51 = dateTime49.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime49.toMutableDateTime(dateTimeZone52);
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str57 = dateTimeZone52.getShortName((long) (short) 100, locale56);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 999, dateTimeZone52);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology60, locale61, (java.lang.Integer) (-1), (int) (byte) -1);
        int int65 = dateTimeParserBucket64.getOffset();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime70 = property69.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.era();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.plusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property78 = localDateTime72.property(dateTimeFieldType77);
        dateTimeParserBucket64.saveField(dateTimeFieldType77, 483);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime58.withField(dateTimeFieldType77, 0);
        boolean boolean83 = localDateTime44.isSupported(dateTimeFieldType77);
        java.lang.String str84 = dateTimeFieldType77.getName();
        org.joda.time.LocalDateTime.Property property85 = localDateTime17.property(dateTimeFieldType77);
        boolean boolean86 = localDateTime10.isSupported(dateTimeFieldType77);
        org.joda.time.LocalDateTime.Property property87 = localDateTime10.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = null;
        java.lang.String str89 = localDateTime10.toString(dateTimeFormatter88);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:14:55 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "21" + "'", str7, "21");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-05-29T15:14:55.733" + "'", str11, "2022-05-29T15:14:55.733");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 29 + "'", int12 == 29);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-43199999L) + "'", long29 == (-43199999L));
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.052" + "'", str57, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hourOfHalfday" + "'", str84, "hourOfHalfday");
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(property87);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-05-29T15:14:55.733" + "'", str89, "2022-05-29T15:14:55.733");
    }

    @Test
    public void test16449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16449");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        long long8 = durationField5.getDifferenceAsLong((long) 948, (long) 519);
        long long11 = durationField5.getValueAsLong((-31948L), (-31948L));
        long long14 = durationField5.add((-1L), (int) (short) 0);
        long long17 = durationField5.add(1645455977932L, (long) 2922789);
        java.lang.String str18 = durationField5.toString();
        long long20 = durationField5.getMillis((long) 671);
        long long23 = durationField5.add(0L, 220);
        java.lang.Class<?> wildcardClass24 = durationField5.getClass();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 12167496377932L + "'", long17 == 12167496377932L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DurationField[hours]" + "'", str18, "DurationField[hours]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2415600000L + "'", long20 == 2415600000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 792000000L + "'", long23 == 792000000L);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test16450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16450");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = chronology3.millis();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        long long12 = chronology3.set((org.joda.time.ReadablePartial) localDateTime10, (long) 99);
        org.joda.time.DateTimeField dateTimeField13 = chronology3.clockhourOfDay();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.lang.String str16 = locale15.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (-457071), chronology3, locale15, (java.lang.Integer) (-948));
        java.lang.Object obj19 = dateTimeParserBucket18.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str21 = dateTimeFieldType20.getName();
        dateTimeParserBucket18.saveField(dateTimeFieldType20, 714);
        dateTimeParserBucket18.setOffset((java.lang.Integer) 27003);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-31948L) + "'", long12 == (-31948L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "monthOfYear" + "'", str21, "monthOfYear");
    }

    @Test
    public void test16451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16451");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(15);
        org.joda.time.DateTime dateTime7 = dateTime3.minusHours(212);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime3.withDurationAdded(readableDuration8, 4);
        int int11 = dateTime10.getMinuteOfHour();
        org.joda.time.DateTime.Property property12 = dateTime10.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.era();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.property(dateTimeFieldType24);
        org.joda.time.DurationField durationField26 = property25.getLeapDurationField();
        org.joda.time.DurationField durationField27 = property25.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight32 = dateTime29.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone33 = dateMidnight32.getZone();
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight32.toMutableDateTime();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        dateTimeParserBucket40.saveField(dateTimeFieldType44, "it", locale46);
        java.lang.String str48 = locale46.getISO3Country();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours((int) (byte) 0);
        java.util.Date date53 = dateTime50.toDate();
        org.joda.time.DateTime.Property property54 = dateTime50.dayOfMonth();
        org.joda.time.DateTime.Property property55 = dateTime50.dayOfMonth();
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = property55.getAsText(locale56);
        java.lang.String str59 = locale46.getDisplayScript(locale56);
        boolean boolean60 = mutableDateTime34.equals((java.lang.Object) locale56);
        java.lang.String str61 = locale56.getDisplayLanguage();
        int int62 = property25.getMaximumShortTextLength(locale56);
        java.util.Calendar calendar63 = dateTime10.toCalendar(locale56);
        org.joda.time.DateTime.Property property64 = dateTime10.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14 + "'", int11 == 14);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Mon Feb 21 15:14:55 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "it" + "'", str57, "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "21" + "'", str58, "21");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Italian" + "'", str61, "Italian");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-62194207504252,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=14,SECOND=55,MILLISECOND=800,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test16452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16452");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.hourOfDay();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test16453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16453");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test16454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16454");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy(576);
        boolean boolean12 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime13 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readableDuration16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear(445);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test16455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16455");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-21T15:13:02.156+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-21T15:13:02.156+00:00:00.052' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16456");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T15:06:14.968+00:00:00.052");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        int int3 = timeZone1.getRawOffset();
        timeZone1.setID("0");
        java.lang.String str6 = timeZone1.getID();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket14.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        int int26 = dateTime21.getDayOfYear();
        java.util.GregorianCalendar gregorianCalendar27 = dateTime21.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime30 = dateTime21.withDurationAdded(readableDuration28, (int) (short) 1);
        int int31 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime21);
        java.util.TimeZone timeZone32 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone19);
        int int34 = dateTime33.getDayOfWeek();
        org.joda.time.DateTime dateTime36 = dateTime33.plusHours(24265);
        org.joda.time.DateTime.Property property37 = dateTime33.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekyear((-1));
        org.joda.time.DateTime dateTime43 = dateTime41.minusHours(15);
        org.joda.time.DateTime dateTime45 = dateTime41.minusHours(212);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime48 = dateTime41.withDurationAdded(readableDuration46, 4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = dateTime41.toString(dateTimeFormatter49);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.secondOfMinute();
        int int56 = dateTime41.get(dateTimeField55);
        org.joda.time.DateTime dateTime58 = dateTime41.plusMillis(784);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime41.toMutableDateTime();
        org.joda.time.DateTime.Property property60 = dateTime41.year();
        int int61 = property60.getLeapAmount();
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale62.getDisplayCountry();
        java.util.Locale locale64 = java.util.Locale.UK;
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder65.setExtension('a', "cinese");
        java.util.Locale locale69 = builder65.build();
        java.lang.String str70 = locale64.getDisplayName(locale69);
        java.lang.String str71 = locale62.getDisplayLanguage(locale64);
        java.lang.String str72 = property60.getAsText(locale62);
        java.util.Locale locale73 = locale62.stripExtensions();
        java.lang.String str74 = locale62.getDisplayScript();
        java.lang.String str75 = property37.getAsShortText(locale62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = timeZone1.getDisplayName(false, 54725525, locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 54725525");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-0001-02-22T15:14:55.884+00:00:00.052" + "'", str50, "-0001-02-22T15:14:55.884+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 55 + "'", int56 == 55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "China" + "'", str63, "China");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "English (United Kingdom)" + "'", str70, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Chinese" + "'", str71, "Chinese");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1" + "'", str72, "-1");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "54895" + "'", str75, "54895");
    }

    @Test
    public void test16457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16457");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime3.secondOfDay();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property11.roundHalfEvenCopy();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear((-1));
        org.joda.time.DateTime dateTime20 = dateTime16.plusHours((int) (byte) 100);
        int int21 = dateTime16.getDayOfYear();
        int int22 = dateTime16.getDayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime16.plus((long) 21);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyear();
        org.joda.time.DurationField durationField27 = chronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfMinute();
        org.joda.time.DateTime dateTime29 = dateTime13.toDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        java.lang.String str35 = property33.getAsText();
        org.joda.time.LocalDateTime localDateTime36 = property33.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        java.lang.String str39 = dateTimeZone37.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        int int42 = dateTimeZone37.getOffset(0L);
        org.joda.time.DateTime dateTime43 = localDateTime36.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        java.lang.String str47 = dateTimeZone45.toString();
        long long49 = dateTimeZone37.getMillisKeepLocal(dateTimeZone45, 1645455977932L);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime13.withFields((org.joda.time.ReadablePartial) localDateTime50);
        int int52 = dateTime13.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-21T15:14:56.000+00:00:00.052" + "'", str14, "2022-02-21T15:14:56.000+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "52" + "'", str35, "52");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.052" + "'", str39, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.052" + "'", str47, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645455977932L + "'", long49 == 1645455977932L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test16458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16458");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        java.lang.String str2 = timeZone1.getID();
        boolean boolean3 = timeZone1.observesDaylightTime();
        timeZone1.setID("\u30ab\u30ca\u30c0");
        timeZone1.setRawOffset(54616087);
        timeZone1.setID("292278922");
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+15:10");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.052" + "'", str2, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test16459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16459");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'x');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMonthOfYear(347);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 347 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test16460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16460");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime7 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.secondOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology12.millis();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) ' ');
        long long21 = chronology12.set((org.joda.time.ReadablePartial) localDateTime19, (long) 99);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology12, locale22, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeField dateTimeField27 = chronology12.minuteOfHour();
        org.joda.time.DurationField durationField28 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField29 = chronology12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = property33.withMaximumValue();
        int int35 = localDateTime34.getEra();
        java.lang.String str36 = localDateTime34.toString();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.plus(readablePeriod37);
        int int39 = localDateTime34.getDayOfYear();
        int int40 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        boolean boolean46 = dateTime44.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks((int) 'a');
        boolean boolean51 = dateTime44.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime();
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        java.lang.String str54 = chronology53.toString();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        long long59 = chronology53.add(readablePeriod56, 1645456009657L, 54587);
        org.joda.time.DateTimeZone dateTimeZone60 = chronology53.getZone();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime34, dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime7.withZoneRetainFields(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-31948L) + "'", long21 == (-31948L));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01T00:00:00.999" + "'", str36, "1970-01-01T00:00:00.999");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str54, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645456009657L + "'", long59 == 1645456009657L);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test16461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16461");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfMonth();
        org.joda.time.Chronology chronology7 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        int int10 = dateTimeField8.getMaximumValue((long) 977);
        java.lang.String str11 = dateTimeField8.toString();
        org.joda.time.DurationField durationField12 = dateTimeField8.getDurationField();
        long long14 = durationField12.getMillis(1970);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[hourOfDay]" + "'", str11, "DateTimeField[hourOfDay]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 7092000000L + "'", long14 == 7092000000L);
    }

    @Test
    public void test16462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16462");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        boolean boolean11 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        java.lang.String str14 = chronology13.toString();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.months();
        org.joda.time.DurationField durationField17 = chronology13.minutes();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.era();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusYears(100);
        int[] intArray29 = localDateTime24.getValues();
        long long31 = chronology13.set((org.joda.time.ReadablePartial) localDateTime24, (long) 54658957);
        org.joda.time.DateTimeField dateTimeField32 = chronology13.year();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField34 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField35 = chronology13.weeks();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 965, chronology13);
        org.joda.time.DateTime dateTime38 = dateTime36.plus((long) 54600110);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str14, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[120, 1, 1, 999]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-58380393599053L) + "'", long31 == (-58380393599053L));
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test16463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16463");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        org.joda.time.DurationField durationField8 = chronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone9.getOffset(readableInstant10);
        java.lang.String str13 = dateTimeZone9.getName(0L);
        java.lang.String str15 = dateTimeZone9.getNameKey((long) (short) 10);
        org.joda.time.Chronology chronology16 = chronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.secondOfMinute();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime27 = property24.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMaximumValue();
        int int32 = localDateTime31.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.era();
        org.joda.time.LocalDateTime localDateTime34 = property33.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime40 = property38.addToCopy((long) 766);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime42.toMutableDateTime();
        long long46 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime42.plusMinutes(0);
        org.joda.time.DateTime dateTime49 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        java.lang.String str52 = dateTimeZone50.toString();
        java.lang.String str54 = dateTimeZone50.getName((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime49.toMutableDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 59, dateTimeZone50);
        int int57 = localDateTime56.getYearOfEra();
        int int58 = localDateTime34.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime34.withWeekyear(861);
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology63, locale64, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField68 = null;
        dateTimeParserBucket67.saveField(dateTimeField68, (int) (short) 0);
        java.lang.Integer int71 = dateTimeParserBucket67.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        long long75 = dateTimeZone72.convertLocalToUTC(0L, false);
        dateTimeParserBucket67.setZone(dateTimeZone72);
        dateTimeParserBucket67.setOffset(0);
        java.util.Locale locale79 = dateTimeParserBucket67.getLocale();
        java.util.Locale.setDefault(locale79);
        java.lang.String str81 = locale79.getScript();
        java.lang.String str82 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, 0, locale79);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.052" + "'", str13, "+00:00:00.052");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645456495948L + "'", long46 == 1645456495948L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.052" + "'", str52, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.052" + "'", str54, "+00:00:00.052");
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-52L) + "'", long75 == (-52L));
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
    }

    @Test
    public void test16464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16464");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-21T15:11:08.315+00:00:00.052");
    }

    @Test
    public void test16465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16465");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField10 = chronology3.seconds();
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology3, locale11, (java.lang.Integer) 25, 2922789);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime21 = property18.addWrapFieldToCopy(28);
        org.joda.time.DateTimeField dateTimeField22 = property18.getField();
        java.lang.String str24 = dateTimeField22.getAsShortText((long) (short) 10);
        dateTimeParserBucket14.saveField(dateTimeField22, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket14.getZone();
        java.lang.Object obj28 = dateTimeParserBucket14.saveState();
        long long30 = dateTimeParserBucket14.computeMillis(false);
        java.util.Locale locale31 = dateTimeParserBucket14.getLocale();
        java.lang.String str32 = locale31.getDisplayLanguage();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "10" + "'", str24, "10");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 35L + "'", long30 == 35L);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test16466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16466");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        boolean boolean5 = dateTime1.isBeforeNow();
        boolean boolean6 = dateTime1.isBeforeNow();
        int int7 = dateTime1.getDayOfWeek();
        int int8 = dateTime1.getDayOfWeek();
        org.joda.time.DateTime.Property property9 = dateTime1.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test16467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16467");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusDays(31);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(211);
        int int15 = property12.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.yearOfEra();
        int int25 = property24.getMinimumValue();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property31 = dateTime28.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(72000052L, dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime28.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime.Property property37 = dateTime36.millisOfSecond();
        org.joda.time.DateTime.Property property38 = dateTime36.millisOfSecond();
        long long39 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.plus(readablePeriod40);
        org.joda.time.DateTime dateTime42 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime.Property property43 = localDateTime16.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1969 + "'", int23 == 1969);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-52L) + "'", long39 == (-52L));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test16468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16468");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "cinese");
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("coreano");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("999");
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setScript("2022-02-21T15:14:28.504+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-21T15:14:28.504+00:00:00.052 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test16469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16469");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        org.joda.time.DurationField durationField8 = chronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone9.getOffset(readableInstant10);
        java.lang.String str13 = dateTimeZone9.getName(0L);
        java.lang.String str15 = dateTimeZone9.getNameKey((long) (short) 10);
        org.joda.time.Chronology chronology16 = chronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField17 = chronology2.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology2.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.052" + "'", str13, "+00:00:00.052");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test16470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16470");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        boolean boolean12 = dateTimeFieldType5.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        boolean boolean15 = dateTimeField13.isSupported();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test16471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16471");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy(576);
        boolean boolean12 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime13 = property9.roundHalfEvenCopy();
        org.joda.time.DurationField durationField14 = property9.getLeapDurationField();
        java.lang.String str15 = property9.getAsText();
        org.joda.time.LocalDateTime localDateTime17 = property9.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = property32.getAsText(locale33);
        java.lang.String str36 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime26, (-1), locale33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime26.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMinutes(332);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1978" + "'", str15, "1978");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "20" + "'", str35, "20");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test16472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16472");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property5.getFieldType();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMillis(99);
        int int14 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property15 = localDateTime8.year();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfWeek((-4549387));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -4549387 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:14:56 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test16473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16473");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears(54381);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withPeriodAdded(readablePeriod8, 283);
        boolean boolean12 = dateTime7.isBefore((long) 781);
        org.joda.time.DateTime dateTime13 = dateTime7.toDateTime();
        org.joda.time.ReadableInstant readableInstant14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = dateTime13.compareTo(readableInstant14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test16474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16474");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, 212);
        boolean boolean14 = dateTime12.isAfter(35999999L);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean26 = dateTime25.isEqualNow();
        org.joda.time.DateTime.Property property27 = dateTime25.secondOfMinute();
        org.joda.time.DateTime dateTime29 = property27.addToCopy(0L);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        boolean boolean37 = localDateTime35.isSupported(dateTimeFieldType36);
        long long39 = chronology30.set((org.joda.time.ReadablePartial) localDateTime35, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime12.toMutableDateTime(chronology30);
        org.joda.time.DateTime dateTime42 = dateTime12.minusMinutes(54470207);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology45);
        java.lang.String str47 = chronology45.toString();
        org.joda.time.DurationField durationField48 = chronology45.hours();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        java.lang.String str53 = chronology51.toString();
        org.joda.time.DurationField durationField54 = chronology51.hours();
        int int55 = durationField48.compareTo(durationField54);
        int int57 = durationField48.getValue(35999998999L);
        boolean boolean58 = durationField48.isSupported();
        long long60 = durationField48.getMillis((long) 241);
        java.lang.String str61 = durationField48.getName();
        long long64 = durationField48.getValueAsLong(1586790458726L, (-62135596800000L));
        long long66 = durationField48.getValueAsLong(0L);
        org.joda.time.DurationFieldType durationFieldType67 = durationField48.getType();
        org.joda.time.DateTime dateTime69 = dateTime42.withFieldAdded(durationFieldType67, 831);
        int int70 = dateTime69.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[UTC]" + "'", str53, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9999 + "'", int57 == 9999);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 867600000L + "'", long60 == 867600000L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hours" + "'", str61, "hours");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 440775L + "'", long64 == 440775L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 29 + "'", int70 == 29);
    }

    @Test
    public void test16475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16475");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset((long) 15);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear((-1));
        org.joda.time.DateMidnight dateMidnight10 = dateTime7.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        boolean boolean12 = dateTime5.equals((java.lang.Object) dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(2922789);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfSecond(784);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = dateTime22.toString(dateTimeFormatter23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime31 = property28.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusHours(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int35 = localDateTime31.indexOf(dateTimeFieldType34);
        int int36 = dateTime22.get(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        org.joda.time.DurationField durationField43 = chronology40.millis();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusSeconds((int) ' ');
        long long49 = chronology40.set((org.joda.time.ReadablePartial) localDateTime47, (long) 99);
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.lang.String str51 = locale50.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology40, locale50, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeField dateTimeField55 = chronology40.minuteOfHour();
        org.joda.time.DurationField durationField56 = chronology40.years();
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType34.getField(chronology40);
        java.lang.String str58 = dateTimeField57.toString();
        int int60 = dateTimeField57.getLeapAmount((long) 54481474);
        long long63 = dateTimeField57.add((long) (-947), 1645456061852L);
        int int65 = dateTimeField57.getMinimumValue(1645456048466L);
        int int66 = dateTime5.get(dateTimeField57);
        org.joda.time.DateTime.Property property67 = dateTime5.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2922789-04-13T15:14:56.784+00:00:00.052" + "'", str24, "2922789-04-13T15:14:56.784+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-31948L) + "'", long49 == (-31948L));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DateTimeField[hourOfDay]" + "'", str58, "DateTimeField[hourOfDay]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 5923641822667199053L + "'", long63 == 5923641822667199053L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 15 + "'", int66 == 15);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test16476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16476");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear((-1));
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths(10);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        int int13 = dateTime11.getYearOfEra();
        org.joda.time.DateTime.Property property14 = dateTime11.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime11.plusWeeks((-1));
        boolean boolean17 = dateTime11.isBeforeNow();
        int int18 = property4.getDifference((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime20 = property4.setCopy(54735);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test16477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16477");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(52);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(28);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMillis(405);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(766);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(149);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology12.add(readablePeriod13, 0L, 54788750);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test16478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16478");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        java.lang.String str6 = dateTimeField4.getAsShortText((-31948L));
        int int9 = dateTimeField4.getDifference((long) 9999, (long) 441);
        long long12 = dateTimeField4.addWrapField(0L, 54440);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra((int) 'x');
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.era();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.property(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(426);
        long long29 = dateTimeZone27.convertUTCToLocal((long) 373);
        org.joda.time.DateTime dateTime30 = localDateTime19.toDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime19.minusDays(54439881);
        int int33 = localDateTime19.getMillisOfDay();
        java.util.Locale locale37 = new java.util.Locale("millisOfSecond", "", "months");
        java.lang.String str38 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale37);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfMinute();
        java.lang.String str46 = dateTimeField44.getAsShortText((-31948L));
        java.util.Locale locale47 = java.util.Locale.KOREA;
        int int48 = dateTimeField44.getMaximumShortTextLength(locale47);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("2");
        java.lang.String str51 = locale47.getDisplayLanguage(locale50);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("2022-02-21T15:09:42.000+00:00:00.052");
        java.lang.String str54 = locale47.getDisplayScript(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = localDateTime19.toString("-292275054-05-02T03:41:44.087", locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "28" + "'", str6, "28");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 20000L + "'", long12 == 20000L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 799L + "'", long29 == 799L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 999 + "'", int33 == 999);
        org.junit.Assert.assertEquals(locale37.toString(), "millisofsecond__months");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "28" + "'", str46, "28");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Korean" + "'", str51, "Korean");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test16479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16479");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = chronology3.millis();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        long long12 = chronology3.set((org.joda.time.ReadablePartial) localDateTime10, (long) 99);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology3, locale13, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeZone dateTimeZone18 = chronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours((int) (byte) 0);
        boolean boolean24 = dateTime22.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks((int) 'a');
        boolean boolean29 = dateTime22.isAfter((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime();
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology36 = dateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) dateTime30, chronology36);
        java.util.Date date39 = dateTime30.toDate();
        org.joda.time.DateTime.Property property40 = dateTime30.minuteOfHour();
        int int41 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-31948L) + "'", long12 == (-31948L));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Apr 13 15:14:56 GMT+00:00 2020");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test16480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16480");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        java.lang.String str24 = dateTimeZone10.getNameKey((long) '4');
        java.lang.String str25 = dateTimeZone10.getID();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.052" + "'", str25, "+00:00:00.052");
    }

    @Test
    public void test16481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16481");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime3.secondOfDay();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((-1));
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours(15);
        java.lang.String str19 = dateTime18.toString();
        long long20 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime22 = property11.addToCopy(74L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(72000052L, dateTimeZone36);
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        int int40 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime42 = dateTime34.minusMinutes(70);
        int int43 = property11.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property44 = dateTime42.weekOfWeekyear();
        boolean boolean45 = dateTime42.isBeforeNow();
        org.joda.time.DateTime dateTime47 = dateTime42.withYearOfEra(236);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-0001-02-22T00:14:56.317+00:00:00.052" + "'", str19, "-0001-02-22T00:14:56.317+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 63839718000L + "'", long20 == 63839718000L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test16482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16482");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = chronology3.millis();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        long long12 = chronology3.set((org.joda.time.ReadablePartial) localDateTime10, (long) 99);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology3, locale13, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(72000052L, dateTimeZone19);
        dateTimeParserBucket17.setZone(dateTimeZone19);
        long long25 = dateTimeZone19.adjustOffset(82800000L, false);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        dateTimeParserBucket32.setOffset((java.lang.Integer) 54619321);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        java.lang.String str44 = dateTimeField42.getAsShortText((-31948L));
        dateTimeParserBucket32.saveField(dateTimeField42, 505);
        java.util.Locale locale47 = dateTimeParserBucket32.getLocale();
        java.util.Locale locale48 = dateTimeParserBucket32.getLocale();
        java.lang.String str49 = dateTimeZone19.getName((long) 54790, locale48);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-31948L) + "'", long12 == (-31948L));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 82800000L + "'", long25 == 82800000L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "28" + "'", str44, "28");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.052" + "'", str49, "+00:00:00.052");
    }

    @Test
    public void test16483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16483");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.era();
        boolean boolean7 = localDateTime5.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfMinute();
        boolean boolean13 = dateTimeFieldType6.isSupported(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj0, chronology10);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField17 = chronology10.centuries();
        org.joda.time.DurationField durationField18 = chronology10.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology10.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology10.getDateTimeMillis(54641923, 54507919, 0, 54942);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54507919 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test16484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16484");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.Chronology chronology7 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = chronology7.getDateTimeMillis(120, 54760967, 35, 54925);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54760967 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test16485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16485");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.Locale.FilteringMode filteringMode10 = null;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList8, filteringMode10);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.Locale.FilteringMode filteringMode20 = null;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList18, filteringMode20);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList21, filteringMode22);
        java.util.Collection<java.util.Locale> localeCollection24 = null;
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap30);
        java.util.Collection<java.lang.String> strCollection32 = null;
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.Locale.FilteringMode filteringMode43 = null;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList41, filteringMode43);
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList41);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.Locale.FilteringMode filteringMode53 = null;
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList51, filteringMode53);
        java.util.Locale.FilteringMode filteringMode55 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList51, filteringMode55);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection32, filteringMode55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap58);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + filteringMode55 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode55.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(languageRangeList59);
    }

    @Test
    public void test16486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16486");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-533664L));
    }

    @Test
    public void test16487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16487");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(16, 54637, 68819, 27, 2514, 313);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16488");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.weeks();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology2.add(readablePeriod8, (long) 40, 54470776);
        org.joda.time.DateTimeField dateTimeField12 = chronology2.dayOfMonth();
        org.joda.time.Chronology chronology13 = chronology2.withUTC();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 40L + "'", long11 == 40L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test16489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16489");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = dateTime5.withZone(dateTimeZone9);
        long long13 = dateTimeZone9.nextTransition(1645455982776L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(981);
        int int18 = dateTime15.getDayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime15.plusYears(54658023);
        org.joda.time.Instant instant22 = dateTime15.toInstant();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.Locale.FilteringMode filteringMode33 = null;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList31, filteringMode33);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.Locale.FilteringMode filteringMode43 = null;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList41, filteringMode43);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList44, filteringMode45);
        java.util.Collection<java.util.Locale> localeCollection47 = null;
        java.util.Locale locale48 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap51);
        java.util.Set<java.lang.String> strSet53 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.util.Locale.FilteringMode filteringMode64 = null;
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strList62, filteringMode64);
        java.lang.String str66 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strList62);
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        java.util.Locale.FilteringMode filteringMode74 = null;
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strList72, filteringMode74);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strList72, filteringMode76);
        boolean boolean78 = strSet53.removeAll((java.util.Collection<java.lang.String>) strList72);
        java.util.Spliterator<java.lang.String> strSpliterator79 = strSet53.spliterator();
        java.util.Locale locale80 = java.util.Locale.ITALIAN;
        java.lang.String str81 = locale80.getScript();
        java.util.Locale locale82 = java.util.Locale.ENGLISH;
        java.lang.String str83 = locale82.getVariant();
        java.lang.String str84 = locale80.getDisplayName(locale82);
        java.util.Set<java.lang.String> strSet85 = locale82.getUnicodeLocaleAttributes();
        boolean boolean86 = strSet53.retainAll((java.util.Collection<java.lang.String>) strSet85);
        java.util.Locale.FilteringMode filteringMode87 = null;
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags(languageRangeList52, (java.util.Collection<java.lang.String>) strSet85, filteringMode87);
        boolean boolean89 = instant22.equals((java.lang.Object) strList88);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455982776L + "'", long13 == 1645455982776L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNull(locale48);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode76.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSpliterator79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Italian" + "'", str84, "Italian");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test16490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16490");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime3.withYear(2922789);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfSecond(784);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = property15.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int22 = localDateTime18.indexOf(dateTimeFieldType21);
        int int23 = dateTime9.get(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology27.millis();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds((int) ' ');
        long long36 = chronology27.set((org.joda.time.ReadablePartial) localDateTime34, (long) 99);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale37.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 212, chronology27, locale37, (java.lang.Integer) (-1), (-948));
        org.joda.time.DateTimeField dateTimeField42 = chronology27.minuteOfHour();
        org.joda.time.DurationField durationField43 = chronology27.years();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType21.getField(chronology27);
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType21.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours((int) (byte) 0);
        boolean boolean52 = dateTime50.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone54 = dateTimeZone53.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime50.toMutableDateTime(dateTimeZone53);
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = dateTimeZone53.getShortName((long) (short) 100, locale57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 999, dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.halfdayOfDay();
        boolean boolean63 = durationFieldType45.isSupported(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2922789-04-13T15:14:56.784+00:00:00.052" + "'", str11, "2922789-04-13T15:14:56.784+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-31948L) + "'", long36 == (-31948L));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.052" + "'", str58, "+00:00:00.052");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test16491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16491");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime.Property property10 = dateTime8.era();
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime19.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean23 = dateTime22.isEqualNow();
        org.joda.time.DateTime.Property property24 = dateTime22.secondOfMinute();
        org.joda.time.DateTime dateTime26 = property24.addToCopy(0L);
        java.lang.String str27 = property24.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfMonth();
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = locale41.getVariant();
        java.lang.String str43 = dateTimeField39.getAsText((-1), locale41);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusSeconds(52);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime55 = dateTime53.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime58 = dateTime55.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean59 = dateTime58.isEqualNow();
        org.joda.time.DateTime.Property property60 = dateTime58.secondOfMinute();
        org.joda.time.DateTime dateTime62 = property60.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField63 = property60.getField();
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = locale65.getScript();
        java.lang.String str68 = dateTimeField63.getAsText(15, locale65);
        java.lang.String str69 = dateTimeField39.getAsShortText((org.joda.time.ReadablePartial) localDateTime45, locale65);
        java.util.Locale.setDefault(category34, locale65);
        java.util.Locale locale71 = java.util.Locale.getDefault(category34);
        int int72 = dateTimeField33.getMaximumTextLength(locale71);
        int int73 = property24.getMaximumShortTextLength(locale71);
        java.lang.String str74 = property10.getAsShortText(locale71);
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale75.getLanguage();
        java.lang.String str77 = locale75.getVariant();
        java.lang.String str78 = locale71.getDisplayScript(locale75);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[secondOfMinute]" + "'", str27, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category34.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "it" + "'", str66, "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "15" + "'", str68, "15");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "24" + "'", str69, "24");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "dopo Cristo" + "'", str74, "dopo Cristo");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "it" + "'", str76, "it");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test16492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16492");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.DurationField durationField6 = chronology4.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.secondOfDay();
        org.joda.time.DurationField durationField8 = dateTimeField7.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(2056892994079L);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) 'a');
        org.joda.time.Chronology chronology18 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) 7889238000013L, chronology18);
        org.joda.time.DurationField durationField21 = durationFieldType12.getField(chronology18);
        java.util.Locale locale25 = new java.util.Locale("54391", "-0001-02-22T15:06:23.107+00:00:00.052", "secondOfDay");
        java.lang.String str26 = locale25.getCountry();
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(196620775200948L, chronology18, locale25, (java.lang.Integer) 54636244);
        long long33 = chronology18.add(54411540L, (long) (byte) 100, 483);
        org.joda.time.DateTimeField dateTimeField34 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours((int) (byte) 0);
        java.util.Date date39 = dateTime36.toDate();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.fromDateFields(date39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        boolean boolean49 = localDateTime47.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime47);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime52 = property51.withMinimumValue();
        boolean boolean53 = localDateTime40.isAfter((org.joda.time.ReadablePartial) localDateTime52);
        int[] intArray55 = chronology18.get((org.joda.time.ReadablePartial) localDateTime52, 1029L);
        int[] intArray56 = localDateTime52.getValues();
        int int57 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime10, intArray56);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals(locale25.toString(), "54391_-0001-02-22T15:06:23.107+00:00:00.052_secondOfDay");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-0001-02-22T15:06:23.107+00:00:00.052" + "'", str26, "-0001-02-22T15:06:23.107+00:00:00.052");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 54459840L + "'", long33 == 54459840L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Feb 21 15:14:56 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1970, 1, 1, 1081]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 86399 + "'", int57 == 86399);
    }

    @Test
    public void test16493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16493");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((int) ' ');
        long long11 = chronology2.set((org.joda.time.ReadablePartial) localDateTime9, (long) 99);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDurationAdded(readableDuration12, 0);
        int int15 = localDateTime9.getMillisOfSecond();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.parse("2022-02-21T15:06:35.241+00:00:00.052");
        boolean boolean18 = localDateTime9.equals((java.lang.Object) dateTime17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withPeriodAdded(readablePeriod19, 73);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDayOfMonth(1051);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1051 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-31948L) + "'", long11 == (-31948L));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test16494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16494");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(212);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(212);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy(576);
        org.joda.time.LocalDateTime localDateTime12 = property9.withMinimumValue();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        int int14 = localDateTime12.getHourOfDay();
        int int15 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusSeconds(584);
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.yearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withWeekyear(283);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears(54655322);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292275055 + "'", int15 == 292275055);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test16495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16495");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        int int6 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 54896568 + "'", int6 == 54896568);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test16496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16496");
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        java.lang.String str12 = chronology10.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.Chronology chronology16 = chronology10.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 156, dateTimeZone14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(953, 152, 54742, 133, 54755, 697, 989, dateTimeZone14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 133 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test16497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16497");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getCountry();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology5, locale6, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField10 = null;
        dateTimeParserBucket9.saveField(dateTimeField10, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        dateTimeParserBucket9.saveField(dateTimeFieldType13, "it", locale15);
        java.lang.String str17 = locale15.getISO3Country();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        java.util.Date date22 = dateTime19.toDate();
        org.joda.time.DateTime.Property property23 = dateTime19.dayOfMonth();
        org.joda.time.DateTime.Property property24 = dateTime19.dayOfMonth();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = property24.getAsText(locale25);
        java.lang.String str28 = locale15.getDisplayScript(locale25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        boolean boolean34 = dateTime32.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime32.toMutableDateTime(dateTimeZone35);
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = dateTimeZone35.getShortName((long) (short) 100, locale39);
        java.lang.String str41 = locale39.getLanguage();
        java.lang.String str42 = locale15.getDisplayCountry(locale39);
        java.lang.String str43 = locale15.getDisplayScript();
        java.lang.String str44 = locale0.getDisplayScript(locale15);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TW" + "'", str3, "TW");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Mon Feb 21 15:14:56 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "21" + "'", str27, "21");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.052" + "'", str40, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test16498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16498");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = dateTime5.withZone(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DateTime dateTime18 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        int int20 = dateTime18.getMinuteOfHour();
        org.joda.time.Chronology chronology21 = dateTime18.getChronology();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.minus(readablePeriod22);
        java.lang.String str24 = dateTime23.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-21T15:14:56.643+00:00:00.052" + "'", str24, "2022-02-21T15:14:56.643+00:00:00.052");
    }

    @Test
    public void test16499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16499");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        java.lang.String str6 = dateTimeField4.getAsShortText((-31948L));
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear((int) (short) 100);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str15 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField4.getAsText(54391, locale17);
        long long20 = dateTimeField4.roundHalfFloor(1586790817445L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "28" + "'", str6, "28");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "54391" + "'", str18, "54391");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1586790817000L + "'", long20 == 1586790817000L);
    }

    @Test
    public void test16500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16500");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology11.seconds();
        org.joda.time.DurationField durationField16 = chronology11.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.millisOfSecond();
        org.joda.time.DurationField durationField18 = chronology11.years();
        org.joda.time.Chronology chronology19 = chronology11.withUTC();
        org.joda.time.DurationField durationField20 = chronology19.months();
        boolean boolean21 = durationFieldType8.isSupported(chronology19);
        org.joda.time.DateTime dateTime23 = dateTime5.withFieldAdded(durationFieldType8, 54370010);
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfDay();
        int int25 = dateTime23.getMillisOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 62096661 + "'", int25 == 62096661);
    }
}

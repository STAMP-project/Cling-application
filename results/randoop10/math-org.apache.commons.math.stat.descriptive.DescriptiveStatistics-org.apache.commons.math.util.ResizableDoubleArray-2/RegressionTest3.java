import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer5.asShortBuffer();
        java.nio.ShortBuffer shortBuffer8 = shortBuffer7.slice();
        boolean boolean9 = shortBuffer8.isDirect();
        java.lang.String str10 = shortBuffer8.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.nio.ByteBufferAsShortBufferB[pos=0 lim=0 cap=0]" + "'", str10, "java.nio.ByteBufferAsShortBufferB[pos=0 lim=0 cap=0]");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, 0, 16);
        java.time.LocalTime localTime7 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime8 = localDate6.atTime(localTime7);
        java.time.LocalDate localDate10 = localDate6.withMonth(1);
        long long11 = localDate10.toEpochDay();
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalTime localTime18 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime19 = localDate17.atTime(localTime18);
        java.time.LocalDate localDate21 = localDate17.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod22 = localDate10.until((java.time.chrono.ChronoLocalDate) localDate21);
        java.time.LocalDate localDate24 = localDate10.plusDays((long) (short) 0);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.MAX;
        java.lang.String str29 = zoneOffset28.getId();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset28);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.lang.String str34 = zoneOffset33.getId();
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset33);
        boolean boolean36 = localDateTime30.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.format.DateTimeFormatter dateTimeFormatter37 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str38 = localDateTime35.format(dateTimeFormatter37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int40 = localDateTime35.get((java.time.temporal.TemporalField) chronoField39);
        java.time.ZoneId zoneId41 = java.time.ZoneId.systemDefault();
        java.lang.String str42 = zoneId41.getId();
        java.time.ZonedDateTime zonedDateTime43 = java.time.ZonedDateTime.now(zoneId41);
        java.time.ZonedDateTime zonedDateTime45 = zonedDateTime43.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit46 = null;
        boolean boolean47 = zonedDateTime43.isSupported(temporalUnit46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange49 = zonedDateTime43.range((java.time.temporal.TemporalField) chronoField48);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime51 = java.time.LocalTime.MAX;
        long long52 = chronoField50.getFrom((java.time.temporal.TemporalAccessor) localTime51);
        boolean boolean53 = zonedDateTime43.isSupported((java.time.temporal.TemporalField) chronoField50);
        java.time.ZoneId zoneId54 = java.time.ZoneId.systemDefault();
        java.lang.String str55 = zoneId54.getId();
        java.lang.String str56 = zoneId54.getId();
        java.time.ZonedDateTime zonedDateTime57 = zonedDateTime43.withZoneSameInstant(zoneId54);
        long long58 = chronoField39.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime43);
        java.time.temporal.TemporalUnit temporalUnit59 = chronoField39.getRangeUnit();
        java.time.LocalDate localDate60 = localDate24.plus((long) 1969, temporalUnit59);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration61 = java.time.Duration.of((long) (-34), temporalUnit59);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit must not have an estimated duration");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-719147L) + "'", long11 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronoPeriod22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+18:00" + "'", str29, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+18:00" + "'", str34, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str38, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField39.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(zoneId41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Etc/UTC" + "'", str42, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField48.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField50.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 23L + "'", long52 == 23L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(zoneId54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Etc/UTC" + "'", str55, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Etc/UTC" + "'", str56, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 8L + "'", long58 == 8L);
        org.junit.Assert.assertTrue("'" + temporalUnit59 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit59.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.FRIDAY;
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap1 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean3 = strMapMap1.containsKey((java.lang.Object) isoChronology2);
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal5 = null;
        java.time.temporal.Temporal temporal6 = duration4.subtractFrom(temporal5);
        long long7 = duration4.toDays();
        boolean boolean8 = strMapMap1.contains((java.lang.Object) duration4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray11 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, zoneOffsetTransitionArray11);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray17 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList18, zoneOffsetTransitionRuleArray17);
        java.time.zone.ZoneRules zoneRules20 = java.time.zone.ZoneRules.of(zoneOffset9, zoneOffset10, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList18);
        java.time.Clock clock21 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset9);
        java.time.format.TextStyle textStyle22 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = zoneOffset9.getDisplayName(textStyle22, locale23);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray25 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, zoneOffsetTransitionArray25);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream28 = zoneOffsetTransitionList26.stream();
        int int29 = zoneOffsetTransitionList26.size();
        java.lang.Cloneable cloneable30 = strMapMap1.getOrDefault((java.lang.Object) textStyle22, (java.lang.Cloneable) zoneOffsetTransitionList26);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String str33 = locale32.toLanguageTag();
        java.lang.String str34 = chronoField31.getDisplayName(locale32);
        java.lang.String str35 = locale32.getScript();
        java.lang.String str36 = dayOfWeek0.getDisplayName(textStyle22, locale32);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.text.Format format39 = dateTimeFormatter38.toFormat();
        java.time.format.DateTimeFormatter dateTimeFormatter40 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.text.Format format41 = dateTimeFormatter40.toFormat();
        java.text.Format[] formatArray42 = new java.text.Format[] { format39, format41 };
        java.text.Format[] formatArray43 = strSet37.toArray(formatArray42);
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNull(temporal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertTrue("'" + textStyle22 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle22.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+18:00" + "'", str24, "+18:00");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(cloneable30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField31.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en-GB" + "'", str33, "en-GB");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AlignedWeekOfYear" + "'", str34, "AlignedWeekOfYear");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Fri" + "'", str36, "Fri");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(format39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(format41);
        org.junit.Assert.assertNotNull(formatArray42);
        org.junit.Assert.assertNotNull(formatArray43);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime91.plusWeeks((long) (short) 10);
        java.time.Month month94 = offsetDateTime91.getMonth();
        java.time.LocalDateTime localDateTime95 = offsetDateTime91.toLocalDateTime();
        java.time.chrono.Chronology chronology96 = localDateTime95.getChronology();
        java.time.LocalDateTime localDateTime98 = localDateTime95.plusDays((long) 1500);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertTrue("'" + month94 + "' != '" + java.time.Month.JANUARY + "'", month94.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(localDateTime98);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.LocalDateTime localDateTime3 = localDateTime0.minusMinutes(15032385535000L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.lang.String str27 = localDateTime20.toString();
        java.time.chrono.Chronology chronology28 = localDateTime20.getChronology();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plusYears((long) (short) 0);
        java.time.Duration duration32 = java.time.Duration.ofSeconds((long) 0);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime33 = localDateTime30.minus((java.time.temporal.TemporalAmount) duration32);
        java.time.Duration duration35 = duration32.minusSeconds(35L);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str27, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime33);
        org.junit.Assert.assertNotNull(duration35);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.format.DecimalStyle decimalStyle1 = java.time.format.DecimalStyle.ofDefaultLocale();
        java.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDecimalStyle(decimalStyle1);
        java.util.Locale locale4 = new java.util.Locale("/");
        java.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withLocale(locale4);
        java.time.Month month6 = java.time.Month.JANUARY;
        java.time.Month month7 = month6.firstMonthOfQuarter();
        java.time.Month month8 = month7.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery9 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period10 = month7.query(periodTemporalQuery9);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate12 = localDateTime11.toLocalDate();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate16 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset15);
        java.time.Month month18 = java.time.Month.JANUARY;
        java.time.Month month19 = month18.firstMonthOfQuarter();
        java.time.Month month20 = month19.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery21 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period22 = month19.query(periodTemporalQuery21);
        java.time.Period period23 = zoneOffset15.query(periodTemporalQuery21);
        java.time.Period period24 = localDateTime11.query(periodTemporalQuery21);
        java.time.Period period25 = month7.query(periodTemporalQuery21);
        java.text.Format format26 = dateTimeFormatter2.toFormat(periodTemporalQuery21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = format26.parseObject("19700111");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Text '19700111' could not be parsed at index 0");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(decimalStyle1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertEquals(locale4.toString(), "/");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + month6 + "' != '" + java.time.Month.JANUARY + "'", month6.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.JANUARY + "'", month7.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.JANUARY + "'", month8.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + month18 + "' != '" + java.time.Month.JANUARY + "'", month18.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month19 + "' != '" + java.time.Month.JANUARY + "'", month19.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month20 + "' != '" + java.time.Month.JANUARY + "'", month20.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(format26);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withYear((int) (short) 1);
        boolean boolean11 = zonedDateTime5.equals((java.lang.Object) zonedDateTime10);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime5.minusMinutes((long) (short) 0);
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime5.plusYears(28L);
        java.time.LocalDate localDate17 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.now(zoneId18);
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime20.withYear((int) (short) 1);
        java.time.temporal.Temporal temporal23 = localDate17.adjustInto((java.time.temporal.Temporal) zonedDateTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        long long25 = temporal23.getLong((java.time.temporal.TemporalField) chronoField24);
        java.lang.String str26 = chronoField24.toString();
        java.time.temporal.ValueRange valueRange27 = zonedDateTime15.range((java.time.temporal.TemporalField) chronoField24);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.lang.String str31 = zoneOffset30.getId();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset30);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.lang.String str36 = zoneOffset35.getId();
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset35);
        boolean boolean38 = localDateTime32.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.format.DateTimeFormatter dateTimeFormatter39 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str40 = localDateTime37.format(dateTimeFormatter39);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int42 = localDateTime37.get((java.time.temporal.TemporalField) chronoField41);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.MAX;
        java.lang.String str46 = zoneOffset45.getId();
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset45);
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.MAX;
        java.lang.String str51 = zoneOffset50.getId();
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset50);
        boolean boolean53 = localDateTime47.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime52);
        java.time.format.DateTimeFormatter dateTimeFormatter54 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str55 = localDateTime52.format(dateTimeFormatter54);
        boolean boolean56 = localDateTime37.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime52);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean58 = localDateTime37.isSupported((java.time.temporal.TemporalField) chronoField57);
        java.time.Period period60 = java.time.Period.ofYears((int) '\000');
        java.time.Period period62 = period60.minusDays((long) (short) 0);
        java.time.LocalDateTime localDateTime63 = localDateTime37.plus((java.time.temporal.TemporalAmount) period60);
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.MAX;
        java.time.Clock clock65 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset64);
        java.time.ZoneId zoneId66 = java.time.ZoneId.systemDefault();
        java.lang.String str67 = zoneId66.getId();
        java.lang.String str68 = zoneId66.getId();
        java.time.ZonedDateTime zonedDateTime69 = java.time.ZonedDateTime.ofInstant(localDateTime63, zoneOffset64, zoneId66);
        long long70 = chronoField24.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime69);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(temporal23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 11L + "'", long25 == 11L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DayOfYear" + "'", str26, "DayOfYear");
        org.junit.Assert.assertNotNull(valueRange27);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+18:00" + "'", str31, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+18:00" + "'", str36, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str40, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField41.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+18:00" + "'", str46, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+18:00" + "'", str51, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str55, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField57.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(clock65);
        org.junit.Assert.assertNotNull(zoneId66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Etc/UTC" + "'", str67, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Etc/UTC" + "'", str68, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.isReadOnly();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer11 = byteBuffer5.putLong(24, 42L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime91.plusYears((long) 'a');
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime91.minusMonths((long) '0');
        java.time.Instant instant96 = offsetDateTime91.toInstant();
        java.time.temporal.ChronoField chronoField97 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        // The following exception was thrown during execution in test generation
        try {
            int int98 = instant96.get((java.time.temporal.TemporalField) chronoField97);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: ClockHourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertNotNull(instant96);
        org.junit.Assert.assertTrue("'" + chronoField97 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField97.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        java.util.stream.LongStream.Builder builder0 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream.Builder builder2 = builder0.add((long) '#');
        java.util.stream.LongStream.Builder builder4 = builder2.add((long) (short) 1);
        builder4.accept((long) '+');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        java.net.URI uRI1 = new java.net.URI("19700111");
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        longStream2.close();
        java.lang.Runnable runnable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = longStream2.onClose(runnable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) 4);
        java.util.stream.LongStream longStream2 = longStream1.sequential();
        java.util.stream.LongStream longStream4 = longStream1.skip((long) 16384);
        java.util.LongSummaryStatistics longSummaryStatistics5 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream8 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics9 = longStream8.summaryStatistics();
        java.util.function.IntConsumer intConsumer10 = longSummaryStatistics5.andThen((java.util.function.IntConsumer) longSummaryStatistics9);
        longStream4.forEachOrdered((java.util.function.LongConsumer) longSummaryStatistics9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream13 = longStream4.limit((long) 13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertEquals(longSummaryStatistics5.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(longSummaryStatistics9);
        org.junit.Assert.assertEquals(longSummaryStatistics9.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer10);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.ZonedDateTime zonedDateTime1 = java.time.ZonedDateTime.now(clock0);
        int int2 = zonedDateTime1.getMinute();
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(zonedDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 14 + "'", int2 == 14);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator1 = java.util.function.UnaryOperator.identity();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream5 = zoneOffsetTransitionList3.stream();
        java.io.Serializable serializable6 = serializableUnaryOperator1.apply((java.io.Serializable) zoneOffsetTransitionList3);
        java.io.Serializable serializable8 = serializableUnaryOperator1.apply((java.io.Serializable) 100L);
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator9 = java.util.function.UnaryOperator.identity();
        java.util.function.Function<java.lang.SecurityException, java.io.Serializable> securityExceptionFunction10 = serializableUnaryOperator1.compose((java.util.function.Function<java.io.Serializable, java.io.Serializable>) serializableUnaryOperator9);
        java.net.URISyntaxException uRISyntaxException13 = new java.net.URISyntaxException("italiano", "");
        java.lang.String str14 = uRISyntaxException13.getReason();
        java.net.URISyntaxException uRISyntaxException17 = new java.net.URISyntaxException("italiano", "");
        uRISyntaxException13.addSuppressed((java.lang.Throwable) uRISyntaxException17);
        java.io.Serializable serializable19 = serializableUnaryOperator9.apply((java.io.Serializable) uRISyntaxException13);
        int int20 = uRISyntaxException13.getIndex();
        java.security.GeneralSecurityException generalSecurityException21 = new java.security.GeneralSecurityException("P1968Y1D", (java.lang.Throwable) uRISyntaxException13);
        org.junit.Assert.assertNotNull(serializableUnaryOperator1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream5);
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 100L + "'", serializable8, 100L);
        org.junit.Assert.assertNotNull(serializableUnaryOperator9);
        org.junit.Assert.assertNotNull(securityExceptionFunction10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(serializable19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.format.DecimalStyle decimalStyle1 = java.time.format.DecimalStyle.ofDefaultLocale();
        java.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDecimalStyle(decimalStyle1);
        java.util.Locale locale4 = new java.util.Locale("/");
        java.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withLocale(locale4);
        java.time.format.DateTimeFormatter dateTimeFormatter7 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.format.DecimalStyle decimalStyle8 = java.time.format.DecimalStyle.ofDefaultLocale();
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDecimalStyle(decimalStyle8);
        java.util.Locale locale11 = new java.util.Locale("/");
        java.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        java.time.Month month13 = java.time.Month.JANUARY;
        java.time.Month month14 = month13.firstMonthOfQuarter();
        java.time.Month month15 = month14.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery16 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period17 = month14.query(periodTemporalQuery16);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate19 = localDateTime18.toLocalDate();
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate23 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset22);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset22);
        java.time.Month month25 = java.time.Month.JANUARY;
        java.time.Month month26 = month25.firstMonthOfQuarter();
        java.time.Month month27 = month26.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery28 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period29 = month26.query(periodTemporalQuery28);
        java.time.Period period30 = zoneOffset22.query(periodTemporalQuery28);
        java.time.Period period31 = localDateTime18.query(periodTemporalQuery28);
        java.time.Period period32 = month14.query(periodTemporalQuery28);
        java.text.Format format33 = dateTimeFormatter9.toFormat(periodTemporalQuery28);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period34 = dateTimeFormatter2.parse((java.lang.CharSequence) "java.nio.HeapFloatBuffer[pos=256 lim=256 cap=256]", periodTemporalQuery28);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'java.nio.HeapFloatBuffer[pos=256 lim=256 cap=256]' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(decimalStyle1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertEquals(locale4.toString(), "/");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals(locale11.toString(), "/");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + month13 + "' != '" + java.time.Month.JANUARY + "'", month13.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month14 + "' != '" + java.time.Month.JANUARY + "'", month14.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.JANUARY + "'", month15.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + month25 + "' != '" + java.time.Month.JANUARY + "'", month25.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.JANUARY + "'", month26.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month27 + "' != '" + java.time.Month.JANUARY + "'", month27.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(format33);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration3.subtractFrom(temporal4);
        long long6 = duration3.toDays();
        boolean boolean7 = strMapMap0.contains((java.lang.Object) duration3);
        java.time.format.DateTimeFormatter dateTimeFormatter8 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable9 = strMapMap0.get((java.lang.Object) dateTimeFormatter8);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet10 = strMapMap0.keySet();
        java.time.LocalDate localDate12 = java.time.LocalDate.ofEpochDay((long) 10);
        java.lang.Cloneable cloneable13 = strMapMap0.remove((java.lang.Object) localDate12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime15 = java.time.LocalTime.MAX;
        long long16 = chronoField14.getFrom((java.time.temporal.TemporalAccessor) localTime15);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDate12.get((java.time.temporal.TemporalField) chronoField14);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: ClockHourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(cloneable9);
        org.junit.Assert.assertNotNull(strMapSet10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNull(cloneable13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 23L + "'", long16 == 23L);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.lang.Object obj13 = properties1.setProperty("P0D", "DIRECT");
        java.util.Set<java.lang.Object> objSet14 = properties1.keySet();
        properties1.clear();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray16 = new org.apache.commons.math.util.ResizableDoubleArray();
        resizableDoubleArray16.addElement((-1.0d));
        resizableDoubleArray16.contract();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap20 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.lang.String str24 = zoneOffset23.getId();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.MAX;
        java.lang.String str29 = zoneOffset28.getId();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset28);
        boolean boolean31 = localDateTime25.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.lang.String str33 = zoneOffset32.getId();
        java.time.ZonedDateTime zonedDateTime34 = java.time.ZonedDateTime.of(localDateTime30, (java.time.ZoneId) zoneOffset32);
        java.util.Date date36 = new java.util.Date((long) (byte) 1);
        java.lang.Cloneable cloneable37 = strMapMap20.getOrDefault((java.lang.Object) localDateTime30, (java.lang.Cloneable) date36);
        java.lang.Object obj38 = properties1.getOrDefault((java.lang.Object) resizableDoubleArray16, (java.lang.Object) cloneable37);
        double[] doubleArray39 = resizableDoubleArray16.getElements();
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+18:00" + "'", str24, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+18:00" + "'", str29, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+18:00" + "'", str33, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(cloneable37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0]");
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate4 = java.time.LocalDate.ofEpochDay((long) 10);
        int int5 = localDate2.compareTo((java.time.chrono.ChronoLocalDate) localDate4);
        // The following exception was thrown during execution in test generation
        try {
            long long6 = chronoField0.getFrom((java.time.temporal.TemporalAccessor) localDate4);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: ClockHourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        double double1 = doubleSummaryStatistics0.getMin();
        double double2 = doubleSummaryStatistics0.getMin();
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.LocalDate localDate18 = localDate9.minusWeeks((long) 100);
        java.time.chrono.IsoChronology isoChronology19 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra21 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate24 = isoChronology19.dateYearDay((java.time.chrono.Era) isoEra21, 0, 16);
        java.time.Duration duration25 = java.time.Duration.ZERO;
        java.time.LocalDate localDate26 = localDate24.plus((java.time.temporal.TemporalAmount) duration25);
        java.time.LocalDateTime localDateTime27 = localDate26.atStartOfDay();
        java.time.LocalDate localDate29 = localDate26.plusYears((long) (byte) -1);
        java.time.LocalDate localDate30 = localDate18.with((java.time.temporal.TemporalAdjuster) localDate26);
        int int31 = localDate18.lengthOfMonth();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(isoChronology19);
        org.junit.Assert.assertTrue("'" + isoEra21 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra21.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 28 + "'", int31 == 28);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj4 = charBuffer3.array();
        java.nio.CharBuffer charBuffer6 = charBuffer3.append('.');
        java.lang.String str7 = charBuffer3.toString();
        java.nio.CharBuffer charBuffer9 = charBuffer3.append('a');
        java.io.PrintWriter printWriter12 = printWriter1.append((java.lang.CharSequence) charBuffer3, 0, 0);
        java.nio.CharBuffer charBuffer14 = java.nio.CharBuffer.allocate(16);
        int int15 = charBuffer14.limit();
        char char16 = charBuffer14.get();
        char[] charArray21 = new char[] { 'x', 'a', '4', '.' };
        java.nio.CharBuffer charBuffer22 = charBuffer14.get(charArray21);
        // The following exception was thrown during execution in test generation
        try {
            printWriter12.write(charArray21, 1, 16384);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str7, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + '\000' + "'", char16 == '\000');
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer22);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        java.time.format.DecimalStyle decimalStyle0 = java.time.format.DecimalStyle.STANDARD;
        char char1 = decimalStyle0.getZeroDigit();
        char char2 = decimalStyle0.getZeroDigit();
        char char3 = decimalStyle0.getNegativeSign();
        java.time.format.DecimalStyle decimalStyle5 = decimalStyle0.withDecimalSeparator('\uffff');
        java.time.format.DecimalStyle decimalStyle7 = decimalStyle0.withDecimalSeparator('u');
        org.junit.Assert.assertNotNull(decimalStyle0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '0' + "'", char1 == '0');
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '0' + "'", char2 == '0');
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '-' + "'", char3 == '-');
        org.junit.Assert.assertNotNull(decimalStyle5);
        org.junit.Assert.assertNotNull(decimalStyle7);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        boolean boolean16 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        boolean boolean17 = localDateTime5.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray21 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, zoneOffsetTransitionArray21);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray24 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, zoneOffsetTransitionArray24);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray27 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList28, zoneOffsetTransitionRuleArray27);
        java.time.zone.ZoneRules zoneRules30 = java.time.zone.ZoneRules.of(zoneOffset19, zoneOffset20, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList28);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray45 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, zoneOffsetTransitionArray45);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray51 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52, zoneOffsetTransitionRuleArray51);
        java.time.zone.ZoneRules zoneRules54 = java.time.zone.ZoneRules.of(zoneOffset43, zoneOffset44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52);
        boolean boolean55 = zoneOffsetTransitionList34.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49);
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray58 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList59 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList59, zoneOffsetTransitionArray58);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray61 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList62 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, zoneOffsetTransitionArray61);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray64 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList65 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList65, zoneOffsetTransitionRuleArray64);
        java.time.zone.ZoneRules zoneRules67 = java.time.zone.ZoneRules.of(zoneOffset56, zoneOffset57, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList59, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList65);
        int int69 = zoneOffsetTransitionList62.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray72 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList73 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList73, zoneOffsetTransitionArray72);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray75 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList76 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, zoneOffsetTransitionArray75);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray78 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList79 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList79, zoneOffsetTransitionRuleArray78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset70, zoneOffset71, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList73, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList79);
        java.time.zone.ZoneRules zoneRules82 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList79);
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.MAX;
        java.lang.String str86 = zoneOffset85.getId();
        java.time.LocalDateTime localDateTime87 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset85);
        int int88 = zoneOffset19.compareTo(zoneOffset85);
        java.time.OffsetDateTime offsetDateTime89 = java.time.OffsetDateTime.of(localDateTime10, zoneOffset19);
        java.time.LocalTime localTime90 = offsetDateTime89.toLocalTime();
        java.time.OffsetDateTime offsetDateTime92 = offsetDateTime89.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime94 = offsetDateTime92.plusYears((long) 'a');
        int int95 = offsetDateTime94.getNano();
        java.time.OffsetDateTime offsetDateTime97 = offsetDateTime94.minusMinutes((long) 48);
        boolean boolean98 = offsetDateTime0.isEqual(offsetDateTime94);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneRules82);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+18:00" + "'", str86, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime89);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertNotNull(offsetDateTime92);
        org.junit.Assert.assertNotNull(offsetDateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 120 + "'", int95 == 120);
        org.junit.Assert.assertNotNull(offsetDateTime97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.nio.file.Path path25 = path18.relativize(path24);
        boolean boolean26 = path11.startsWith(path18);
        java.io.File file29 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long30 = file29.lastModified();
        java.net.URL uRL31 = file29.toURL();
        java.nio.file.Path path32 = file29.toPath();
        java.io.File file35 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long36 = file35.lastModified();
        java.net.URL uRL37 = file35.toURL();
        java.nio.file.Path path38 = file35.toPath();
        java.nio.file.Path path39 = path32.relativize(path38);
        java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer43 = charBuffer41.append((java.lang.CharSequence) "Etc/UTC");
        int int44 = charBuffer43.arrayOffset();
        boolean boolean45 = path38.equals((java.lang.Object) int44);
        java.nio.file.Path path46 = path18.relativize(path38);
        java.nio.file.Path path48 = path18.resolve("en-GB");
        boolean boolean50 = path18.startsWith("US-ASCII");
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals(file29.getParent(), "/");
        org.junit.Assert.assertEquals(file29.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(uRL31);
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertEquals(file35.getParent(), "/");
        org.junit.Assert.assertEquals(file35.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(uRL37);
        org.junit.Assert.assertEquals(uRL37.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path38);
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(path46);
        org.junit.Assert.assertNotNull(path48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        java.time.LocalTime localTime0 = java.time.LocalTime.NOON;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ISO_DATE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = localTime0.format(dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean6 = localDateTime4.isSupported((java.time.temporal.TemporalField) chronoField5);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime8 = localDateTime4.withSecond((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): -1");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField5.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.OptionalDouble optionalDouble2 = doubleStream1.findAny();
        // The following exception was thrown during execution in test generation
        try {
            java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = doubleStream1.summaryStatistics();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        java.net.NetworkInterface networkInterface3 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics4.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics4.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics4.getGeometricMeanImpl();
        double double9 = descriptiveStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getSkewnessImpl();
        boolean boolean11 = networkInterface3.equals((java.lang.Object) descriptiveStatistics4);
        int int12 = networkInterface3.getMTU();
        java.util.Locale locale15 = new java.util.Locale("DecimalStyle[0+-.]", "Di");
        boolean boolean16 = networkInterface3.equals((java.lang.Object) "DecimalStyle[0+-.]");
        boolean boolean17 = networkInterface3.supportsMulticast();
        boolean boolean18 = networkInterface3.isVirtual();
        java.time.Period period20 = java.time.Period.ofYears((int) '\000');
        java.time.chrono.Chronology chronology21 = period20.getChronology();
        java.time.Period period23 = period20.plusYears((long) 'x');
        java.time.Period period25 = period23.multipliedBy(31);
        java.lang.String str26 = period25.toString();
        boolean boolean27 = networkInterface3.equals((java.lang.Object) str26);
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(networkInterface3);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1500 + "'", int12 == 1500);
        org.junit.Assert.assertEquals(locale15.toString(), "decimalstyle[0+-.]_DI");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P3720Y" + "'", str26, "P3720Y");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) (short) 10);
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        fieldPosition2.setBeginIndex((int) '4');
        int int6 = fieldPosition2.getBeginIndex();
        int int7 = fieldPosition2.getEndIndex();
        org.junit.Assert.assertNull(field3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant92 = offsetDateTime91.toInstant();
        java.time.OffsetDateTime offsetDateTime94 = offsetDateTime91.minusHours((long) 48);
        java.time.ZoneOffset zoneOffset95 = java.time.ZoneOffset.from((java.time.temporal.TemporalAccessor) offsetDateTime94);
        java.time.LocalDate localDate96 = offsetDateTime94.toLocalDate();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(offsetDateTime94);
        org.junit.Assert.assertNotNull(zoneOffset95);
        org.junit.Assert.assertNotNull(localDate96);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration3.subtractFrom(temporal4);
        long long6 = duration3.toDays();
        boolean boolean7 = strMapMap0.contains((java.lang.Object) duration3);
        java.time.format.DateTimeFormatter dateTimeFormatter8 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable9 = strMapMap0.get((java.lang.Object) dateTimeFormatter8);
        java.time.chrono.Chronology chronology10 = dateTimeFormatter8.getChronology();
        java.time.Clock clock11 = java.time.Clock.systemUTC();
        java.time.ZonedDateTime zonedDateTime12 = java.time.ZonedDateTime.now(clock11);
        java.time.Duration duration13 = java.time.Duration.ZERO;
        java.time.Duration duration14 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal15 = null;
        java.time.temporal.Temporal temporal16 = duration14.subtractFrom(temporal15);
        long long17 = duration14.toDays();
        java.time.Duration duration18 = duration13.plus(duration14);
        java.time.Clock clock19 = java.time.Clock.offset(clock11, duration13);
        java.time.chrono.ChronoLocalDate chronoLocalDate20 = chronology10.dateNow(clock11);
        java.time.OffsetTime offsetTime21 = java.time.OffsetTime.now(clock11);
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(cloneable9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNull(temporal16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(clock19);
        org.junit.Assert.assertNotNull(chronoLocalDate20);
        org.junit.Assert.assertNotNull(offsetTime21);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics3 = longStream2.summaryStatistics();
        java.util.stream.LongStream.Builder builder4 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream.Builder builder6 = builder4.add((long) '#');
        java.util.stream.LongStream.Builder builder8 = builder6.add(1645434846L);
        java.util.stream.LongStream.Builder builder10 = builder6.add(1645434863000L);
        // The following exception was thrown during execution in test generation
        try {
            longStream2.forEachOrdered((java.util.function.LongConsumer) builder6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longSummaryStatistics3);
        org.junit.Assert.assertEquals(longSummaryStatistics3.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = java.time.OffsetTime.of(localTime0, zoneOffset2);
        java.time.OffsetTime offsetTime15 = offsetTime13.minusHours(0L);
        java.time.LocalTime localTime16 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray19 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList20 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, zoneOffsetTransitionArray19);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray22 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList23 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, zoneOffsetTransitionArray22);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray25 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26, zoneOffsetTransitionRuleArray25);
        java.time.zone.ZoneRules zoneRules28 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26);
        java.time.OffsetTime offsetTime29 = localTime16.atOffset(zoneOffset17);
        java.time.temporal.Temporal temporal30 = offsetTime13.adjustInto((java.time.temporal.Temporal) offsetTime29);
        int int31 = offsetTime13.getMinute();
        java.time.OffsetTime offsetTime33 = offsetTime13.minusSeconds((long) 1500);
        java.time.OffsetTime offsetTime35 = offsetTime13.minusNanos(1645434867L);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.chrono.IsoChronology isoChronology37 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra39 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate42 = isoChronology37.dateYearDay((java.time.chrono.Era) isoEra39, 0, 16);
        java.time.LocalTime localTime43 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime44 = localDate42.atTime(localTime43);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray50 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, zoneOffsetTransitionArray50);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray53 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList54 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList54, zoneOffsetTransitionRuleArray53);
        java.time.zone.ZoneRules zoneRules56 = java.time.zone.ZoneRules.of(zoneOffset45, zoneOffset46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList54);
        long long57 = localDateTime44.toEpochSecond(zoneOffset45);
        java.time.LocalTime localTime58 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset45);
        java.time.temporal.ValueRange valueRange59 = chronoField36.rangeRefinedBy((java.time.temporal.TemporalAccessor) localTime58);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.time.temporal.TemporalUnit temporalUnit61 = chronoField60.getRangeUnit();
        java.time.LocalTime localTime62 = localTime58.truncatedTo(temporalUnit61);
        boolean boolean63 = offsetTime13.isSupported(temporalUnit61);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(offsetTime29);
        org.junit.Assert.assertNotNull(temporal30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(offsetTime35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField36.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertNotNull(isoChronology37);
        org.junit.Assert.assertTrue("'" + isoEra39 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra39.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-62134279201L) + "'", long57 == (-62134279201L));
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(valueRange59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField60.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + temporalUnit61 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit61.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.lang.String str5 = file2.getPath();
        boolean boolean6 = file2.isAbsolute();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/1970-01-01T18:01:37.00000012" + "'", str5, "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        boolean boolean1 = strMap0.isEmpty();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate3 = java.util.function.Predicate.isEqual((java.lang.Object) strMap0);
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate4 = resolverStylePredicate3.negate();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        boolean boolean6 = strMap5.isEmpty();
        java.util.Set<java.lang.String> strSet7 = strMap5.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate8 = java.util.function.Predicate.isEqual((java.lang.Object) strMap5);
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate9 = resolverStylePredicate8.negate();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate10 = resolverStylePredicate8.negate();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate11 = resolverStylePredicate3.and(resolverStylePredicate8);
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(resolverStylePredicate3);
        org.junit.Assert.assertNotNull(resolverStylePredicate4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(resolverStylePredicate8);
        org.junit.Assert.assertNotNull(resolverStylePredicate9);
        org.junit.Assert.assertNotNull(resolverStylePredicate10);
        org.junit.Assert.assertNotNull(resolverStylePredicate11);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        java.net.URLConnection.setDefaultRequestProperty("x-windows-iso2022jp", "java.nio.channels.AsynchronousCloseException");
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.println('4');
        printWriter1.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter9.print((double) 37);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        java.util.OptionalInt optionalInt2 = intStream1.max();
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = optionalInt2.equals(obj3);
        java.lang.String str5 = optionalInt2.toString();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalInt.empty" + "'", str5, "OptionalInt.empty");
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.println('4');
        printWriter1.close();
        printWriter1.flush();
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneId zoneId15 = java.time.ZoneId.systemDefault();
        java.lang.String str16 = zoneId15.getId();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.now(zoneId15);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime17.withZoneSameInstant(zoneId18);
        java.time.ZonedDateTime zonedDateTime21 = localDateTime9.atZone(zoneId18);
        java.time.zone.ZoneRules zoneRules22 = zoneId18.getRules();
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList23 = zoneRules22.getTransitionRules();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = zoneRules22.getTransitions();
        // The following exception was thrown during execution in test generation
        try {
            zoneOffsetTransitionList24.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList23);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList24);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        java.time.Duration duration1 = java.time.Duration.ofMillis(10000L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        java.util.MissingResourceException missingResourceException3 = new java.util.MissingResourceException("Optional.empty", "P0D", "4096-01-16");
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.ofEpochDay((long) 10);
        int int4 = localDate1.compareTo((java.time.chrono.ChronoLocalDate) localDate3);
        java.time.chrono.IsoChronology isoChronology5 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate10 = isoChronology5.dateYearDay((java.time.chrono.Era) isoEra7, 0, 16);
        java.time.LocalTime localTime11 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime12 = localDate10.atTime(localTime11);
        java.time.LocalDate localDate14 = localDate10.withMonth(1);
        boolean boolean15 = localDate10.isLeapYear();
        java.time.chrono.ChronoPeriod chronoPeriod16 = localDate3.until((java.time.chrono.ChronoLocalDate) localDate10);
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer19 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj20 = charBuffer19.array();
        boolean boolean21 = isoChronology17.equals(obj20);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap22 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology23 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean24 = strMapMap22.containsKey((java.lang.Object) isoChronology23);
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate28 = isoChronology23.dateYearDay((java.time.chrono.Era) isoEra25, (-1), 10);
        int int30 = isoChronology17.prolepticYear((java.time.chrono.Era) isoEra25, 0);
        java.time.Month month31 = java.time.Month.JANUARY;
        java.time.Month month32 = month31.firstMonthOfQuarter();
        java.time.Month month33 = month32.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean35 = month33.isSupported((java.time.temporal.TemporalField) chronoField34);
        boolean boolean36 = isoEra25.isSupported((java.time.temporal.TemporalField) chronoField34);
        boolean boolean37 = localDate3.isSupported((java.time.temporal.TemporalField) chronoField34);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap38 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology39 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean40 = strMapMap38.containsKey((java.lang.Object) isoChronology39);
        java.time.Duration duration41 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal42 = null;
        java.time.temporal.Temporal temporal43 = duration41.subtractFrom(temporal42);
        long long44 = duration41.toDays();
        boolean boolean45 = strMapMap38.contains((java.lang.Object) duration41);
        java.time.format.DateTimeFormatter dateTimeFormatter46 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable47 = strMapMap38.get((java.lang.Object) dateTimeFormatter46);
        java.time.chrono.Chronology chronology48 = dateTimeFormatter46.getChronology();
        java.time.Clock clock49 = java.time.Clock.systemUTC();
        java.time.ZonedDateTime zonedDateTime50 = java.time.ZonedDateTime.now(clock49);
        java.time.Duration duration51 = java.time.Duration.ZERO;
        java.time.Duration duration52 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal53 = null;
        java.time.temporal.Temporal temporal54 = duration52.subtractFrom(temporal53);
        long long55 = duration52.toDays();
        java.time.Duration duration56 = duration51.plus(duration52);
        java.time.Clock clock57 = java.time.Clock.offset(clock49, duration51);
        java.time.chrono.ChronoLocalDate chronoLocalDate58 = chronology48.dateNow(clock49);
        boolean boolean59 = localDate3.isEqual(chronoLocalDate58);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra7.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronoPeriod16);
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(isoChronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra25.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + month31 + "' != '" + java.time.Month.JANUARY + "'", month31.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month32 + "' != '" + java.time.Month.JANUARY + "'", month32.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month33 + "' != '" + java.time.Month.JANUARY + "'", month33.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(isoChronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNull(temporal43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNull(cloneable47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(clock49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNull(temporal54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(clock57);
        org.junit.Assert.assertNotNull(chronoLocalDate58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str2 = locale0.getExtension('a');
        java.lang.String str3 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DE" + "'", str3, "DE");
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.chrono.Chronology chronology13 = dateTimeFormatter11.getChronology();
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.LocalDate localDate23 = localDate19.withMonth(1);
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = chronology13.date((java.time.temporal.TemporalAccessor) localDate19);
        java.time.LocalDate localDate26 = localDate19.plusMonths(0L);
        java.time.LocalDate localDate28 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate30 = java.time.LocalDate.ofEpochDay((long) 10);
        int int31 = localDate28.compareTo((java.time.chrono.ChronoLocalDate) localDate30);
        java.time.chrono.IsoChronology isoChronology32 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra34 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate37 = isoChronology32.dateYearDay((java.time.chrono.Era) isoEra34, 0, 16);
        java.time.LocalTime localTime38 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime39 = localDate37.atTime(localTime38);
        java.time.LocalDate localDate41 = localDate37.withMonth(1);
        boolean boolean42 = localDate37.isLeapYear();
        java.time.chrono.ChronoPeriod chronoPeriod43 = localDate30.until((java.time.chrono.ChronoLocalDate) localDate37);
        java.nio.CharBuffer charBuffer45 = java.nio.CharBuffer.allocate(16);
        int int46 = charBuffer45.limit();
        java.util.stream.IntStream intStream47 = charBuffer45.chars();
        java.util.stream.IntStream intStream48 = intStream47.distinct();
        boolean boolean49 = localDate30.equals((java.lang.Object) intStream48);
        java.time.Period period50 = java.time.Period.between(localDate19, localDate30);
        java.time.Period period52 = period50.minusDays((long) 13);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(isoChronology32);
        org.junit.Assert.assertTrue("'" + isoEra34 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra34.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronoPeriod43);
        org.junit.Assert.assertNotNull(charBuffer45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 16 + "'", int46 == 16);
        org.junit.Assert.assertNotNull(intStream47);
        org.junit.Assert.assertNotNull(intStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray10 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, zoneOffsetTransitionArray10);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray16 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17, zoneOffsetTransitionRuleArray16);
        java.time.zone.ZoneRules zoneRules19 = java.time.zone.ZoneRules.of(zoneOffset8, zoneOffset9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17);
        long long20 = localDateTime7.toEpochSecond(zoneOffset8);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.now((java.time.ZoneId) zoneOffset8);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.now((java.time.ZoneId) zoneOffset8);
        java.time.Clock clock23 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset8);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62134279201L) + "'", long20 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(clock23);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.Duration duration8 = duration6.minusMillis((long) (byte) 0);
        java.time.chrono.IsoChronology isoChronology10 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj13 = charBuffer12.array();
        boolean boolean14 = isoChronology10.equals(obj13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean17 = strMapMap15.containsKey((java.lang.Object) isoChronology16);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, (-1), 10);
        int int23 = isoChronology10.prolepticYear((java.time.chrono.Era) isoEra18, 0);
        java.time.Month month24 = java.time.Month.JANUARY;
        java.time.Month month25 = month24.firstMonthOfQuarter();
        java.time.Month month26 = month25.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean28 = month26.isSupported((java.time.temporal.TemporalField) chronoField27);
        boolean boolean29 = isoEra18.isSupported((java.time.temporal.TemporalField) chronoField27);
        java.time.temporal.TemporalUnit temporalUnit30 = chronoField27.getRangeUnit();
        java.time.Duration duration31 = duration6.minus((long) 0, temporalUnit30);
        java.time.temporal.Temporal temporal32 = zonedDateTime2.minus((java.time.temporal.TemporalAmount) duration6);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(isoChronology10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + month24 + "' != '" + java.time.Month.JANUARY + "'", month24.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month25 + "' != '" + java.time.Month.JANUARY + "'", month25.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.JANUARY + "'", month26.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit30 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit30.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(temporal32);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        java.time.Instant instant0 = java.time.Instant.MAX;
        java.time.Instant instant3 = java.time.Instant.ofEpochSecond((long) '4', (long) ' ');
        java.time.Instant instant5 = instant3.plusNanos(100L);
        int int6 = instant0.compareTo(instant5);
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(zoneId7);
        java.time.ZoneId zoneId10 = java.time.ZoneId.systemDefault();
        java.lang.String str11 = zoneId10.getId();
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime9.withZoneSameInstant(zoneId10);
        java.lang.String str13 = zonedDateTime12.toString();
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = chronoField14.getDisplayName(locale15);
        long long18 = zonedDateTime12.getLong((java.time.temporal.TemporalField) chronoField14);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = chronoField14.getDisplayName(locale19);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = instant5.get((java.time.temporal.TemporalField) chronoField14);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Etc/UTC" + "'", str11, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T09:14:57.363Z[Etc/UTC]" + "'", str13, "2022-02-21T09:14:57.363Z[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField14.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en-GB" + "'", str16, "en-GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AlignedWeekOfYear" + "'", str17, "AlignedWeekOfYear");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 8L + "'", long18 == 8L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "italiano" + "'", str21, "italiano");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AlignedWeekOfYear" + "'", str22, "AlignedWeekOfYear");
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        double[] doubleArray5 = new double[] { 23L, (byte) 1, 7187392471159151072L, 2, 23L };
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.of(doubleArray5);
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.distinct();
        boolean boolean8 = doubleStream6.isParallel();
        java.util.function.DoubleToLongFunction doubleToLongFunction9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream10 = doubleStream6.mapToLong(doubleToLongFunction9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[23.0, 1.0, 7.1873924711591506E18, 2.0, 23.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.SHORT;
        java.time.format.FormatStyle formatStyle1 = java.time.format.FormatStyle.SHORT;
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle0, formatStyle1);
        java.time.format.DateTimeFormatter dateTimeFormatter3 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
        java.time.format.DateTimeFormatter dateTimeFormatter4 = java.time.format.DateTimeFormatter.ofLocalizedDate(formatStyle0);
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.SHORT + "'", formatStyle0.equals(java.time.format.FormatStyle.SHORT));
        org.junit.Assert.assertTrue("'" + formatStyle1 + "' != '" + java.time.format.FormatStyle.SHORT + "'", formatStyle1.equals(java.time.format.FormatStyle.SHORT));
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        long long1 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        java.nio.IntBuffer intBuffer2 = intBuffer1.slice();
        int[] intArray3 = intBuffer1.array();
        int int5 = intBuffer1.get(3);
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertNotNull(intBuffer2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        java.security.KeyException keyException2 = new java.security.KeyException("java.text.AttributedCharacterIterator$Attribute(reading)");
        java.io.IOException iOException3 = new java.io.IOException("20220221Z", (java.lang.Throwable) keyException2);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = java.time.OffsetTime.of(localTime0, zoneOffset2);
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.LocalTime localTime23 = localTime20.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap24 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology25 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean26 = strMapMap24.containsKey((java.lang.Object) isoChronology25);
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate30 = isoChronology25.dateYearDay((java.time.chrono.Era) isoEra27, (-1), 10);
        java.time.Duration duration31 = java.time.Duration.ZERO;
        java.time.Duration duration32 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal33 = null;
        java.time.temporal.Temporal temporal34 = duration32.subtractFrom(temporal33);
        long long35 = duration32.toDays();
        java.time.Duration duration36 = duration31.plus(duration32);
        long long37 = duration32.toDays();
        java.lang.String str38 = duration32.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate39 = localDate30.plus((java.time.temporal.TemporalAmount) duration32);
        java.time.LocalTime localTime40 = localTime20.minus((java.time.temporal.TemporalAmount) duration32);
        boolean boolean41 = localTime0.isAfter(localTime40);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale43.toLanguageTag();
        java.lang.String str45 = chronoField42.getDisplayName(locale43);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap46 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology47 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean48 = strMapMap46.containsKey((java.lang.Object) isoChronology47);
        java.time.chrono.IsoEra isoEra49 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate52 = isoChronology47.dateYearDay((java.time.chrono.Era) isoEra49, (-1), 10);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.wrap(byteArray55, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology59 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean60 = byteBuffer58.equals((java.lang.Object) isoChronology59);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap61 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology62 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean63 = strMapMap61.containsKey((java.lang.Object) isoChronology62);
        java.time.chrono.IsoEra isoEra64 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate67 = isoChronology62.dateYearDay((java.time.chrono.Era) isoEra64, (-1), 10);
        int int69 = isoChronology59.prolepticYear((java.time.chrono.Era) isoEra64, (int) '#');
        java.time.LocalDate localDate72 = isoChronology47.dateYearDay((java.time.chrono.Era) isoEra64, (int) (byte) 0, 2);
        boolean boolean73 = chronoField42.isSupportedBy((java.time.temporal.TemporalAccessor) localDate72);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = localTime40.get((java.time.temporal.TemporalField) chronoField42);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(isoChronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra27.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNull(temporal34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0S" + "'", str38, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField42.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en-GB" + "'", str44, "en-GB");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AlignedWeekOfYear" + "'", str45, "AlignedWeekOfYear");
        org.junit.Assert.assertNotNull(isoChronology47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + isoEra49 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra49.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(isoChronology59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(isoChronology62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + isoEra64 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra64.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-34) + "'", int69 == (-34));
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter12.println("hi!");
        properties1.list(printWriter12);
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj18 = charBuffer17.array();
        java.nio.CharBuffer charBuffer20 = charBuffer17.append('.');
        java.lang.String str21 = charBuffer17.toString();
        char char23 = charBuffer17.charAt(0);
        char[] charArray24 = charBuffer17.array();
        printWriter12.print(charArray24);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str21, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), ".\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), ".\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[., \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (byte) 1);
        java.lang.Runnable runnable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream3 = intStream1.onClose(runnable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        double[] doubleArray3 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics4.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics7.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double[] doubleArray16 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double17 = univariateStatistic10.evaluate(doubleArray16);
        descriptiveStatistics4.setGeometricMeanImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics4.getMinImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic19);
        double double21 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        java.time.LocalTime localTime22 = localDateTime21.toLocalTime();
        java.time.temporal.Temporal temporal23 = localDate16.adjustInto((java.time.temporal.Temporal) localDateTime21);
        java.time.LocalDateTime localDateTime25 = localDateTime21.minusDays((long) (-1));
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.MAX;
        java.lang.String str29 = zoneOffset28.getId();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset28);
        java.time.LocalTime localTime31 = localDateTime30.toLocalTime();
        boolean boolean32 = localDateTime25.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.lang.String str36 = zoneOffset35.getId();
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset35);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.MAX;
        java.lang.String str41 = zoneOffset40.getId();
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset40);
        boolean boolean43 = localDateTime37.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.lang.String str47 = zoneOffset46.getId();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.MAX;
        java.lang.String str52 = zoneOffset51.getId();
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset51);
        boolean boolean54 = localDateTime48.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.format.DateTimeFormatter dateTimeFormatter55 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str56 = localDateTime53.format(dateTimeFormatter55);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int58 = localDateTime53.get((java.time.temporal.TemporalField) chronoField57);
        boolean boolean59 = localDateTime42.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.lang.String str60 = localDateTime53.toString();
        java.time.chrono.Chronology chronology61 = localDateTime53.getChronology();
        java.time.LocalDateTime localDateTime63 = localDateTime53.plusYears((long) (short) 0);
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.MAX;
        java.lang.String str67 = zoneOffset66.getId();
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset66);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        int int81 = zoneOffset66.compareTo(zoneOffset69);
        long long82 = localDateTime63.toEpochSecond(zoneOffset69);
        java.lang.String str83 = zoneOffset69.getId();
        java.time.ZonedDateTime zonedDateTime84 = java.time.ZonedDateTime.of(localDateTime30, (java.time.ZoneId) zoneOffset69);
        java.io.PrintWriter printWriter86 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter86.println("hi!");
        printWriter86.close();
        boolean boolean90 = zonedDateTime84.equals((java.lang.Object) printWriter86);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(temporal23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+18:00" + "'", str29, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+18:00" + "'", str36, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+18:00" + "'", str41, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+18:00" + "'", str47, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+18:00" + "'", str52, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str56, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField57.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str60, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+18:00" + "'", str67, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 97L + "'", long82 == 97L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+18:00" + "'", str83, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime84);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.isReadOnly();
        java.nio.CharBuffer charBuffer10 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj11 = charBuffer10.array();
        java.nio.ByteOrder byteOrder12 = charBuffer10.order();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.order(byteOrder12);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.slice();
        java.lang.Object obj15 = byteBuffer14.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putLong((long) 46);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteOrder12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.LocalDate localDate7 = localDate5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.chrono.IsoChronology isoChronology8 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra10 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate13 = isoChronology8.dateYearDay((java.time.chrono.Era) isoEra10, 0, 16);
        java.time.Duration duration14 = java.time.Duration.ZERO;
        java.time.LocalDate localDate15 = localDate13.plus((java.time.temporal.TemporalAmount) duration14);
        boolean boolean16 = localDate5.isBefore((java.time.chrono.ChronoLocalDate) localDate15);
        int int17 = localDate15.lengthOfMonth();
        java.time.LocalDate localDate19 = localDate15.withMonth(9);
        java.time.LocalDate localDate21 = localDate15.withDayOfYear((int) ' ');
        java.time.chrono.Era era22 = localDate21.getEra();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(isoChronology8);
        org.junit.Assert.assertTrue("'" + isoEra10 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra10.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + era22 + "' != '" + java.time.chrono.IsoEra.CE + "'", era22.equals(java.time.chrono.IsoEra.CE));
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.slice();
        java.nio.FloatBuffer floatBuffer5 = floatBuffer1.put(floatBuffer3);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray9 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList10, zoneOffsetTransitionArray9);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray12 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList13 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList13, zoneOffsetTransitionArray12);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray15 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList16, zoneOffsetTransitionRuleArray15);
        java.time.zone.ZoneRules zoneRules18 = java.time.zone.ZoneRules.of(zoneOffset7, zoneOffset8, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList10, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList13, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList16);
        java.time.OffsetTime offsetTime19 = localTime6.atOffset(zoneOffset7);
        java.lang.String str20 = offsetTime19.toString();
        java.time.ZoneOffset zoneOffset21 = offsetTime19.getOffset();
        boolean boolean22 = floatBuffer3.equals((java.lang.Object) offsetTime19);
        int int23 = floatBuffer3.arrayOffset();
        java.nio.FloatBuffer floatBuffer26 = floatBuffer3.put(10, (float) (-4095));
        float[] floatArray32 = new float[] { 10000000, (byte) 10, 16448, 6603384152749567654L, 23L };
        java.nio.FloatBuffer floatBuffer33 = java.nio.FloatBuffer.wrap(floatArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer34 = floatBuffer26.put(floatArray32);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "23:59:59.999999999+18:00" + "'", str20, "23:59:59.999999999+18:00");
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(floatBuffer26);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[1.0E7, 10.0, 16448.0, 6.6033843E18, 23.0]");
        org.junit.Assert.assertNotNull(floatBuffer33);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap1 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean3 = strMapMap1.containsKey((java.lang.Object) isoChronology2);
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal5 = null;
        java.time.temporal.Temporal temporal6 = duration4.subtractFrom(temporal5);
        long long7 = duration4.toDays();
        boolean boolean8 = strMapMap1.contains((java.lang.Object) duration4);
        java.lang.Cloneable cloneable9 = strMapMap0.get((java.lang.Object) duration4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap10 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology11 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean12 = strMapMap10.containsKey((java.lang.Object) isoChronology11);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap13 = java.nio.charset.Charset.availableCharsets();
        boolean boolean14 = strMap13.isEmpty();
        java.util.Locale locale15 = java.util.Locale.US;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.lang.Cloneable cloneable18 = strMapMap10.put(strMap13, (java.lang.Cloneable) locale16);
        int int19 = strMap13.size();
        java.util.Date date25 = new java.util.Date(1, (int) 'x', (int) '0', 16, 256);
        java.lang.Cloneable cloneable26 = strMapMap0.put(strMap13, (java.lang.Cloneable) date25);
        boolean boolean27 = strMapMap0.isEmpty();
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNull(temporal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(cloneable9);
        org.junit.Assert.assertNotNull(isoChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Stati Uniti" + "'", str17, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 171 + "'", int19 == 171);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Feb 17 20:16:00 UTC 1911");
        org.junit.Assert.assertNull(cloneable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println(true);
        printWriter1.close();
        printWriter1.close();
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.lang.Object obj13 = properties1.setProperty("en-GB", "2022-02-21T09:14:01.826Z[Etc/UTC]");
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.wrap(byteArray17, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology21 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean22 = byteBuffer20.equals((java.lang.Object) isoChronology21);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap23 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology24 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean25 = strMapMap23.containsKey((java.lang.Object) isoChronology24);
        java.time.chrono.IsoEra isoEra26 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate29 = isoChronology24.dateYearDay((java.time.chrono.Era) isoEra26, (-1), 10);
        int int31 = isoChronology21.prolepticYear((java.time.chrono.Era) isoEra26, (int) '#');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.temporal.Temporal temporal33 = isoEra26.adjustInto((java.time.temporal.Temporal) localDateTime32);
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate37 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset36);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset36);
        java.time.Month month39 = java.time.Month.JANUARY;
        java.time.Month month40 = month39.firstMonthOfQuarter();
        java.time.Month month41 = month40.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery42 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period43 = month40.query(periodTemporalQuery42);
        java.time.Period period44 = zoneOffset36.query(periodTemporalQuery42);
        java.time.Period period45 = localDateTime32.query(periodTemporalQuery42);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray51 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, zoneOffsetTransitionArray51);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray54 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList55 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList55, zoneOffsetTransitionRuleArray54);
        java.time.zone.ZoneRules zoneRules57 = java.time.zone.ZoneRules.of(zoneOffset46, zoneOffset47, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList55);
        java.time.Clock clock58 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset46);
        java.time.LocalDate localDate59 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset46);
        java.time.OffsetDateTime offsetDateTime60 = java.time.OffsetDateTime.of(localDateTime32, zoneOffset46);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale62 = java.util.Locale.UK;
        java.lang.String str63 = locale62.toLanguageTag();
        java.lang.String str64 = chronoField61.getDisplayName(locale62);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap65 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology66 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean67 = strMapMap65.containsKey((java.lang.Object) isoChronology66);
        java.time.chrono.IsoEra isoEra68 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate71 = isoChronology66.dateYearDay((java.time.chrono.Era) isoEra68, (-1), 10);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer77 = java.nio.ByteBuffer.wrap(byteArray74, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology78 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean79 = byteBuffer77.equals((java.lang.Object) isoChronology78);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap80 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology81 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean82 = strMapMap80.containsKey((java.lang.Object) isoChronology81);
        java.time.chrono.IsoEra isoEra83 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate86 = isoChronology81.dateYearDay((java.time.chrono.Era) isoEra83, (-1), 10);
        int int88 = isoChronology78.prolepticYear((java.time.chrono.Era) isoEra83, (int) '#');
        java.time.LocalDate localDate91 = isoChronology66.dateYearDay((java.time.chrono.Era) isoEra83, (int) (byte) 0, 2);
        boolean boolean92 = chronoField61.isSupportedBy((java.time.temporal.TemporalAccessor) localDate91);
        boolean boolean93 = chronoField61.isDateBased();
        boolean boolean94 = localDateTime32.isSupported((java.time.temporal.TemporalField) chronoField61);
        java.lang.Object obj95 = properties1.putIfAbsent((java.lang.Object) "1970-01-01T00:00:00.01Z", (java.lang.Object) chronoField61);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(isoChronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(isoChronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + isoEra26 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra26.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-34) + "'", int31 == (-34));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + month39 + "' != '" + java.time.Month.JANUARY + "'", month39.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month40 + "' != '" + java.time.Month.JANUARY + "'", month40.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month41 + "' != '" + java.time.Month.JANUARY + "'", month41.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneRules57);
        org.junit.Assert.assertNotNull(clock58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField61.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "en-GB" + "'", str63, "en-GB");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "AlignedWeekOfYear" + "'", str64, "AlignedWeekOfYear");
        org.junit.Assert.assertNotNull(isoChronology66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + isoEra68 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra68.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(isoChronology78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(isoChronology81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + isoEra83 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra83.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-34) + "'", int88 == (-34));
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(256);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer4 = byteBuffer2.putChar('4');
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        int int2 = chronoField0.checkValidIntValue(0L);
        java.time.chrono.IsoChronology isoChronology3 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra5 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate8 = isoChronology3.dateYearDay((java.time.chrono.Era) isoEra5, 0, 16);
        java.time.LocalTime localTime9 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime10 = localDate8.atTime(localTime9);
        java.time.LocalDate localDate12 = localDate8.withMonth(1);
        java.time.LocalDate localDate14 = localDate12.withYear(4096);
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra17 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate20 = isoChronology15.dateYearDay((java.time.chrono.Era) isoEra17, 0, 16);
        java.time.LocalTime localTime21 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime22 = localDate20.atTime(localTime21);
        java.time.LocalTime localTime24 = localTime21.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap25 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology26 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean27 = strMapMap25.containsKey((java.lang.Object) isoChronology26);
        java.time.chrono.IsoEra isoEra28 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate31 = isoChronology26.dateYearDay((java.time.chrono.Era) isoEra28, (-1), 10);
        java.time.Duration duration32 = java.time.Duration.ZERO;
        java.time.Duration duration33 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal34 = null;
        java.time.temporal.Temporal temporal35 = duration33.subtractFrom(temporal34);
        long long36 = duration33.toDays();
        java.time.Duration duration37 = duration32.plus(duration33);
        long long38 = duration33.toDays();
        java.lang.String str39 = duration33.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate40 = localDate31.plus((java.time.temporal.TemporalAmount) duration33);
        java.time.LocalTime localTime41 = localTime21.minus((java.time.temporal.TemporalAmount) duration33);
        int int42 = localTime21.getNano();
        java.time.LocalDateTime localDateTime43 = localDate14.atTime(localTime21);
        java.time.ZoneId zoneId44 = java.time.ZoneId.systemDefault();
        java.lang.String str45 = zoneId44.getId();
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.now(zoneId44);
        java.time.ZoneId zoneId47 = java.time.ZoneId.systemDefault();
        java.lang.String str48 = zoneId47.getId();
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime46.withZoneSameInstant(zoneId47);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime50 = zonedDateTime46.toLocalDateTime();
        java.time.LocalTime localTime51 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray54 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList55 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, zoneOffsetTransitionArray54);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray60 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList61, zoneOffsetTransitionRuleArray60);
        java.time.zone.ZoneRules zoneRules63 = java.time.zone.ZoneRules.of(zoneOffset52, zoneOffset53, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList61);
        java.time.OffsetTime offsetTime64 = localTime51.atOffset(zoneOffset52);
        java.lang.String str65 = offsetTime64.toString();
        java.time.ZoneOffset zoneOffset66 = offsetTime64.getOffset();
        java.time.ZonedDateTime zonedDateTime67 = zonedDateTime46.with((java.time.temporal.TemporalAdjuster) zoneOffset66);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime43.atOffset(zoneOffset66);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal70 = chronoField0.adjustInto((java.time.temporal.Temporal) localDateTime43, 7187392471159151072L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfDay (valid values 0 - 86399): 7187392471159151072");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + isoEra5 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra5.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertTrue("'" + isoEra17 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra17.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(isoChronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + isoEra28 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra28.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNull(temporal35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0S" + "'", str39, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 999999999 + "'", int42 == 999999999);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zoneId47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(offsetTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "23:59:59.999999999+18:00" + "'", str65, "23:59:59.999999999+18:00");
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        java.lang.String[] strArray13 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray18 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, zoneOffsetTransitionArray18);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray21 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, zoneOffsetTransitionArray21);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray24 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList25, zoneOffsetTransitionRuleArray24);
        java.time.zone.ZoneRules zoneRules27 = java.time.zone.ZoneRules.of(zoneOffset16, zoneOffset17, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList25);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray30 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, zoneOffsetTransitionArray30);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray36 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList37, zoneOffsetTransitionRuleArray36);
        java.time.zone.ZoneRules zoneRules39 = java.time.zone.ZoneRules.of(zoneOffset28, zoneOffset29, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList37);
        boolean boolean40 = zoneOffsetTransitionList19.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34);
        zoneOffsetTransitionList19.clear();
        boolean boolean42 = strSet14.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19);
        java.io.File file45 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long46 = file45.lastModified();
        java.net.URL uRL47 = file45.toURL();
        java.nio.file.Path path48 = file45.toPath();
        java.io.File file51 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long52 = file51.lastModified();
        java.net.URL uRL53 = file51.toURL();
        java.nio.file.Path path54 = file51.toPath();
        java.nio.file.Path path55 = path48.relativize(path54);
        java.io.File file58 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long59 = file58.lastModified();
        java.net.URL uRL60 = file58.toURL();
        java.nio.file.Path path61 = file58.toPath();
        java.io.File file64 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long65 = file64.lastModified();
        java.net.URL uRL66 = file64.toURL();
        java.nio.file.Path path67 = file64.toPath();
        java.nio.file.Path path68 = path61.relativize(path67);
        boolean boolean69 = path54.startsWith(path61);
        java.io.File file72 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long73 = file72.lastModified();
        java.net.URL uRL74 = file72.toURL();
        java.nio.file.Path path75 = file72.toPath();
        java.io.File file78 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long79 = file78.lastModified();
        java.net.URL uRL80 = file78.toURL();
        java.nio.file.Path path81 = file78.toPath();
        java.nio.file.Path path82 = path75.relativize(path81);
        java.nio.CharBuffer charBuffer84 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer86 = charBuffer84.append((java.lang.CharSequence) "Etc/UTC");
        int int87 = charBuffer86.arrayOffset();
        boolean boolean88 = path81.equals((java.lang.Object) int87);
        java.nio.file.Path path89 = path61.relativize(path81);
        boolean boolean90 = zoneOffsetTransitionList19.remove((java.lang.Object) path81);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition91 = null;
        boolean boolean92 = zoneOffsetTransitionList19.add(zoneOffsetTransition91);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator93 = zoneOffsetTransitionList19.spliterator();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals(file45.getParent(), "/");
        org.junit.Assert.assertEquals(file45.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(uRL47);
        org.junit.Assert.assertEquals(uRL47.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path48);
        org.junit.Assert.assertEquals(file51.getParent(), "/");
        org.junit.Assert.assertEquals(file51.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(uRL53);
        org.junit.Assert.assertEquals(uRL53.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path54);
        org.junit.Assert.assertNotNull(path55);
        org.junit.Assert.assertEquals(file58.getParent(), "/");
        org.junit.Assert.assertEquals(file58.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(uRL60);
        org.junit.Assert.assertEquals(uRL60.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path61);
        org.junit.Assert.assertEquals(file64.getParent(), "/");
        org.junit.Assert.assertEquals(file64.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(uRL66);
        org.junit.Assert.assertEquals(uRL66.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path67);
        org.junit.Assert.assertNotNull(path68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals(file72.getParent(), "/");
        org.junit.Assert.assertEquals(file72.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(uRL74);
        org.junit.Assert.assertEquals(uRL74.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path75);
        org.junit.Assert.assertEquals(file78.getParent(), "/");
        org.junit.Assert.assertEquals(file78.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(uRL80);
        org.junit.Assert.assertEquals(uRL80.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path81);
        org.junit.Assert.assertNotNull(path82);
        org.junit.Assert.assertNotNull(charBuffer84);
        org.junit.Assert.assertNotNull(charBuffer86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(path89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator93);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        boolean boolean4 = file2.setWritable(false);
        boolean boolean5 = file2.createNewFile();
        boolean boolean6 = file2.isDirectory();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        longStream2.close();
        java.util.stream.LongStream longStream4 = longStream2.parallel();
        java.util.stream.LongStream longStream5 = longStream2.sequential();
        java.util.stream.LongStream longStream6 = longStream2.sequential();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream7 = longStream2.sorted();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneId zoneId15 = java.time.ZoneId.systemDefault();
        java.lang.String str16 = zoneId15.getId();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.now(zoneId15);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime17.withZoneSameInstant(zoneId18);
        java.time.ZonedDateTime zonedDateTime21 = localDateTime9.atZone(zoneId18);
        java.time.zone.ZoneRules zoneRules22 = zoneId18.getRules();
        java.net.InetAddress inetAddress23 = java.net.InetAddress.getLocalHost();
        java.lang.String str24 = inetAddress23.getHostName();
        java.net.InetAddress inetAddress25 = java.net.InetAddress.getLocalHost();
        boolean boolean27 = inetAddress25.isReachable((int) '0');
        java.net.NetworkInterface networkInterface28 = java.net.NetworkInterface.getByInetAddress(inetAddress25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics29.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics29.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics29.getGeometricMeanImpl();
        double double34 = descriptiveStatistics29.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics29.getSkewnessImpl();
        boolean boolean36 = networkInterface28.equals((java.lang.Object) descriptiveStatistics29);
        int int37 = networkInterface28.getMTU();
        java.util.Locale locale40 = new java.util.Locale("DecimalStyle[0+-.]", "Di");
        boolean boolean41 = networkInterface28.equals((java.lang.Object) "DecimalStyle[0+-.]");
        int int42 = networkInterface28.getIndex();
        java.util.Enumeration<java.net.NetworkInterface> networkInterfaceEnumeration43 = networkInterface28.getSubInterfaces();
        boolean boolean46 = inetAddress23.isReachable(networkInterface28, 16384, 365);
        boolean boolean47 = zoneRules22.equals((java.lang.Object) inetAddress23);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNotNull(inetAddress23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "599b081c1808" + "'", str24, "599b081c1808");
        org.junit.Assert.assertNotNull(inetAddress25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(networkInterface28);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1500 + "'", int37 == 1500);
        org.junit.Assert.assertEquals(locale40.toString(), "decimalstyle[0+-.]_DI");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 18 + "'", int42 == 18);
        org.junit.Assert.assertNotNull(networkInterfaceEnumeration43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.lang.Object obj13 = properties1.setProperty("en-GB", "2022-02-21T09:14:01.826Z[Etc/UTC]");
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter15.println("hi!");
        printWriter15.print((double) (byte) -1);
        printWriter15.write("");
        printWriter15.println();
        properties1.store((java.io.Writer) printWriter15, "MALFORMED[10]");
        int int25 = properties1.size();
        java.util.OptionalLong optionalLong27 = java.util.OptionalLong.of((long) '-');
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        java.lang.String str30 = properties29.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        boolean boolean32 = properties1.remove((java.lang.Object) optionalLong27, (java.lang.Object) properties29);
        int int33 = properties1.size();
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(optionalLong27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra29 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate32 = isoChronology27.dateYearDay((java.time.chrono.Era) isoEra29, 0, 16);
        java.time.LocalTime localTime33 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime34 = localDate32.atTime(localTime33);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray43 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44, zoneOffsetTransitionRuleArray43);
        java.time.zone.ZoneRules zoneRules46 = java.time.zone.ZoneRules.of(zoneOffset35, zoneOffset36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44);
        long long47 = localDateTime34.toEpochSecond(zoneOffset35);
        java.time.LocalDateTime localDateTime49 = localDateTime34.plusDays((long) (byte) 1);
        boolean boolean50 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.LocalDateTime localDateTime52 = localDateTime49.plusDays((-62134279201L));
        java.time.LocalDateTime localDateTime54 = localDateTime49.minusMinutes(14L);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + isoEra29 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra29.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-62134279201L) + "'", long47 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file3 = file2.getAbsoluteFile();
        boolean boolean4 = file3.canRead();
        boolean boolean7 = file3.setExecutable(true, true);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        int int0 = java.util.Spliterator.CONCURRENT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4096 + "'", int0 == 4096);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.LocalTime localTime2 = localTime0.plusMinutes((long) 'x');
        java.time.LocalTime localTime4 = localTime0.minusNanos((long) '#');
        java.time.Duration duration6 = java.time.Duration.ofHours((-1L));
        java.time.LocalTime localTime7 = localTime0.minus((java.time.temporal.TemporalAmount) duration6);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.nio.CharBuffer charBuffer13 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj14 = charBuffer13.array();
        boolean boolean15 = charBuffer13.isReadOnly();
        java.nio.CharBuffer charBuffer17 = charBuffer13.put('x');
        java.lang.CharSequence charSequence18 = null;
        java.nio.CharBuffer charBuffer19 = charBuffer13.append(charSequence18);
        boolean boolean20 = zoneOffsetTransitionList3.remove((java.lang.Object) charBuffer19);
        boolean boolean21 = charBuffer19.isDirect();
        java.nio.CharBuffer charBuffer22 = charBuffer19.slice();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charBuffer22);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.slice();
        java.nio.FloatBuffer floatBuffer5 = floatBuffer1.put(floatBuffer3);
        java.nio.Buffer buffer7 = floatBuffer5.position(1);
        java.nio.FloatBuffer floatBuffer8 = floatBuffer5.slice();
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(floatBuffer8);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.OptionalDouble optionalDouble2 = doubleStream1.findAny();
        boolean boolean3 = optionalDouble2.isPresent();
        java.util.Comparator<java.util.concurrent.TimeUnit> timeUnitComparator4 = java.util.Comparator.reverseOrder();
        boolean boolean5 = optionalDouble2.equals((java.lang.Object) timeUnitComparator4);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeUnitComparator4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        java.util.function.LongBinaryOperator longBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = longStream6.reduce(10000L, longBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate7 = isoChronology2.dateYearDay((java.time.chrono.Era) isoEra4, 0, 16);
        java.time.LocalTime localTime8 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime9 = localDate7.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate7.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod12 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate7);
        java.time.chrono.Era era13 = localDate1.getEra();
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.lang.String str17 = zoneOffset16.getId();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.lang.String str22 = zoneOffset21.getId();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset21);
        boolean boolean24 = localDateTime18.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.format.DateTimeFormatter dateTimeFormatter25 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str26 = localDateTime23.format(dateTimeFormatter25);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int28 = localDateTime23.get((java.time.temporal.TemporalField) chronoField27);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange29 = era13.range((java.time.temporal.TemporalField) chronoField27);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra4.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertTrue("'" + era13 + "' != '" + java.time.chrono.IsoEra.CE + "'", era13.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+18:00" + "'", str17, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+18:00" + "'", str22, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str26, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField27.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        java.security.Permission permission2 = null;
        java.security.AccessControlException accessControlException3 = new java.security.AccessControlException("AM/PM", permission2);
        java.security.KeyException keyException4 = new java.security.KeyException("java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]", (java.lang.Throwable) accessControlException3);
        java.security.KeyException keyException5 = new java.security.KeyException((java.lang.Throwable) keyException4);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str1 = strMapMap0.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap2 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology3 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean4 = strMapMap2.containsKey((java.lang.Object) isoChronology3);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        boolean boolean6 = strMap5.isEmpty();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.Cloneable cloneable10 = strMapMap2.put(strMap5, (java.lang.Cloneable) locale8);
        int int11 = strMap5.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap12 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = strMapMap12.containsKey((java.lang.Object) isoChronology13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal16 = null;
        java.time.temporal.Temporal temporal17 = duration15.subtractFrom(temporal16);
        long long18 = duration15.toDays();
        boolean boolean19 = strMapMap12.contains((java.lang.Object) duration15);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable21 = strMapMap12.get((java.lang.Object) dateTimeFormatter20);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet22 = strMapMap12.keySet();
        java.lang.Cloneable cloneable23 = strMapMap0.put(strMap5, (java.lang.Cloneable) strMapMap12);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap24 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str25 = strMapMap24.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap26 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean28 = strMapMap26.containsKey((java.lang.Object) isoChronology27);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap29 = java.nio.charset.Charset.availableCharsets();
        boolean boolean30 = strMap29.isEmpty();
        java.util.Locale locale31 = java.util.Locale.US;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.lang.Cloneable cloneable34 = strMapMap26.put(strMap29, (java.lang.Cloneable) locale32);
        int int35 = strMap29.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap36 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology37 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean38 = strMapMap36.containsKey((java.lang.Object) isoChronology37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal40 = null;
        java.time.temporal.Temporal temporal41 = duration39.subtractFrom(temporal40);
        long long42 = duration39.toDays();
        boolean boolean43 = strMapMap36.contains((java.lang.Object) duration39);
        java.time.format.DateTimeFormatter dateTimeFormatter44 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable45 = strMapMap36.get((java.lang.Object) dateTimeFormatter44);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet46 = strMapMap36.keySet();
        java.lang.Cloneable cloneable47 = strMapMap24.put(strMap29, (java.lang.Cloneable) strMapMap36);
        java.util.Date date53 = new java.util.Date(1, (int) 'x', (int) '0', 16, 256);
        int int54 = date53.getMinutes();
        java.lang.Cloneable cloneable55 = strMapMap12.put(strMap29, (java.lang.Cloneable) date53);
        date53.setMinutes(13);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Stati Uniti" + "'", str9, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 171 + "'", int11 == 171);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNull(temporal17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(cloneable21);
        org.junit.Assert.assertNotNull(strMapSet22);
        org.junit.Assert.assertNull(cloneable23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Stati Uniti" + "'", str33, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 171 + "'", int35 == 171);
        org.junit.Assert.assertNotNull(isoChronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNull(temporal41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(cloneable45);
        org.junit.Assert.assertNotNull(strMapSet46);
        org.junit.Assert.assertNull(cloneable47);
        org.junit.Assert.assertEquals(date53.toString(), "Fri Feb 17 20:13:00 UTC 1911");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16 + "'", int54 == 16);
        org.junit.Assert.assertNull(cloneable55);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.duplicate();
        long[] longArray9 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer10 = java.nio.LongBuffer.wrap(longArray9);
        long[] longArray12 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer13 = java.nio.LongBuffer.wrap(longArray12);
        java.nio.LongBuffer longBuffer14 = longBuffer10.put(longBuffer13);
        java.nio.LongBuffer longBuffer15 = longBuffer10.compact();
        java.nio.Buffer buffer16 = longBuffer10.flip();
        int int17 = longBuffer7.compareTo(longBuffer10);
        boolean boolean18 = longBuffer10.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = longBuffer10.get(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[10]");
        org.junit.Assert.assertNotNull(longBuffer10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[10]");
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.stream.LongStream.Builder builder3 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream longStream4 = longStream2.peek((java.util.function.LongConsumer) builder3);
        java.util.stream.LongStream.Builder builder6 = builder3.add((-62134279201L));
        java.util.stream.LongStream.Builder builder8 = builder6.add((long) 31);
        java.util.stream.LongStream.Builder builder9 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream.Builder builder11 = builder9.add((long) '#');
        java.util.stream.LongStream.Builder builder13 = builder11.add((long) (short) 1);
        java.util.stream.LongStream longStream16 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.stream.LongStream.Builder builder17 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream longStream18 = longStream16.peek((java.util.function.LongConsumer) builder17);
        java.util.stream.LongStream.Builder builder20 = builder17.add((-62134279201L));
        java.util.stream.LongStream longStream21 = builder17.build();
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.allocate(16);
        int int24 = charBuffer23.limit();
        java.util.stream.IntStream intStream25 = charBuffer23.chars();
        java.util.LongSummaryStatistics longSummaryStatistics26 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream29 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics30 = longStream29.summaryStatistics();
        java.util.function.IntConsumer intConsumer31 = longSummaryStatistics26.andThen((java.util.function.IntConsumer) longSummaryStatistics30);
        java.util.stream.IntStream intStream32 = intStream25.peek((java.util.function.IntConsumer) longSummaryStatistics26);
        java.nio.CharBuffer charBuffer34 = java.nio.CharBuffer.allocate(16);
        int int35 = charBuffer34.limit();
        java.util.stream.IntStream intStream36 = charBuffer34.chars();
        java.util.LongSummaryStatistics longSummaryStatistics37 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream40 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics41 = longStream40.summaryStatistics();
        java.util.function.IntConsumer intConsumer42 = longSummaryStatistics37.andThen((java.util.function.IntConsumer) longSummaryStatistics41);
        java.util.stream.IntStream intStream43 = intStream36.peek((java.util.function.IntConsumer) longSummaryStatistics37);
        longSummaryStatistics26.combine(longSummaryStatistics37);
        java.util.LongSummaryStatistics longSummaryStatistics45 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream48 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics49 = longStream48.summaryStatistics();
        java.util.function.IntConsumer intConsumer50 = longSummaryStatistics45.andThen((java.util.function.IntConsumer) longSummaryStatistics49);
        java.util.function.IntConsumer intConsumer51 = longSummaryStatistics26.andThen((java.util.function.IntConsumer) longSummaryStatistics45);
        long long52 = longSummaryStatistics26.getCount();
        java.util.stream.LongStream longStream54 = java.util.stream.LongStream.of((long) 4);
        java.util.stream.LongStream longStream55 = longStream54.sequential();
        java.util.stream.LongStream longStream57 = longStream54.skip((long) 16384);
        java.util.LongSummaryStatistics longSummaryStatistics58 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream61 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics62 = longStream61.summaryStatistics();
        java.util.function.IntConsumer intConsumer63 = longSummaryStatistics58.andThen((java.util.function.IntConsumer) longSummaryStatistics62);
        longStream57.forEachOrdered((java.util.function.LongConsumer) longSummaryStatistics62);
        java.util.LongSummaryStatistics longSummaryStatistics65 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream68 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics69 = longStream68.summaryStatistics();
        java.util.function.IntConsumer intConsumer70 = longSummaryStatistics65.andThen((java.util.function.IntConsumer) longSummaryStatistics69);
        long long71 = longSummaryStatistics69.getMax();
        java.nio.CharBuffer charBuffer73 = java.nio.CharBuffer.allocate(16);
        int int74 = charBuffer73.limit();
        java.util.stream.IntStream intStream75 = charBuffer73.chars();
        java.util.LongSummaryStatistics longSummaryStatistics76 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream79 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics80 = longStream79.summaryStatistics();
        java.util.function.IntConsumer intConsumer81 = longSummaryStatistics76.andThen((java.util.function.IntConsumer) longSummaryStatistics80);
        java.util.stream.IntStream intStream82 = intStream75.peek((java.util.function.IntConsumer) longSummaryStatistics76);
        java.nio.CharBuffer charBuffer84 = java.nio.CharBuffer.allocate(16);
        int int85 = charBuffer84.limit();
        java.util.stream.IntStream intStream86 = charBuffer84.chars();
        java.util.LongSummaryStatistics longSummaryStatistics87 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream90 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics91 = longStream90.summaryStatistics();
        java.util.function.IntConsumer intConsumer92 = longSummaryStatistics87.andThen((java.util.function.IntConsumer) longSummaryStatistics91);
        java.util.stream.IntStream intStream93 = intStream86.peek((java.util.function.IntConsumer) longSummaryStatistics87);
        longSummaryStatistics76.combine(longSummaryStatistics87);
        longSummaryStatistics69.combine(longSummaryStatistics87);
        java.util.function.LongConsumer[] longConsumerArray96 = new java.util.function.LongConsumer[] { builder8, builder13, builder17, longSummaryStatistics26, longSummaryStatistics62, longSummaryStatistics69 };
        java.util.stream.Stream<java.util.function.LongConsumer> longConsumerStream97 = java.util.stream.Stream.of(longConsumerArray96);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(longStream21);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertEquals(longSummaryStatistics26.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream29);
        org.junit.Assert.assertNotNull(longSummaryStatistics30);
        org.junit.Assert.assertEquals(longSummaryStatistics30.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer31);
        org.junit.Assert.assertNotNull(intStream32);
        org.junit.Assert.assertNotNull(charBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 16 + "'", int35 == 16);
        org.junit.Assert.assertNotNull(intStream36);
        org.junit.Assert.assertEquals(longSummaryStatistics37.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream40);
        org.junit.Assert.assertNotNull(longSummaryStatistics41);
        org.junit.Assert.assertEquals(longSummaryStatistics41.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer42);
        org.junit.Assert.assertNotNull(intStream43);
        org.junit.Assert.assertEquals(longSummaryStatistics45.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream48);
        org.junit.Assert.assertNotNull(longSummaryStatistics49);
        org.junit.Assert.assertEquals(longSummaryStatistics49.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer50);
        org.junit.Assert.assertNotNull(intConsumer51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(longStream54);
        org.junit.Assert.assertNotNull(longStream55);
        org.junit.Assert.assertNotNull(longStream57);
        org.junit.Assert.assertEquals(longSummaryStatistics58.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream61);
        org.junit.Assert.assertNotNull(longSummaryStatistics62);
        org.junit.Assert.assertEquals(longSummaryStatistics62.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer63);
        org.junit.Assert.assertEquals(longSummaryStatistics65.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream68);
        org.junit.Assert.assertNotNull(longSummaryStatistics69);
        org.junit.Assert.assertEquals(longSummaryStatistics69.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 9L + "'", long71 == 9L);
        org.junit.Assert.assertNotNull(charBuffer73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 16 + "'", int74 == 16);
        org.junit.Assert.assertNotNull(intStream75);
        org.junit.Assert.assertEquals(longSummaryStatistics76.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream79);
        org.junit.Assert.assertNotNull(longSummaryStatistics80);
        org.junit.Assert.assertEquals(longSummaryStatistics80.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer81);
        org.junit.Assert.assertNotNull(intStream82);
        org.junit.Assert.assertNotNull(charBuffer84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 16 + "'", int85 == 16);
        org.junit.Assert.assertNotNull(intStream86);
        org.junit.Assert.assertEquals(longSummaryStatistics87.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream90);
        org.junit.Assert.assertNotNull(longSummaryStatistics91);
        org.junit.Assert.assertEquals(longSummaryStatistics91.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer92);
        org.junit.Assert.assertNotNull(intStream93);
        org.junit.Assert.assertNotNull(longConsumerArray96);
        org.junit.Assert.assertNotNull(longConsumerStream97);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        boolean boolean5 = doubleBuffer4.hasArray();
        int int6 = doubleBuffer4.arrayOffset();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneId zoneId15 = java.time.ZoneId.systemDefault();
        java.lang.String str16 = zoneId15.getId();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.now(zoneId15);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime17.withZoneSameInstant(zoneId18);
        java.time.ZonedDateTime zonedDateTime21 = localDateTime9.atZone(zoneId18);
        java.time.zone.ZoneRules zoneRules22 = zoneId18.getRules();
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList23 = zoneRules22.getTransitionRules();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = zoneRules22.getTransitions();
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = zoneOffsetTransitionList24.remove((java.lang.Object) category25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList23);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList24);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        java.security.cert.CertPath certPath0 = null;
        java.security.Timestamp timestamp1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.CodeSigner codeSigner2 = new java.security.CodeSigner(certPath0, timestamp1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        longStream2.close();
        java.util.stream.LongStream longStream4 = longStream2.parallel();
        java.util.stream.LongStream longStream5 = longStream2.sequential();
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray6 = longStream2.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        java.util.Date date0 = new java.util.Date();
        date0.setMonth(214);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Nov 21 09:17:13 UTC 2039");
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer5.asShortBuffer();
        java.nio.ShortBuffer shortBuffer8 = shortBuffer7.slice();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean16 = byteBuffer14.equals((java.lang.Object) isoChronology15);
        boolean boolean17 = byteBuffer14.hasArray();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.wrap(byteArray20, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer14.put(byteBuffer23);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer24.duplicate();
        boolean boolean26 = shortBuffer7.equals((java.lang.Object) byteBuffer25);
        java.nio.ShortBuffer shortBuffer27 = shortBuffer7.duplicate();
        java.nio.ShortBuffer shortBuffer28 = shortBuffer27.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(shortBuffer27);
        org.junit.Assert.assertNotNull(shortBuffer28);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        long long1 = longStream0.count();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.DoubleStream doubleStream4 = intStream3.asDoubleStream();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate(16);
        int int7 = charBuffer6.limit();
        java.util.stream.IntStream intStream8 = charBuffer6.chars();
        java.util.stream.DoubleStream doubleStream9 = intStream8.asDoubleStream();
        java.util.stream.DoubleStream doubleStream10 = java.util.stream.DoubleStream.concat(doubleStream4, doubleStream9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream11 = doubleStream9.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream10);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj4 = charBuffer3.array();
        java.nio.CharBuffer charBuffer6 = charBuffer3.append('.');
        java.lang.String str7 = charBuffer3.toString();
        java.nio.CharBuffer charBuffer9 = charBuffer3.append('a');
        java.nio.CharBuffer charBuffer10 = charBuffer1.put(charBuffer3);
        int int11 = charBuffer3.arrayOffset();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str7, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        java.time.Period period1 = java.time.Period.ofYears((int) '\000');
        java.lang.String str2 = period1.toString();
        java.time.chrono.IsoChronology isoChronology3 = period1.getChronology();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap4 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology5 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean6 = strMapMap4.containsKey((java.lang.Object) isoChronology5);
        java.time.Duration duration7 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal8 = null;
        java.time.temporal.Temporal temporal9 = duration7.subtractFrom(temporal8);
        long long10 = duration7.toDays();
        boolean boolean11 = strMapMap4.contains((java.lang.Object) duration7);
        java.time.format.DateTimeFormatter dateTimeFormatter12 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable13 = strMapMap4.get((java.lang.Object) dateTimeFormatter12);
        java.time.chrono.Chronology chronology14 = dateTimeFormatter12.getChronology();
        int int15 = isoChronology3.compareTo(chronology14);
        java.lang.String str16 = isoChronology3.getCalendarType();
        boolean boolean18 = isoChronology3.isLeapYear((long) 3);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "P0D" + "'", str2, "P0D");
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNull(temporal9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(cloneable13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "iso8601" + "'", str16, "iso8601");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("2022-02-21T09:14:01.826Z[Etc/UTC]", "1970-01-01", (-5), "P0D", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-5");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.ZonedDateTime zonedDateTime13 = java.time.ZonedDateTime.of(localDateTime9, (java.time.ZoneId) zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = java.time.OffsetDateTime.now((java.time.ZoneId) zoneOffset11);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime14.minusHours(1645434854L);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.minusYears(9000L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.withHour(54);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 54");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        long long10 = localDate9.toEpochDay();
        java.time.chrono.IsoChronology isoChronology11 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra13 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate16 = isoChronology11.dateYearDay((java.time.chrono.Era) isoEra13, 0, 16);
        java.time.LocalTime localTime17 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime18 = localDate16.atTime(localTime17);
        java.time.LocalDate localDate20 = localDate16.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod21 = localDate9.until((java.time.chrono.ChronoLocalDate) localDate20);
        java.lang.String str22 = localDate9.toString();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-719147L) + "'", long10 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology11);
        org.junit.Assert.assertTrue("'" + isoEra13 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra13.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronoPeriod21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0001-01-16" + "'", str22, "0001-01-16");
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.OptionalDouble optionalDouble3 = doubleStream2.findAny();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics4 = new java.util.DoubleSummaryStatistics();
        double double5 = doubleSummaryStatistics4.getMin();
        double double6 = doubleSummaryStatistics4.getSum();
        // The following exception was thrown during execution in test generation
        try {
            doubleStream2.forEachOrdered((java.util.function.DoubleConsumer) doubleSummaryStatistics4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertEquals(doubleSummaryStatistics4.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        java.time.LocalDate localDate0 = java.time.LocalDate.MIN;
        java.time.ZoneId zoneId1 = java.time.ZoneId.systemDefault();
        java.lang.String str2 = zoneId1.getId();
        java.time.ZonedDateTime zonedDateTime3 = java.time.ZonedDateTime.now(zoneId1);
        java.time.ZoneId zoneId4 = java.time.ZoneId.systemDefault();
        java.lang.String str5 = zoneId4.getId();
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime3.withZoneSameInstant(zoneId4);
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(zoneId7);
        java.time.ZonedDateTime zonedDateTime11 = zonedDateTime9.withYear((int) (short) 1);
        boolean boolean12 = zonedDateTime6.equals((java.lang.Object) zonedDateTime11);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime6.minusMonths((long) (byte) -1);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        java.time.temporal.TemporalUnit temporalUnit16 = chronoField15.getBaseUnit();
        long long17 = localDate0.until((java.time.temporal.Temporal) zonedDateTime14, temporalUnit16);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.now(zoneId18);
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime20.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit23 = null;
        boolean boolean24 = zonedDateTime20.isSupported(temporalUnit23);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange26 = zonedDateTime20.range((java.time.temporal.TemporalField) chronoField25);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime28 = java.time.LocalTime.MAX;
        long long29 = chronoField27.getFrom((java.time.temporal.TemporalAccessor) localTime28);
        boolean boolean30 = zonedDateTime20.isSupported((java.time.temporal.TemporalField) chronoField27);
        java.time.chrono.IsoChronology isoChronology31 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate36 = isoChronology31.dateYearDay((java.time.chrono.Era) isoEra33, 0, 16);
        java.time.LocalTime localTime37 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime38 = localDate36.atTime(localTime37);
        java.time.LocalDate localDate40 = localDate36.withMonth(1);
        long long41 = localDate40.toEpochDay();
        java.time.chrono.IsoChronology isoChronology42 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra44 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate47 = isoChronology42.dateYearDay((java.time.chrono.Era) isoEra44, 0, 16);
        java.time.LocalTime localTime48 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime49 = localDate47.atTime(localTime48);
        java.time.LocalDate localDate51 = localDate47.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod52 = localDate40.until((java.time.chrono.ChronoLocalDate) localDate51);
        java.time.LocalDate localDate54 = localDate40.plusDays((long) (short) 0);
        java.time.LocalDate localDate56 = localDate54.minusDays((long) 9);
        java.time.LocalDate localDate58 = java.time.LocalDate.MIN;
        java.time.ZoneId zoneId59 = java.time.ZoneId.systemDefault();
        java.lang.String str60 = zoneId59.getId();
        java.time.ZonedDateTime zonedDateTime61 = java.time.ZonedDateTime.now(zoneId59);
        java.time.ZoneId zoneId62 = java.time.ZoneId.systemDefault();
        java.lang.String str63 = zoneId62.getId();
        java.time.ZonedDateTime zonedDateTime64 = zonedDateTime61.withZoneSameInstant(zoneId62);
        java.time.ZoneId zoneId65 = java.time.ZoneId.systemDefault();
        java.lang.String str66 = zoneId65.getId();
        java.time.ZonedDateTime zonedDateTime67 = java.time.ZonedDateTime.now(zoneId65);
        java.time.ZonedDateTime zonedDateTime69 = zonedDateTime67.withYear((int) (short) 1);
        boolean boolean70 = zonedDateTime64.equals((java.lang.Object) zonedDateTime69);
        java.time.ZonedDateTime zonedDateTime72 = zonedDateTime64.minusMonths((long) (byte) -1);
        java.time.temporal.ChronoField chronoField73 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        java.time.temporal.TemporalUnit temporalUnit74 = chronoField73.getBaseUnit();
        long long75 = localDate58.until((java.time.temporal.Temporal) zonedDateTime72, temporalUnit74);
        java.time.chrono.ChronoLocalDate chronoLocalDate76 = localDate54.minus(1645434851L, temporalUnit74);
        boolean boolean77 = zonedDateTime20.isSupported(temporalUnit74);
        boolean boolean78 = localDate0.isSupported(temporalUnit74);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime3);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField15.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + temporalUnit16 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit16.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 365243238234L + "'", long17 == 365243238234L);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField25.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 23L + "'", long29 == 23L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(isoChronology31);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra33.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-719147L) + "'", long41 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology42);
        org.junit.Assert.assertTrue("'" + isoEra44 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra44.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(chronoPeriod52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(zoneId59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Etc/UTC" + "'", str60, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime61);
        org.junit.Assert.assertNotNull(zoneId62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Etc/UTC" + "'", str63, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertNotNull(zoneId65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Etc/UTC" + "'", str66, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(zonedDateTime72);
        org.junit.Assert.assertTrue("'" + chronoField73 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField73.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + temporalUnit74 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit74.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 365243238234L + "'", long75 == 365243238234L);
        org.junit.Assert.assertNotNull(chronoLocalDate76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap3 = java.nio.charset.Charset.availableCharsets();
        boolean boolean4 = strMap3.isEmpty();
        java.util.Locale locale5 = java.util.Locale.US;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.Cloneable cloneable8 = strMapMap0.put(strMap3, (java.lang.Cloneable) locale6);
        int int9 = strMap3.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap12 = strMap3.subMap("DecimalStyle[0+-.]", "{}");
        java.util.Set<java.lang.String> strSet13 = strMap12.keySet();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        int int17 = zoneOffsetTransitionList15.size();
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        boolean boolean42 = zoneOffsetTransitionList21.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition43 = null;
        boolean boolean44 = zoneOffsetTransitionList21.add(zoneOffsetTransition43);
        java.lang.Object[] objArray45 = zoneOffsetTransitionList21.toArray();
        java.lang.String[] strArray46 = java.util.Locale.getISOLanguages();
        java.lang.String[] strArray47 = zoneOffsetTransitionList21.toArray(strArray46);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream48 = zoneOffsetTransitionList21.stream();
        boolean boolean49 = zoneOffsetTransitionList15.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition50 = null;
        boolean boolean51 = zoneOffsetTransitionList21.add(zoneOffsetTransition50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = strSet13.containsAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Stati Uniti" + "'", str7, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 171 + "'", int9 == 171);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[null]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.lang.String str14 = offsetTime13.toString();
        java.time.ZoneOffset zoneOffset15 = offsetTime13.getOffset();
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_TIME;
        boolean boolean17 = offsetTime13.equals((java.lang.Object) dateTimeFormatter16);
        java.util.Set<java.time.temporal.TemporalField> temporalFieldSet18 = dateTimeFormatter16.getResolverFields();
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray21 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, zoneOffsetTransitionArray21);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray24 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, zoneOffsetTransitionArray24);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray27 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList28, zoneOffsetTransitionRuleArray27);
        java.time.zone.ZoneRules zoneRules30 = java.time.zone.ZoneRules.of(zoneOffset19, zoneOffset20, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = dateTimeFormatter16.format((java.time.temporal.TemporalAccessor) zoneOffset19);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "23:59:59.999999999+18:00" + "'", str14, "23:59:59.999999999+18:00");
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(temporalFieldSet18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneRules30);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        date1.setDate((int) (short) 1);
        date1.setTime(1645434854L);
        date1.setMinutes(1024);
        int int9 = date1.getSeconds();
        int int10 = date1.getSeconds();
        org.junit.Assert.assertEquals(date1.toString(), "Tue Jan 20 18:04:54 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54 + "'", int9 == 54);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54 + "'", int10 == 54);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 16, 299105452032L);
        java.util.OptionalLong optionalLong3 = longStream2.max();
        java.util.stream.LongStream longStream4 = longStream2.parallel();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.lang.String str3 = locale1.getDisplayCountry(locale2);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter5 = java.time.format.DateTimeFormatter.ofPattern("x-windows-iso2022jp", locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown pattern letter: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Stati Uniti" + "'", str3, "Stati Uniti");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.ZonedDateTime zonedDateTime1 = java.time.ZonedDateTime.now(clock0);
        java.time.LocalTime localTime2 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray8 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, zoneOffsetTransitionArray8);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray11 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList12 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList12, zoneOffsetTransitionRuleArray11);
        java.time.zone.ZoneRules zoneRules14 = java.time.zone.ZoneRules.of(zoneOffset3, zoneOffset4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList12);
        java.time.OffsetTime offsetTime15 = localTime2.atOffset(zoneOffset3);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange17 = offsetTime15.range((java.time.temporal.TemporalField) chronoField16);
        java.time.Duration duration18 = java.time.Duration.ZERO;
        java.time.Duration duration19 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal20 = null;
        java.time.temporal.Temporal temporal21 = duration19.subtractFrom(temporal20);
        long long22 = duration19.toDays();
        java.time.Duration duration23 = duration18.minus(duration19);
        java.time.OffsetTime offsetTime24 = offsetTime15.minus((java.time.temporal.TemporalAmount) duration19);
        java.time.LocalTime localTime25 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray28 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList29 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList29, zoneOffsetTransitionArray28);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray31 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList32 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, zoneOffsetTransitionArray31);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray34 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList35 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList35, zoneOffsetTransitionRuleArray34);
        java.time.zone.ZoneRules zoneRules37 = java.time.zone.ZoneRules.of(zoneOffset26, zoneOffset27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList29, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList35);
        java.time.OffsetTime offsetTime38 = localTime25.atOffset(zoneOffset26);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange40 = offsetTime38.range((java.time.temporal.TemporalField) chronoField39);
        java.time.Duration duration41 = java.time.Duration.ZERO;
        java.time.Duration duration42 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal43 = null;
        java.time.temporal.Temporal temporal44 = duration42.subtractFrom(temporal43);
        long long45 = duration42.toDays();
        java.time.Duration duration46 = duration41.minus(duration42);
        java.time.OffsetTime offsetTime47 = offsetTime38.minus((java.time.temporal.TemporalAmount) duration42);
        boolean boolean48 = offsetTime24.isAfter(offsetTime38);
        java.time.OffsetTime offsetTime50 = offsetTime24.withNano((int) '#');
        java.time.LocalTime localTime51 = offsetTime24.toLocalTime();
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime1.with((java.time.temporal.TemporalAdjuster) offsetTime24);
        java.time.OffsetTime offsetTime54 = offsetTime24.minusMinutes((long) (-2022));
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime56 = offsetTime24.withHour(171);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 171");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(zonedDateTime1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneRules14);
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField16.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNull(temporal21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(offsetTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneRules37);
        org.junit.Assert.assertNotNull(offsetTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNull(temporal44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(offsetTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(offsetTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(offsetTime54);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray0 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList1 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList1, zoneOffsetTransitionArray0);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream3 = zoneOffsetTransitionList1.stream();
        int int4 = zoneOffsetTransitionList1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.time.zone.ZoneOffsetTransition zoneOffsetTransition6 = zoneOffsetTransitionList1.get(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 59, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        boolean boolean11 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset12);
        java.util.Date date16 = new java.util.Date((long) (byte) 1);
        java.lang.Cloneable cloneable17 = strMapMap0.getOrDefault((java.lang.Object) localDateTime10, (java.lang.Cloneable) date16);
        java.time.LocalDateTime localDateTime19 = localDateTime10.plusHours((long) 31);
        java.time.DayOfWeek dayOfWeek20 = java.time.DayOfWeek.TUESDAY;
        java.time.temporal.TemporalField temporalField21 = null;
        boolean boolean22 = dayOfWeek20.isSupported(temporalField21);
        java.time.DayOfWeek dayOfWeek24 = dayOfWeek20.minus(1645434841L);
        java.time.chrono.IsoChronology isoChronology25 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate30 = isoChronology25.dateYearDay((java.time.chrono.Era) isoEra27, 0, 16);
        java.time.LocalTime localTime31 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime32 = localDate30.atTime(localTime31);
        java.time.LocalDate localDate34 = localDate30.withMonth(1);
        java.time.Duration duration35 = java.time.Duration.ZERO;
        java.time.Duration duration36 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal37 = null;
        java.time.temporal.Temporal temporal38 = duration36.subtractFrom(temporal37);
        long long39 = duration36.toDays();
        java.time.Duration duration40 = duration35.plus(duration36);
        java.time.LocalDate localDate41 = localDate34.minus((java.time.temporal.TemporalAmount) duration35);
        java.time.LocalDate localDate43 = localDate34.minusWeeks((long) 100);
        java.time.chrono.IsoChronology isoChronology44 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra46 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate49 = isoChronology44.dateYearDay((java.time.chrono.Era) isoEra46, 0, 16);
        java.time.Duration duration50 = java.time.Duration.ZERO;
        java.time.LocalDate localDate51 = localDate49.plus((java.time.temporal.TemporalAmount) duration50);
        java.time.LocalDateTime localDateTime52 = localDate51.atStartOfDay();
        java.time.LocalDate localDate54 = localDate51.plusYears((long) (byte) -1);
        java.time.LocalDate localDate55 = localDate43.with((java.time.temporal.TemporalAdjuster) localDate51);
        java.lang.String str56 = localDate51.toString();
        java.time.LocalDate localDate58 = localDate51.plusDays((long) 171);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime60 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray63 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList64, zoneOffsetTransitionArray63);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray66 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList67 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList67, zoneOffsetTransitionArray66);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray69 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList70 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList70, zoneOffsetTransitionRuleArray69);
        java.time.zone.ZoneRules zoneRules72 = java.time.zone.ZoneRules.of(zoneOffset61, zoneOffset62, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList64, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList67, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList70);
        java.time.OffsetTime offsetTime73 = localTime60.atOffset(zoneOffset61);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange75 = offsetTime73.range((java.time.temporal.TemporalField) chronoField74);
        java.time.OffsetTime offsetTime77 = chronoField59.adjustInto(offsetTime73, (long) 16);
        java.time.LocalTime localTime78 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset79 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray81 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList82 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList82, zoneOffsetTransitionArray81);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray84 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList85 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList85, zoneOffsetTransitionArray84);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray87 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList88 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList88, zoneOffsetTransitionRuleArray87);
        java.time.zone.ZoneRules zoneRules90 = java.time.zone.ZoneRules.of(zoneOffset79, zoneOffset80, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList82, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList85, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList88);
        java.time.OffsetTime offsetTime91 = localTime78.atOffset(zoneOffset79);
        java.time.temporal.ChronoField chronoField92 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange93 = offsetTime91.range((java.time.temporal.TemporalField) chronoField92);
        long long94 = offsetTime77.getLong((java.time.temporal.TemporalField) chronoField92);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery95 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period96 = offsetTime77.query(periodTemporalQuery95);
        java.time.Period period97 = localDate58.query(periodTemporalQuery95);
        java.time.Period period98 = dayOfWeek24.query(periodTemporalQuery95);
        java.time.Period period99 = localDateTime19.query(periodTemporalQuery95);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(cloneable17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + dayOfWeek20 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek20.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + dayOfWeek24 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek24.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(isoChronology25);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra27.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNull(temporal38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(isoChronology44);
        org.junit.Assert.assertTrue("'" + isoEra46 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra46.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0001-01-16" + "'", str56, "0001-01-16");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField59.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(zoneRules72);
        org.junit.Assert.assertNotNull(offsetTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField74.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange75);
        org.junit.Assert.assertNotNull(offsetTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(zoneOffset79);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(zoneRules90);
        org.junit.Assert.assertNotNull(offsetTime91);
        org.junit.Assert.assertTrue("'" + chronoField92 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField92.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 23L + "'", long94 == 23L);
        org.junit.Assert.assertNotNull(periodTemporalQuery95);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(period97);
        org.junit.Assert.assertNotNull(period98);
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.nio.CharBuffer charBuffer14 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer16 = charBuffer14.append((java.lang.CharSequence) "Etc/UTC");
        int int17 = charBuffer16.arrayOffset();
        boolean boolean18 = path11.equals((java.lang.Object) int17);
        java.nio.file.Path path19 = path11.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path21 = path11.getName(781000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645434897000L + "'", long9 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(path19);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(1);
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.wrap(byteArray4, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology8 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean9 = byteBuffer7.equals((java.lang.Object) isoChronology8);
        boolean boolean10 = byteBuffer7.isReadOnly();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj13 = charBuffer12.array();
        java.nio.ByteOrder byteOrder14 = charBuffer12.order();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer7.order(byteOrder14);
        int int16 = byteBuffer1.compareTo(byteBuffer15);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = byteBuffer1.putDouble((double) 365243238234L);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(isoChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteOrder14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        date1.setDate((int) (short) 1);
        date1.setTime(1645434854L);
        date1.setMinutes(1024);
        java.util.Date date9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = date1.before(date9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Tue Jan 20 18:04:54 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.STANDARD;
        char char3 = decimalStyle2.getZeroDigit();
        java.time.format.DecimalStyle decimalStyle5 = decimalStyle2.withZeroDigit('a');
        java.time.format.DecimalStyle decimalStyle7 = decimalStyle2.withPositiveSign('#');
        java.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withDecimalStyle(decimalStyle7);
        java.time.LocalTime localTime10 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray16 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList17, zoneOffsetTransitionArray16);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray19 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList20 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList20, zoneOffsetTransitionRuleArray19);
        java.time.zone.ZoneRules zoneRules22 = java.time.zone.ZoneRules.of(zoneOffset11, zoneOffset12, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList17, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList20);
        java.time.OffsetTime offsetTime23 = localTime10.atOffset(zoneOffset11);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange25 = offsetTime23.range((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean27 = offsetTime23.isSupported((java.time.temporal.TemporalField) chronoField26);
        java.time.OffsetTime offsetTime29 = offsetTime23.plusMinutes((long) 'u');
        java.time.LocalTime localTime30 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.OffsetTime offsetTime43 = localTime30.atOffset(zoneOffset31);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange45 = offsetTime43.range((java.time.temporal.TemporalField) chronoField44);
        java.time.Duration duration46 = java.time.Duration.ZERO;
        java.time.Duration duration47 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal48 = null;
        java.time.temporal.Temporal temporal49 = duration47.subtractFrom(temporal48);
        long long50 = duration47.toDays();
        java.time.Duration duration51 = duration46.minus(duration47);
        java.time.OffsetTime offsetTime52 = offsetTime43.minus((java.time.temporal.TemporalAmount) duration47);
        java.time.LocalTime localTime53 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray56 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList57 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList57, zoneOffsetTransitionArray56);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray59 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList60 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, zoneOffsetTransitionArray59);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray62 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList63 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList63, zoneOffsetTransitionRuleArray62);
        java.time.zone.ZoneRules zoneRules65 = java.time.zone.ZoneRules.of(zoneOffset54, zoneOffset55, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList57, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList63);
        java.time.OffsetTime offsetTime66 = localTime53.atOffset(zoneOffset54);
        java.time.temporal.ChronoField chronoField67 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange68 = offsetTime66.range((java.time.temporal.TemporalField) chronoField67);
        java.time.Duration duration69 = java.time.Duration.ZERO;
        java.time.Duration duration70 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal71 = null;
        java.time.temporal.Temporal temporal72 = duration70.subtractFrom(temporal71);
        long long73 = duration70.toDays();
        java.time.Duration duration74 = duration69.minus(duration70);
        java.time.OffsetTime offsetTime75 = offsetTime66.minus((java.time.temporal.TemporalAmount) duration70);
        boolean boolean76 = offsetTime52.isAfter(offsetTime66);
        java.time.OffsetTime offsetTime78 = offsetTime52.withNano((int) '#');
        java.time.LocalTime localTime79 = offsetTime52.toLocalTime();
        boolean boolean80 = offsetTime29.isEqual(offsetTime52);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery81 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period82 = offsetTime29.query(periodTemporalQuery81);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period83 = dateTimeFormatter0.parse((java.lang.CharSequence) "1970-01-01T18:01:37.00000012", periodTemporalQuery81);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '1970-01-01T18:01:37.00000012' could not be parsed at index 28");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '0' + "'", char3 == '0');
        org.junit.Assert.assertNotNull(decimalStyle5);
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(offsetTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(offsetTime43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNull(temporal49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(zoneRules65);
        org.junit.Assert.assertNotNull(offsetTime66);
        org.junit.Assert.assertTrue("'" + chronoField67 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField67.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNull(temporal72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(offsetTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(offsetTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery81);
        org.junit.Assert.assertNotNull(period82);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.nio.DoubleBuffer doubleBuffer8 = byteBuffer5.asDoubleBuffer();
        java.nio.DoubleBuffer doubleBuffer9 = doubleBuffer8.duplicate();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleBuffer8);
        org.junit.Assert.assertNotNull(doubleBuffer9);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.LocalTime localTime5 = localDateTime4.toLocalTime();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.String str10 = chronoField7.getDisplayName(locale8);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap11 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean13 = strMapMap11.containsKey((java.lang.Object) isoChronology12);
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, (-1), 10);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.wrap(byteArray20, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology24 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean25 = byteBuffer23.equals((java.lang.Object) isoChronology24);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap26 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean28 = strMapMap26.containsKey((java.lang.Object) isoChronology27);
        java.time.chrono.IsoEra isoEra29 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate32 = isoChronology27.dateYearDay((java.time.chrono.Era) isoEra29, (-1), 10);
        int int34 = isoChronology24.prolepticYear((java.time.chrono.Era) isoEra29, (int) '#');
        java.time.LocalDate localDate37 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra29, (int) (byte) 0, 2);
        boolean boolean38 = chronoField7.isSupportedBy((java.time.temporal.TemporalAccessor) localDate37);
        boolean boolean39 = localDateTime4.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.LocalDateTime localDateTime41 = localDateTime4.plusYears((long) 1970);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en-GB" + "'", str9, "en-GB");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AlignedWeekOfYear" + "'", str10, "AlignedWeekOfYear");
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(isoChronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + isoEra29 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra29.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-34) + "'", int34 == (-34));
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.lang.Object obj13 = properties1.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration14 = properties1.propertyNames();
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj17 = properties1.getOrDefault((java.lang.Object) linkOption15, (java.lang.Object) 9000L);
        java.lang.String str20 = properties1.getProperty("P1968Y1D", "1.0.0.100");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(wildcardEnumeration14);
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + 9000L + "'", obj17, 9000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1.0.0.100" + "'", str20, "1.0.0.100");
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI7 = new java.net.URI("", "", "AM/PM", 10000000, "java.util.InvalidPropertiesFormatException: DIRECT", "Fri", "/UTC");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: ://@AM/PM:10000000java.util.InvalidPropertiesFormatException:%20DIRECT?Fri#/UTC");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics8 = longStream7.summaryStatistics();
        java.util.function.IntConsumer intConsumer9 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics8);
        java.util.stream.IntStream intStream10 = intStream3.peek((java.util.function.IntConsumer) longSummaryStatistics4);
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        int int13 = charBuffer12.limit();
        java.util.stream.IntStream intStream14 = charBuffer12.chars();
        java.util.LongSummaryStatistics longSummaryStatistics15 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream18 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics19 = longStream18.summaryStatistics();
        java.util.function.IntConsumer intConsumer20 = longSummaryStatistics15.andThen((java.util.function.IntConsumer) longSummaryStatistics19);
        java.util.stream.IntStream intStream21 = intStream14.peek((java.util.function.IntConsumer) longSummaryStatistics15);
        longSummaryStatistics4.combine(longSummaryStatistics15);
        double double23 = longSummaryStatistics15.getAverage();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(longSummaryStatistics8);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertEquals(longSummaryStatistics15.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(longSummaryStatistics19);
        org.junit.Assert.assertEquals(longSummaryStatistics19.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer20);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        boolean boolean11 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset12);
        java.util.Date date16 = new java.util.Date((long) (byte) 1);
        java.lang.Cloneable cloneable17 = strMapMap0.getOrDefault((java.lang.Object) localDateTime10, (java.lang.Cloneable) date16);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap18 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology19 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean20 = strMapMap18.containsKey((java.lang.Object) isoChronology19);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap21 = java.nio.charset.Charset.availableCharsets();
        boolean boolean22 = strMap21.isEmpty();
        java.util.Locale locale23 = java.util.Locale.US;
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.Cloneable cloneable26 = strMapMap18.put(strMap21, (java.lang.Cloneable) locale24);
        int int27 = strMap21.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap30 = strMap21.subMap("DecimalStyle[0+-.]", "{}");
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray45 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, zoneOffsetTransitionArray45);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray51 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52, zoneOffsetTransitionRuleArray51);
        java.time.zone.ZoneRules zoneRules54 = java.time.zone.ZoneRules.of(zoneOffset43, zoneOffset44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52);
        boolean boolean55 = zoneOffsetTransitionList34.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49);
        zoneOffsetTransitionList34.clear();
        java.lang.Cloneable cloneable57 = strMapMap0.putIfAbsent(strMap21, (java.lang.Cloneable) zoneOffsetTransitionList34);
        java.lang.String str58 = strMap21.lastKey();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(cloneable17);
        org.junit.Assert.assertNotNull(isoChronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Stati Uniti" + "'", str25, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 171 + "'", int27 == 171);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(cloneable57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "x-windows-iso2022jp" + "'", str58, "x-windows-iso2022jp");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.lang.String str3 = charBuffer1.toString();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer5 = charBuffer1.slice();
        java.nio.CharBuffer charBuffer6 = charBuffer5.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer7 = charBuffer5.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str3, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        java.time.format.DecimalStyle decimalStyle0 = java.time.format.DecimalStyle.STANDARD;
        char char1 = decimalStyle0.getZeroDigit();
        boolean boolean3 = decimalStyle0.equals((java.lang.Object) "/");
        char char4 = decimalStyle0.getPositiveSign();
        org.junit.Assert.assertNotNull(decimalStyle0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '0' + "'", char1 == '0');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '+' + "'", char4 == '+');
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet4 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Stati Uniti" + "'", str2, "Stati Uniti");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap1 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean3 = strMapMap1.containsKey((java.lang.Object) isoChronology2);
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal5 = null;
        java.time.temporal.Temporal temporal6 = duration4.subtractFrom(temporal5);
        long long7 = duration4.toDays();
        boolean boolean8 = strMapMap1.contains((java.lang.Object) duration4);
        java.lang.Cloneable cloneable9 = strMapMap0.get((java.lang.Object) duration4);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        long long16 = duration11.toDays();
        java.time.Duration duration17 = duration4.plus(duration11);
        long long18 = duration17.toMinutes();
        java.time.Duration duration20 = duration17.minusMillis(280506064896L);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNull(temporal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(cloneable9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        java.net.URISyntaxException uRISyntaxException2 = new java.net.URISyntaxException("Etc", "java.nio.HeapLongBuffer[pos=1 lim=59 cap=59]");
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalDate localDate20 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra14, 120, (int) '-');
        java.time.ZoneId zoneId21 = java.time.ZoneId.systemDefault();
        java.lang.String str22 = zoneId21.getId();
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.now(zoneId21);
        java.time.ZoneId zoneId24 = java.time.ZoneId.systemDefault();
        java.lang.String str25 = zoneId24.getId();
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime23.withZoneSameInstant(zoneId24);
        java.time.ZoneId zoneId27 = java.time.ZoneId.systemDefault();
        java.lang.String str28 = zoneId27.getId();
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.now(zoneId27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime29.withYear((int) (short) 1);
        boolean boolean32 = zonedDateTime26.equals((java.lang.Object) zonedDateTime31);
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime26.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology35 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime26);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        long long37 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField36);
        boolean boolean38 = isoEra14.isSupported((java.time.temporal.TemporalField) chronoField36);
        java.time.chrono.IsoChronology isoChronology39 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra41 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate44 = isoChronology39.dateYearDay((java.time.chrono.Era) isoEra41, 0, 16);
        java.time.LocalTime localTime45 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime46 = localDate44.atTime(localTime45);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray49 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList50 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, zoneOffsetTransitionArray49);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray52 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList53 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList53, zoneOffsetTransitionArray52);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray55 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList56 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList56, zoneOffsetTransitionRuleArray55);
        java.time.zone.ZoneRules zoneRules58 = java.time.zone.ZoneRules.of(zoneOffset47, zoneOffset48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList53, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList56);
        long long59 = localDateTime46.toEpochSecond(zoneOffset47);
        java.time.LocalDateTime localDateTime61 = localDateTime46.plusDays((long) (byte) 1);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime64 = localDateTime46.with((java.time.temporal.TemporalField) chronoField62, 9L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange65 = isoEra14.range((java.time.temporal.TemporalField) chronoField62);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: SecondOfMinute");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Etc/UTC" + "'", str22, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(zoneId24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Etc/UTC" + "'", str25, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Etc/UTC" + "'", str28, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField36.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645435383L + "'", long37 == 1645435383L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(isoChronology39);
        org.junit.Assert.assertTrue("'" + isoEra41 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra41.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(zoneRules58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-62134279201L) + "'", long59 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField62.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime64);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.util.stream.DoubleStream doubleStream11 = doubleStream9.parallel();
        java.util.stream.DoubleStream doubleStream12 = doubleStream9.parallel();
        java.util.function.DoublePredicate doublePredicate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = doubleStream12.allMatch(doublePredicate13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(doubleStream12);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime91.plusYears((long) 'a');
        int int94 = offsetDateTime93.getNano();
        java.time.OffsetDateTime offsetDateTime96 = offsetDateTime93.minusMinutes((long) 48);
        java.time.OffsetTime offsetTime97 = offsetDateTime96.toOffsetTime();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 120 + "'", int94 == 120);
        org.junit.Assert.assertNotNull(offsetDateTime96);
        org.junit.Assert.assertNotNull(offsetTime97);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        resizableDoubleArray0.setElement((int) '-', (double) 1645434860L);
        int int4 = resizableDoubleArray0.getNumElements();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 46 + "'", int4 == 46);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.64543486E9]");
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        char char3 = charBuffer1.get();
        java.time.format.DateTimeFormatter dateTimeFormatter4 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime5 = java.time.OffsetTime.parse((java.lang.CharSequence) charBuffer1, dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '???????????????' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\000' + "'", char3 == '\000');
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        intStream3.close();
        boolean boolean5 = intStream3.isParallel();
        java.util.function.IntPredicate intPredicate6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = intStream3.anyMatch(intPredicate6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime88.plusHours((long) 256);
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime93.plusSeconds(8783316670000L);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(offsetDateTime95);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        java.util.Hashtable<java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>, java.io.InvalidObjectException> localDateChronoLocalDateTimeMap0 = new java.util.Hashtable<java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>, java.io.InvalidObjectException>();
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration1 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal2 = null;
        java.time.temporal.Temporal temporal3 = duration1.subtractFrom(temporal2);
        long long4 = duration1.toDays();
        java.time.Duration duration5 = duration0.plus(duration1);
        java.time.Duration duration6 = java.time.Duration.from((java.time.temporal.TemporalAmount) duration0);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap7 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology8 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean9 = strMapMap7.containsKey((java.lang.Object) isoChronology8);
        java.time.chrono.IsoEra isoEra10 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate13 = isoChronology8.dateYearDay((java.time.chrono.Era) isoEra10, (-1), 10);
        java.time.Duration duration14 = java.time.Duration.ZERO;
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal16 = null;
        java.time.temporal.Temporal temporal17 = duration15.subtractFrom(temporal16);
        long long18 = duration15.toDays();
        java.time.Duration duration19 = duration14.plus(duration15);
        long long20 = duration15.toDays();
        java.lang.String str21 = duration15.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate22 = localDate13.plus((java.time.temporal.TemporalAmount) duration15);
        java.time.LocalDate localDate24 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology25 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate30 = isoChronology25.dateYearDay((java.time.chrono.Era) isoEra27, 0, 16);
        java.time.LocalTime localTime31 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime32 = localDate30.atTime(localTime31);
        java.time.LocalDate localDate34 = localDate30.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod35 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate24, (java.time.chrono.ChronoLocalDate) localDate30);
        java.time.LocalDate localDate37 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate39 = java.time.LocalDate.ofEpochDay((long) 10);
        int int40 = localDate37.compareTo((java.time.chrono.ChronoLocalDate) localDate39);
        java.time.temporal.Temporal temporal41 = localDate24.adjustInto((java.time.temporal.Temporal) localDate39);
        java.time.LocalDate localDate43 = localDate39.withMonth((int) (short) 10);
        java.time.format.DateTimeFormatter dateTimeFormatter44 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.String str45 = localDate39.format(dateTimeFormatter44);
        java.time.Period period46 = localDate13.until((java.time.chrono.ChronoLocalDate) localDate39);
        java.time.temporal.Temporal temporal47 = duration0.subtractFrom((java.time.temporal.Temporal) localDate13);
        java.time.Duration duration49 = java.time.Duration.ofMinutes((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate50 = localDate13.plus((java.time.temporal.TemporalAmount) duration49);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Seconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNull(temporal3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(isoChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + isoEra10 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra10.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNull(temporal17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0S" + "'", str21, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(isoChronology25);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra27.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronoPeriod35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(temporal41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "19700111" + "'", str45, "19700111");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(temporal47);
        org.junit.Assert.assertNotNull(duration49);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneId zoneId15 = java.time.ZoneId.systemDefault();
        java.lang.String str16 = zoneId15.getId();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.now(zoneId15);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime17.withZoneSameInstant(zoneId18);
        java.time.ZonedDateTime zonedDateTime21 = localDateTime9.atZone(zoneId18);
        java.time.zone.ZoneRules zoneRules22 = zoneId18.getRules();
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList23 = zoneRules22.getTransitionRules();
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate27 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset26);
        java.time.ZoneOffset zoneOffset29 = zoneRules22.getOffset(localDateTime28);
        java.time.OffsetDateTime offsetDateTime30 = java.time.OffsetDateTime.now((java.time.ZoneId) zoneOffset29);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList23);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer5.compact();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer6.compact();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = byteBuffer6.getDouble();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList12 = period11.getUnits();
        java.time.chrono.ChronoPeriod chronoPeriod13 = period11.negated();
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.DayOfWeek dayOfWeek22 = localDate19.getDayOfWeek();
        java.time.chrono.IsoChronology isoChronology23 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate28 = isoChronology23.dateYearDay((java.time.chrono.Era) isoEra25, 0, 16);
        java.time.LocalTime localTime29 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime30 = localDate28.atTime(localTime29);
        java.time.LocalDate localDate32 = localDate28.withMonth(1);
        java.time.Period period33 = localDate19.until((java.time.chrono.ChronoLocalDate) localDate28);
        java.time.Period period34 = period11.plus((java.time.temporal.TemporalAmount) period33);
        boolean boolean35 = period33.isNegative();
        java.time.chrono.Chronology chronology36 = period33.getChronology();
        java.time.Period period38 = period33.plusMonths(1645L);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(temporalUnitList12);
        org.junit.Assert.assertNotNull(chronoPeriod13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + dayOfWeek22 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek22.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(isoChronology23);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra25.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        double[] doubleArray9 = new double[] { 23L, (byte) 1, 7187392471159151072L, 2, 23L };
        java.util.stream.DoubleStream doubleStream10 = java.util.stream.DoubleStream.of(doubleArray9);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics11 = new java.util.DoubleSummaryStatistics();
        double double12 = doubleSummaryStatistics11.getMin();
        double double13 = doubleSummaryStatistics11.getSum();
        double double14 = doubleSummaryStatistics11.getMax();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics15 = new java.util.DoubleSummaryStatistics();
        double double16 = doubleSummaryStatistics15.getMin();
        double double17 = doubleSummaryStatistics15.getSum();
        doubleSummaryStatistics11.combine(doubleSummaryStatistics15);
        doubleStream10.forEach((java.util.function.DoubleConsumer) doubleSummaryStatistics15);
        ofDouble3.forEachRemaining((java.util.function.DoubleConsumer) doubleSummaryStatistics15);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[23.0, 1.0, 7.1873924711591506E18, 2.0, 23.0]");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertEquals(doubleSummaryStatistics11.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.NEGATIVE_INFINITY + "'", double14 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertEquals(doubleSummaryStatistics15.toString(), "DoubleSummaryStatistics{count=5, sum=7187392471159150600.000000, min=1.000000, average=1437478494231830020.000000, max=7187392471159150600.000000}");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getStandardDeviation();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = descriptiveStatistics0.getPercentile(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str2 = locale0.getExtension('a');
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime1 = java.time.ZonedDateTime.parse((java.lang.CharSequence) "Tuesday");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Tuesday' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.text.ParsePosition parsePosition4 = new java.text.ParsePosition((int) (byte) 0);
        int int5 = parsePosition4.getIndex();
        parsePosition4.setIndex((int) 'x');
        int int8 = parsePosition4.getErrorIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor9 = dateTimeFormatter0.parse((java.lang.CharSequence) "1970-01-01T18:01:37.00000012", parsePosition4);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        java.io.File file4 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long5 = file4.lastModified();
        java.net.URL uRL6 = file4.toURL();
        java.io.File file7 = file4.getCanonicalFile();
        java.lang.String str8 = file4.getPath();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file9 = java.io.File.createTempFile("java.security.PrivilegedActionException: java.util.concurrent.TimeoutException: 1970-01-01T18:01:37.00000012", "OptionalLong[100]", file4);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file4.getParent(), "/");
        org.junit.Assert.assertEquals(file4.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645434897000L + "'", long5 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL6);
        org.junit.Assert.assertEquals(uRL6.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/");
        org.junit.Assert.assertEquals(file7.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/1970-01-01T18:01:37.00000012" + "'", str8, "/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        zoneOffsetTransitionList3.clear();
        java.util.Optional<java.util.AbstractCollection<java.time.zone.ZoneOffsetTransition>> zoneOffsetTransitionCollectionOptional26 = java.util.Optional.ofNullable((java.util.AbstractCollection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream27 = zoneOffsetTransitionList3.stream();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionCollectionOptional26);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream27);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.of((int) ':', 64, (int) ':', (int) '\000', 13, 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 64");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        int int90 = offsetDateTime88.getMinute();
        java.time.OffsetTime offsetTime91 = offsetDateTime88.toOffsetTime();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(offsetTime91);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.LocalDate localDate7 = localDate5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.Duration duration9 = duration6.withNanos((int) (byte) 0);
        java.time.Duration duration11 = duration6.minusNanos(1645434849L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList12 = duration11.getUnits();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(temporalUnitList12);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.OptionalDouble optionalDouble2 = doubleStream1.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Double> doubleStream3 = doubleStream1.boxed();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) '4', (long) ' ');
        java.time.Instant instant4 = instant2.plusNanos(100L);
        java.time.Instant instant6 = instant2.minusNanos((long) (-2004260627));
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        boolean boolean1 = charset0.isRegistered();
        java.nio.charset.CharsetEncoder charsetEncoder2 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.wrap(byteArray5, (int) (short) 0, 0);
        int int9 = byteBuffer8.arrayOffset();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.slice();
        java.nio.Buffer buffer11 = byteBuffer8.rewind();
        byte[] byteArray12 = byteBuffer8.array();
        boolean boolean13 = charsetEncoder2.isLegalReplacement(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.wrap(byteArray12, (-1), 59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(buffer11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress5 = java.net.InetAddress.getByAddress(byteArray4);
        java.net.NetworkInterface networkInterface6 = java.net.NetworkInterface.getByInetAddress(inetAddress5);
        java.lang.String str7 = inetAddress5.getCanonicalHostName();
        boolean boolean8 = inetAddress5.isLinkLocalAddress();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress5);
        org.junit.Assert.assertNull(networkInterface6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1.0.0.100" + "'", str7, "1.0.0.100");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.ZonedDateTime zonedDateTime1 = java.time.ZonedDateTime.now(clock0);
        int int2 = zonedDateTime1.getSecond();
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime1.withHour(4);
        int int5 = zonedDateTime1.getDayOfMonth();
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(zonedDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21 + "'", int5 == 21);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((-62134279201L), (-62134279201L));
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.MAX;
        java.lang.String str6 = zoneOffset5.getId();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset5);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MAX;
        java.lang.String str11 = zoneOffset10.getId();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset10);
        boolean boolean13 = localDateTime7.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.format.DateTimeFormatter dateTimeFormatter14 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str15 = localDateTime12.format(dateTimeFormatter14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int17 = localDateTime12.get((java.time.temporal.TemporalField) chronoField16);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.now(zoneId18);
        java.time.ZoneId zoneId21 = java.time.ZoneId.systemDefault();
        java.lang.String str22 = zoneId21.getId();
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime20.withZoneSameInstant(zoneId21);
        java.time.ZonedDateTime zonedDateTime24 = localDateTime12.atZone(zoneId21);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofInstant(instant2, zoneId21);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange27 = chronoField26.range();
        long long28 = localDateTime25.getLong((java.time.temporal.TemporalField) chronoField26);
        boolean boolean29 = chronoField26.isDateBased();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+18:00" + "'", str6, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+18:00" + "'", str11, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str15, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Etc/UTC" + "'", str22, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField26.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 56L + "'", long28 == 56L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        double[] doubleArray2 = doubleStream1.toArray();
        java.util.function.DoubleToLongFunction doubleToLongFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream4 = doubleStream1.mapToLong(doubleToLongFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        double double3 = descriptiveStatistics0.getSkewness();
        long long4 = descriptiveStatistics0.getN();
        double double5 = descriptiveStatistics0.getSkewness();
        double double6 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics7.setWindowSize((int) (short) -1);
        double[] doubleArray10 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics11.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics14.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getGeometricMeanImpl();
        double[] doubleArray23 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double24 = univariateStatistic17.evaluate(doubleArray23);
        descriptiveStatistics11.setGeometricMeanImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic26);
        descriptiveStatistics0.setMaxImpl(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic26);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        java.nio.DoubleBuffer doubleBuffer5 = doubleBuffer4.asReadOnlyBuffer();
        double[] doubleArray9 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer10 = java.nio.DoubleBuffer.wrap(doubleArray9);
        boolean boolean11 = doubleBuffer10.hasArray();
        double[] doubleArray15 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer16 = java.nio.DoubleBuffer.wrap(doubleArray15);
        java.nio.DoubleBuffer doubleBuffer17 = doubleBuffer10.get(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer20 = doubleBuffer4.put(doubleArray15, (-5), 13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer16);
        org.junit.Assert.assertNotNull(doubleBuffer17);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.stream.LongStream.Builder builder3 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream longStream4 = longStream2.peek((java.util.function.LongConsumer) builder3);
        java.util.stream.LongStream longStream5 = builder3.build();
        java.util.stream.LongStream longStream6 = longStream5.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream7 = longStream5.sorted();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate11 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset10);
        java.time.chrono.ChronoPeriod chronoPeriod12 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate9, (java.time.chrono.ChronoLocalDate) localDate11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int15 = chronoField13.checkValidIntValue((long) 59);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate17 = localDate11.with((java.time.temporal.TemporalField) chronoField13, 299105394688L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 299105394688");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField13.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalDate localDate20 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra14, 120, (int) '-');
        java.time.ZoneId zoneId21 = java.time.ZoneId.systemDefault();
        java.lang.String str22 = zoneId21.getId();
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.now(zoneId21);
        java.time.ZoneId zoneId24 = java.time.ZoneId.systemDefault();
        java.lang.String str25 = zoneId24.getId();
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime23.withZoneSameInstant(zoneId24);
        java.time.ZoneId zoneId27 = java.time.ZoneId.systemDefault();
        java.lang.String str28 = zoneId27.getId();
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.now(zoneId27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime29.withYear((int) (short) 1);
        boolean boolean32 = zonedDateTime26.equals((java.lang.Object) zonedDateTime31);
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime26.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology35 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime26);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        long long37 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField36);
        boolean boolean38 = isoEra14.isSupported((java.time.temporal.TemporalField) chronoField36);
        java.time.DayOfWeek dayOfWeek39 = java.time.DayOfWeek.FRIDAY;
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap40 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology41 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean42 = strMapMap40.containsKey((java.lang.Object) isoChronology41);
        java.time.Duration duration43 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal44 = null;
        java.time.temporal.Temporal temporal45 = duration43.subtractFrom(temporal44);
        long long46 = duration43.toDays();
        boolean boolean47 = strMapMap40.contains((java.lang.Object) duration43);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray50 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, zoneOffsetTransitionArray50);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray53 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList54 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, zoneOffsetTransitionArray53);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray56 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList57 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList57, zoneOffsetTransitionRuleArray56);
        java.time.zone.ZoneRules zoneRules59 = java.time.zone.ZoneRules.of(zoneOffset48, zoneOffset49, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList57);
        java.time.Clock clock60 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset48);
        java.time.format.TextStyle textStyle61 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = zoneOffset48.getDisplayName(textStyle61, locale62);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray64 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList65 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, zoneOffsetTransitionArray64);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream67 = zoneOffsetTransitionList65.stream();
        int int68 = zoneOffsetTransitionList65.size();
        java.lang.Cloneable cloneable69 = strMapMap40.getOrDefault((java.lang.Object) textStyle61, (java.lang.Cloneable) zoneOffsetTransitionList65);
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale71 = java.util.Locale.UK;
        java.lang.String str72 = locale71.toLanguageTag();
        java.lang.String str73 = chronoField70.getDisplayName(locale71);
        java.lang.String str74 = locale71.getScript();
        java.lang.String str75 = dayOfWeek39.getDisplayName(textStyle61, locale71);
        java.util.Locale locale76 = java.util.Locale.US;
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.lang.String str78 = locale76.getDisplayCountry(locale77);
        java.lang.String str79 = isoEra14.getDisplayName(textStyle61, locale76);
        java.lang.String str80 = locale76.getCountry();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Etc/UTC" + "'", str22, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(zoneId24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Etc/UTC" + "'", str25, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Etc/UTC" + "'", str28, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField36.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645435384L + "'", long37 == 1645435384L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + dayOfWeek39 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek39.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertNotNull(isoChronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNull(temporal45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneRules59);
        org.junit.Assert.assertNotNull(clock60);
        org.junit.Assert.assertTrue("'" + textStyle61 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle61.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+18:00" + "'", str63, "+18:00");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(cloneable69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField70.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "en-GB" + "'", str72, "en-GB");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "AlignedWeekOfYear" + "'", str73, "AlignedWeekOfYear");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Fri" + "'", str75, "Fri");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Stati Uniti" + "'", str78, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "US" + "'", str80, "US");
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        java.net.URI uRI4 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI5 = uRI4.normalize();
        java.lang.String str6 = uRI4.getRawSchemeSpecificPart();
        org.junit.Assert.assertNotNull(uRI5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "//Etc/UTC" + "'", str6, "//Etc/UTC");
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        double[] doubleArray2 = doubleStream1.toArray();
        java.util.function.DoubleToIntFunction doubleToIntFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = doubleStream1.mapToInt(doubleToIntFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.of(255, (-999998029), 52, (int) '+', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): -999998029");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        java.nio.IntBuffer intBuffer2 = intBuffer1.duplicate();
        java.nio.IntBuffer intBuffer3 = intBuffer2.compact();
        boolean boolean4 = intBuffer3.isDirect();
        java.nio.Buffer buffer5 = intBuffer3.rewind();
        java.lang.String str6 = intBuffer3.toString();
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertNotNull(intBuffer2);
        org.junit.Assert.assertNotNull(intBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.nio.HeapIntBuffer[pos=0 lim=13 cap=13]" + "'", str6, "java.nio.HeapIntBuffer[pos=0 lim=13 cap=13]");
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.wrap(byteArray9, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = byteBuffer12.equals((java.lang.Object) isoChronology13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean17 = strMapMap15.containsKey((java.lang.Object) isoChronology16);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, (-1), 10);
        int int23 = isoChronology13.prolepticYear((java.time.chrono.Era) isoEra18, (int) '#');
        java.time.LocalDate localDate26 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra18, (int) (byte) 0, 2);
        java.time.chrono.ChronoPeriod chronoPeriod30 = isoChronology1.period(1, (int) (short) 1, 365);
        java.time.LocalDate localDate32 = isoChronology1.dateEpochDay((long) 365);
        java.time.LocalTime localTime33 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray42 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43, zoneOffsetTransitionRuleArray42);
        java.time.zone.ZoneRules zoneRules45 = java.time.zone.ZoneRules.of(zoneOffset34, zoneOffset35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43);
        java.time.OffsetTime offsetTime46 = localTime33.atOffset(zoneOffset34);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange48 = offsetTime46.range((java.time.temporal.TemporalField) chronoField47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean50 = offsetTime46.isSupported((java.time.temporal.TemporalField) chronoField49);
        int int51 = localDate32.get((java.time.temporal.TemporalField) chronoField49);
        boolean boolean52 = chronoField49.isTimeBased();
        boolean boolean53 = chronoField49.isTimeBased();
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.now();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime56 = chronoField49.adjustInto(localDateTime54, 1645434862000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for AlignedWeekOfYear (valid values 1 - 53): 1645434862000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-34) + "'", int23 == (-34));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(offsetTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField47.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField49.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        java.security.NoSuchProviderException noSuchProviderException1 = new java.security.NoSuchProviderException("1.0.0.100");
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(168, (float) 11);
        resizableDoubleArray2.addElement(Double.POSITIVE_INFINITY);
        resizableDoubleArray2.addElement((double) 7187392471159151072L);
        double double8 = resizableDoubleArray2.addElementRolling((double) 5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = java.time.OffsetTime.of(localTime0, zoneOffset2);
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.LocalTime localTime23 = localTime20.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap24 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology25 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean26 = strMapMap24.containsKey((java.lang.Object) isoChronology25);
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate30 = isoChronology25.dateYearDay((java.time.chrono.Era) isoEra27, (-1), 10);
        java.time.Duration duration31 = java.time.Duration.ZERO;
        java.time.Duration duration32 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal33 = null;
        java.time.temporal.Temporal temporal34 = duration32.subtractFrom(temporal33);
        long long35 = duration32.toDays();
        java.time.Duration duration36 = duration31.plus(duration32);
        long long37 = duration32.toDays();
        java.lang.String str38 = duration32.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate39 = localDate30.plus((java.time.temporal.TemporalAmount) duration32);
        java.time.LocalTime localTime40 = localTime20.minus((java.time.temporal.TemporalAmount) duration32);
        boolean boolean41 = localTime0.isAfter(localTime40);
        java.time.ZoneId zoneId42 = java.time.ZoneId.systemDefault();
        java.lang.String str43 = zoneId42.getId();
        java.time.ZonedDateTime zonedDateTime44 = java.time.ZonedDateTime.now(zoneId42);
        java.time.ZonedDateTime zonedDateTime46 = zonedDateTime44.withYear((int) (short) 1);
        java.time.LocalTime localTime47 = zonedDateTime46.toLocalTime();
        boolean boolean48 = localTime40.isAfter(localTime47);
        java.time.LocalTime localTime50 = localTime47.withNano(14);
        int int51 = localTime50.getMinute();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(isoChronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra27.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNull(temporal34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0S" + "'", str38, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneId42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Etc/UTC" + "'", str43, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 23 + "'", int51 == 23);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        java.time.temporal.TemporalAccessor temporalAccessor0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.from(temporalAccessor0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: temporal");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        boolean boolean11 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset12);
        java.util.Date date16 = new java.util.Date((long) (byte) 1);
        java.lang.Cloneable cloneable17 = strMapMap0.getOrDefault((java.lang.Object) localDateTime10, (java.lang.Cloneable) date16);
        date16.setYear((int) (byte) 1);
        java.time.Instant instant20 = date16.toInstant();
        boolean boolean22 = date16.equals((java.lang.Object) "");
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 UTC 1901");
        org.junit.Assert.assertNotNull(cloneable17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.time.chrono.Chronology chronology4 = java.time.chrono.Chronology.ofLocale(locale3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap5 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = strMapMap5.containsKey((java.lang.Object) isoChronology6);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap8 = java.nio.charset.Charset.availableCharsets();
        boolean boolean9 = strMap8.isEmpty();
        java.util.Locale locale10 = java.util.Locale.US;
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.Cloneable cloneable13 = strMapMap5.put(strMap8, (java.lang.Cloneable) locale11);
        java.time.format.DateTimeFormatter dateTimeFormatter14 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale15 = dateTimeFormatter14.getLocale();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean18 = strMapMap16.containsKey((java.lang.Object) isoChronology17);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap19 = java.nio.charset.Charset.availableCharsets();
        boolean boolean20 = strMap19.isEmpty();
        java.util.Locale locale21 = java.util.Locale.US;
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.Cloneable cloneable24 = strMapMap16.put(strMap19, (java.lang.Cloneable) locale22);
        java.lang.String str25 = locale15.getDisplayVariant(locale22);
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.time.format.DecimalStyle decimalStyle27 = java.time.format.DecimalStyle.of(locale26);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.time.format.DateTimeFormatter dateTimeFormatter29 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale30 = dateTimeFormatter29.getLocale();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap31 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology32 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean33 = strMapMap31.containsKey((java.lang.Object) isoChronology32);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap34 = java.nio.charset.Charset.availableCharsets();
        boolean boolean35 = strMap34.isEmpty();
        java.util.Locale locale36 = java.util.Locale.US;
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale36.getDisplayCountry(locale37);
        java.lang.Cloneable cloneable39 = strMapMap31.put(strMap34, (java.lang.Cloneable) locale37);
        java.lang.String str40 = locale30.getDisplayVariant(locale37);
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.time.chrono.Chronology chronology42 = java.time.chrono.Chronology.ofLocale(locale41);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray45 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, zoneOffsetTransitionArray45);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray51 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52, zoneOffsetTransitionRuleArray51);
        java.time.zone.ZoneRules zoneRules54 = java.time.zone.ZoneRules.of(zoneOffset43, zoneOffset44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52);
        java.time.Clock clock55 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset43);
        java.time.format.TextStyle textStyle56 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = zoneOffset43.getDisplayName(textStyle56, locale57);
        java.util.Locale[] localeArray59 = new java.util.Locale[] { locale3, locale11, locale22, locale26, locale28, locale30, locale41, locale57 };
        java.util.ArrayList<java.util.Locale> localeList60 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList60, localeArray59);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap63 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology64 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean65 = strMapMap63.containsKey((java.lang.Object) isoChronology64);
        java.time.Duration duration66 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal67 = null;
        java.time.temporal.Temporal temporal68 = duration66.subtractFrom(temporal67);
        long long69 = duration66.toDays();
        boolean boolean70 = strMapMap63.contains((java.lang.Object) duration66);
        java.time.format.DateTimeFormatter dateTimeFormatter71 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable72 = strMapMap63.get((java.lang.Object) dateTimeFormatter71);
        java.lang.Cloneable cloneable74 = strMapMap63.get((java.lang.Object) false);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap75 = java.nio.charset.Charset.availableCharsets();
        boolean boolean76 = strMap75.isEmpty();
        java.util.Set<java.lang.String> strSet77 = strMap75.keySet();
        int int78 = strMap75.size();
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale80 = java.util.Locale.UK;
        java.lang.String str81 = locale80.toLanguageTag();
        java.lang.String str82 = chronoField79.getDisplayName(locale80);
        java.lang.Cloneable cloneable83 = strMapMap63.replace(strMap75, (java.lang.Cloneable) locale80);
        java.util.Comparator<? super java.lang.String> wildcardComparator84 = strMap75.comparator();
        java.util.Set<java.lang.String> strSet85 = strMap75.keySet();
        java.lang.String str86 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet85);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Stati Uniti" + "'", str12, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Stati Uniti" + "'", str23, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertNotNull(decimalStyle27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(isoChronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Stati Uniti" + "'", str38, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertNotNull(clock55);
        org.junit.Assert.assertTrue("'" + textStyle56 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle56.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+18:00" + "'", str58, "+18:00");
        org.junit.Assert.assertNotNull(localeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(isoChronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNull(temporal68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(cloneable72);
        org.junit.Assert.assertNull(cloneable74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 171 + "'", int78 == 171);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField79.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "en-GB" + "'", str81, "en-GB");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "AlignedWeekOfYear" + "'", str82, "AlignedWeekOfYear");
        org.junit.Assert.assertNull(cloneable83);
        org.junit.Assert.assertNotNull(wildcardComparator84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file13 = path12.toFile();
        java.io.File file16 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long17 = file16.lastModified();
        java.net.URL uRL18 = file16.toURL();
        java.nio.file.Path path19 = file16.toPath();
        java.io.File file22 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long23 = file22.lastModified();
        java.net.URL uRL24 = file22.toURL();
        java.nio.file.Path path25 = file22.toPath();
        java.nio.file.Path path26 = path19.relativize(path25);
        java.io.File file29 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long30 = file29.lastModified();
        java.net.URL uRL31 = file29.toURL();
        java.nio.file.Path path32 = file29.toPath();
        java.io.File file35 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long36 = file35.lastModified();
        java.net.URL uRL37 = file35.toURL();
        java.nio.file.Path path38 = file35.toPath();
        java.nio.file.Path path39 = path32.relativize(path38);
        boolean boolean40 = path25.startsWith(path32);
        java.io.File file43 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long44 = file43.lastModified();
        java.net.URL uRL45 = file43.toURL();
        java.nio.file.Path path46 = file43.toPath();
        java.io.File file49 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long50 = file49.lastModified();
        java.net.URL uRL51 = file49.toURL();
        java.nio.file.Path path52 = file49.toPath();
        java.nio.file.Path path53 = path46.relativize(path52);
        java.nio.CharBuffer charBuffer55 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer57 = charBuffer55.append((java.lang.CharSequence) "Etc/UTC");
        int int58 = charBuffer57.arrayOffset();
        boolean boolean59 = path52.equals((java.lang.Object) int58);
        java.nio.file.Path path60 = path32.relativize(path52);
        boolean boolean61 = path12.endsWith(path60);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645434897000L + "'", long9 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "");
        org.junit.Assert.assertEquals(file16.getParent(), "/");
        org.junit.Assert.assertEquals(file16.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645434897000L + "'", long17 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL18);
        org.junit.Assert.assertEquals(uRL18.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path19);
        org.junit.Assert.assertEquals(file22.getParent(), "/");
        org.junit.Assert.assertEquals(file22.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645434897000L + "'", long23 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL24);
        org.junit.Assert.assertEquals(uRL24.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertEquals(file29.getParent(), "/");
        org.junit.Assert.assertEquals(file29.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645434897000L + "'", long30 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL31);
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertEquals(file35.getParent(), "/");
        org.junit.Assert.assertEquals(file35.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645434897000L + "'", long36 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL37);
        org.junit.Assert.assertEquals(uRL37.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path38);
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals(file43.getParent(), "/");
        org.junit.Assert.assertEquals(file43.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645434897000L + "'", long44 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL45);
        org.junit.Assert.assertEquals(uRL45.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path46);
        org.junit.Assert.assertEquals(file49.getParent(), "/");
        org.junit.Assert.assertEquals(file49.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645434897000L + "'", long50 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL51);
        org.junit.Assert.assertEquals(uRL51.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path52);
        org.junit.Assert.assertNotNull(path53);
        org.junit.Assert.assertNotNull(charBuffer55);
        org.junit.Assert.assertNotNull(charBuffer57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(path60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress7 = java.net.InetAddress.getByAddress(byteArray6);
        java.net.InetAddress inetAddress8 = java.net.InetAddress.getByAddress("1970-01-01", byteArray6);
        java.net.InetAddress inetAddress9 = java.net.InetAddress.getByAddress("ParseCaseSensitive(false)Value(Year,4)Value(MonthOfYear,2)Value(DayOfMonth,2)[Offset(+HHMMss,'Z')]", byteArray6);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress7);
        org.junit.Assert.assertNotNull(inetAddress8);
        org.junit.Assert.assertNotNull(inetAddress9);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.net.URL uRL8 = new java.net.URL(uRL4, "/");
        int int9 = uRL8.getPort();
        java.security.cert.Certificate[] certificateArray10 = new java.security.cert.Certificate[] {};
        java.security.CodeSource codeSource11 = new java.security.CodeSource(uRL8, certificateArray10);
        java.net.URL uRL12 = codeSource11.getLocation();
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.security.CodeSigner[] codeSignerArray18 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource19 = new java.security.CodeSource(uRL17, codeSignerArray18);
        java.security.CodeSigner[] codeSignerArray20 = codeSource19.getCodeSigners();
        boolean boolean21 = codeSource11.implies(codeSource19);
        java.security.PermissionCollection permissionCollection22 = null;
        java.lang.ClassLoader classLoader23 = null;
        java.security.Principal[] principalArray24 = new java.security.Principal[] {};
        java.security.ProtectionDomain protectionDomain25 = new java.security.ProtectionDomain(codeSource11, permissionCollection22, classLoader23, principalArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.security.CodeSigner[] codeSignerArray26 = codeSource11.getCodeSigners();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals(uRL8.toString(), "file:/");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(certificateArray10);
        org.junit.Assert.assertNotNull(uRL12);
        org.junit.Assert.assertEquals(uRL12.toString(), "file:/");
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645434897000L + "'", long16 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray18);
        org.junit.Assert.assertNotNull(codeSignerArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(principalArray24);
        org.junit.Assert.assertEquals(protectionDomain25.toString(), "ProtectionDomain  (file:/ <no signer certificates>)\n null\n <no principals>\n null\n");
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.lang.String str7 = uRL4.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "file:/1970-01-01T18:01:37.00000012" + "'", str7, "file:/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.DayOfWeek dayOfWeek8 = localDate5.getDayOfWeek();
        java.time.LocalDate localDate10 = localDate5.withYear(4096);
        java.lang.String str11 = localDate5.toString();
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalTime localTime18 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime19 = localDate17.atTime(localTime18);
        java.time.DayOfWeek dayOfWeek20 = localDate17.getDayOfWeek();
        java.time.chrono.IsoChronology isoChronology21 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra23 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate26 = isoChronology21.dateYearDay((java.time.chrono.Era) isoEra23, 0, 16);
        java.time.LocalTime localTime27 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime28 = localDate26.atTime(localTime27);
        java.time.LocalDate localDate30 = localDate26.withMonth(1);
        java.time.Period period31 = localDate17.until((java.time.chrono.ChronoLocalDate) localDate26);
        java.time.chrono.ChronoPeriod chronoPeriod32 = localDate5.until((java.time.chrono.ChronoLocalDate) localDate17);
        java.time.DayOfWeek dayOfWeek33 = localDate5.getDayOfWeek();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + dayOfWeek8 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek8.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0001-01-16" + "'", str11, "0001-01-16");
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + dayOfWeek20 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek20.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(isoChronology21);
        org.junit.Assert.assertTrue("'" + isoEra23 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra23.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(chronoPeriod32);
        org.junit.Assert.assertTrue("'" + dayOfWeek33 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek33.equals(java.time.DayOfWeek.TUESDAY));
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        boolean boolean1 = strMap0.isEmpty();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate3 = java.util.function.Predicate.isEqual((java.lang.Object) strMap0);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap4 = java.nio.charset.Charset.availableCharsets();
        boolean boolean5 = strMap4.isEmpty();
        java.util.Set<java.lang.String> strSet6 = strMap4.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate7 = java.util.function.Predicate.isEqual((java.lang.Object) strMap4);
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate8 = resolverStylePredicate7.negate();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate9 = resolverStylePredicate7.negate();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate10 = resolverStylePredicate3.and(resolverStylePredicate9);
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(resolverStylePredicate3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(resolverStylePredicate7);
        org.junit.Assert.assertNotNull(resolverStylePredicate8);
        org.junit.Assert.assertNotNull(resolverStylePredicate9);
        org.junit.Assert.assertNotNull(resolverStylePredicate10);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        boolean boolean7 = longStream6.isParallel();
        boolean boolean8 = longStream6.isParallel();
        long[] longArray9 = longStream6.toArray();
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray10 = longStream6.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]");
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap2 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>(9, (float) 999999999);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream6 = zoneOffsetTransitionList4.stream();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray7 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList8 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, zoneOffsetTransitionArray7);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream10 = zoneOffsetTransitionList8.stream();
        int int11 = zoneOffsetTransitionList8.size();
        boolean boolean12 = zoneOffsetTransitionList4.retainAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8);
        java.nio.file.attribute.FileTime fileTime14 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.lang.String[] strArray28 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray45 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, zoneOffsetTransitionArray45);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray51 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52, zoneOffsetTransitionRuleArray51);
        java.time.zone.ZoneRules zoneRules54 = java.time.zone.ZoneRules.of(zoneOffset43, zoneOffset44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52);
        boolean boolean55 = zoneOffsetTransitionList34.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49);
        zoneOffsetTransitionList34.clear();
        boolean boolean57 = strSet29.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34);
        boolean boolean58 = fileTime14.equals((java.lang.Object) zoneOffsetTransitionList34);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator59 = zoneOffsetTransitionList34.spliterator();
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator60 = zoneOffsetTransitionList34.spliterator();
        boolean boolean61 = zoneOffsetTransitionList34.isEmpty();
        java.lang.Object[] objArray62 = zoneOffsetTransitionList34.toArray();
        boolean boolean63 = zoneOffsetTransitionList4.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34);
        java.lang.Object obj64 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = strMapMap2.remove((java.lang.Object) zoneOffsetTransitionList34, obj64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream6);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileTime14);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator59);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.SHORT;
        java.time.format.FormatStyle formatStyle1 = java.time.format.FormatStyle.SHORT;
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle0, formatStyle1);
        java.time.format.DateTimeFormatter dateTimeFormatter3 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
        java.time.format.DateTimeFormatter dateTimeFormatter4 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle0);
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.SHORT + "'", formatStyle0.equals(java.time.format.FormatStyle.SHORT));
        org.junit.Assert.assertTrue("'" + formatStyle1 + "' != '" + java.time.format.FormatStyle.SHORT + "'", formatStyle1.equals(java.time.format.FormatStyle.SHORT));
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getStandardDeviation();
        double double2 = descriptiveStatistics0.getVariance();
        java.net.InetAddress inetAddress3 = java.net.InetAddress.getLocalHost();
        boolean boolean5 = inetAddress3.isReachable((int) '0');
        java.net.NetworkInterface networkInterface6 = java.net.NetworkInterface.getByInetAddress(inetAddress3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics7.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics7.getGeometricMeanImpl();
        double double12 = descriptiveStatistics7.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getSkewnessImpl();
        boolean boolean14 = networkInterface6.equals((java.lang.Object) descriptiveStatistics7);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics7.getGeometricMeanImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(inetAddress3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(networkInterface6);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(univariateStatistic15);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.security.InvalidKeyException invalidKeyException14 = new java.security.InvalidKeyException("+18:00");
        java.security.cert.CertificateException certificateException15 = new java.security.cert.CertificateException("", (java.lang.Throwable) invalidKeyException14);
        java.security.InvalidKeyException invalidKeyException16 = new java.security.InvalidKeyException("en-GB", (java.lang.Throwable) invalidKeyException14);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.Object obj20 = properties1.getOrDefault((java.lang.Object) invalidKeyException14, (java.lang.Object) str19);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.wrap(byteArray23, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean28 = byteBuffer26.equals((java.lang.Object) isoChronology27);
        java.time.Period period32 = isoChronology27.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.ChronoLocalDate chronoLocalDate33 = isoChronology27.dateNow();
        java.time.ZoneId zoneId34 = java.time.ZoneId.systemDefault();
        java.lang.String str35 = zoneId34.getId();
        java.lang.String str36 = zoneId34.getId();
        java.time.LocalDate localDate37 = isoChronology27.dateNow(zoneId34);
        boolean boolean38 = properties1.contains((java.lang.Object) localDate37);
        properties1.clear();
        java.lang.Object obj42 = properties1.setProperty("(file:/1970-01-01T18:01:37.00000012 <no signer certificates>)", "Tuesday");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "italiano" + "'", str19, "italiano");
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "italiano" + "'", obj20, "italiano");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(chronoLocalDate33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Etc/UTC" + "'", str35, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Etc/UTC" + "'", str36, "Etc/UTC");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj42);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        java.net.URI uRI4 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI5 = uRI4.normalize();
        java.net.URI uRI10 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI11 = uRI10.normalize();
        java.lang.String str12 = uRI11.getRawPath();
        java.lang.String str13 = uRI11.getFragment();
        java.net.URI uRI14 = uRI4.resolve(uRI11);
        java.lang.String str15 = uRI14.toASCIIString();
        java.lang.String str16 = uRI14.getAuthority();
        org.junit.Assert.assertNotNull(uRI5);
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/UTC" + "'", str12, "/UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "italiano://Etc/UTC#Etc/UTC" + "'", str15, "italiano://Etc/UTC#Etc/UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc" + "'", str16, "Etc");
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.slice();
        java.nio.FloatBuffer floatBuffer5 = floatBuffer1.put(floatBuffer3);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray9 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList10, zoneOffsetTransitionArray9);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray12 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList13 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList13, zoneOffsetTransitionArray12);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray15 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList16, zoneOffsetTransitionRuleArray15);
        java.time.zone.ZoneRules zoneRules18 = java.time.zone.ZoneRules.of(zoneOffset7, zoneOffset8, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList10, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList13, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList16);
        java.time.OffsetTime offsetTime19 = localTime6.atOffset(zoneOffset7);
        java.lang.String str20 = offsetTime19.toString();
        java.time.ZoneOffset zoneOffset21 = offsetTime19.getOffset();
        boolean boolean22 = floatBuffer3.equals((java.lang.Object) offsetTime19);
        float float24 = floatBuffer3.get(0);
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "23:59:59.999999999+18:00" + "'", str20, "23:59:59.999999999+18:00");
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        boolean boolean1 = chronoField0.isTimeBased();
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.lang.String str10 = zoneOffset9.getId();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        boolean boolean17 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.format.DateTimeFormatter dateTimeFormatter18 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str19 = localDateTime16.format(dateTimeFormatter18);
        java.time.chrono.Chronology chronology20 = dateTimeFormatter18.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod24 = chronology20.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime4.plus((java.time.temporal.TemporalAmount) chronoPeriod24);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime25.plusSeconds(1645434851L);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime27.withEarlierOffsetAtOverlap();
        java.time.temporal.ValueRange valueRange29 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) zonedDateTime27);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+18:00" + "'", str10, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str19, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronoPeriod24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(valueRange29);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        java.io.File file2 = new java.io.File("Era", "Stati Uniti");
        org.junit.Assert.assertEquals(file2.getParent(), "Era");
        org.junit.Assert.assertEquals(file2.toString(), "Era/Stati Uniti");
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement((double) 31556889864403199L);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(78000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap1 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean3 = strMapMap1.containsKey((java.lang.Object) isoChronology2);
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal5 = null;
        java.time.temporal.Temporal temporal6 = duration4.subtractFrom(temporal5);
        long long7 = duration4.toDays();
        boolean boolean8 = strMapMap1.contains((java.lang.Object) duration4);
        java.lang.Cloneable cloneable9 = strMapMap0.get((java.lang.Object) duration4);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        long long16 = duration11.toDays();
        java.time.Duration duration17 = duration4.plus(duration11);
        long long18 = duration17.toMinutes();
        java.time.Duration duration20 = duration17.withNanos((int) (byte) 10);
        boolean boolean21 = duration20.isNegative();
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNull(temporal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(cloneable9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        java.net.NetworkInterface networkInterface1 = java.net.NetworkInterface.getByIndex(0);
        org.junit.Assert.assertNull(networkInterface1);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics1.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics5.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics8.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics5.setSumsqImpl(univariateStatistic11);
        descriptiveStatistics1.setSumsqImpl(univariateStatistic11);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic11);
        long long15 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getPercentileImpl();
        double[] doubleArray17 = descriptiveStatistics0.getSortedValues();
        double double18 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.stream.LongStream longStream4 = longStream2.limit(1645434854L);
        java.util.stream.LongStream longStream8 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator9 = java.util.function.LongUnaryOperator.identity();
        long long11 = longUnaryOperator9.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream12 = longStream8.map(longUnaryOperator9);
        java.util.function.LongUnaryOperator longUnaryOperator13 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator14 = longUnaryOperator9.andThen(longUnaryOperator13);
        java.util.function.LongUnaryOperator longUnaryOperator15 = java.util.function.LongUnaryOperator.identity();
        long long17 = longUnaryOperator15.applyAsLong(7187392471159151072L);
        java.util.function.LongUnaryOperator longUnaryOperator18 = longUnaryOperator9.compose(longUnaryOperator15);
        java.util.stream.LongStream longStream19 = java.util.stream.LongStream.iterate(280506064896L, longUnaryOperator15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream20 = java.util.stream.LongStream.concat(longStream2, longStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(longUnaryOperator9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7187392471159151072L + "'", long11 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(longUnaryOperator13);
        org.junit.Assert.assertNotNull(longUnaryOperator14);
        org.junit.Assert.assertNotNull(longUnaryOperator15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7187392471159151072L + "'", long17 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longUnaryOperator18);
        org.junit.Assert.assertNotNull(longStream19);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        boolean boolean3 = charBuffer1.isReadOnly();
        java.nio.CharBuffer charBuffer5 = charBuffer1.put('x');
        java.lang.CharSequence charSequence6 = null;
        java.nio.CharBuffer charBuffer7 = charBuffer1.append(charSequence6);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.wrap((java.lang.CharSequence) charBuffer7);
        java.nio.CharBuffer charBuffer9 = charBuffer8.asReadOnlyBuffer();
        java.nio.Buffer buffer10 = charBuffer9.clear();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer5.asShortBuffer();
        java.nio.ShortBuffer shortBuffer8 = shortBuffer7.slice();
        java.nio.ShortBuffer shortBuffer9 = shortBuffer8.compact();
        java.lang.String str10 = shortBuffer8.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertNotNull(shortBuffer9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.nio.ByteBufferAsShortBufferB[pos=0 lim=0 cap=0]" + "'", str10, "java.nio.ByteBufferAsShortBufferB[pos=0 lim=0 cap=0]");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = java.time.OffsetTime.of(localTime0, zoneOffset2);
        java.time.OffsetTime offsetTime15 = offsetTime13.minusHours(0L);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        long long17 = offsetTime15.getLong((java.time.temporal.TemporalField) chronoField16);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField16.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        java.nio.DoubleBuffer doubleBuffer5 = doubleBuffer4.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder6 = doubleBuffer5.order();
        boolean boolean7 = doubleBuffer5.hasArray();
        boolean boolean8 = doubleBuffer5.hasArray();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteOrder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed(8L, (long) 7);
        java.util.function.LongPredicate longPredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = longStream2.noneMatch(longPredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        java.net.NetworkInterface networkInterface3 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics4.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics4.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics4.getGeometricMeanImpl();
        double double9 = descriptiveStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getSkewnessImpl();
        boolean boolean11 = networkInterface3.equals((java.lang.Object) descriptiveStatistics4);
        int int12 = networkInterface3.getMTU();
        java.util.Enumeration<java.net.InetAddress> inetAddressEnumeration13 = networkInterface3.getInetAddresses();
        java.time.LocalTime localTime14 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray23 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList24, zoneOffsetTransitionRuleArray23);
        java.time.zone.ZoneRules zoneRules26 = java.time.zone.ZoneRules.of(zoneOffset15, zoneOffset16, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList24);
        java.time.OffsetTime offsetTime27 = java.time.OffsetTime.of(localTime14, zoneOffset16);
        java.time.OffsetTime offsetTime29 = offsetTime27.plusHours(8L);
        boolean boolean30 = networkInterface3.equals((java.lang.Object) 8L);
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(networkInterface3);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1500 + "'", int12 == 1500);
        org.junit.Assert.assertNotNull(inetAddressEnumeration13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(offsetTime27);
        org.junit.Assert.assertNotNull(offsetTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        java.text.ParseException parseException2 = new java.text.ParseException("ClockHourOfDay", 41);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration1 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal2 = null;
        java.time.temporal.Temporal temporal3 = duration1.subtractFrom(temporal2);
        long long4 = duration1.toDays();
        java.time.Duration duration5 = duration0.plus(duration1);
        java.time.Duration duration7 = duration5.minusSeconds((long) '.');
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNull(temporal3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed((int) (byte) 10, 3);
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics8 = longStream7.summaryStatistics();
        java.util.function.IntConsumer intConsumer9 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics8);
        java.util.stream.IntStream intStream10 = intStream3.peek((java.util.function.IntConsumer) longSummaryStatistics4);
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        int int13 = charBuffer12.limit();
        java.util.stream.IntStream intStream14 = charBuffer12.chars();
        java.util.LongSummaryStatistics longSummaryStatistics15 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream18 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics19 = longStream18.summaryStatistics();
        java.util.function.IntConsumer intConsumer20 = longSummaryStatistics15.andThen((java.util.function.IntConsumer) longSummaryStatistics19);
        java.util.stream.IntStream intStream21 = intStream14.peek((java.util.function.IntConsumer) longSummaryStatistics15);
        longSummaryStatistics4.combine(longSummaryStatistics15);
        java.util.LongSummaryStatistics longSummaryStatistics23 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream26 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics27 = longStream26.summaryStatistics();
        java.util.function.IntConsumer intConsumer28 = longSummaryStatistics23.andThen((java.util.function.IntConsumer) longSummaryStatistics27);
        java.util.function.IntConsumer intConsumer29 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics23);
        java.nio.CharBuffer charBuffer31 = java.nio.CharBuffer.allocate(16);
        int int32 = charBuffer31.limit();
        java.util.stream.IntStream intStream33 = charBuffer31.chars();
        java.util.LongSummaryStatistics longSummaryStatistics34 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream37 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics38 = longStream37.summaryStatistics();
        java.util.function.IntConsumer intConsumer39 = longSummaryStatistics34.andThen((java.util.function.IntConsumer) longSummaryStatistics38);
        java.util.stream.IntStream intStream40 = intStream33.peek((java.util.function.IntConsumer) longSummaryStatistics34);
        java.nio.CharBuffer charBuffer42 = java.nio.CharBuffer.allocate(16);
        int int43 = charBuffer42.limit();
        java.util.stream.IntStream intStream44 = charBuffer42.chars();
        java.util.LongSummaryStatistics longSummaryStatistics45 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream48 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics49 = longStream48.summaryStatistics();
        java.util.function.IntConsumer intConsumer50 = longSummaryStatistics45.andThen((java.util.function.IntConsumer) longSummaryStatistics49);
        java.util.stream.IntStream intStream51 = intStream44.peek((java.util.function.IntConsumer) longSummaryStatistics45);
        longSummaryStatistics34.combine(longSummaryStatistics45);
        java.util.LongSummaryStatistics longSummaryStatistics53 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream56 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics57 = longStream56.summaryStatistics();
        java.util.function.IntConsumer intConsumer58 = longSummaryStatistics53.andThen((java.util.function.IntConsumer) longSummaryStatistics57);
        java.util.function.IntConsumer intConsumer59 = longSummaryStatistics34.andThen((java.util.function.IntConsumer) longSummaryStatistics53);
        java.util.function.IntConsumer intConsumer60 = intConsumer29.andThen((java.util.function.IntConsumer) longSummaryStatistics34);
        long long61 = longSummaryStatistics34.getMin();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(longSummaryStatistics8);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertEquals(longSummaryStatistics15.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(longSummaryStatistics19);
        org.junit.Assert.assertEquals(longSummaryStatistics19.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer20);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertEquals(longSummaryStatistics23.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream26);
        org.junit.Assert.assertNotNull(longSummaryStatistics27);
        org.junit.Assert.assertEquals(longSummaryStatistics27.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer28);
        org.junit.Assert.assertNotNull(intConsumer29);
        org.junit.Assert.assertNotNull(charBuffer31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertNotNull(intStream33);
        org.junit.Assert.assertEquals(longSummaryStatistics34.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream37);
        org.junit.Assert.assertNotNull(longSummaryStatistics38);
        org.junit.Assert.assertEquals(longSummaryStatistics38.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer39);
        org.junit.Assert.assertNotNull(intStream40);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
        org.junit.Assert.assertNotNull(intStream44);
        org.junit.Assert.assertEquals(longSummaryStatistics45.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream48);
        org.junit.Assert.assertNotNull(longSummaryStatistics49);
        org.junit.Assert.assertEquals(longSummaryStatistics49.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer50);
        org.junit.Assert.assertNotNull(intStream51);
        org.junit.Assert.assertEquals(longSummaryStatistics53.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream56);
        org.junit.Assert.assertNotNull(longSummaryStatistics57);
        org.junit.Assert.assertEquals(longSummaryStatistics57.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer58);
        org.junit.Assert.assertNotNull(intConsumer59);
        org.junit.Assert.assertNotNull(intConsumer60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 9223372036854775807L + "'", long61 == 9223372036854775807L);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str17 = localDateTime14.format(dateTimeFormatter16);
        java.time.chrono.Chronology chronology18 = dateTimeFormatter16.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod22 = chronology18.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime2.plus((java.time.temporal.TemporalAmount) chronoPeriod22);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime2.minusNanos((long) (short) 100);
        java.time.Instant instant26 = java.time.Instant.EPOCH;
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean28 = instant26.isSupported((java.time.temporal.TemporalField) chronoField27);
        java.time.Instant instant30 = instant26.plusNanos((long) 9);
        java.time.ZoneId zoneId31 = java.time.ZoneId.systemDefault();
        java.lang.String str32 = zoneId31.getId();
        java.lang.String str33 = zoneId31.getId();
        java.time.ZonedDateTime zonedDateTime34 = java.time.ZonedDateTime.ofInstant(instant30, zoneId31);
        int int35 = zonedDateTime25.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime34);
        java.time.ZoneId zoneId36 = zonedDateTime34.getZone();
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str17, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronoPeriod22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField27.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Etc/UTC" + "'", str32, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Etc/UTC" + "'", str33, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(zoneId36);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) 4);
        java.util.stream.LongStream longStream2 = longStream1.sequential();
        java.util.function.LongBinaryOperator longBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = longStream2.reduce(1645434841L, longBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        java.util.concurrent.TimeoutException timeoutException1 = new java.util.concurrent.TimeoutException("ZoneRules[currentStandardOffset=+18:00]");
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.MAX;
        java.lang.String str5 = zoneOffset4.getId();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.lang.String str10 = zoneOffset9.getId();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset9);
        boolean boolean12 = localDateTime6.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.format.DateTimeFormatter dateTimeFormatter13 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str14 = localDateTime11.format(dateTimeFormatter13);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int16 = localDateTime11.get((java.time.temporal.TemporalField) chronoField15);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.lang.String str25 = zoneOffset24.getId();
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset24);
        boolean boolean27 = localDateTime21.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str29 = localDateTime26.format(dateTimeFormatter28);
        boolean boolean30 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean32 = localDateTime11.isSupported((java.time.temporal.TemporalField) chronoField31);
        boolean boolean33 = month0.isSupported((java.time.temporal.TemporalField) chronoField31);
        java.time.Instant instant34 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray43 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44, zoneOffsetTransitionRuleArray43);
        java.time.zone.ZoneRules zoneRules46 = java.time.zone.ZoneRules.of(zoneOffset35, zoneOffset36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44);
        boolean boolean47 = zoneRules46.isFixedOffset();
        java.time.Instant instant48 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition49 = zoneRules46.previousTransition(instant48);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList50 = zoneRules46.getTransitionRules();
        java.time.Instant instant51 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition52 = zoneRules46.previousTransition(instant51);
        java.time.Instant instant53 = java.time.Instant.MAX;
        java.time.Instant instant55 = instant53.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset56 = zoneRules46.getOffset(instant55);
        java.time.OffsetDateTime offsetDateTime57 = java.time.OffsetDateTime.ofInstant(instant34, (java.time.ZoneId) zoneOffset56);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery58 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period59 = offsetDateTime57.query(periodTemporalQuery58);
        java.time.Period period60 = month0.query(periodTemporalQuery58);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList61 = period60.getUnits();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+18:00" + "'", str5, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+18:00" + "'", str10, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str14, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField15.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+18:00" + "'", str25, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str29, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField31.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition49);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList50);
        org.junit.Assert.assertNull(zoneOffsetTransition52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(periodTemporalQuery58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(temporalUnitList61);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap3 = java.nio.charset.Charset.availableCharsets();
        boolean boolean4 = strMap3.isEmpty();
        java.util.Locale locale5 = java.util.Locale.US;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.Cloneable cloneable8 = strMapMap0.put(strMap3, (java.lang.Cloneable) locale6);
        int int9 = strMap3.size();
        java.lang.String str10 = strMap3.lastKey();
        java.time.DayOfWeek dayOfWeek11 = java.time.DayOfWeek.TUESDAY;
        java.time.temporal.TemporalField temporalField12 = null;
        boolean boolean13 = dayOfWeek11.isSupported(temporalField12);
        int int14 = dayOfWeek11.getValue();
        java.time.DayOfWeek dayOfWeek16 = dayOfWeek11.minus(47L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = strMap3.containsKey((java.lang.Object) 47L);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Stati Uniti" + "'", str7, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 171 + "'", int9 == 171);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "x-windows-iso2022jp" + "'", str10, "x-windows-iso2022jp");
        org.junit.Assert.assertTrue("'" + dayOfWeek11 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek11.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + dayOfWeek16 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek16.equals(java.time.DayOfWeek.THURSDAY));
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap3 = java.nio.charset.Charset.availableCharsets();
        boolean boolean4 = strMap3.isEmpty();
        java.util.Locale locale5 = java.util.Locale.US;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.Cloneable cloneable8 = strMapMap0.put(strMap3, (java.lang.Cloneable) locale6);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap9 = java.nio.charset.Charset.availableCharsets();
        boolean boolean10 = strMap9.isEmpty();
        java.util.Set<java.lang.String> strSet11 = strMap9.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate12 = java.util.function.Predicate.isEqual((java.lang.Object) strMap9);
        java.util.Set<java.lang.String> strSet13 = strMap9.keySet();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.US;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.lang.String str18 = locale16.getDisplayScript();
        java.lang.String str19 = locale14.getDisplayName(locale16);
        java.lang.Cloneable cloneable20 = strMapMap0.putIfAbsent(strMap9, (java.lang.Cloneable) locale14);
        java.lang.String str21 = locale14.getVariant();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Stati Uniti" + "'", str7, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(resolverStylePredicate12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Stati Uniti" + "'", str17, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "coreano" + "'", str19, "coreano");
        org.junit.Assert.assertNotNull(cloneable20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.lang.String str8 = isoChronology6.getCalendarType();
        java.lang.String str9 = isoChronology6.getId();
        java.lang.String str10 = isoChronology6.getId();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "iso8601" + "'", str8, "iso8601");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISO" + "'", str9, "ISO");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISO" + "'", str10, "ISO");
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        boolean boolean6 = localDate5.isLeapYear();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime7 = java.time.ZonedDateTime.from((java.time.temporal.TemporalAccessor) localDate5);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: 0001-01-16 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj3 = charBuffer2.array();
        boolean boolean4 = isoChronology0.equals(obj3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap5 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = strMapMap5.containsKey((java.lang.Object) isoChronology6);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, (-1), 10);
        int int13 = isoChronology0.prolepticYear((java.time.chrono.Era) isoEra8, 0);
        java.time.Month month14 = java.time.Month.JANUARY;
        java.time.Month month15 = month14.firstMonthOfQuarter();
        java.time.Month month16 = month15.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean18 = month16.isSupported((java.time.temporal.TemporalField) chronoField17);
        boolean boolean19 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField17);
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField17.getRangeUnit();
        java.time.Instant instant21 = java.time.Instant.EPOCH;
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean23 = instant21.isSupported((java.time.temporal.TemporalField) chronoField22);
        java.time.Instant instant25 = instant21.plusNanos((long) 9);
        java.time.ZoneId zoneId26 = java.time.ZoneId.systemDefault();
        java.lang.String str27 = zoneId26.getId();
        java.lang.String str28 = zoneId26.getId();
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.ofInstant(instant25, zoneId26);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime31 = temporalUnit20.addTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime29, (long) 0);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + month14 + "' != '" + java.time.Month.JANUARY + "'", month14.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.JANUARY + "'", month15.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month16 + "' != '" + java.time.Month.JANUARY + "'", month16.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField17.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField22.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Etc/UTC" + "'", str28, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime31);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics8 = longStream7.summaryStatistics();
        java.util.function.IntConsumer intConsumer9 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics8);
        java.util.stream.IntStream intStream10 = intStream3.peek((java.util.function.IntConsumer) longSummaryStatistics4);
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        int int13 = charBuffer12.limit();
        java.util.stream.IntStream intStream14 = charBuffer12.chars();
        java.util.LongSummaryStatistics longSummaryStatistics15 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream18 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics19 = longStream18.summaryStatistics();
        java.util.function.IntConsumer intConsumer20 = longSummaryStatistics15.andThen((java.util.function.IntConsumer) longSummaryStatistics19);
        java.util.stream.IntStream intStream21 = intStream14.peek((java.util.function.IntConsumer) longSummaryStatistics15);
        longSummaryStatistics4.combine(longSummaryStatistics15);
        java.util.LongSummaryStatistics longSummaryStatistics23 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream26 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics27 = longStream26.summaryStatistics();
        java.util.function.IntConsumer intConsumer28 = longSummaryStatistics23.andThen((java.util.function.IntConsumer) longSummaryStatistics27);
        java.util.function.IntConsumer intConsumer29 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics23);
        java.nio.CharBuffer charBuffer31 = java.nio.CharBuffer.allocate(16);
        int int32 = charBuffer31.limit();
        java.util.stream.IntStream intStream33 = charBuffer31.chars();
        java.util.LongSummaryStatistics longSummaryStatistics34 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream37 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics38 = longStream37.summaryStatistics();
        java.util.function.IntConsumer intConsumer39 = longSummaryStatistics34.andThen((java.util.function.IntConsumer) longSummaryStatistics38);
        java.util.stream.IntStream intStream40 = intStream33.peek((java.util.function.IntConsumer) longSummaryStatistics34);
        java.nio.CharBuffer charBuffer42 = java.nio.CharBuffer.allocate(16);
        int int43 = charBuffer42.limit();
        java.util.stream.IntStream intStream44 = charBuffer42.chars();
        java.util.LongSummaryStatistics longSummaryStatistics45 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream48 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics49 = longStream48.summaryStatistics();
        java.util.function.IntConsumer intConsumer50 = longSummaryStatistics45.andThen((java.util.function.IntConsumer) longSummaryStatistics49);
        java.util.stream.IntStream intStream51 = intStream44.peek((java.util.function.IntConsumer) longSummaryStatistics45);
        longSummaryStatistics34.combine(longSummaryStatistics45);
        java.util.LongSummaryStatistics longSummaryStatistics53 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream56 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics57 = longStream56.summaryStatistics();
        java.util.function.IntConsumer intConsumer58 = longSummaryStatistics53.andThen((java.util.function.IntConsumer) longSummaryStatistics57);
        java.util.function.IntConsumer intConsumer59 = longSummaryStatistics34.andThen((java.util.function.IntConsumer) longSummaryStatistics53);
        java.util.function.IntConsumer intConsumer60 = intConsumer29.andThen((java.util.function.IntConsumer) longSummaryStatistics34);
        long long61 = longSummaryStatistics34.getMax();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(longSummaryStatistics8);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertEquals(longSummaryStatistics15.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(longSummaryStatistics19);
        org.junit.Assert.assertEquals(longSummaryStatistics19.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer20);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertEquals(longSummaryStatistics23.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream26);
        org.junit.Assert.assertNotNull(longSummaryStatistics27);
        org.junit.Assert.assertEquals(longSummaryStatistics27.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer28);
        org.junit.Assert.assertNotNull(intConsumer29);
        org.junit.Assert.assertNotNull(charBuffer31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertNotNull(intStream33);
        org.junit.Assert.assertEquals(longSummaryStatistics34.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream37);
        org.junit.Assert.assertNotNull(longSummaryStatistics38);
        org.junit.Assert.assertEquals(longSummaryStatistics38.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer39);
        org.junit.Assert.assertNotNull(intStream40);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
        org.junit.Assert.assertNotNull(intStream44);
        org.junit.Assert.assertEquals(longSummaryStatistics45.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream48);
        org.junit.Assert.assertNotNull(longSummaryStatistics49);
        org.junit.Assert.assertEquals(longSummaryStatistics49.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer50);
        org.junit.Assert.assertNotNull(intStream51);
        org.junit.Assert.assertEquals(longSummaryStatistics53.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream56);
        org.junit.Assert.assertNotNull(longSummaryStatistics57);
        org.junit.Assert.assertEquals(longSummaryStatistics57.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer58);
        org.junit.Assert.assertNotNull(intConsumer59);
        org.junit.Assert.assertNotNull(intConsumer60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-9223372036854775808L) + "'", long61 == (-9223372036854775808L));
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.wrap(byteArray9, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = byteBuffer12.equals((java.lang.Object) isoChronology13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean17 = strMapMap15.containsKey((java.lang.Object) isoChronology16);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, (-1), 10);
        int int23 = isoChronology13.prolepticYear((java.time.chrono.Era) isoEra18, (int) '#');
        java.time.LocalDate localDate26 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra18, (int) (byte) 0, 2);
        java.time.chrono.ChronoPeriod chronoPeriod30 = isoChronology1.period(1, (int) (short) 1, 365);
        java.lang.String str31 = isoChronology1.getId();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-34) + "'", int23 == (-34));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISO" + "'", str31, "ISO");
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean17 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.OffsetTime offsetTime19 = offsetTime13.plusMinutes((long) 'u');
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean21 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField20);
        java.time.chrono.IsoChronology isoChronology22 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra24 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate27 = isoChronology22.dateYearDay((java.time.chrono.Era) isoEra24, 0, 16);
        java.time.LocalTime localTime28 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime29 = localDate27.atTime(localTime28);
        java.time.LocalTime localTime31 = localTime28.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap32 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology33 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean34 = strMapMap32.containsKey((java.lang.Object) isoChronology33);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate38 = isoChronology33.dateYearDay((java.time.chrono.Era) isoEra35, (-1), 10);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal41 = null;
        java.time.temporal.Temporal temporal42 = duration40.subtractFrom(temporal41);
        long long43 = duration40.toDays();
        java.time.Duration duration44 = duration39.plus(duration40);
        long long45 = duration40.toDays();
        java.lang.String str46 = duration40.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate47 = localDate38.plus((java.time.temporal.TemporalAmount) duration40);
        java.time.LocalTime localTime48 = localTime28.minus((java.time.temporal.TemporalAmount) duration40);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal49 = offsetTime13.adjustInto((java.time.temporal.Temporal) localTime28);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField20.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(isoChronology22);
        org.junit.Assert.assertTrue("'" + isoEra24 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra24.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(isoChronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra35.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNull(temporal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0S" + "'", str46, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate47);
        org.junit.Assert.assertNotNull(localTime48);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        java.nio.IntBuffer intBuffer2 = intBuffer1.slice();
        int[] intArray3 = new int[] {};
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of(intArray3);
        java.nio.IntBuffer intBuffer5 = intBuffer1.put(intArray3);
        java.nio.IntBuffer intBuffer6 = intBuffer5.slice();
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertNotNull(intBuffer2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intBuffer5);
        org.junit.Assert.assertNotNull(intBuffer6);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.TUESDAY;
        java.time.temporal.TemporalField temporalField1 = null;
        boolean boolean2 = dayOfWeek0.isSupported(temporalField1);
        java.time.DayOfWeek dayOfWeek4 = dayOfWeek0.minus(1645434841L);
        java.time.chrono.IsoChronology isoChronology5 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate10 = isoChronology5.dateYearDay((java.time.chrono.Era) isoEra7, 0, 16);
        java.time.LocalTime localTime11 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime12 = localDate10.atTime(localTime11);
        java.time.LocalDate localDate14 = localDate10.withMonth(1);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal17 = null;
        java.time.temporal.Temporal temporal18 = duration16.subtractFrom(temporal17);
        long long19 = duration16.toDays();
        java.time.Duration duration20 = duration15.plus(duration16);
        java.time.LocalDate localDate21 = localDate14.minus((java.time.temporal.TemporalAmount) duration15);
        java.time.LocalDate localDate23 = localDate14.minusWeeks((long) 100);
        java.time.chrono.IsoChronology isoChronology24 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra26 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate29 = isoChronology24.dateYearDay((java.time.chrono.Era) isoEra26, 0, 16);
        java.time.Duration duration30 = java.time.Duration.ZERO;
        java.time.LocalDate localDate31 = localDate29.plus((java.time.temporal.TemporalAmount) duration30);
        java.time.LocalDateTime localDateTime32 = localDate31.atStartOfDay();
        java.time.LocalDate localDate34 = localDate31.plusYears((long) (byte) -1);
        java.time.LocalDate localDate35 = localDate23.with((java.time.temporal.TemporalAdjuster) localDate31);
        java.lang.String str36 = localDate31.toString();
        java.time.LocalDate localDate38 = localDate31.plusDays((long) 171);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime40 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray43 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, zoneOffsetTransitionArray43);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray46 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList47 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, zoneOffsetTransitionArray46);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray49 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList50 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList50, zoneOffsetTransitionRuleArray49);
        java.time.zone.ZoneRules zoneRules52 = java.time.zone.ZoneRules.of(zoneOffset41, zoneOffset42, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList50);
        java.time.OffsetTime offsetTime53 = localTime40.atOffset(zoneOffset41);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange55 = offsetTime53.range((java.time.temporal.TemporalField) chronoField54);
        java.time.OffsetTime offsetTime57 = chronoField39.adjustInto(offsetTime53, (long) 16);
        java.time.LocalTime localTime58 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray61 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList62 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, zoneOffsetTransitionArray61);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray64 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList65 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, zoneOffsetTransitionArray64);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray67 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList68 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList68, zoneOffsetTransitionRuleArray67);
        java.time.zone.ZoneRules zoneRules70 = java.time.zone.ZoneRules.of(zoneOffset59, zoneOffset60, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList68);
        java.time.OffsetTime offsetTime71 = localTime58.atOffset(zoneOffset59);
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange73 = offsetTime71.range((java.time.temporal.TemporalField) chronoField72);
        long long74 = offsetTime57.getLong((java.time.temporal.TemporalField) chronoField72);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery75 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period76 = offsetTime57.query(periodTemporalQuery75);
        java.time.Period period77 = localDate38.query(periodTemporalQuery75);
        java.time.Period period78 = dayOfWeek4.query(periodTemporalQuery75);
        java.time.Period period80 = period78.minusDays((long) (-5));
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + dayOfWeek4 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek4.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra7.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNull(temporal18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(isoChronology24);
        org.junit.Assert.assertTrue("'" + isoEra26 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra26.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0001-01-16" + "'", str36, "0001-01-16");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField39.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneRules52);
        org.junit.Assert.assertNotNull(offsetTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField54.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange55);
        org.junit.Assert.assertNotNull(offsetTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(zoneRules70);
        org.junit.Assert.assertNotNull(offsetTime71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField72.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 23L + "'", long74 == 23L);
        org.junit.Assert.assertNotNull(periodTemporalQuery75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        java.net.NetworkInterface networkInterface3 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        java.util.List<java.net.InterfaceAddress> interfaceAddressList4 = networkInterface3.getInterfaceAddresses();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(networkInterface3);
        org.junit.Assert.assertNotNull(interfaceAddressList4);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed(8L, (long) 7);
        java.util.stream.LongStream longStream5 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator6 = java.util.function.LongUnaryOperator.identity();
        long long8 = longUnaryOperator6.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream9 = longStream5.map(longUnaryOperator6);
        java.util.function.LongUnaryOperator longUnaryOperator10 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator11 = longUnaryOperator6.andThen(longUnaryOperator10);
        java.util.stream.LongStream longStream12 = longStream2.map(longUnaryOperator10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream13 = longStream2.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longUnaryOperator6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 7187392471159151072L + "'", long8 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream9);
        org.junit.Assert.assertNotNull(longUnaryOperator10);
        org.junit.Assert.assertNotNull(longUnaryOperator11);
        org.junit.Assert.assertNotNull(longStream12);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.LocalDate localDate92 = offsetDateTime88.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime94 = offsetDateTime88.withMonth(16384);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 16384");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(localDate92);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long3 = timeUnit1.toMinutes(1645434849L);
        long long5 = timeUnit1.toNanos((long) 9);
        java.util.concurrent.TimeUnit timeUnit7 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long9 = timeUnit7.toMinutes(1645434849L);
        long long10 = timeUnit1.convert((long) '#', timeUnit7);
        java.nio.file.attribute.FileTime fileTime11 = java.nio.file.attribute.FileTime.from((long) 214, timeUnit7);
        java.lang.Thread thread12 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeUnit7.timedJoin(thread12, (long) 14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 27L + "'", long3 == 27L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 9000L + "'", long5 == 9000L);
        org.junit.Assert.assertNotNull(timeUnit7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 27L + "'", long9 == 27L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 35L + "'", long10 == 35L);
        org.junit.Assert.assertNotNull(fileTime11);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException1 = new java.security.NoSuchAlgorithmException("DayOfYear");
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        java.security.InvalidKeyException invalidKeyException2 = new java.security.InvalidKeyException("+18:00");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("2022-02-21T09:14:39.210Z[Etc/UTC]", (java.lang.Throwable) invalidKeyException2);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        java.net.URI uRI4 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI5 = uRI4.normalize();
        java.net.URI uRI10 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI11 = uRI10.normalize();
        java.lang.String str12 = uRI11.getRawPath();
        java.lang.String str13 = uRI11.getFragment();
        java.net.URI uRI14 = uRI4.resolve(uRI11);
        java.net.URI uRI15 = uRI11.parseServerAuthority();
        java.lang.String str16 = uRI15.getRawUserInfo();
        org.junit.Assert.assertNotNull(uRI5);
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/UTC" + "'", str12, "/UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.duplicate();
        long[] longArray9 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer10 = java.nio.LongBuffer.wrap(longArray9);
        long[] longArray12 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer13 = java.nio.LongBuffer.wrap(longArray12);
        java.nio.LongBuffer longBuffer14 = longBuffer10.put(longBuffer13);
        java.nio.LongBuffer longBuffer15 = longBuffer10.compact();
        java.nio.Buffer buffer16 = longBuffer10.flip();
        int int17 = longBuffer7.compareTo(longBuffer10);
        boolean boolean18 = longBuffer10.hasArray();
        long[] longArray20 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer21 = java.nio.LongBuffer.wrap(longArray20);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer24 = longBuffer10.put(longArray20, 21, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[10]");
        org.junit.Assert.assertNotNull(longBuffer10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[10]");
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[10]");
        org.junit.Assert.assertNotNull(longBuffer21);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.lang.String str3 = locale1.getDisplayCountry(locale2);
        java.lang.String str4 = locale2.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayName(locale2);
        java.lang.String str6 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Stati Uniti" + "'", str3, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "coreano" + "'", str5, "coreano");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.DayOfWeek dayOfWeek8 = localDate5.getDayOfWeek();
        java.time.LocalDate localDate10 = localDate5.withYear(4096);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate12 = localDate10.withMonth((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + dayOfWeek8 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek8.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate5 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset4);
        java.time.Month month7 = java.time.Month.JANUARY;
        java.time.Month month8 = month7.firstMonthOfQuarter();
        java.time.Month month9 = month8.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery10 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period11 = month8.query(periodTemporalQuery10);
        java.time.Period period12 = zoneOffset4.query(periodTemporalQuery10);
        java.time.Period period13 = localDateTime0.query(periodTemporalQuery10);
        java.time.Period period15 = period13.minusMonths((long) 100);
        boolean boolean16 = period13.isZero();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.JANUARY + "'", month7.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.JANUARY + "'", month8.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month9 + "' != '" + java.time.Month.JANUARY + "'", month9.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.stream.LongStream.Builder builder3 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream longStream4 = longStream2.peek((java.util.function.LongConsumer) builder3);
        java.util.stream.LongStream longStream5 = builder3.build();
        java.util.stream.LongStream longStream6 = longStream5.unordered();
        java.util.function.LongPredicate longPredicate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = longStream6.allMatch(longPredicate7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        java.time.Period period1 = java.time.Period.ofYears((int) '\000');
        java.time.chrono.Chronology chronology2 = period1.getChronology();
        java.time.Period period4 = period1.withDays((int) (byte) 100);
        int int5 = period1.getMonths();
        java.time.chrono.ChronoPeriod chronoPeriod6 = period1.negated();
        java.time.chrono.ChronoPeriod chronoPeriod7 = period1.negated();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronoPeriod6);
        org.junit.Assert.assertNotNull(chronoPeriod7);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.net.URLStreamHandler uRLStreamHandler8 = null;
        java.net.URL uRL9 = new java.net.URL(uRL4, "hi!", uRLStreamHandler8);
        java.net.URLStreamHandler uRLStreamHandler11 = null;
        java.net.URL uRL12 = new java.net.URL(uRL4, "1970-01-01T18:01:37.000000120", uRLStreamHandler11);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals(uRL9.toString(), "file:/hi!");
        org.junit.Assert.assertEquals(uRL12.toString(), "file:/1970-01-01T18:01:37.000000120");
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.LocalDate localDate7 = localDate5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.LocalDateTime localDateTime8 = localDate7.atStartOfDay();
        java.time.LocalDate localDate10 = localDate7.plusYears((long) (byte) -1);
        int int11 = localDate7.lengthOfYear();
        java.time.ZoneId zoneId12 = java.time.ZoneId.systemDefault();
        java.time.ZonedDateTime zonedDateTime13 = localDate7.atStartOfDay(zoneId12);
        java.time.LocalDate localDate15 = localDate7.plusMonths((long) 78000000);
        int int16 = localDate7.lengthOfMonth();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 365 + "'", int11 == 365);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        java.nio.charset.CoderResult coderResult1 = java.nio.charset.CoderResult.malformedForLength(10);
        java.lang.String str2 = coderResult1.toString();
        boolean boolean3 = coderResult1.isMalformed();
        org.junit.Assert.assertNotNull(coderResult1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MALFORMED[10]" + "'", str2, "MALFORMED[10]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        long long16 = valueRange15.getSmallestMaximum();
        boolean boolean18 = valueRange15.isValidValue((long) (-2022));
        java.time.Instant instant22 = java.time.Instant.ofEpochSecond((-62134279201L), (-62134279201L));
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.lang.String str26 = zoneOffset25.getId();
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset25);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.lang.String str31 = zoneOffset30.getId();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset30);
        boolean boolean33 = localDateTime27.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.format.DateTimeFormatter dateTimeFormatter34 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str35 = localDateTime32.format(dateTimeFormatter34);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int37 = localDateTime32.get((java.time.temporal.TemporalField) chronoField36);
        java.time.ZoneId zoneId38 = java.time.ZoneId.systemDefault();
        java.lang.String str39 = zoneId38.getId();
        java.time.ZonedDateTime zonedDateTime40 = java.time.ZonedDateTime.now(zoneId38);
        java.time.ZoneId zoneId41 = java.time.ZoneId.systemDefault();
        java.lang.String str42 = zoneId41.getId();
        java.time.ZonedDateTime zonedDateTime43 = zonedDateTime40.withZoneSameInstant(zoneId41);
        java.time.ZonedDateTime zonedDateTime44 = localDateTime32.atZone(zoneId41);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofInstant(instant22, zoneId41);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange47 = chronoField46.range();
        long long48 = localDateTime45.getLong((java.time.temporal.TemporalField) chronoField46);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = valueRange15.checkValidValue(921697L, (java.time.temporal.TemporalField) chronoField46);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 1 - 24): 921697");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 24L + "'", long16 == 24L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+18:00" + "'", str26, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+18:00" + "'", str31, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str35, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField36.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(zoneId38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Etc/UTC" + "'", str39, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zoneId41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Etc/UTC" + "'", str42, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField46.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 56L + "'", long48 == 56L);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean6 = localDateTime4.isSupported((java.time.temporal.TemporalField) chronoField5);
        java.time.chrono.IsoChronology isoChronology7 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra9 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate12 = isoChronology7.dateYearDay((java.time.chrono.Era) isoEra9, 0, 16);
        java.time.LocalTime localTime13 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime14 = localDate12.atTime(localTime13);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray23 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList24, zoneOffsetTransitionRuleArray23);
        java.time.zone.ZoneRules zoneRules26 = java.time.zone.ZoneRules.of(zoneOffset15, zoneOffset16, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList24);
        long long27 = localDateTime14.toEpochSecond(zoneOffset15);
        int int28 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.ZoneId zoneId29 = java.time.ZoneId.systemDefault();
        java.lang.String str30 = zoneId29.getId();
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.now(zoneId29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.lang.String str37 = zoneOffset36.getId();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset36);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.MAX;
        java.lang.String str42 = zoneOffset41.getId();
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset41);
        boolean boolean44 = localDateTime38.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.format.DateTimeFormatter dateTimeFormatter45 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str46 = localDateTime43.format(dateTimeFormatter45);
        java.time.chrono.Chronology chronology47 = dateTimeFormatter45.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod51 = chronology47.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime31.plus((java.time.temporal.TemporalAmount) chronoPeriod51);
        java.time.temporal.Temporal temporal53 = localDateTime4.adjustInto((java.time.temporal.Temporal) zonedDateTime31);
        java.time.chrono.Chronology chronology54 = localDateTime4.getChronology();
        java.time.LocalDateTime localDateTime56 = localDateTime4.plusMonths((long) 1970);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField5.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(isoChronology7);
        org.junit.Assert.assertTrue("'" + isoEra9 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra9.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62134279201L) + "'", long27 == (-62134279201L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1969 + "'", int28 == 1969);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+18:00" + "'", str37, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+18:00" + "'", str42, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str46, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(temporal53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj3 = charBuffer2.array();
        boolean boolean4 = isoChronology0.equals(obj3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap5 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = strMapMap5.containsKey((java.lang.Object) isoChronology6);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, (-1), 10);
        int int13 = isoChronology0.prolepticYear((java.time.chrono.Era) isoEra8, 0);
        java.time.Month month14 = java.time.Month.JANUARY;
        java.time.Month month15 = month14.firstMonthOfQuarter();
        java.time.Month month16 = month15.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean18 = month16.isSupported((java.time.temporal.TemporalField) chronoField17);
        boolean boolean19 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField17);
        java.time.Instant instant20 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray29 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30, zoneOffsetTransitionRuleArray29);
        java.time.zone.ZoneRules zoneRules32 = java.time.zone.ZoneRules.of(zoneOffset21, zoneOffset22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30);
        boolean boolean33 = zoneRules32.isFixedOffset();
        java.time.Instant instant34 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition35 = zoneRules32.previousTransition(instant34);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList36 = zoneRules32.getTransitionRules();
        java.time.Instant instant37 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition38 = zoneRules32.previousTransition(instant37);
        java.time.Instant instant39 = java.time.Instant.MAX;
        java.time.Instant instant41 = instant39.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset42 = zoneRules32.getOffset(instant41);
        java.time.OffsetDateTime offsetDateTime43 = java.time.OffsetDateTime.ofInstant(instant20, (java.time.ZoneId) zoneOffset42);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery44 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period45 = offsetDateTime43.query(periodTemporalQuery44);
        java.time.Period period46 = isoEra8.query(periodTemporalQuery44);
        java.time.format.TextStyle textStyle47 = java.time.format.TextStyle.SHORT_STANDALONE;
        boolean boolean48 = textStyle47.isStandalone();
        java.time.format.TextStyle textStyle49 = textStyle47.asStandalone();
        java.util.Locale locale51 = new java.util.Locale("/");
        java.lang.String str52 = isoEra8.getDisplayName(textStyle49, locale51);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + month14 + "' != '" + java.time.Month.JANUARY + "'", month14.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.JANUARY + "'", month15.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month16 + "' != '" + java.time.Month.JANUARY + "'", month16.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField17.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition35);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList36);
        org.junit.Assert.assertNull(zoneOffsetTransition38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(periodTemporalQuery44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + textStyle47 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle47.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + textStyle49 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle49.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertEquals(locale51.toString(), "/");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        java.io.UnsupportedEncodingException unsupportedEncodingException1 = new java.io.UnsupportedEncodingException("");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.net.URLStreamHandler uRLStreamHandler8 = null;
        java.net.URL uRL9 = new java.net.URL(uRL4, "hi!", uRLStreamHandler8);
        java.net.URL uRL11 = new java.net.URL(uRL9, "Tuesday");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = uRL11.getContent();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /Tuesday (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals(uRL9.toString(), "file:/hi!");
        org.junit.Assert.assertEquals(uRL11.toString(), "file:/Tuesday");
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition0 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL;
        org.junit.Assert.assertTrue("'" + timeDefinition0 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL + "'", timeDefinition0.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL));
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange1 = chronoField0.range();
        boolean boolean3 = valueRange1.isValidIntValue(53L);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField0.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("BIG_ENDIAN");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics8 = longStream7.summaryStatistics();
        java.util.function.IntConsumer intConsumer9 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics8);
        java.util.stream.IntStream intStream10 = intStream3.peek((java.util.function.IntConsumer) longSummaryStatistics4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream12 = intStream3.skip((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(longSummaryStatistics8);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer9);
        org.junit.Assert.assertNotNull(intStream10);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.time.chrono.IsoEra isoEra11 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate14 = isoChronology9.dateYearDay((java.time.chrono.Era) isoEra11, (-1), 10);
        int int16 = isoChronology6.prolepticYear((java.time.chrono.Era) isoEra11, (int) '#');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.temporal.Temporal temporal18 = isoEra11.adjustInto((java.time.temporal.Temporal) localDateTime17);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate22 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset21);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset21);
        java.time.Month month24 = java.time.Month.JANUARY;
        java.time.Month month25 = month24.firstMonthOfQuarter();
        java.time.Month month26 = month25.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = month25.query(periodTemporalQuery27);
        java.time.Period period29 = zoneOffset21.query(periodTemporalQuery27);
        java.time.Period period30 = localDateTime17.query(periodTemporalQuery27);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.Clock clock43 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset31);
        java.time.LocalDate localDate44 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset31);
        java.time.OffsetDateTime offsetDateTime45 = java.time.OffsetDateTime.of(localDateTime17, zoneOffset31);
        int int46 = offsetDateTime45.getDayOfMonth();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + isoEra11 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra11.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-34) + "'", int16 == (-34));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + month24 + "' != '" + java.time.Month.JANUARY + "'", month24.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month25 + "' != '" + java.time.Month.JANUARY + "'", month25.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.JANUARY + "'", month26.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(clock43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        java.lang.String[] strArray89 = new java.lang.String[] { "0001-01-16", "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000", "Fri", "599b081c1808", "DayOfWeek", "java.security.PrivilegedActionException: java.util.concurrent.TimeoutException: 1970-01-01T18:01:37.00000012", "0001-01-16", "en", "P0D", "AmPmOfDay", "P3720Y", "Stati Uniti", "OptionalInt.empty", "java.text.AttributedCharacterIterator$Attribute(input_method_segment)", "1970-01-01T00:00:00.01Z", "java.nio.HeapFloatBufferR[pos=0%20lim=256%20cap=256]", "1970-01-10T18:01:37.000000120+18:00", "23:59:59.999999999+18:00", "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000", "Chinese", "2022-02-21T09:14:23.097Z[Etc/UTC]", "United States", "zh", "1970-01-10T18:01:37.000000120+18:00", "United States", "PT0S", "0001-02-21T09:14:24.776Z[Etc/UTC]", "x-windows-iso2022jp", "0001-02-21T09:14:24.776Z[Etc/UTC]", "OptionalInt.empty", "Tuesday", "java.security.PrivilegedActionException: java.util.concurrent.TimeoutException: 1970-01-01T18:01:37.00000012", "599b081c1808 (DIRECT)", "java.nio.HeapFloatBufferR[pos=0%20lim=256%20cap=256]", "Chinese", "1970-01-01T18:01:37.000000120", "Era", "2022-02-21T09:14:13.671Z[Etc/UTC]", "1970-01-10T18:01:37.000000120+18:00", "java.security.PrivilegedActionException: java.util.concurrent.TimeoutException: 1970-01-01T18:01:37.00000012", "en-GB", "23:59:59.999999999+18:00", "italiano://Etc/UTC#Etc/UTC", "Etc/UTC", "", "localhost", "ClockHourOfDay", "Di", "ParseCaseSensitive(false)Value(Year,4)Value(MonthOfYear,2)Value(DayOfMonth,2)[Offset(+HHMMss,'Z')]", "ISO", "DayOfWeek", "00010221Z", "/1970-01-01T18:01:37.00000012", "/UTC", "2022-02-21T09:14:23.097Z[Etc/UTC]", "ProtectionDomain  null\n null\n <no principals>\n null\n", "italiano://Etc/UTC#Etc/UTC", "Era", "Etc/UTC", "0001-01-16T23:59:59.999999999", "1970-01-01T18:01:37.000000130+18:00", "Era", "java.text.AttributedCharacterIterator$Attribute(reading)", "//Etc/UTC", "00010221Z", "1970-001", "0001-01-16T23:59:59.999999999", "1.0.0.100", "OptionalInt.empty", "1970-01-01T18:01:37.00000012", "599b081c1808 (DIRECT)", "java.text.AttributedCharacterIterator$Attribute(input_method_segment)", "(file:/1970-01-01T18:01:37.00000012 <no signer certificates>)", "java.nio.HeapFloatBufferR[pos=0 lim=256 cap=256]", "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000", "/1.0.0.100", "599b081c1808", "ClockHourOfDay", "Di", "java.nio.HeapFloatBufferR[pos=0 lim=256 cap=256]", "0001-01-16", "localhost", "en-US", "23:59:59.999999999+18:00", "2022-02-21T09:14:13.599Z[Etc/UTC]", "java.text.AttributedCharacterIterator$Attribute(reading)", "java.nio.HeapFloatBuffer[pos=256 lim=256 cap=256]", "19700111", "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        java.util.Iterator<java.lang.String> strItor92 = strSet90.iterator();
        boolean boolean93 = strItor92.hasNext();
        java.lang.String str94 = strItor92.next();
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(strItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "0001-01-16" + "'", str94, "0001-01-16");
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        java.time.Month month0 = java.time.Month.MARCH;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.MARCH + "'", month0.equals(java.time.Month.MARCH));
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.LocalDate localDate18 = localDate9.minusWeeks((long) 100);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        boolean boolean20 = chronoField19.isTimeBased();
        boolean boolean21 = localDate18.isSupported((java.time.temporal.TemporalField) chronoField19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.lang.String str25 = zoneOffset24.getId();
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset24);
        java.time.LocalTime localTime27 = localDateTime26.toLocalTime();
        java.time.temporal.ValueRange valueRange28 = chronoField19.rangeRefinedBy((java.time.temporal.TemporalAccessor) localTime27);
        long long29 = valueRange28.getLargestMinimum();
        long long30 = valueRange28.getMaximum();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField19.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+18:00" + "'", str25, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 999L + "'", long30 == 999L);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(59);
        java.nio.LongBuffer longBuffer3 = longBuffer1.put((long) '0');
        // The following exception was thrown during execution in test generation
        try {
            long long5 = longBuffer1.get(999998029);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 999998029");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longBuffer3);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.LocalDate localDate14 = isoChronology6.dateYearDay(31, (int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDate14);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalTime from TemporalAccessor: 0031-04-27 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.LocalDate localDate7 = localDate5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.LocalDateTime localDateTime8 = localDate7.atStartOfDay();
        java.time.chrono.Era era9 = localDate7.getEra();
        java.time.LocalDateTime localDateTime12 = localDate7.atTime(3, (int) '#');
        java.time.Duration duration13 = java.time.Duration.ZERO;
        java.time.Duration duration14 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal15 = null;
        java.time.temporal.Temporal temporal16 = duration14.subtractFrom(temporal15);
        long long17 = duration14.toDays();
        java.time.Duration duration18 = duration13.plus(duration14);
        long long19 = duration14.toDays();
        java.lang.String str20 = duration14.toString();
        long long21 = duration14.getSeconds();
        java.time.chrono.ChronoLocalDate chronoLocalDate22 = localDate7.plus((java.time.temporal.TemporalAmount) duration14);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + era9 + "' != '" + java.time.chrono.IsoEra.CE + "'", era9.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNull(temporal16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(chronoLocalDate22);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        boolean boolean1 = charset0.isRegistered();
        java.nio.charset.CharsetEncoder charsetEncoder2 = charset0.newEncoder();
        java.lang.String str3 = charset0.toString();
        java.util.Set<java.lang.String> strSet4 = charset0.aliases();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "US-ASCII" + "'", str3, "US-ASCII");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = java.time.OffsetTime.of(localTime0, zoneOffset2);
        java.time.OffsetTime offsetTime15 = offsetTime13.minusHours(0L);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.lang.String str24 = zoneOffset23.getId();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset23);
        boolean boolean26 = localDateTime20.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.format.DateTimeFormatter dateTimeFormatter27 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str28 = localDateTime25.format(dateTimeFormatter27);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int30 = localDateTime25.get((java.time.temporal.TemporalField) chronoField29);
        java.time.ZoneId zoneId31 = java.time.ZoneId.systemDefault();
        java.lang.String str32 = zoneId31.getId();
        java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.now(zoneId31);
        java.time.ZoneId zoneId34 = java.time.ZoneId.systemDefault();
        java.lang.String str35 = zoneId34.getId();
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime33.withZoneSameInstant(zoneId34);
        java.time.ZonedDateTime zonedDateTime37 = localDateTime25.atZone(zoneId34);
        int int38 = localDateTime25.getDayOfMonth();
        java.time.Month month39 = java.time.Month.JANUARY;
        java.time.Month month40 = month39.firstMonthOfQuarter();
        java.time.Month month41 = month40.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery42 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period43 = month40.query(periodTemporalQuery42);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.lang.String str47 = zoneOffset46.getId();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.MAX;
        java.lang.String str52 = zoneOffset51.getId();
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset51);
        boolean boolean54 = localDateTime48.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.format.DateTimeFormatter dateTimeFormatter55 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str56 = localDateTime53.format(dateTimeFormatter55);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int58 = localDateTime53.get((java.time.temporal.TemporalField) chronoField57);
        java.time.ZoneId zoneId59 = java.time.ZoneId.systemDefault();
        java.lang.String str60 = zoneId59.getId();
        java.time.ZonedDateTime zonedDateTime61 = java.time.ZonedDateTime.now(zoneId59);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime61.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit64 = null;
        boolean boolean65 = zonedDateTime61.isSupported(temporalUnit64);
        java.time.temporal.ChronoField chronoField66 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange67 = zonedDateTime61.range((java.time.temporal.TemporalField) chronoField66);
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime69 = java.time.LocalTime.MAX;
        long long70 = chronoField68.getFrom((java.time.temporal.TemporalAccessor) localTime69);
        boolean boolean71 = zonedDateTime61.isSupported((java.time.temporal.TemporalField) chronoField68);
        java.time.ZoneId zoneId72 = java.time.ZoneId.systemDefault();
        java.lang.String str73 = zoneId72.getId();
        java.lang.String str74 = zoneId72.getId();
        java.time.ZonedDateTime zonedDateTime75 = zonedDateTime61.withZoneSameInstant(zoneId72);
        long long76 = chronoField57.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime61);
        java.time.temporal.TemporalUnit temporalUnit77 = chronoField57.getRangeUnit();
        long long78 = period43.get(temporalUnit77);
        boolean boolean79 = localDateTime25.isSupported(temporalUnit77);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime80 = offsetTime15.truncatedTo(temporalUnit77);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit is too large to be used for truncation");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+18:00" + "'", str24, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str28, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField29.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Etc/UTC" + "'", str32, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Etc/UTC" + "'", str35, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + month39 + "' != '" + java.time.Month.JANUARY + "'", month39.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month40 + "' != '" + java.time.Month.JANUARY + "'", month40.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month41 + "' != '" + java.time.Month.JANUARY + "'", month41.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+18:00" + "'", str47, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+18:00" + "'", str52, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str56, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField57.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(zoneId59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Etc/UTC" + "'", str60, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime61);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + chronoField66 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField66.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange67);
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField68.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 23L + "'", long70 == 23L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(zoneId72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Etc/UTC" + "'", str73, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Etc/UTC" + "'", str74, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 8L + "'", long76 == 8L);
        org.junit.Assert.assertTrue("'" + temporalUnit77 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit77.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.of("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unknown chronology: ????????????????");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean17 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.OffsetTime offsetTime19 = offsetTime13.plusMinutes((long) 'u');
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime21 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray24 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, zoneOffsetTransitionArray24);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray30 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31, zoneOffsetTransitionRuleArray30);
        java.time.zone.ZoneRules zoneRules33 = java.time.zone.ZoneRules.of(zoneOffset22, zoneOffset23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31);
        java.time.OffsetTime offsetTime34 = localTime21.atOffset(zoneOffset22);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange36 = offsetTime34.range((java.time.temporal.TemporalField) chronoField35);
        java.time.OffsetTime offsetTime38 = chronoField20.adjustInto(offsetTime34, (long) 16);
        boolean boolean39 = offsetTime13.isAfter(offsetTime34);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.lang.String str44 = zoneOffset43.getId();
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset43);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean47 = localDateTime45.isSupported((java.time.temporal.TemporalField) chronoField46);
        java.time.Month month49 = java.time.Month.JANUARY;
        java.time.Month month50 = month49.firstMonthOfQuarter();
        java.time.Month month51 = month50.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery52 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period53 = month50.query(periodTemporalQuery52);
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.lang.String str57 = zoneOffset56.getId();
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset56);
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.MAX;
        java.lang.String str62 = zoneOffset61.getId();
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset61);
        boolean boolean64 = localDateTime58.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime63);
        java.time.format.DateTimeFormatter dateTimeFormatter65 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str66 = localDateTime63.format(dateTimeFormatter65);
        java.time.temporal.ChronoField chronoField67 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int68 = localDateTime63.get((java.time.temporal.TemporalField) chronoField67);
        java.time.ZoneId zoneId69 = java.time.ZoneId.systemDefault();
        java.lang.String str70 = zoneId69.getId();
        java.time.ZonedDateTime zonedDateTime71 = java.time.ZonedDateTime.now(zoneId69);
        java.time.ZonedDateTime zonedDateTime73 = zonedDateTime71.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit74 = null;
        boolean boolean75 = zonedDateTime71.isSupported(temporalUnit74);
        java.time.temporal.ChronoField chronoField76 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange77 = zonedDateTime71.range((java.time.temporal.TemporalField) chronoField76);
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime79 = java.time.LocalTime.MAX;
        long long80 = chronoField78.getFrom((java.time.temporal.TemporalAccessor) localTime79);
        boolean boolean81 = zonedDateTime71.isSupported((java.time.temporal.TemporalField) chronoField78);
        java.time.ZoneId zoneId82 = java.time.ZoneId.systemDefault();
        java.lang.String str83 = zoneId82.getId();
        java.lang.String str84 = zoneId82.getId();
        java.time.ZonedDateTime zonedDateTime85 = zonedDateTime71.withZoneSameInstant(zoneId82);
        long long86 = chronoField67.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime71);
        java.time.temporal.TemporalUnit temporalUnit87 = chronoField67.getRangeUnit();
        long long88 = period53.get(temporalUnit87);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime89 = localDateTime45.minus(64897L, temporalUnit87);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime90 = offsetTime13.minus((long) (-4095), temporalUnit87);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Years");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField20.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange36);
        org.junit.Assert.assertNotNull(offsetTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+18:00" + "'", str44, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + month49 + "' != '" + java.time.Month.JANUARY + "'", month49.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month50 + "' != '" + java.time.Month.JANUARY + "'", month50.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month51 + "' != '" + java.time.Month.JANUARY + "'", month51.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+18:00" + "'", str57, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+18:00" + "'", str62, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str66, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField67 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField67.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(zoneId69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Etc/UTC" + "'", str70, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + chronoField76 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField76.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange77);
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField78.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 23L + "'", long80 == 23L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(zoneId82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Etc/UTC" + "'", str83, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Etc/UTC" + "'", str84, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 8L + "'", long86 == 8L);
        org.junit.Assert.assertTrue("'" + temporalUnit87 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit87.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime89);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed(8L, (long) 7);
        java.util.OptionalLong optionalLong3 = longStream2.findFirst();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        java.util.Locale.FilteringMode filteringMode0 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        org.junit.Assert.assertTrue("'" + filteringMode0 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode0.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.nio.file.attribute.FileTime fileTime3 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.time.Instant instant4 = fileTime3.toInstant();
        java.lang.String str5 = fileTime3.toString();
        int int6 = fileTime1.compareTo(fileTime3);
        java.util.concurrent.TimeUnit timeUnit7 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long8 = fileTime1.to(timeUnit7);
        long long9 = fileTime1.toMillis();
        java.nio.file.attribute.FileTime fileTime10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int11 = fileTime1.compareTo(fileTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(fileTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.01Z" + "'", str5, "1970-01-01T00:00:00.01Z");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeUnit7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        int int9 = byteBuffer5.remaining();
        java.nio.IntBuffer intBuffer10 = byteBuffer5.asIntBuffer();
        java.nio.IntBuffer intBuffer11 = intBuffer10.compact();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Fri");
        boolean boolean2 = printStream1.checkError();
        printStream1.print((double) (byte) -1);
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray8 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, zoneOffsetTransitionArray8);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray11 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, zoneOffsetTransitionArray11);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray14 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15, zoneOffsetTransitionRuleArray14);
        java.time.zone.ZoneRules zoneRules17 = java.time.zone.ZoneRules.of(zoneOffset6, zoneOffset7, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        boolean boolean30 = zoneOffsetTransitionList9.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition31 = null;
        boolean boolean32 = zoneOffsetTransitionList9.add(zoneOffsetTransition31);
        java.lang.Object[] objArray33 = zoneOffsetTransitionList9.toArray();
        java.io.PrintStream printStream34 = printStream1.printf("ISO", objArray33);
        printStream34.print((double) 1645434863000L);
        printStream34.close();
        printStream34.write(11000000);
        boolean boolean40 = printStream34.checkError();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[null]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((-4095));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative capacity: -4095");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        java.time.Duration duration1 = java.time.Duration.ofDays((long) 1024);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.wrap(longArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer9 = longBuffer2.get(longArray4, 365, 17488);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.chrono.IsoChronology isoChronology29 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra31 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate34 = isoChronology29.dateYearDay((java.time.chrono.Era) isoEra31, 0, 16);
        java.time.LocalTime localTime35 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime36 = localDate34.atTime(localTime35);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray42 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, zoneOffsetTransitionArray42);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray45 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46, zoneOffsetTransitionRuleArray45);
        java.time.zone.ZoneRules zoneRules48 = java.time.zone.ZoneRules.of(zoneOffset37, zoneOffset38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46);
        long long49 = localDateTime36.toEpochSecond(zoneOffset37);
        java.time.LocalDateTime localDateTime51 = localDateTime36.plusDays((long) (byte) 1);
        java.time.temporal.Temporal temporal52 = localDateTime24.adjustInto((java.time.temporal.Temporal) localDateTime36);
        java.time.LocalDateTime localDateTime54 = localDateTime36.withNano((int) 'u');
        java.time.Month month55 = localDateTime54.getMonth();
        java.time.LocalDateTime localDateTime57 = localDateTime54.minusWeeks((long) '\000');
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.MAX;
        java.lang.String str61 = zoneOffset60.getId();
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset60);
        java.time.temporal.Temporal temporal63 = localDateTime57.adjustInto((java.time.temporal.Temporal) localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(isoChronology29);
        org.junit.Assert.assertTrue("'" + isoEra31 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra31.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-62134279201L) + "'", long49 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(temporal52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + month55 + "' != '" + java.time.Month.JANUARY + "'", month55.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+18:00" + "'", str61, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(temporal63);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.time.ZoneId zoneId8 = java.time.ZoneId.systemDefault();
        java.lang.String str9 = zoneId8.getId();
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.now(zoneId8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.LocalTime localTime13 = zonedDateTime12.toLocalTime();
        java.util.stream.DoubleStream doubleStream15 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj16 = properties7.getOrDefault((java.lang.Object) zonedDateTime12, (java.lang.Object) doubleStream15);
        java.lang.Object obj19 = properties7.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration20 = properties7.propertyNames();
        java.nio.file.LinkOption linkOption21 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj23 = properties7.getOrDefault((java.lang.Object) linkOption21, (java.lang.Object) 9000L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.time.ZoneId zoneId26 = java.time.ZoneId.systemDefault();
        java.lang.String str27 = zoneId26.getId();
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.now(zoneId26);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.withYear((int) (short) 1);
        java.time.LocalTime localTime31 = zonedDateTime30.toLocalTime();
        java.util.stream.DoubleStream doubleStream33 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj34 = properties25.getOrDefault((java.lang.Object) zonedDateTime30, (java.lang.Object) doubleStream33);
        java.lang.Object obj37 = properties25.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration38 = properties25.propertyNames();
        java.nio.file.LinkOption linkOption39 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj41 = properties25.getOrDefault((java.lang.Object) linkOption39, (java.lang.Object) 9000L);
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.time.ZoneId zoneId44 = java.time.ZoneId.systemDefault();
        java.lang.String str45 = zoneId44.getId();
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.now(zoneId44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime46.withYear((int) (short) 1);
        java.time.LocalTime localTime49 = zonedDateTime48.toLocalTime();
        java.util.stream.DoubleStream doubleStream51 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj52 = properties43.getOrDefault((java.lang.Object) zonedDateTime48, (java.lang.Object) doubleStream51);
        java.lang.Object obj55 = properties43.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration56 = properties43.propertyNames();
        java.nio.file.LinkOption linkOption57 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj59 = properties43.getOrDefault((java.lang.Object) linkOption57, (java.lang.Object) 9000L);
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        java.time.ZoneId zoneId62 = java.time.ZoneId.systemDefault();
        java.lang.String str63 = zoneId62.getId();
        java.time.ZonedDateTime zonedDateTime64 = java.time.ZonedDateTime.now(zoneId62);
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime64.withYear((int) (short) 1);
        java.time.LocalTime localTime67 = zonedDateTime66.toLocalTime();
        java.util.stream.DoubleStream doubleStream69 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj70 = properties61.getOrDefault((java.lang.Object) zonedDateTime66, (java.lang.Object) doubleStream69);
        java.lang.Object obj73 = properties61.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration74 = properties61.propertyNames();
        java.nio.file.LinkOption linkOption75 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj77 = properties61.getOrDefault((java.lang.Object) linkOption75, (java.lang.Object) 9000L);
        java.nio.file.OpenOption[] openOptionArray78 = new java.nio.file.OpenOption[] { linkOption21, linkOption39, linkOption57, linkOption75 };
        java.nio.channels.FileChannel fileChannel79 = java.nio.channels.FileChannel.open(path5, openOptionArray78);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileLock fileLock80 = fileChannel79.tryLock();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Etc/UTC" + "'", str9, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(wildcardEnumeration20);
        org.junit.Assert.assertTrue("'" + linkOption21 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption21.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 9000L + "'", obj23, 9000L);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(doubleStream33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(wildcardEnumeration38);
        org.junit.Assert.assertTrue("'" + linkOption39 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption39.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + 9000L + "'", obj41, 9000L);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(doubleStream51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(wildcardEnumeration56);
        org.junit.Assert.assertTrue("'" + linkOption57 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption57.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + 9000L + "'", obj59, 9000L);
        org.junit.Assert.assertNotNull(zoneId62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Etc/UTC" + "'", str63, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(doubleStream69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(wildcardEnumeration74);
        org.junit.Assert.assertTrue("'" + linkOption75 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption75.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + 9000L + "'", obj77, 9000L);
        org.junit.Assert.assertNotNull(openOptionArray78);
        org.junit.Assert.assertNotNull(fileChannel79);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.lang.String str27 = localDateTime20.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime29 = localDateTime20.withMonth(256);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 256");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str27, "1970-01-01T18:01:37.000000120");
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) '4', (long) ' ');
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = java.time.ZonedDateTime.now(zoneId3);
        java.time.ZonedDateTime zonedDateTime7 = zonedDateTime5.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit8 = null;
        boolean boolean9 = zonedDateTime5.isSupported(temporalUnit8);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange11 = zonedDateTime5.range((java.time.temporal.TemporalField) chronoField10);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime13 = java.time.LocalTime.MAX;
        long long14 = chronoField12.getFrom((java.time.temporal.TemporalAccessor) localTime13);
        boolean boolean15 = zonedDateTime5.isSupported((java.time.temporal.TemporalField) chronoField12);
        java.time.ZoneId zoneId16 = java.time.ZoneId.systemDefault();
        java.lang.String str17 = zoneId16.getId();
        java.lang.String str18 = zoneId16.getId();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime5.withZoneSameInstant(zoneId16);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofInstant(instant2, zoneId16);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime22 = localDateTime20.withMonth(255);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 255");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField10.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 23L + "'", long14 == 23L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Etc/UTC" + "'", str17, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Etc/UTC" + "'", str18, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 16, 299105452032L);
        longStream2.close();
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.Object obj1 = strMapMap0.clone();
        java.lang.String str2 = strMapMap0.toString();
        java.util.Set<java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>> strMapEntrySet3 = strMapMap0.entrySet();
        java.lang.String str4 = strMapMap0.toString();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(strMapEntrySet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.time.temporal.TemporalAccessor temporalAccessor0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime1 = java.time.chrono.ChronoLocalDateTime.from(temporalAccessor0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: temporal");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.net.URL uRL8 = new java.net.URL(uRL4, "/");
        int int9 = uRL8.getPort();
        java.lang.String str10 = uRL8.getProtocol();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals(uRL8.toString(), "file:/");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "file" + "'", str10, "file");
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        boolean boolean3 = charBuffer1.isReadOnly();
        java.nio.CharBuffer charBuffer5 = charBuffer1.put('x');
        java.lang.CharSequence charSequence6 = null;
        java.nio.CharBuffer charBuffer7 = charBuffer1.append(charSequence6);
        int int8 = charBuffer7.length();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) (short) 10);
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        fieldPosition2.setBeginIndex((int) '4');
        fieldPosition2.setEndIndex((int) '\000');
        java.text.Format.Field field8 = fieldPosition2.getFieldAttribute();
        org.junit.Assert.assertNull(field3);
        org.junit.Assert.assertNull(field8);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.ofEpochDay((long) 10);
        int int4 = localDate1.compareTo((java.time.chrono.ChronoLocalDate) localDate3);
        java.time.chrono.IsoChronology isoChronology5 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate10 = isoChronology5.dateYearDay((java.time.chrono.Era) isoEra7, 0, 16);
        java.time.LocalTime localTime11 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime12 = localDate10.atTime(localTime11);
        java.time.LocalDate localDate14 = localDate10.withMonth(1);
        boolean boolean15 = localDate10.isLeapYear();
        java.time.chrono.ChronoPeriod chronoPeriod16 = localDate3.until((java.time.chrono.ChronoLocalDate) localDate10);
        boolean boolean17 = localDate10.isLeapYear();
        java.time.format.DateTimeFormatter dateTimeFormatter18 = java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = localDate10.format(dateTimeFormatter18);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra7.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronoPeriod16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalDate localDate20 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra14, 120, (int) '-');
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate22 = localDate20.withMonth(78000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 78000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.security.ProtectionDomain protectionDomain2 = new java.security.ProtectionDomain(codeSource0, permissionCollection1);
        java.lang.ClassLoader classLoader3 = protectionDomain2.getClassLoader();
        java.security.Principal[] principalArray4 = protectionDomain2.getPrincipals();
        java.lang.ClassLoader classLoader5 = protectionDomain2.getClassLoader();
        java.security.PermissionCollection permissionCollection6 = protectionDomain2.getPermissions();
        java.security.PermissionCollection permissionCollection7 = protectionDomain2.getPermissions();
        java.security.CodeSource codeSource8 = protectionDomain2.getCodeSource();
        org.junit.Assert.assertEquals(protectionDomain2.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader3);
        org.junit.Assert.assertNotNull(principalArray4);
        org.junit.Assert.assertNull(classLoader5);
        org.junit.Assert.assertNull(permissionCollection6);
        org.junit.Assert.assertNull(permissionCollection7);
        org.junit.Assert.assertNull(codeSource8);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        zoneOffsetTransitionList3.clear();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition26 = null;
        boolean boolean27 = zoneOffsetTransitionList3.add(zoneOffsetTransition26);
        java.util.ListIterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionItor28 = zoneOffsetTransitionList3.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.time.zone.ZoneOffsetTransition zoneOffsetTransition29 = zoneOffsetTransitionItor28.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionItor28);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        strSet0.clear();
        org.junit.Assert.assertNotNull(strSet0);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.time.Instant instant0 = java.time.Instant.MAX;
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.from((java.time.temporal.TemporalAccessor) instant0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZoneId from TemporalAccessor: +1000000000-12-31T23:59:59.999999999Z of type java.time.Instant");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.lang.String str14 = offsetTime13.toString();
        java.time.ZoneOffset zoneOffset15 = offsetTime13.getOffset();
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_TIME;
        boolean boolean17 = offsetTime13.equals((java.lang.Object) dateTimeFormatter16);
        java.time.format.DateTimeFormatter dateTimeFormatter18 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.format.DecimalStyle decimalStyle19 = java.time.format.DecimalStyle.ofDefaultLocale();
        java.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withDecimalStyle(decimalStyle19);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withLocale(locale21);
        java.util.Set<java.time.temporal.TemporalField> temporalFieldSet23 = dateTimeFormatter20.getResolverFields();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = offsetTime13.format(dateTimeFormatter20);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "23:59:59.999999999+18:00" + "'", str14, "23:59:59.999999999+18:00");
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(decimalStyle19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(temporalFieldSet23);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.LocalDate localDate18 = localDate9.minusWeeks((long) 100);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        boolean boolean20 = chronoField19.isTimeBased();
        boolean boolean21 = localDate18.isSupported((java.time.temporal.TemporalField) chronoField19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.lang.String str25 = zoneOffset24.getId();
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset24);
        java.time.LocalTime localTime27 = localDateTime26.toLocalTime();
        java.time.temporal.ValueRange valueRange28 = chronoField19.rangeRefinedBy((java.time.temporal.TemporalAccessor) localTime27);
        java.time.temporal.TemporalUnit temporalUnit29 = null;
        boolean boolean30 = localTime27.isSupported(temporalUnit29);
        java.time.chrono.IsoChronology isoChronology31 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer33 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj34 = charBuffer33.array();
        boolean boolean35 = isoChronology31.equals(obj34);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap36 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology37 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean38 = strMapMap36.containsKey((java.lang.Object) isoChronology37);
        java.time.chrono.IsoEra isoEra39 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate42 = isoChronology37.dateYearDay((java.time.chrono.Era) isoEra39, (-1), 10);
        int int44 = isoChronology31.prolepticYear((java.time.chrono.Era) isoEra39, 0);
        java.time.Month month45 = java.time.Month.JANUARY;
        java.time.Month month46 = month45.firstMonthOfQuarter();
        java.time.Month month47 = month46.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean49 = month47.isSupported((java.time.temporal.TemporalField) chronoField48);
        boolean boolean50 = isoEra39.isSupported((java.time.temporal.TemporalField) chronoField48);
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str52 = chronoField48.getDisplayName(locale51);
        int int53 = localTime27.get((java.time.temporal.TemporalField) chronoField48);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField19.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+18:00" + "'", str25, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(isoChronology31);
        org.junit.Assert.assertNotNull(charBuffer33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(isoChronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + isoEra39 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra39.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + month45 + "' != '" + java.time.Month.JANUARY + "'", month45.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month46 + "' != '" + java.time.Month.JANUARY + "'", month46.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month47 + "' != '" + java.time.Month.JANUARY + "'", month47.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField48.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e0a\u5348\u4e0b\u5348" + "'", str52, "\u4e0a\u5348\u4e0b\u5348");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        java.util.IntSummaryStatistics intSummaryStatistics0 = new java.util.IntSummaryStatistics();
        org.junit.Assert.assertEquals(intSummaryStatistics0.toString(), "IntSummaryStatistics{count=0, sum=0, min=2147483647, average=0,000000, max=-2147483648}");
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.lang.String str92 = offsetDateTime88.toString();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1970-01-01T18:01:37.000000120+18:00" + "'", str92, "1970-01-01T18:01:37.000000120+18:00");
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.security.NoSuchAlgorithmException> noSuchAlgorithmExceptionOptional1 = java.util.Optional.of(noSuchAlgorithmException0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        java.util.Date date3 = new java.util.Date((int) '4', 23, 17);
        date3.setHours(64);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 19 16:00:00 UTC 1953");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.chrono.IsoChronology isoChronology29 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra31 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate34 = isoChronology29.dateYearDay((java.time.chrono.Era) isoEra31, 0, 16);
        java.time.LocalTime localTime35 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime36 = localDate34.atTime(localTime35);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray42 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, zoneOffsetTransitionArray42);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray45 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46, zoneOffsetTransitionRuleArray45);
        java.time.zone.ZoneRules zoneRules48 = java.time.zone.ZoneRules.of(zoneOffset37, zoneOffset38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46);
        long long49 = localDateTime36.toEpochSecond(zoneOffset37);
        java.time.LocalDateTime localDateTime51 = localDateTime36.plusDays((long) (byte) 1);
        java.time.temporal.Temporal temporal52 = localDateTime24.adjustInto((java.time.temporal.Temporal) localDateTime36);
        java.time.LocalDateTime localDateTime54 = localDateTime36.withNano((int) 'u');
        java.time.LocalTime localTime55 = localDateTime36.toLocalTime();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(isoChronology29);
        org.junit.Assert.assertTrue("'" + isoEra31 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra31.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-62134279201L) + "'", long49 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(temporal52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localTime55);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("19700111", "java.security.PrivilegedActionException: java.util.concurrent.TimeoutException: 1970-01-01T18:01:37.00000012");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: java.security.PrivilegedActionException: java.util.concurrent.TimeoutException: 1970-01-01T18:01:37.00000012");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        java.time.Period period1 = java.time.Period.ofYears((int) '\000');
        java.time.chrono.Chronology chronology2 = period1.getChronology();
        java.time.Period period4 = period1.plusYears((long) 'x');
        java.time.chrono.IsoChronology isoChronology5 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate10 = isoChronology5.dateYearDay((java.time.chrono.Era) isoEra7, 0, 16);
        java.time.LocalTime localTime11 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime12 = localDate10.atTime(localTime11);
        java.time.LocalDate localDate14 = localDate10.withMonth(1);
        long long15 = localDate14.toEpochDay();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, 0, 16);
        java.time.LocalTime localTime22 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime23 = localDate21.atTime(localTime22);
        java.time.LocalDate localDate25 = localDate21.withMonth(1);
        long long26 = localDate25.toEpochDay();
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra29 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate32 = isoChronology27.dateYearDay((java.time.chrono.Era) isoEra29, 0, 16);
        java.time.LocalTime localTime33 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime34 = localDate32.atTime(localTime33);
        java.time.LocalDate localDate36 = localDate32.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod37 = localDate25.until((java.time.chrono.ChronoLocalDate) localDate36);
        boolean boolean38 = localDate14.isAfter((java.time.chrono.ChronoLocalDate) localDate25);
        java.time.temporal.Temporal temporal39 = period1.addTo((java.time.temporal.Temporal) localDate25);
        long long40 = period1.toTotalMonths();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra7.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-719147L) + "'", long15 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-719147L) + "'", long26 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + isoEra29 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra29.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronoPeriod37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(temporal39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException0 = new java.security.NoSuchAlgorithmException();
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        java.util.function.DoubleSupplier doubleSupplier0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.generate(doubleSupplier0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.DoubleStream doubleStream4 = intStream3.asDoubleStream();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate(16);
        int int7 = charBuffer6.limit();
        java.util.stream.IntStream intStream8 = charBuffer6.chars();
        java.util.stream.DoubleStream doubleStream9 = intStream8.asDoubleStream();
        java.util.stream.DoubleStream doubleStream10 = java.util.stream.DoubleStream.concat(doubleStream4, doubleStream9);
        java.util.function.DoubleConsumer doubleConsumer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleStream4.forEachOrdered(doubleConsumer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream10);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.lang.String str8 = isoChronology6.getCalendarType();
        java.time.Clock clock9 = java.time.Clock.systemUTC();
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MAX;
        java.time.Clock clock11 = clock9.withZone((java.time.ZoneId) zoneOffset10);
        java.time.LocalDate localDate12 = isoChronology6.dateNow(clock11);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MAX;
        java.lang.String str16 = zoneOffset15.getId();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.lang.String str21 = zoneOffset20.getId();
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset20);
        boolean boolean23 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.lang.String str25 = zoneOffset24.getId();
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime22, (java.time.ZoneId) zoneOffset24);
        java.time.Clock clock27 = clock11.withZone((java.time.ZoneId) zoneOffset24);
        java.time.OffsetDateTime offsetDateTime28 = java.time.OffsetDateTime.now(clock11);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "iso8601" + "'", str8, "iso8601");
        org.junit.Assert.assertNotNull(clock9);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+18:00" + "'", str16, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+18:00" + "'", str21, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+18:00" + "'", str25, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.time.LocalDate localDate2 = java.time.LocalDate.ofYearDay((int) 'u', 16);
        java.time.LocalDate localDate4 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.ZoneId zoneId5 = java.time.ZoneId.systemDefault();
        java.lang.String str6 = zoneId5.getId();
        java.time.ZonedDateTime zonedDateTime7 = java.time.ZonedDateTime.now(zoneId5);
        java.time.ZonedDateTime zonedDateTime9 = zonedDateTime7.withYear((int) (short) 1);
        java.time.temporal.Temporal temporal10 = localDate4.adjustInto((java.time.temporal.Temporal) zonedDateTime9);
        java.time.chrono.ChronoPeriod chronoPeriod11 = localDate2.until((java.time.chrono.ChronoLocalDate) localDate4);
        java.time.DayOfWeek dayOfWeek12 = localDate4.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(temporal10);
        org.junit.Assert.assertNotNull(chronoPeriod11);
        org.junit.Assert.assertTrue("'" + dayOfWeek12 + "' != '" + java.time.DayOfWeek.SUNDAY + "'", dayOfWeek12.equals(java.time.DayOfWeek.SUNDAY));
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.DoubleStream doubleStream4 = intStream3.asDoubleStream();
        java.util.function.DoubleBinaryOperator doubleBinaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble6 = doubleStream4.reduce(doubleBinaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.lang.String[] strArray15 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        boolean boolean42 = zoneOffsetTransitionList21.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36);
        zoneOffsetTransitionList21.clear();
        boolean boolean44 = strSet16.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21);
        boolean boolean45 = fileTime1.equals((java.lang.Object) zoneOffsetTransitionList21);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator46 = zoneOffsetTransitionList21.spliterator();
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator47 = zoneOffsetTransitionList21.spliterator();
        java.util.Iterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionItor48 = zoneOffsetTransitionList21.iterator();
        java.util.Iterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionItor49 = zoneOffsetTransitionList21.iterator();
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator46);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator47);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionItor48);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionItor49);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        java.util.stream.IntStream.Builder builder0 = java.util.stream.IntStream.builder();
        builder0.accept((-34));
        java.util.stream.IntStream intStream3 = builder0.build();
        int int4 = intStream3.sum();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-34) + "'", int4 == (-34));
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        java.util.stream.LongStream longStream8 = longStream6.limit((long) ' ');
        java.util.Iterator<java.lang.Long> longItor9 = longStream8.iterator();
        boolean boolean10 = longItor9.hasNext();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(longItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.minus(duration17);
        java.time.OffsetTime offsetTime22 = offsetTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray29 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, zoneOffsetTransitionArray29);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray32 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33, zoneOffsetTransitionRuleArray32);
        java.time.zone.ZoneRules zoneRules35 = java.time.zone.ZoneRules.of(zoneOffset24, zoneOffset25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33);
        java.time.OffsetTime offsetTime36 = localTime23.atOffset(zoneOffset24);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange38 = offsetTime36.range((java.time.temporal.TemporalField) chronoField37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal41 = null;
        java.time.temporal.Temporal temporal42 = duration40.subtractFrom(temporal41);
        long long43 = duration40.toDays();
        java.time.Duration duration44 = duration39.minus(duration40);
        java.time.OffsetTime offsetTime45 = offsetTime36.minus((java.time.temporal.TemporalAmount) duration40);
        boolean boolean46 = offsetTime22.isAfter(offsetTime36);
        java.time.OffsetTime offsetTime48 = offsetTime22.withNano((int) '#');
        java.lang.String str49 = offsetTime22.toString();
        java.time.chrono.IsoChronology isoChronology50 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer52 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj53 = charBuffer52.array();
        boolean boolean54 = isoChronology50.equals(obj53);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap55 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology56 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean57 = strMapMap55.containsKey((java.lang.Object) isoChronology56);
        java.time.chrono.IsoEra isoEra58 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate61 = isoChronology56.dateYearDay((java.time.chrono.Era) isoEra58, (-1), 10);
        int int63 = isoChronology50.prolepticYear((java.time.chrono.Era) isoEra58, 0);
        java.time.Month month64 = java.time.Month.JANUARY;
        java.time.Month month65 = month64.firstMonthOfQuarter();
        java.time.Month month66 = month65.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField67 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean68 = month66.isSupported((java.time.temporal.TemporalField) chronoField67);
        boolean boolean69 = isoEra58.isSupported((java.time.temporal.TemporalField) chronoField67);
        java.time.temporal.TemporalUnit temporalUnit70 = chronoField67.getRangeUnit();
        java.lang.String str71 = chronoField67.toString();
        java.time.temporal.Temporal temporal73 = offsetTime22.with((java.time.temporal.TemporalField) chronoField67, 0L);
        java.util.Date date79 = new java.util.Date(256, (int) (short) -1, 13, 64, (int) (short) 10);
        java.time.Instant instant80 = date79.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange81 = chronoField67.rangeRefinedBy((java.time.temporal.TemporalAccessor) instant80);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AmPmOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNull(temporal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "23:59:59.999999999+18:00" + "'", str49, "23:59:59.999999999+18:00");
        org.junit.Assert.assertNotNull(isoChronology50);
        org.junit.Assert.assertNotNull(charBuffer52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(isoChronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + isoEra58 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra58.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + month64 + "' != '" + java.time.Month.JANUARY + "'", month64.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month65 + "' != '" + java.time.Month.JANUARY + "'", month65.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month66 + "' != '" + java.time.Month.JANUARY + "'", month66.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField67 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField67.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit70 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit70.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "AmPmOfDay" + "'", str71, "AmPmOfDay");
        org.junit.Assert.assertNotNull(temporal73);
        org.junit.Assert.assertEquals(date79.toString(), "Mon Dec 15 16:10:00 UTC 2155");
        org.junit.Assert.assertNotNull(instant80);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.time.chrono.IsoEra isoEra11 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate14 = isoChronology9.dateYearDay((java.time.chrono.Era) isoEra11, (-1), 10);
        int int16 = isoChronology6.prolepticYear((java.time.chrono.Era) isoEra11, (int) '#');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.temporal.Temporal temporal18 = isoEra11.adjustInto((java.time.temporal.Temporal) localDateTime17);
        java.time.format.DateTimeFormatter dateTimeFormatter19 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale20 = dateTimeFormatter19.getLocale();
        java.time.format.DecimalStyle decimalStyle21 = java.time.format.DecimalStyle.STANDARD;
        char char22 = decimalStyle21.getZeroDigit();
        java.time.format.DecimalStyle decimalStyle24 = decimalStyle21.withZeroDigit('a');
        java.time.format.DecimalStyle decimalStyle26 = decimalStyle21.withPositiveSign('#');
        java.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter19.withDecimalStyle(decimalStyle26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = localDateTime17.format(dateTimeFormatter19);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + isoEra11 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra11.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-34) + "'", int16 == (-34));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(decimalStyle21);
        org.junit.Assert.assertTrue("'" + char22 + "' != '" + '0' + "'", char22 == '0');
        org.junit.Assert.assertNotNull(decimalStyle24);
        org.junit.Assert.assertNotNull(decimalStyle26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.nio.file.Path path25 = path18.relativize(path24);
        boolean boolean26 = path11.startsWith(path18);
        java.io.File file29 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long30 = file29.lastModified();
        java.net.URL uRL31 = file29.toURL();
        java.nio.file.Path path32 = file29.toPath();
        java.io.File file35 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long36 = file35.lastModified();
        java.net.URL uRL37 = file35.toURL();
        java.nio.file.Path path38 = file35.toPath();
        java.nio.file.Path path39 = path32.relativize(path38);
        java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer43 = charBuffer41.append((java.lang.CharSequence) "Etc/UTC");
        int int44 = charBuffer43.arrayOffset();
        boolean boolean45 = path38.equals((java.lang.Object) int44);
        java.nio.file.Path path46 = path18.relativize(path38);
        java.nio.file.Path path48 = path18.resolve("{}");
        java.nio.file.Path path49 = path18.getParent();
        int int50 = path18.getNameCount();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645434897000L + "'", long9 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645434897000L + "'", long16 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645434897000L + "'", long22 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals(file29.getParent(), "/");
        org.junit.Assert.assertEquals(file29.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645434897000L + "'", long30 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL31);
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertEquals(file35.getParent(), "/");
        org.junit.Assert.assertEquals(file35.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645434897000L + "'", long36 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL37);
        org.junit.Assert.assertEquals(uRL37.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path38);
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(path46);
        org.junit.Assert.assertNotNull(path48);
        org.junit.Assert.assertNotNull(path49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        java.util.stream.LongStream longStream7 = longStream2.parallel();
        java.util.stream.LongStream longStream9 = longStream2.skip(0L);
        java.lang.Runnable runnable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream11 = longStream2.onClose(runnable10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(longStream9);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.Month month2 = month1.firstMonthOfQuarter();
        int int3 = month1.minLength();
        int int4 = month1.maxLength();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.JANUARY + "'", month2.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime1 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray4 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList5 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, zoneOffsetTransitionArray4);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray7 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList8 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, zoneOffsetTransitionArray7);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray10 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11, zoneOffsetTransitionRuleArray10);
        java.time.zone.ZoneRules zoneRules13 = java.time.zone.ZoneRules.of(zoneOffset2, zoneOffset3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11);
        java.time.OffsetTime offsetTime14 = localTime1.atOffset(zoneOffset2);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange16 = offsetTime14.range((java.time.temporal.TemporalField) chronoField15);
        java.time.OffsetTime offsetTime18 = chronoField0.adjustInto(offsetTime14, (long) 16);
        java.time.LocalTime localTime19 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray22 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList23 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, zoneOffsetTransitionArray22);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray25 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, zoneOffsetTransitionArray25);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray28 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList29 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList29, zoneOffsetTransitionRuleArray28);
        java.time.zone.ZoneRules zoneRules31 = java.time.zone.ZoneRules.of(zoneOffset20, zoneOffset21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList29);
        java.time.OffsetTime offsetTime32 = localTime19.atOffset(zoneOffset20);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange34 = offsetTime32.range((java.time.temporal.TemporalField) chronoField33);
        long long35 = offsetTime18.getLong((java.time.temporal.TemporalField) chronoField33);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery36 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period37 = offsetTime18.query(periodTemporalQuery36);
        int int38 = period37.getMonths();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField15.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange16);
        org.junit.Assert.assertNotNull(offsetTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(offsetTime32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField33.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 23L + "'", long35 == 23L);
        org.junit.Assert.assertNotNull(periodTemporalQuery36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) (short) 10);
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        fieldPosition2.setBeginIndex((int) (byte) -1);
        java.lang.String str6 = fieldPosition2.toString();
        org.junit.Assert.assertNull(field3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.text.FieldPosition[field=10,attribute=null,beginIndex=-1,endIndex=0]" + "'", str6, "java.text.FieldPosition[field=10,attribute=null,beginIndex=-1,endIndex=0]");
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        java.time.Period period1 = java.time.Period.ofYears((int) '\000');
        java.lang.String str2 = period1.toString();
        java.time.chrono.IsoChronology isoChronology3 = period1.getChronology();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap4 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology5 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean6 = strMapMap4.containsKey((java.lang.Object) isoChronology5);
        java.time.Duration duration7 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal8 = null;
        java.time.temporal.Temporal temporal9 = duration7.subtractFrom(temporal8);
        long long10 = duration7.toDays();
        boolean boolean11 = strMapMap4.contains((java.lang.Object) duration7);
        java.time.format.DateTimeFormatter dateTimeFormatter12 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable13 = strMapMap4.get((java.lang.Object) dateTimeFormatter12);
        java.time.chrono.Chronology chronology14 = dateTimeFormatter12.getChronology();
        int int15 = isoChronology3.compareTo(chronology14);
        java.lang.String str16 = isoChronology3.getCalendarType();
        java.time.Clock clock17 = java.time.Clock.systemUTC();
        java.time.ZonedDateTime zonedDateTime18 = java.time.ZonedDateTime.now(clock17);
        java.time.chrono.ChronoLocalDate chronoLocalDate19 = isoChronology3.dateNow(clock17);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray29 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30, zoneOffsetTransitionRuleArray29);
        java.time.zone.ZoneRules zoneRules32 = java.time.zone.ZoneRules.of(zoneOffset21, zoneOffset22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray38 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, zoneOffsetTransitionArray38);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray41 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList42 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList42, zoneOffsetTransitionRuleArray41);
        java.time.zone.ZoneRules zoneRules44 = java.time.zone.ZoneRules.of(zoneOffset33, zoneOffset34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList42);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray50 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, zoneOffsetTransitionArray50);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray53 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList54 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList54, zoneOffsetTransitionRuleArray53);
        java.time.zone.ZoneRules zoneRules56 = java.time.zone.ZoneRules.of(zoneOffset45, zoneOffset46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList54);
        boolean boolean57 = zoneOffsetTransitionList36.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51);
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray63 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList64, zoneOffsetTransitionArray63);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray66 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList67 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList67, zoneOffsetTransitionRuleArray66);
        java.time.zone.ZoneRules zoneRules69 = java.time.zone.ZoneRules.of(zoneOffset58, zoneOffset59, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList64, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList67);
        int int71 = zoneOffsetTransitionList64.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray77 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList78, zoneOffsetTransitionArray77);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray80 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList81 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList81, zoneOffsetTransitionRuleArray80);
        java.time.zone.ZoneRules zoneRules83 = java.time.zone.ZoneRules.of(zoneOffset72, zoneOffset73, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList78, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList81);
        java.time.zone.ZoneRules zoneRules84 = java.time.zone.ZoneRules.of(zoneOffset20, zoneOffset21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList64, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList81);
        java.time.chrono.ChronoLocalDate chronoLocalDate85 = isoChronology3.dateNow((java.time.ZoneId) zoneOffset20);
        int int86 = chronoLocalDate85.lengthOfYear();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "P0D" + "'", str2, "P0D");
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNull(temporal9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(cloneable13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "iso8601" + "'", str16, "iso8601");
        org.junit.Assert.assertNotNull(clock17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(chronoLocalDate19);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(zoneRules69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(zoneRules83);
        org.junit.Assert.assertNotNull(zoneRules84);
        org.junit.Assert.assertNotNull(chronoLocalDate85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 365 + "'", int86 == 365);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        boolean boolean1 = strMap0.isEmpty();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate3 = java.util.function.Predicate.isEqual((java.lang.Object) strMap0);
        java.util.Set<java.lang.String> strSet4 = strMap0.keySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap6 = strMap0.headMap("");
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(resolverStylePredicate3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        intStream3.close();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap5 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str6 = strMapMap5.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap7 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology8 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean9 = strMapMap7.containsKey((java.lang.Object) isoChronology8);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap10 = java.nio.charset.Charset.availableCharsets();
        boolean boolean11 = strMap10.isEmpty();
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.Cloneable cloneable15 = strMapMap7.put(strMap10, (java.lang.Cloneable) locale13);
        int int16 = strMap10.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap17 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology18 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean19 = strMapMap17.containsKey((java.lang.Object) isoChronology18);
        java.time.Duration duration20 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal21 = null;
        java.time.temporal.Temporal temporal22 = duration20.subtractFrom(temporal21);
        long long23 = duration20.toDays();
        boolean boolean24 = strMapMap17.contains((java.lang.Object) duration20);
        java.time.format.DateTimeFormatter dateTimeFormatter25 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable26 = strMapMap17.get((java.lang.Object) dateTimeFormatter25);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet27 = strMapMap17.keySet();
        java.lang.Cloneable cloneable28 = strMapMap5.put(strMap10, (java.lang.Cloneable) strMapMap17);
        int[] intArray29 = new int[] {};
        java.util.stream.IntStream intStream30 = java.util.stream.IntStream.of(intArray29);
        long long31 = intStream30.count();
        java.lang.Cloneable cloneable32 = strMapMap17.get((java.lang.Object) intStream30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream33 = java.util.stream.IntStream.concat(intStream3, intStream30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
        org.junit.Assert.assertNotNull(isoChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Stati Uniti" + "'", str14, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 171 + "'", int16 == 171);
        org.junit.Assert.assertNotNull(isoChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNull(temporal22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(cloneable26);
        org.junit.Assert.assertNotNull(strMapSet27);
        org.junit.Assert.assertNull(cloneable28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intStream30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNull(cloneable32);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.time.ZoneId zoneId8 = java.time.ZoneId.systemDefault();
        java.lang.String str9 = zoneId8.getId();
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.now(zoneId8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.LocalTime localTime13 = zonedDateTime12.toLocalTime();
        java.util.stream.DoubleStream doubleStream15 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj16 = properties7.getOrDefault((java.lang.Object) zonedDateTime12, (java.lang.Object) doubleStream15);
        java.lang.Object obj19 = properties7.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration20 = properties7.propertyNames();
        java.nio.file.LinkOption linkOption21 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj23 = properties7.getOrDefault((java.lang.Object) linkOption21, (java.lang.Object) 9000L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.time.ZoneId zoneId26 = java.time.ZoneId.systemDefault();
        java.lang.String str27 = zoneId26.getId();
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.now(zoneId26);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.withYear((int) (short) 1);
        java.time.LocalTime localTime31 = zonedDateTime30.toLocalTime();
        java.util.stream.DoubleStream doubleStream33 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj34 = properties25.getOrDefault((java.lang.Object) zonedDateTime30, (java.lang.Object) doubleStream33);
        java.lang.Object obj37 = properties25.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration38 = properties25.propertyNames();
        java.nio.file.LinkOption linkOption39 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj41 = properties25.getOrDefault((java.lang.Object) linkOption39, (java.lang.Object) 9000L);
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.time.ZoneId zoneId44 = java.time.ZoneId.systemDefault();
        java.lang.String str45 = zoneId44.getId();
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.now(zoneId44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime46.withYear((int) (short) 1);
        java.time.LocalTime localTime49 = zonedDateTime48.toLocalTime();
        java.util.stream.DoubleStream doubleStream51 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj52 = properties43.getOrDefault((java.lang.Object) zonedDateTime48, (java.lang.Object) doubleStream51);
        java.lang.Object obj55 = properties43.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration56 = properties43.propertyNames();
        java.nio.file.LinkOption linkOption57 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj59 = properties43.getOrDefault((java.lang.Object) linkOption57, (java.lang.Object) 9000L);
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        java.time.ZoneId zoneId62 = java.time.ZoneId.systemDefault();
        java.lang.String str63 = zoneId62.getId();
        java.time.ZonedDateTime zonedDateTime64 = java.time.ZonedDateTime.now(zoneId62);
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime64.withYear((int) (short) 1);
        java.time.LocalTime localTime67 = zonedDateTime66.toLocalTime();
        java.util.stream.DoubleStream doubleStream69 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj70 = properties61.getOrDefault((java.lang.Object) zonedDateTime66, (java.lang.Object) doubleStream69);
        java.lang.Object obj73 = properties61.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration74 = properties61.propertyNames();
        java.nio.file.LinkOption linkOption75 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj77 = properties61.getOrDefault((java.lang.Object) linkOption75, (java.lang.Object) 9000L);
        java.nio.file.OpenOption[] openOptionArray78 = new java.nio.file.OpenOption[] { linkOption21, linkOption39, linkOption57, linkOption75 };
        java.nio.channels.FileChannel fileChannel79 = java.nio.channels.FileChannel.open(path5, openOptionArray78);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer85 = java.nio.ByteBuffer.wrap(byteArray82, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology86 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean87 = byteBuffer85.equals((java.lang.Object) isoChronology86);
        boolean boolean88 = byteBuffer85.hasArray();
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer94 = java.nio.ByteBuffer.wrap(byteArray91, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer95 = byteBuffer85.put(byteBuffer94);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = fileChannel79.write(byteBuffer95, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative position");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Etc/UTC" + "'", str9, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(wildcardEnumeration20);
        org.junit.Assert.assertTrue("'" + linkOption21 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption21.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 9000L + "'", obj23, 9000L);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(doubleStream33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(wildcardEnumeration38);
        org.junit.Assert.assertTrue("'" + linkOption39 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption39.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + 9000L + "'", obj41, 9000L);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(doubleStream51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(wildcardEnumeration56);
        org.junit.Assert.assertTrue("'" + linkOption57 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption57.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + 9000L + "'", obj59, 9000L);
        org.junit.Assert.assertNotNull(zoneId62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Etc/UTC" + "'", str63, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(doubleStream69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(wildcardEnumeration74);
        org.junit.Assert.assertTrue("'" + linkOption75 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption75.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + 9000L + "'", obj77, 9000L);
        org.junit.Assert.assertNotNull(openOptionArray78);
        org.junit.Assert.assertNotNull(fileChannel79);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(isoChronology86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(byteBuffer95);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.lang.String str2 = zoneId0.getId();
        java.time.LocalDate localDate3 = java.time.LocalDate.now(zoneId0);
        java.time.chrono.Era era4 = localDate3.getEra();
        boolean boolean5 = localDate3.isLeapYear();
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.Duration duration8 = duration6.minusMillis((long) (byte) 0);
        java.time.chrono.IsoChronology isoChronology10 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj13 = charBuffer12.array();
        boolean boolean14 = isoChronology10.equals(obj13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean17 = strMapMap15.containsKey((java.lang.Object) isoChronology16);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, (-1), 10);
        int int23 = isoChronology10.prolepticYear((java.time.chrono.Era) isoEra18, 0);
        java.time.Month month24 = java.time.Month.JANUARY;
        java.time.Month month25 = month24.firstMonthOfQuarter();
        java.time.Month month26 = month25.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean28 = month26.isSupported((java.time.temporal.TemporalField) chronoField27);
        boolean boolean29 = isoEra18.isSupported((java.time.temporal.TemporalField) chronoField27);
        java.time.temporal.TemporalUnit temporalUnit30 = chronoField27.getRangeUnit();
        java.time.Duration duration31 = duration6.minus((long) 0, temporalUnit30);
        java.time.Duration duration33 = duration6.minusMinutes(42L);
        java.time.chrono.ChronoLocalDate chronoLocalDate34 = localDate3.minus((java.time.temporal.TemporalAmount) duration6);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + era4 + "' != '" + java.time.chrono.IsoEra.CE + "'", era4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(isoChronology10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + month24 + "' != '" + java.time.Month.JANUARY + "'", month24.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month25 + "' != '" + java.time.Month.JANUARY + "'", month25.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.JANUARY + "'", month26.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit30 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit30.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(chronoLocalDate34);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.io.PrintStream printStream1 = new java.io.PrintStream("20220221Z");
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale3 = dateTimeFormatter2.getLocale();
        java.util.Locale locale4 = java.util.Locale.US;
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.lang.String str7 = locale3.getDisplayVariant(locale4);
        java.lang.Object[] objArray9 = null;
        java.io.PrintStream printStream10 = printStream1.format(locale3, "DecimalStyle[a+-.]", objArray9);
        byte[] byteArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray11, 17, (int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Stati Uniti" + "'", str6, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(printStream10);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration3.subtractFrom(temporal4);
        long long6 = duration3.toDays();
        boolean boolean7 = strMapMap0.contains((java.lang.Object) duration3);
        java.time.format.DateTimeFormatter dateTimeFormatter8 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable9 = strMapMap0.get((java.lang.Object) dateTimeFormatter8);
        java.time.ZoneId zoneId10 = dateTimeFormatter8.getZone();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(cloneable9);
        org.junit.Assert.assertNull(zoneId10);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.Object obj1 = strMapMap0.clone();
        java.lang.String str2 = strMapMap0.toString();
        java.util.Set<java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>> strMapEntrySet3 = strMapMap0.entrySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap4 = java.nio.charset.Charset.availableCharsets();
        boolean boolean5 = strMap4.isEmpty();
        java.util.Set<java.lang.String> strSet6 = strMap4.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate7 = java.util.function.Predicate.isEqual((java.lang.Object) strMap4);
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.Cloneable cloneable10 = strMapMap0.replace(strMap4, (java.lang.Cloneable) locale8);
        boolean boolean11 = strMapMap0.isEmpty();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(strMapEntrySet3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(resolverStylePredicate7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en-GB" + "'", str9, "en-GB");
        org.junit.Assert.assertNull(cloneable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        java.time.Month month0 = java.time.Month.SEPTEMBER;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.SEPTEMBER + "'", month0.equals(java.time.Month.SEPTEMBER));
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (byte) 1);
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.of((int) (byte) 1);
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.concat(intStream1, intStream3);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = intStream1.sum();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter1 = new java.io.PrintWriter("");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(5);
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress7 = java.net.InetAddress.getByAddress(byteArray6);
        java.net.NetworkInterface networkInterface8 = java.net.NetworkInterface.getByInetAddress(inetAddress7);
        java.lang.String str9 = inetAddress7.getCanonicalHostName();
        boolean boolean10 = inetAddress7.isAnyLocalAddress();
        boolean boolean11 = shortBuffer1.equals((java.lang.Object) boolean10);
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress7);
        org.junit.Assert.assertNull(networkInterface8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1.0.0.100" + "'", str9, "1.0.0.100");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.net.URL uRL8 = new java.net.URL(uRL4, "/");
        int int9 = uRL8.getPort();
        java.security.cert.Certificate[] certificateArray10 = new java.security.cert.Certificate[] {};
        java.security.CodeSource codeSource11 = new java.security.CodeSource(uRL8, certificateArray10);
        java.security.PermissionCollection permissionCollection12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.io.File file16 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long17 = file16.lastModified();
        java.net.URL uRL18 = file16.toURL();
        java.security.CodeSigner[] codeSignerArray19 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource20 = new java.security.CodeSource(uRL18, codeSignerArray19);
        java.net.URL uRL22 = new java.net.URL(uRL18, "/");
        int int23 = uRL22.getPort();
        java.security.cert.Certificate[] certificateArray24 = new java.security.cert.Certificate[] {};
        java.security.CodeSource codeSource25 = new java.security.CodeSource(uRL22, certificateArray24);
        java.net.URL uRL26 = codeSource25.getLocation();
        java.io.File file29 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long30 = file29.lastModified();
        java.net.URL uRL31 = file29.toURL();
        java.security.CodeSigner[] codeSignerArray32 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource33 = new java.security.CodeSource(uRL31, codeSignerArray32);
        java.security.CodeSigner[] codeSignerArray34 = codeSource33.getCodeSigners();
        boolean boolean35 = codeSource25.implies(codeSource33);
        java.net.URL uRL36 = codeSource33.getLocation();
        java.security.PermissionCollection permissionCollection37 = null;
        java.lang.ClassLoader classLoader38 = null;
        java.security.CodeSource codeSource39 = null;
        java.security.PermissionCollection permissionCollection40 = null;
        java.security.ProtectionDomain protectionDomain41 = new java.security.ProtectionDomain(codeSource39, permissionCollection40);
        java.lang.ClassLoader classLoader42 = protectionDomain41.getClassLoader();
        java.security.Principal[] principalArray43 = protectionDomain41.getPrincipals();
        java.security.ProtectionDomain protectionDomain44 = new java.security.ProtectionDomain(codeSource33, permissionCollection37, classLoader38, principalArray43);
        java.security.ProtectionDomain protectionDomain45 = new java.security.ProtectionDomain(codeSource11, permissionCollection12, classLoader13, principalArray43);
        java.security.PermissionCollection permissionCollection46 = null;
        java.lang.ClassLoader classLoader47 = null;
        java.io.File file50 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long51 = file50.lastModified();
        java.net.URL uRL52 = file50.toURL();
        java.security.CodeSigner[] codeSignerArray53 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource54 = new java.security.CodeSource(uRL52, codeSignerArray53);
        java.net.URL uRL56 = new java.net.URL(uRL52, "/");
        int int57 = uRL56.getPort();
        java.security.cert.Certificate[] certificateArray58 = new java.security.cert.Certificate[] {};
        java.security.CodeSource codeSource59 = new java.security.CodeSource(uRL56, certificateArray58);
        java.net.URL uRL60 = codeSource59.getLocation();
        java.io.File file63 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long64 = file63.lastModified();
        java.net.URL uRL65 = file63.toURL();
        java.security.CodeSigner[] codeSignerArray66 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource67 = new java.security.CodeSource(uRL65, codeSignerArray66);
        java.security.CodeSigner[] codeSignerArray68 = codeSource67.getCodeSigners();
        boolean boolean69 = codeSource59.implies(codeSource67);
        java.security.PermissionCollection permissionCollection70 = null;
        java.lang.ClassLoader classLoader71 = null;
        java.security.Principal[] principalArray72 = new java.security.Principal[] {};
        java.security.ProtectionDomain protectionDomain73 = new java.security.ProtectionDomain(codeSource59, permissionCollection70, classLoader71, principalArray72);
        java.security.Principal[] principalArray74 = protectionDomain73.getPrincipals();
        java.security.ProtectionDomain protectionDomain75 = new java.security.ProtectionDomain(codeSource11, permissionCollection46, classLoader47, principalArray74);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals(uRL8.toString(), "file:/");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(certificateArray10);
        org.junit.Assert.assertEquals(file16.getParent(), "/");
        org.junit.Assert.assertEquals(file16.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645434897000L + "'", long17 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL18);
        org.junit.Assert.assertEquals(uRL18.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray19);
        org.junit.Assert.assertEquals(uRL22.toString(), "file:/");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(certificateArray24);
        org.junit.Assert.assertNotNull(uRL26);
        org.junit.Assert.assertEquals(uRL26.toString(), "file:/");
        org.junit.Assert.assertEquals(file29.getParent(), "/");
        org.junit.Assert.assertEquals(file29.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645434897000L + "'", long30 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL31);
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray32);
        org.junit.Assert.assertNotNull(codeSignerArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(uRL36);
        org.junit.Assert.assertEquals(uRL36.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals(protectionDomain41.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader42);
        org.junit.Assert.assertNotNull(principalArray43);
        org.junit.Assert.assertEquals(protectionDomain44.toString(), "ProtectionDomain  (file:/1970-01-01T18:01:37.00000012 <no signer certificates>)\n null\n <no principals>\n null\n");
        org.junit.Assert.assertEquals(protectionDomain45.toString(), "ProtectionDomain  (file:/ <no signer certificates>)\n null\n <no principals>\n null\n");
        org.junit.Assert.assertEquals(file50.getParent(), "/");
        org.junit.Assert.assertEquals(file50.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645434897000L + "'", long51 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL52);
        org.junit.Assert.assertEquals(uRL52.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray53);
        org.junit.Assert.assertEquals(uRL56.toString(), "file:/");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(certificateArray58);
        org.junit.Assert.assertNotNull(uRL60);
        org.junit.Assert.assertEquals(uRL60.toString(), "file:/");
        org.junit.Assert.assertEquals(file63.getParent(), "/");
        org.junit.Assert.assertEquals(file63.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645434897000L + "'", long64 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL65);
        org.junit.Assert.assertEquals(uRL65.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray66);
        org.junit.Assert.assertNotNull(codeSignerArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(principalArray72);
        org.junit.Assert.assertEquals(protectionDomain73.toString(), "ProtectionDomain  (file:/ <no signer certificates>)\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNotNull(principalArray74);
        org.junit.Assert.assertEquals(protectionDomain75.toString(), "ProtectionDomain  (file:/ <no signer certificates>)\n null\n <no principals>\n null\n");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.lang.String str27 = localDateTime20.toString();
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange29 = chronoField28.range();
        boolean boolean30 = localDateTime20.isSupported((java.time.temporal.TemporalField) chronoField28);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        boolean boolean32 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.from((java.time.temporal.TemporalAccessor) localDateTime20);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: 1970-01-01T18:01:37.000000120 of type java.time.LocalDateTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str27, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField28.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration1 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal2 = null;
        java.time.temporal.Temporal temporal3 = duration1.subtractFrom(temporal2);
        long long4 = duration1.toDays();
        java.time.Duration duration5 = duration0.minus(duration1);
        java.time.Duration duration6 = duration1.negated();
        java.time.Duration duration8 = duration1.withSeconds((long) (byte) 1);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList9 = duration1.getUnits();
        java.time.chrono.IsoChronology isoChronology10 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj13 = charBuffer12.array();
        boolean boolean14 = isoChronology10.equals(obj13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean17 = strMapMap15.containsKey((java.lang.Object) isoChronology16);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, (-1), 10);
        int int23 = isoChronology10.prolepticYear((java.time.chrono.Era) isoEra18, 0);
        java.time.Month month24 = java.time.Month.JANUARY;
        java.time.Month month25 = month24.firstMonthOfQuarter();
        java.time.Month month26 = month25.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean28 = month26.isSupported((java.time.temporal.TemporalField) chronoField27);
        boolean boolean29 = isoEra18.isSupported((java.time.temporal.TemporalField) chronoField27);
        java.time.temporal.TemporalUnit temporalUnit30 = chronoField27.getRangeUnit();
        java.time.chrono.IsoChronology isoChronology31 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate36 = isoChronology31.dateYearDay((java.time.chrono.Era) isoEra33, 0, 16);
        java.time.LocalTime localTime37 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime38 = localDate36.atTime(localTime37);
        java.time.LocalDate localDate40 = localDate36.withMonth(1);
        long long41 = localDate40.toEpochDay();
        java.time.chrono.IsoChronology isoChronology42 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra44 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate47 = isoChronology42.dateYearDay((java.time.chrono.Era) isoEra44, 0, 16);
        java.time.LocalTime localTime48 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime49 = localDate47.atTime(localTime48);
        java.time.LocalDate localDate51 = localDate47.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod52 = localDate40.until((java.time.chrono.ChronoLocalDate) localDate51);
        java.time.LocalDate localDate54 = localDate40.plusDays((long) (short) 0);
        java.time.LocalDate localDate56 = localDate54.minusDays((long) 9);
        java.time.chrono.Era era57 = localDate56.getEra();
        java.time.chrono.ChronoLocalDate chronoLocalDate59 = temporalUnit30.addTo((java.time.chrono.ChronoLocalDate) localDate56, (long) 70);
        // The following exception was thrown during execution in test generation
        try {
            long long60 = duration1.get(temporalUnit30);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Days");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNull(temporal3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(temporalUnitList9);
        org.junit.Assert.assertNotNull(isoChronology10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + month24 + "' != '" + java.time.Month.JANUARY + "'", month24.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month25 + "' != '" + java.time.Month.JANUARY + "'", month25.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.JANUARY + "'", month26.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit30 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit30.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(isoChronology31);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra33.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-719147L) + "'", long41 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology42);
        org.junit.Assert.assertTrue("'" + isoEra44 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra44.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(chronoPeriod52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + era57 + "' != '" + java.time.chrono.IsoEra.CE + "'", era57.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(chronoLocalDate59);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.time.ZoneId zoneId8 = java.time.ZoneId.systemDefault();
        java.lang.String str9 = zoneId8.getId();
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.now(zoneId8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.LocalTime localTime13 = zonedDateTime12.toLocalTime();
        java.util.stream.DoubleStream doubleStream15 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj16 = properties7.getOrDefault((java.lang.Object) zonedDateTime12, (java.lang.Object) doubleStream15);
        java.lang.Object obj19 = properties7.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration20 = properties7.propertyNames();
        java.nio.file.LinkOption linkOption21 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj23 = properties7.getOrDefault((java.lang.Object) linkOption21, (java.lang.Object) 9000L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.time.ZoneId zoneId26 = java.time.ZoneId.systemDefault();
        java.lang.String str27 = zoneId26.getId();
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.now(zoneId26);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.withYear((int) (short) 1);
        java.time.LocalTime localTime31 = zonedDateTime30.toLocalTime();
        java.util.stream.DoubleStream doubleStream33 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj34 = properties25.getOrDefault((java.lang.Object) zonedDateTime30, (java.lang.Object) doubleStream33);
        java.lang.Object obj37 = properties25.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration38 = properties25.propertyNames();
        java.nio.file.LinkOption linkOption39 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj41 = properties25.getOrDefault((java.lang.Object) linkOption39, (java.lang.Object) 9000L);
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.time.ZoneId zoneId44 = java.time.ZoneId.systemDefault();
        java.lang.String str45 = zoneId44.getId();
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.now(zoneId44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime46.withYear((int) (short) 1);
        java.time.LocalTime localTime49 = zonedDateTime48.toLocalTime();
        java.util.stream.DoubleStream doubleStream51 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj52 = properties43.getOrDefault((java.lang.Object) zonedDateTime48, (java.lang.Object) doubleStream51);
        java.lang.Object obj55 = properties43.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration56 = properties43.propertyNames();
        java.nio.file.LinkOption linkOption57 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj59 = properties43.getOrDefault((java.lang.Object) linkOption57, (java.lang.Object) 9000L);
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        java.time.ZoneId zoneId62 = java.time.ZoneId.systemDefault();
        java.lang.String str63 = zoneId62.getId();
        java.time.ZonedDateTime zonedDateTime64 = java.time.ZonedDateTime.now(zoneId62);
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime64.withYear((int) (short) 1);
        java.time.LocalTime localTime67 = zonedDateTime66.toLocalTime();
        java.util.stream.DoubleStream doubleStream69 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj70 = properties61.getOrDefault((java.lang.Object) zonedDateTime66, (java.lang.Object) doubleStream69);
        java.lang.Object obj73 = properties61.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration74 = properties61.propertyNames();
        java.nio.file.LinkOption linkOption75 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj77 = properties61.getOrDefault((java.lang.Object) linkOption75, (java.lang.Object) 9000L);
        java.nio.file.OpenOption[] openOptionArray78 = new java.nio.file.OpenOption[] { linkOption21, linkOption39, linkOption57, linkOption75 };
        java.nio.channels.FileChannel fileChannel79 = java.nio.channels.FileChannel.open(path5, openOptionArray78);
        long long80 = fileChannel79.size();
        java.nio.ByteBuffer[] byteBufferArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long84 = fileChannel79.write(byteBufferArray81, 21, (int) '.');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Etc/UTC" + "'", str9, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(wildcardEnumeration20);
        org.junit.Assert.assertTrue("'" + linkOption21 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption21.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 9000L + "'", obj23, 9000L);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(doubleStream33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(wildcardEnumeration38);
        org.junit.Assert.assertTrue("'" + linkOption39 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption39.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + 9000L + "'", obj41, 9000L);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(doubleStream51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(wildcardEnumeration56);
        org.junit.Assert.assertTrue("'" + linkOption57 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption57.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + 9000L + "'", obj59, 9000L);
        org.junit.Assert.assertNotNull(zoneId62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Etc/UTC" + "'", str63, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(doubleStream69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(wildcardEnumeration74);
        org.junit.Assert.assertTrue("'" + linkOption75 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption75.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + 9000L + "'", obj77, 9000L);
        org.junit.Assert.assertNotNull(openOptionArray78);
        org.junit.Assert.assertNotNull(fileChannel79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.duplicate();
        boolean boolean8 = longBuffer2.isDirect();
        java.util.stream.LongStream longStream9 = java.util.stream.LongStream.empty();
        long[] longArray10 = longStream9.toArray();
        java.nio.LongBuffer longBuffer11 = longBuffer2.get(longArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer14 = longBuffer2.put(4096, 23L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longStream9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertNotNull(longBuffer11);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray10 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, zoneOffsetTransitionArray10);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray16 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17, zoneOffsetTransitionRuleArray16);
        java.time.zone.ZoneRules zoneRules19 = java.time.zone.ZoneRules.of(zoneOffset8, zoneOffset9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17);
        long long20 = localDateTime7.toEpochSecond(zoneOffset8);
        java.time.LocalTime localTime21 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset8);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray24 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, zoneOffsetTransitionArray24);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray30 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31, zoneOffsetTransitionRuleArray30);
        java.time.zone.ZoneRules zoneRules33 = java.time.zone.ZoneRules.of(zoneOffset22, zoneOffset23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31);
        boolean boolean34 = zoneRules33.isFixedOffset();
        java.time.Instant instant35 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition36 = zoneRules33.previousTransition(instant35);
        java.time.chrono.IsoChronology isoChronology37 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra39 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate42 = isoChronology37.dateYearDay((java.time.chrono.Era) isoEra39, 0, 16);
        java.time.LocalTime localTime43 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime44 = localDate42.atTime(localTime43);
        java.time.LocalDate localDate46 = localDate42.withMonth(1);
        java.time.Duration duration47 = java.time.Duration.ZERO;
        java.time.Duration duration48 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal49 = null;
        java.time.temporal.Temporal temporal50 = duration48.subtractFrom(temporal49);
        long long51 = duration48.toDays();
        java.time.Duration duration52 = duration47.plus(duration48);
        java.time.LocalDate localDate53 = localDate46.minus((java.time.temporal.TemporalAmount) duration47);
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.lang.String str57 = zoneOffset56.getId();
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset56);
        java.time.LocalTime localTime59 = localDateTime58.toLocalTime();
        java.time.temporal.Temporal temporal60 = localDate53.adjustInto((java.time.temporal.Temporal) localDateTime58);
        java.time.LocalDateTime localDateTime62 = localDateTime58.minusDays((long) (-1));
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.MAX;
        java.lang.String str66 = zoneOffset65.getId();
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset65);
        java.time.LocalTime localTime68 = localDateTime67.toLocalTime();
        boolean boolean69 = localDateTime62.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime67);
        java.time.LocalDateTime localDateTime71 = localDateTime67.withDayOfMonth(7);
        java.time.LocalTime localTime72 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray75 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList76 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, zoneOffsetTransitionArray75);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray78 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList79 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, zoneOffsetTransitionArray78);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray81 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList82 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList82, zoneOffsetTransitionRuleArray81);
        java.time.zone.ZoneRules zoneRules84 = java.time.zone.ZoneRules.of(zoneOffset73, zoneOffset74, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList82);
        java.time.OffsetTime offsetTime85 = localTime72.atOffset(zoneOffset73);
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.MAX;
        java.lang.String str89 = zoneOffset88.getId();
        java.time.LocalDateTime localDateTime90 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset88);
        java.time.OffsetTime offsetTime91 = offsetTime85.withOffsetSameLocal(zoneOffset88);
        boolean boolean92 = zoneRules33.isValidOffset(localDateTime71, zoneOffset88);
        java.time.OffsetTime offsetTime93 = localTime21.atOffset(zoneOffset88);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62134279201L) + "'", long20 == (-62134279201L));
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition36);
        org.junit.Assert.assertNotNull(isoChronology37);
        org.junit.Assert.assertTrue("'" + isoEra39 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra39.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNull(temporal50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+18:00" + "'", str57, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(temporal60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+18:00" + "'", str66, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(zoneRules84);
        org.junit.Assert.assertNotNull(offsetTime85);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+18:00" + "'", str89, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(offsetTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(offsetTime93);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file3 = file2.getAbsoluteFile();
        java.net.URL uRL4 = file3.toURL();
        java.net.URL uRL6 = new java.net.URL(uRL4, "java.text.ParsePosition[index=0,errorIndex=-1]");
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.MIN;
        int int8 = offsetTime7.getMinute();
        boolean boolean9 = uRL6.equals((java.lang.Object) int8);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals(uRL6.toString(), "file:/java.text.ParsePosition[index=0,errorIndex=-1]");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) '4', (long) ' ');
        java.time.Instant instant11 = instant9.plusNanos(100L);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.Duration duration18 = java.time.Duration.ZERO;
        java.time.LocalDate localDate19 = localDate17.plus((java.time.temporal.TemporalAmount) duration18);
        java.time.LocalDateTime localDateTime20 = localDate19.atStartOfDay();
        java.time.LocalDate localDate22 = localDate19.plusYears((long) (byte) -1);
        int int23 = localDate19.lengthOfYear();
        java.time.ZoneId zoneId24 = java.time.ZoneId.systemDefault();
        java.time.ZonedDateTime zonedDateTime25 = localDate19.atStartOfDay(zoneId24);
        java.time.LocalTime localTime26 = java.time.LocalTime.now(zoneId24);
        java.time.Clock clock27 = java.time.Clock.tickSeconds(zoneId24);
        java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime28 = isoChronology1.zonedDateTime(instant9, zoneId24);
        java.lang.String str29 = isoChronology1.getCalendarType();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 365 + "'", int23 == 365);
        org.junit.Assert.assertNotNull(zoneId24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "iso8601" + "'", str29, "iso8601");
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        java.util.OptionalInt optionalInt2 = intStream1.max();
        java.lang.String str3 = optionalInt2.toString();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate(16);
        int int6 = charBuffer5.limit();
        char char7 = charBuffer5.get();
        boolean boolean8 = optionalInt2.equals((java.lang.Object) char7);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalInt.empty" + "'", str3, "OptionalInt.empty");
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withYear((int) (short) 1);
        boolean boolean11 = zonedDateTime5.equals((java.lang.Object) zonedDateTime10);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime5.minusMinutes((long) (short) 0);
        java.time.ZoneId zoneId14 = java.time.ZoneId.systemDefault();
        java.lang.String str15 = zoneId14.getId();
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.now(zoneId14);
        java.time.ZoneId zoneId17 = java.time.ZoneId.systemDefault();
        java.lang.String str18 = zoneId17.getId();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime16.withZoneSameInstant(zoneId17);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusYears((long) (short) 0);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        long long23 = zonedDateTime19.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean24 = zonedDateTime5.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime19);
        java.time.ZoneOffset zoneOffset25 = zonedDateTime5.getOffset();
        java.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = zonedDateTime5.format(dateTimeFormatter26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: formatter");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Etc/UTC" + "'", str15, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Etc/UTC" + "'", str18, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField22.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9L + "'", long23 == 9L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffset25);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        java.security.GeneralSecurityException generalSecurityException1 = new java.security.GeneralSecurityException("DIRECT");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) generalSecurityException1);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.lang.String[] strArray15 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        boolean boolean42 = zoneOffsetTransitionList21.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36);
        zoneOffsetTransitionList21.clear();
        boolean boolean44 = strSet16.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21);
        boolean boolean45 = fileTime1.equals((java.lang.Object) zoneOffsetTransitionList21);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator46 = zoneOffsetTransitionList21.spliterator();
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator47 = zoneOffsetTransitionList21.spliterator();
        boolean boolean48 = zoneOffsetTransitionList21.isEmpty();
        java.lang.Object[] objArray49 = zoneOffsetTransitionList21.toArray();
        java.net.UnknownHostException unknownHostException51 = new java.net.UnknownHostException();
        java.security.NoSuchAlgorithmException noSuchAlgorithmException52 = new java.security.NoSuchAlgorithmException("iso8601", (java.lang.Throwable) unknownHostException51);
        java.net.UnknownHostException unknownHostException53 = new java.net.UnknownHostException();
        java.net.UnknownHostException unknownHostException54 = new java.net.UnknownHostException();
        java.net.UnknownHostException[] unknownHostExceptionArray55 = new java.net.UnknownHostException[] { unknownHostException51, unknownHostException53, unknownHostException54 };
        java.net.UnknownHostException[] unknownHostExceptionArray56 = zoneOffsetTransitionList21.toArray(unknownHostExceptionArray55);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator46);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(unknownHostExceptionArray55);
        org.junit.Assert.assertNotNull(unknownHostExceptionArray56);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        java.util.Locale locale2 = new java.util.Locale("599b081c1808", "DIRECT");
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale2.getDisplayCountry(locale3);
        java.lang.String str5 = locale2.getDisplayName();
        java.util.Set<java.lang.String> strSet6 = locale2.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = strSet6.add("DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DIRECT" + "'", str4, "DIRECT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "599b081c1808 (DIRECT)" + "'", str5, "599b081c1808 (DIRECT)");
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        java.net.URLConnection.setDefaultRequestProperty("United States", "0");
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        java.io.File file2 = java.io.File.createTempFile("1970-01-01T18:01:37.00000012", "PT0S");
        long long3 = file2.length();
        java.net.URL uRL4 = file2.toURL();
        java.lang.String str5 = uRL4.getUserInfo();
        java.lang.Object obj6 = null;
        boolean boolean7 = uRL4.equals(obj6);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/1970-01-01T18:01:37.000000126067722027281780743PT0S");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
// flaky:         org.junit.Assert.assertEquals(uRL4.toString(), "file:/tmp/1970-01-01T18:01:37.000000126067722027281780743PT0S");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics29 = new java.util.DoubleSummaryStatistics();
        double double30 = doubleSummaryStatistics29.getMin();
        boolean boolean31 = localDateTime9.equals((java.lang.Object) double30);
        java.time.LocalDateTime localDateTime33 = localDateTime9.plusSeconds((long) 15);
        java.time.LocalDateTime localDateTime35 = localDateTime9.plusMonths((long) (-34));
        java.lang.String str36 = localDateTime9.toString();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals(doubleSummaryStatistics29.toString(), "DoubleSummaryStatistics{count=0, sum=0,000000, min=Infinity, average=0,000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str36, "1970-01-01T18:01:37.000000120");
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.FormatStyle formatStyle1 = java.time.format.FormatStyle.SHORT;
        java.time.format.FormatStyle formatStyle2 = java.time.format.FormatStyle.SHORT;
        java.time.format.DateTimeFormatter dateTimeFormatter3 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle1, formatStyle2);
        java.time.format.DateTimeFormatter dateTimeFormatter4 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle1);
        java.time.format.DateTimeFormatter dateTimeFormatter5 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle0, formatStyle1);
        java.time.format.FormatStyle formatStyle6 = java.time.format.FormatStyle.SHORT;
        java.time.format.FormatStyle formatStyle7 = java.time.format.FormatStyle.SHORT;
        java.time.format.DateTimeFormatter dateTimeFormatter8 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle6, formatStyle7);
        java.time.format.FormatStyle formatStyle9 = java.time.format.FormatStyle.SHORT;
        java.time.format.FormatStyle formatStyle10 = java.time.format.FormatStyle.SHORT;
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle9, formatStyle10);
        java.time.format.DateTimeFormatter dateTimeFormatter12 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle6, formatStyle10);
        java.time.format.DateTimeFormatter dateTimeFormatter13 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle1, formatStyle10);
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertTrue("'" + formatStyle1 + "' != '" + java.time.format.FormatStyle.SHORT + "'", formatStyle1.equals(java.time.format.FormatStyle.SHORT));
        org.junit.Assert.assertTrue("'" + formatStyle2 + "' != '" + java.time.format.FormatStyle.SHORT + "'", formatStyle2.equals(java.time.format.FormatStyle.SHORT));
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + formatStyle6 + "' != '" + java.time.format.FormatStyle.SHORT + "'", formatStyle6.equals(java.time.format.FormatStyle.SHORT));
        org.junit.Assert.assertTrue("'" + formatStyle7 + "' != '" + java.time.format.FormatStyle.SHORT + "'", formatStyle7.equals(java.time.format.FormatStyle.SHORT));
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + formatStyle9 + "' != '" + java.time.format.FormatStyle.SHORT + "'", formatStyle9.equals(java.time.format.FormatStyle.SHORT));
        org.junit.Assert.assertTrue("'" + formatStyle10 + "' != '" + java.time.format.FormatStyle.SHORT + "'", formatStyle10.equals(java.time.format.FormatStyle.SHORT));
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("", "1", (int) '0', "BIG_ENDIAN", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: ");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime91.plusYears((long) 'a');
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime91.minusMonths((long) '0');
        java.time.OffsetDateTime offsetDateTime96 = java.time.OffsetDateTime.MAX;
        boolean boolean97 = offsetDateTime91.isEqual(offsetDateTime96);
        java.time.Month month98 = offsetDateTime96.getMonth();
        int int99 = offsetDateTime96.getYear();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertNotNull(offsetDateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + month98 + "' != '" + java.time.Month.DECEMBER + "'", month98.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 999999999 + "'", int99 == 999999999);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.DayOfWeek dayOfWeek90 = offsetDateTime88.getDayOfWeek();
        java.time.OffsetDateTime offsetDateTime92 = offsetDateTime88.plusWeeks(97L);
        java.time.OffsetDateTime offsetDateTime94 = offsetDateTime88.withNano((int) 'u');
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertTrue("'" + dayOfWeek90 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek90.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertNotNull(offsetDateTime92);
        org.junit.Assert.assertNotNull(offsetDateTime94);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        boolean boolean22 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.lang.String str26 = zoneOffset25.getId();
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset25);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.lang.String str31 = zoneOffset30.getId();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset30);
        boolean boolean33 = localDateTime27.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.format.DateTimeFormatter dateTimeFormatter34 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str35 = localDateTime32.format(dateTimeFormatter34);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int37 = localDateTime32.get((java.time.temporal.TemporalField) chronoField36);
        boolean boolean38 = localDateTime21.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.chrono.IsoChronology isoChronology39 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra41 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate44 = isoChronology39.dateYearDay((java.time.chrono.Era) isoEra41, 0, 16);
        java.time.LocalTime localTime45 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime46 = localDate44.atTime(localTime45);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray49 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList50 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, zoneOffsetTransitionArray49);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray52 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList53 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList53, zoneOffsetTransitionArray52);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray55 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList56 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList56, zoneOffsetTransitionRuleArray55);
        java.time.zone.ZoneRules zoneRules58 = java.time.zone.ZoneRules.of(zoneOffset47, zoneOffset48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList53, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList56);
        long long59 = localDateTime46.toEpochSecond(zoneOffset47);
        java.time.LocalDateTime localDateTime61 = localDateTime46.plusDays((long) (byte) 1);
        boolean boolean62 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime61);
        java.time.Duration duration63 = java.time.Duration.ZERO;
        java.time.Duration duration65 = duration63.minusMillis((long) (byte) 0);
        java.time.chrono.IsoChronology isoChronology67 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer69 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj70 = charBuffer69.array();
        boolean boolean71 = isoChronology67.equals(obj70);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap72 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology73 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean74 = strMapMap72.containsKey((java.lang.Object) isoChronology73);
        java.time.chrono.IsoEra isoEra75 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate78 = isoChronology73.dateYearDay((java.time.chrono.Era) isoEra75, (-1), 10);
        int int80 = isoChronology67.prolepticYear((java.time.chrono.Era) isoEra75, 0);
        java.time.Month month81 = java.time.Month.JANUARY;
        java.time.Month month82 = month81.firstMonthOfQuarter();
        java.time.Month month83 = month82.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField84 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean85 = month83.isSupported((java.time.temporal.TemporalField) chronoField84);
        boolean boolean86 = isoEra75.isSupported((java.time.temporal.TemporalField) chronoField84);
        java.time.temporal.TemporalUnit temporalUnit87 = chronoField84.getRangeUnit();
        java.time.Duration duration88 = duration63.minus((long) 0, temporalUnit87);
        boolean boolean89 = localDateTime61.isSupported(temporalUnit87);
        long long90 = period11.get(temporalUnit87);
        java.time.Duration duration91 = temporalUnit87.getDuration();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+18:00" + "'", str26, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+18:00" + "'", str31, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str35, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField36.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(isoChronology39);
        org.junit.Assert.assertTrue("'" + isoEra41 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra41.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(zoneRules58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-62134279201L) + "'", long59 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(isoChronology67);
        org.junit.Assert.assertNotNull(charBuffer69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(isoChronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + isoEra75 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra75.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + month81 + "' != '" + java.time.Month.JANUARY + "'", month81.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month82 + "' != '" + java.time.Month.JANUARY + "'", month82.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month83 + "' != '" + java.time.Month.JANUARY + "'", month83.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField84 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField84.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit87 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit87.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 4L + "'", long90 == 4L);
        org.junit.Assert.assertNotNull(duration91);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.format.DecimalStyle decimalStyle1 = java.time.format.DecimalStyle.ofDefaultLocale();
        java.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDecimalStyle(decimalStyle1);
        java.util.Locale locale4 = new java.util.Locale("/");
        java.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withLocale(locale4);
        java.time.Month month6 = java.time.Month.JANUARY;
        java.time.Month month7 = month6.firstMonthOfQuarter();
        java.time.Month month8 = month7.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery9 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period10 = month7.query(periodTemporalQuery9);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate12 = localDateTime11.toLocalDate();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate16 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset15);
        java.time.Month month18 = java.time.Month.JANUARY;
        java.time.Month month19 = month18.firstMonthOfQuarter();
        java.time.Month month20 = month19.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery21 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period22 = month19.query(periodTemporalQuery21);
        java.time.Period period23 = zoneOffset15.query(periodTemporalQuery21);
        java.time.Period period24 = localDateTime11.query(periodTemporalQuery21);
        java.time.Period period25 = month7.query(periodTemporalQuery21);
        java.text.Format format26 = dateTimeFormatter2.toFormat(periodTemporalQuery21);
        int[] intArray27 = new int[] {};
        java.util.stream.IntStream intStream28 = java.util.stream.IntStream.of(intArray27);
        java.util.OptionalInt optionalInt29 = intStream28.max();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = format26.format((java.lang.Object) intStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format target must implement TemporalAccessor");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(decimalStyle1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertEquals(locale4.toString(), "/");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + month6 + "' != '" + java.time.Month.JANUARY + "'", month6.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.JANUARY + "'", month7.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.JANUARY + "'", month8.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + month18 + "' != '" + java.time.Month.JANUARY + "'", month18.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month19 + "' != '" + java.time.Month.JANUARY + "'", month19.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month20 + "' != '" + java.time.Month.JANUARY + "'", month20.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(format26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intStream28);
        org.junit.Assert.assertNotNull(optionalInt29);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap3 = java.nio.charset.Charset.availableCharsets();
        boolean boolean4 = strMap3.isEmpty();
        java.util.Locale locale5 = java.util.Locale.US;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.Cloneable cloneable8 = strMapMap0.put(strMap3, (java.lang.Cloneable) locale6);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap9 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str10 = strMapMap9.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap11 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean13 = strMapMap11.containsKey((java.lang.Object) isoChronology12);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap14 = java.nio.charset.Charset.availableCharsets();
        boolean boolean15 = strMap14.isEmpty();
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.lang.Cloneable cloneable19 = strMapMap11.put(strMap14, (java.lang.Cloneable) locale17);
        int int20 = strMap14.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap21 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology22 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean23 = strMapMap21.containsKey((java.lang.Object) isoChronology22);
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal25 = null;
        java.time.temporal.Temporal temporal26 = duration24.subtractFrom(temporal25);
        long long27 = duration24.toDays();
        boolean boolean28 = strMapMap21.contains((java.lang.Object) duration24);
        java.time.format.DateTimeFormatter dateTimeFormatter29 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable30 = strMapMap21.get((java.lang.Object) dateTimeFormatter29);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet31 = strMapMap21.keySet();
        java.lang.Cloneable cloneable32 = strMapMap9.put(strMap14, (java.lang.Cloneable) strMapMap21);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap33 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.Object obj34 = strMapMap33.clone();
        java.lang.String str35 = strMapMap33.toString();
        java.util.Set<java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>> strMapEntrySet36 = strMapMap33.entrySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap37 = java.nio.charset.Charset.availableCharsets();
        boolean boolean38 = strMap37.isEmpty();
        java.util.Set<java.lang.String> strSet39 = strMap37.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate40 = java.util.function.Predicate.isEqual((java.lang.Object) strMap37);
        java.util.Locale locale41 = java.util.Locale.UK;
        java.lang.String str42 = locale41.toLanguageTag();
        java.lang.Cloneable cloneable43 = strMapMap33.replace(strMap37, (java.lang.Cloneable) locale41);
        java.util.Locale locale46 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str47 = locale46.getLanguage();
        java.lang.Cloneable cloneable48 = strMapMap21.put(strMap37, (java.lang.Cloneable) locale46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics49.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics49.getGeometricMeanImpl();
        double[] doubleArray58 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double59 = univariateStatistic52.evaluate(doubleArray58);
        java.lang.Cloneable cloneable60 = strMapMap0.put(strMap37, (java.lang.Cloneable) doubleArray58);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.nio.charset.Charset>> strEntrySet61 = strMap37.entrySet();
        java.util.Set<java.lang.String> strSet62 = strMap37.keySet();
        java.nio.charset.Charset charset64 = java.nio.charset.Charset.defaultCharset();
        boolean boolean65 = charset64.isRegistered();
        java.nio.charset.CharsetEncoder charsetEncoder66 = charset64.newEncoder();
        java.lang.String str67 = charset64.name();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset68 = strMap37.replace("Japanese", charset64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Stati Uniti" + "'", str7, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Stati Uniti" + "'", str18, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 171 + "'", int20 == 171);
        org.junit.Assert.assertNotNull(isoChronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNull(temporal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(cloneable30);
        org.junit.Assert.assertNotNull(strMapSet31);
        org.junit.Assert.assertNull(cloneable32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertNotNull(strMapEntrySet36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(resolverStylePredicate40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "en-GB" + "'", str42, "en-GB");
        org.junit.Assert.assertNull(cloneable43);
        org.junit.Assert.assertEquals(locale46.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "599b081c1808" + "'", str47, "599b081c1808");
        org.junit.Assert.assertNull(cloneable48);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(cloneable60);
        org.junit.Assert.assertNotNull(strEntrySet61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(charsetEncoder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "US-ASCII" + "'", str67, "US-ASCII");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        java.lang.Object obj2 = null;
        boolean boolean3 = optionalDouble1.equals(obj2);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file3 = file2.getAbsoluteFile();
        boolean boolean4 = file3.canRead();
        java.io.File file7 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file8 = file7.getAbsoluteFile();
        boolean boolean9 = file3.renameTo(file7);
        java.lang.String str10 = file7.getCanonicalPath();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "/");
        org.junit.Assert.assertEquals(file7.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/1970-01-01T18:01:37.00000012" + "'", str10, "/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.time.chrono.Chronology chronology4 = java.time.chrono.Chronology.ofLocale(locale3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap5 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = strMapMap5.containsKey((java.lang.Object) isoChronology6);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap8 = java.nio.charset.Charset.availableCharsets();
        boolean boolean9 = strMap8.isEmpty();
        java.util.Locale locale10 = java.util.Locale.US;
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.Cloneable cloneable13 = strMapMap5.put(strMap8, (java.lang.Cloneable) locale11);
        java.time.format.DateTimeFormatter dateTimeFormatter14 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale15 = dateTimeFormatter14.getLocale();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean18 = strMapMap16.containsKey((java.lang.Object) isoChronology17);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap19 = java.nio.charset.Charset.availableCharsets();
        boolean boolean20 = strMap19.isEmpty();
        java.util.Locale locale21 = java.util.Locale.US;
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.Cloneable cloneable24 = strMapMap16.put(strMap19, (java.lang.Cloneable) locale22);
        java.lang.String str25 = locale15.getDisplayVariant(locale22);
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.time.format.DecimalStyle decimalStyle27 = java.time.format.DecimalStyle.of(locale26);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.time.format.DateTimeFormatter dateTimeFormatter29 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale30 = dateTimeFormatter29.getLocale();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap31 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology32 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean33 = strMapMap31.containsKey((java.lang.Object) isoChronology32);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap34 = java.nio.charset.Charset.availableCharsets();
        boolean boolean35 = strMap34.isEmpty();
        java.util.Locale locale36 = java.util.Locale.US;
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale36.getDisplayCountry(locale37);
        java.lang.Cloneable cloneable39 = strMapMap31.put(strMap34, (java.lang.Cloneable) locale37);
        java.lang.String str40 = locale30.getDisplayVariant(locale37);
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.time.chrono.Chronology chronology42 = java.time.chrono.Chronology.ofLocale(locale41);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray45 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, zoneOffsetTransitionArray45);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray51 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52, zoneOffsetTransitionRuleArray51);
        java.time.zone.ZoneRules zoneRules54 = java.time.zone.ZoneRules.of(zoneOffset43, zoneOffset44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52);
        java.time.Clock clock55 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset43);
        java.time.format.TextStyle textStyle56 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = zoneOffset43.getDisplayName(textStyle56, locale57);
        java.util.Locale[] localeArray59 = new java.util.Locale[] { locale3, locale11, locale22, locale26, locale28, locale30, locale41, locale57 };
        java.util.ArrayList<java.util.Locale> localeList60 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList60, localeArray59);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale locale63 = java.util.Locale.UK;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet64);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = strSet64.add("UNMAPPABLE[214]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Stati Uniti" + "'", str12, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Stati Uniti" + "'", str23, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertNotNull(decimalStyle27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(isoChronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Stati Uniti" + "'", str38, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertNotNull(clock55);
        org.junit.Assert.assertTrue("'" + textStyle56 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle56.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+18:00" + "'", str58, "+18:00");
        org.junit.Assert.assertNotNull(localeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(strList65);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics1.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics5.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics8.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics5.setSumsqImpl(univariateStatistic11);
        descriptiveStatistics1.setSumsqImpl(univariateStatistic11);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic11);
        long long15 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getPercentileImpl();
        double double17 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.time.ZoneId zoneId8 = java.time.ZoneId.systemDefault();
        java.lang.String str9 = zoneId8.getId();
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.now(zoneId8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.LocalTime localTime13 = zonedDateTime12.toLocalTime();
        java.util.stream.DoubleStream doubleStream15 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj16 = properties7.getOrDefault((java.lang.Object) zonedDateTime12, (java.lang.Object) doubleStream15);
        java.lang.Object obj19 = properties7.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration20 = properties7.propertyNames();
        java.nio.file.LinkOption linkOption21 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj23 = properties7.getOrDefault((java.lang.Object) linkOption21, (java.lang.Object) 9000L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.time.ZoneId zoneId26 = java.time.ZoneId.systemDefault();
        java.lang.String str27 = zoneId26.getId();
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.now(zoneId26);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.withYear((int) (short) 1);
        java.time.LocalTime localTime31 = zonedDateTime30.toLocalTime();
        java.util.stream.DoubleStream doubleStream33 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj34 = properties25.getOrDefault((java.lang.Object) zonedDateTime30, (java.lang.Object) doubleStream33);
        java.lang.Object obj37 = properties25.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration38 = properties25.propertyNames();
        java.nio.file.LinkOption linkOption39 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj41 = properties25.getOrDefault((java.lang.Object) linkOption39, (java.lang.Object) 9000L);
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.time.ZoneId zoneId44 = java.time.ZoneId.systemDefault();
        java.lang.String str45 = zoneId44.getId();
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.now(zoneId44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime46.withYear((int) (short) 1);
        java.time.LocalTime localTime49 = zonedDateTime48.toLocalTime();
        java.util.stream.DoubleStream doubleStream51 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj52 = properties43.getOrDefault((java.lang.Object) zonedDateTime48, (java.lang.Object) doubleStream51);
        java.lang.Object obj55 = properties43.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration56 = properties43.propertyNames();
        java.nio.file.LinkOption linkOption57 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj59 = properties43.getOrDefault((java.lang.Object) linkOption57, (java.lang.Object) 9000L);
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        java.time.ZoneId zoneId62 = java.time.ZoneId.systemDefault();
        java.lang.String str63 = zoneId62.getId();
        java.time.ZonedDateTime zonedDateTime64 = java.time.ZonedDateTime.now(zoneId62);
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime64.withYear((int) (short) 1);
        java.time.LocalTime localTime67 = zonedDateTime66.toLocalTime();
        java.util.stream.DoubleStream doubleStream69 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj70 = properties61.getOrDefault((java.lang.Object) zonedDateTime66, (java.lang.Object) doubleStream69);
        java.lang.Object obj73 = properties61.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration74 = properties61.propertyNames();
        java.nio.file.LinkOption linkOption75 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj77 = properties61.getOrDefault((java.lang.Object) linkOption75, (java.lang.Object) 9000L);
        java.nio.file.OpenOption[] openOptionArray78 = new java.nio.file.OpenOption[] { linkOption21, linkOption39, linkOption57, linkOption75 };
        java.nio.channels.FileChannel fileChannel79 = java.nio.channels.FileChannel.open(path5, openOptionArray78);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileLock fileLock80 = fileChannel79.lock();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Etc/UTC" + "'", str9, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(wildcardEnumeration20);
        org.junit.Assert.assertTrue("'" + linkOption21 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption21.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 9000L + "'", obj23, 9000L);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(doubleStream33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(wildcardEnumeration38);
        org.junit.Assert.assertTrue("'" + linkOption39 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption39.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + 9000L + "'", obj41, 9000L);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(doubleStream51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(wildcardEnumeration56);
        org.junit.Assert.assertTrue("'" + linkOption57 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption57.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + 9000L + "'", obj59, 9000L);
        org.junit.Assert.assertNotNull(zoneId62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Etc/UTC" + "'", str63, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(doubleStream69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(wildcardEnumeration74);
        org.junit.Assert.assertTrue("'" + linkOption75 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption75.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + 9000L + "'", obj77, 9000L);
        org.junit.Assert.assertNotNull(openOptionArray78);
        org.junit.Assert.assertNotNull(fileChannel79);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime28 = localDateTime9.plusNanos(11L);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.lang.String str32 = zoneOffset31.getId();
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset31);
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.lang.String str37 = zoneOffset36.getId();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset36);
        boolean boolean39 = localDateTime33.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.format.DateTimeFormatter dateTimeFormatter40 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str41 = localDateTime38.format(dateTimeFormatter40);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int43 = localDateTime38.get((java.time.temporal.TemporalField) chronoField42);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.lang.String str47 = zoneOffset46.getId();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.MAX;
        java.lang.String str52 = zoneOffset51.getId();
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset51);
        boolean boolean54 = localDateTime48.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.format.DateTimeFormatter dateTimeFormatter55 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str56 = localDateTime53.format(dateTimeFormatter55);
        boolean boolean57 = localDateTime38.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean59 = localDateTime38.isSupported((java.time.temporal.TemporalField) chronoField58);
        java.time.Period period61 = java.time.Period.ofYears((int) '\000');
        java.time.Period period63 = period61.minusDays((long) (short) 0);
        java.time.LocalDateTime localDateTime64 = localDateTime38.plus((java.time.temporal.TemporalAmount) period61);
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.MAX;
        java.time.Clock clock66 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset65);
        java.time.ZoneId zoneId67 = java.time.ZoneId.systemDefault();
        java.lang.String str68 = zoneId67.getId();
        java.lang.String str69 = zoneId67.getId();
        java.time.ZonedDateTime zonedDateTime70 = java.time.ZonedDateTime.ofInstant(localDateTime64, zoneOffset65, zoneId67);
        java.time.Instant instant71 = localDateTime9.toInstant(zoneOffset65);
        java.time.ZoneId zoneId72 = java.time.ZoneId.systemDefault();
        java.lang.String str73 = zoneId72.getId();
        java.time.ZonedDateTime zonedDateTime74 = java.time.ZonedDateTime.now(zoneId72);
        java.time.ZoneId zoneId75 = java.time.ZoneId.systemDefault();
        java.lang.String str76 = zoneId75.getId();
        java.time.ZonedDateTime zonedDateTime77 = zonedDateTime74.withZoneSameInstant(zoneId75);
        java.time.ZonedDateTime zonedDateTime79 = zonedDateTime77.minusYears((long) (short) 0);
        java.time.temporal.ChronoField chronoField80 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        long long81 = zonedDateTime77.getLong((java.time.temporal.TemporalField) chronoField80);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant83 = instant71.with((java.time.temporal.TemporalField) chronoField80, (long) 54);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: SecondOfMinute");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+18:00" + "'", str32, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+18:00" + "'", str37, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str41, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField42.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+18:00" + "'", str47, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+18:00" + "'", str52, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str56, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField58.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(clock66);
        org.junit.Assert.assertNotNull(zoneId67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Etc/UTC" + "'", str68, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Etc/UTC" + "'", str69, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(zoneId72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Etc/UTC" + "'", str73, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime74);
        org.junit.Assert.assertNotNull(zoneId75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Etc/UTC" + "'", str76, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime77);
        org.junit.Assert.assertNotNull(zonedDateTime79);
        org.junit.Assert.assertTrue("'" + chronoField80 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField80.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 9L + "'", long81 == 9L);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.io.File file5 = file2.getCanonicalFile();
        java.net.URL uRL6 = file5.toURL();
        boolean boolean7 = file5.canExecute();
        file5.deleteOnExit();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/");
        org.junit.Assert.assertEquals(file5.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(uRL6);
        org.junit.Assert.assertEquals(uRL6.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap2 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>(2, (float) 999999999);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        int int2 = intBuffer1.get();
        int[] intArray3 = new int[] {};
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of(intArray3);
        java.nio.IntBuffer intBuffer5 = intBuffer1.get(intArray3);
        int[] intArray6 = new int[] {};
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of(intArray6);
        java.nio.IntBuffer intBuffer8 = intBuffer5.get(intArray6);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = intBuffer8.get(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intBuffer5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(intBuffer8);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        java.io.IOException iOException1 = new java.io.IOException("/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        long[] longArray7 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer8 = java.nio.LongBuffer.wrap(longArray7);
        java.nio.LongBuffer longBuffer9 = longBuffer5.put(longBuffer8);
        java.nio.LongBuffer longBuffer10 = longBuffer5.duplicate();
        boolean boolean11 = longBuffer5.isDirect();
        int int12 = longBuffer2.compareTo(longBuffer5);
        long[] longArray14 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer15 = java.nio.LongBuffer.wrap(longArray14);
        long[] longArray17 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer18 = java.nio.LongBuffer.wrap(longArray17);
        java.nio.LongBuffer longBuffer19 = longBuffer15.put(longBuffer18);
        java.nio.LongBuffer longBuffer20 = longBuffer15.duplicate();
        int int21 = longBuffer2.compareTo(longBuffer20);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[10]");
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(longBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[10]");
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[10]");
        org.junit.Assert.assertNotNull(longBuffer18);
        org.junit.Assert.assertNotNull(longBuffer19);
        org.junit.Assert.assertNotNull(longBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        java.util.MissingResourceException missingResourceException3 = new java.util.MissingResourceException("java.nio.HeapFloatBuffer[pos=256 lim=256 cap=256]", "2022-02-21T09:14:13.599Z[Etc/UTC]", "+18:00");
        java.lang.String str4 = missingResourceException3.getClassName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T09:14:13.599Z[Etc/UTC]" + "'", str4, "2022-02-21T09:14:13.599Z[Etc/UTC]");
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration2 = duration0.minusMillis((long) (byte) 0);
        java.time.Duration duration4 = duration2.plusMillis((long) 'u');
        java.time.Duration duration6 = duration2.minusNanos((long) ' ');
        java.time.Duration duration8 = duration6.minusMillis(1645434866L);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.lang.Object obj13 = properties1.setProperty("P0D", "DIRECT");
        properties1.clear();
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        java.io.File file2 = java.io.File.createTempFile("1970-01-01T18:01:37.00000012", "PT0S");
        long long3 = file2.length();
        boolean boolean4 = file2.setReadOnly();
        java.io.File file5 = file2.getCanonicalFile();
        java.io.File file6 = file2.getAbsoluteFile();
        java.io.File file7 = file2.getAbsoluteFile();
        java.io.File file8 = file2.getCanonicalFile();
        java.net.URI uRI9 = file8.toURI();
        java.io.File file10 = file8.getCanonicalFile();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/1970-01-01T18:01:37.000000123391557471174236665PT0S");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/1970-01-01T18:01:37.000000123391557471174236665PT0S");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
        org.junit.Assert.assertEquals(file6.toString(), "/tmp/1970-01-01T18:01:37.000000123391557471174236665PT0S");
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/tmp");
        org.junit.Assert.assertEquals(file7.toString(), "/tmp/1970-01-01T18:01:37.000000123391557471174236665PT0S");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/tmp");
        org.junit.Assert.assertEquals(file8.toString(), "/tmp/1970-01-01T18:01:37.000000123391557471174236665PT0S");
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/tmp");
        org.junit.Assert.assertEquals(file10.toString(), "/tmp/1970-01-01T18:01:37.000000123391557471174236665PT0S");
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.format.DecimalStyle decimalStyle1 = java.time.format.DecimalStyle.ofDefaultLocale();
        java.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDecimalStyle(decimalStyle1);
        java.util.Locale locale4 = new java.util.Locale("/");
        java.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withLocale(locale4);
        java.time.Month month6 = java.time.Month.JANUARY;
        java.time.Month month7 = month6.firstMonthOfQuarter();
        java.time.Month month8 = month7.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery9 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period10 = month7.query(periodTemporalQuery9);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate12 = localDateTime11.toLocalDate();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate16 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset15);
        java.time.Month month18 = java.time.Month.JANUARY;
        java.time.Month month19 = month18.firstMonthOfQuarter();
        java.time.Month month20 = month19.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery21 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period22 = month19.query(periodTemporalQuery21);
        java.time.Period period23 = zoneOffset15.query(periodTemporalQuery21);
        java.time.Period period24 = localDateTime11.query(periodTemporalQuery21);
        java.time.Period period25 = month7.query(periodTemporalQuery21);
        java.text.Format format26 = dateTimeFormatter2.toFormat(periodTemporalQuery21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = format26.parseObject("eth0");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Text 'eth0' could not be parsed at index 0");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(decimalStyle1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertEquals(locale4.toString(), "/");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + month6 + "' != '" + java.time.Month.JANUARY + "'", month6.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.JANUARY + "'", month7.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.JANUARY + "'", month8.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + month18 + "' != '" + java.time.Month.JANUARY + "'", month18.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month19 + "' != '" + java.time.Month.JANUARY + "'", month19.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month20 + "' != '" + java.time.Month.JANUARY + "'", month20.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(format26);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withYear((int) (short) 1);
        boolean boolean11 = zonedDateTime5.equals((java.lang.Object) zonedDateTime10);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime5.minusMinutes((long) (short) 0);
        java.time.ZoneId zoneId14 = java.time.ZoneId.systemDefault();
        java.lang.String str15 = zoneId14.getId();
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.now(zoneId14);
        java.time.ZoneId zoneId17 = java.time.ZoneId.systemDefault();
        java.lang.String str18 = zoneId17.getId();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime16.withZoneSameInstant(zoneId17);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusYears((long) (short) 0);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        long long23 = zonedDateTime19.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean24 = zonedDateTime5.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime19);
        java.time.ZoneOffset zoneOffset25 = zonedDateTime5.getOffset();
        java.time.ZoneId zoneId26 = zoneOffset25.normalized();
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Etc/UTC" + "'", str15, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Etc/UTC" + "'", str18, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField22.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneId26);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        java.net.URI uRI4 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.lang.String str5 = uRI4.toASCIIString();
        java.lang.String str6 = uRI4.getScheme();
        java.lang.String str7 = uRI4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "italiano://Etc/UTC#Etc/UTC" + "'", str5, "italiano://Etc/UTC#Etc/UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "italiano" + "'", str6, "italiano");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "italiano://Etc/UTC#Etc/UTC" + "'", str7, "italiano://Etc/UTC#Etc/UTC");
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray0 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList1 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList1, zoneOffsetTransitionArray0);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream3 = zoneOffsetTransitionList1.stream();
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator4 = zoneOffsetTransitionList1.spliterator();
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator4);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.slice();
        boolean boolean8 = byteBuffer5.hasArray();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.slice();
        java.nio.FloatBuffer floatBuffer5 = floatBuffer1.put(floatBuffer3);
        int int6 = floatBuffer5.arrayOffset();
        boolean boolean7 = floatBuffer5.isReadOnly();
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        java.nio.DoubleBuffer doubleBuffer5 = doubleBuffer4.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = doubleBuffer4.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        long long6 = zonedDateTime2.toEpochSecond();
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(zoneId7);
        java.time.ZonedDateTime zonedDateTime11 = zonedDateTime9.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        boolean boolean22 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str24 = localDateTime21.format(dateTimeFormatter23);
        java.time.chrono.Chronology chronology25 = dateTimeFormatter23.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod29 = chronology25.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime9.plus((java.time.temporal.TemporalAmount) chronoPeriod29);
        boolean boolean31 = zonedDateTime2.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime30);
        java.time.ZoneOffset zoneOffset32 = zonedDateTime30.getOffset();
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645435390L + "'", long6 == 1645435390L);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str24, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronoPeriod29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zoneOffset32);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        java.net.Proxy.Type type0 = java.net.Proxy.Type.HTTP;
        java.net.SocketAddress socketAddress1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy2 = new java.net.Proxy(type0, socketAddress1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type HTTP is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + java.net.Proxy.Type.HTTP + "'", type0.equals(java.net.Proxy.Type.HTTP));
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal1 = null;
        java.time.temporal.Temporal temporal2 = duration0.subtractFrom(temporal1);
        long long3 = duration0.toDays();
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration0.addTo(temporal4);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, 0, 16);
        java.time.LocalTime localTime12 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime13 = localDate11.atTime(localTime12);
        java.time.LocalTime localTime15 = localTime12.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean18 = strMapMap16.containsKey((java.lang.Object) isoChronology17);
        java.time.chrono.IsoEra isoEra19 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate22 = isoChronology17.dateYearDay((java.time.chrono.Era) isoEra19, (-1), 10);
        java.time.Duration duration23 = java.time.Duration.ZERO;
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal25 = null;
        java.time.temporal.Temporal temporal26 = duration24.subtractFrom(temporal25);
        long long27 = duration24.toDays();
        java.time.Duration duration28 = duration23.plus(duration24);
        long long29 = duration24.toDays();
        java.lang.String str30 = duration24.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate31 = localDate22.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.LocalTime localTime32 = localTime12.minus((java.time.temporal.TemporalAmount) duration24);
        java.time.temporal.Temporal temporal33 = duration0.addTo((java.time.temporal.Temporal) localTime12);
        int int34 = localTime12.getMinute();
        java.time.LocalTime localTime36 = localTime12.withMinute((int) (short) 0);
        java.time.chrono.IsoChronology isoChronology37 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer39 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj40 = charBuffer39.array();
        boolean boolean41 = isoChronology37.equals(obj40);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap42 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology43 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean44 = strMapMap42.containsKey((java.lang.Object) isoChronology43);
        java.time.chrono.IsoEra isoEra45 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate48 = isoChronology43.dateYearDay((java.time.chrono.Era) isoEra45, (-1), 10);
        int int50 = isoChronology37.prolepticYear((java.time.chrono.Era) isoEra45, 0);
        java.time.Month month51 = java.time.Month.JANUARY;
        java.time.Month month52 = month51.firstMonthOfQuarter();
        java.time.Month month53 = month52.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean55 = month53.isSupported((java.time.temporal.TemporalField) chronoField54);
        boolean boolean56 = isoEra45.isSupported((java.time.temporal.TemporalField) chronoField54);
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField54.getRangeUnit();
        java.time.chrono.IsoChronology isoChronology58 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra60 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate63 = isoChronology58.dateYearDay((java.time.chrono.Era) isoEra60, 0, 16);
        java.time.LocalTime localTime64 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime65 = localDate63.atTime(localTime64);
        java.time.LocalDate localDate67 = localDate63.withMonth(1);
        long long68 = localDate67.toEpochDay();
        java.time.chrono.IsoChronology isoChronology69 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra71 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate74 = isoChronology69.dateYearDay((java.time.chrono.Era) isoEra71, 0, 16);
        java.time.LocalTime localTime75 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime76 = localDate74.atTime(localTime75);
        java.time.LocalDate localDate78 = localDate74.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod79 = localDate67.until((java.time.chrono.ChronoLocalDate) localDate78);
        java.time.LocalDate localDate81 = localDate67.plusDays((long) (short) 0);
        java.time.LocalDate localDate83 = localDate81.minusDays((long) 9);
        java.time.chrono.Era era84 = localDate83.getEra();
        java.time.chrono.ChronoLocalDate chronoLocalDate86 = temporalUnit57.addTo((java.time.chrono.ChronoLocalDate) localDate83, (long) 70);
        java.time.LocalTime localTime87 = localTime12.truncatedTo(temporalUnit57);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNull(temporal2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + isoEra19 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra19.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNull(temporal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0S" + "'", str30, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(isoChronology37);
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(isoChronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + isoEra45 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra45.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + month51 + "' != '" + java.time.Month.JANUARY + "'", month51.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month52 + "' != '" + java.time.Month.JANUARY + "'", month52.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month53 + "' != '" + java.time.Month.JANUARY + "'", month53.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField54.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(isoChronology58);
        org.junit.Assert.assertTrue("'" + isoEra60 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra60.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-719147L) + "'", long68 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology69);
        org.junit.Assert.assertTrue("'" + isoEra71 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra71.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(chronoPeriod79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertTrue("'" + era84 + "' != '" + java.time.chrono.IsoEra.CE + "'", era84.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(chronoLocalDate86);
        org.junit.Assert.assertNotNull(localTime87);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneId zoneId15 = java.time.ZoneId.systemDefault();
        java.lang.String str16 = zoneId15.getId();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.now(zoneId15);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime17.withZoneSameInstant(zoneId18);
        java.time.ZonedDateTime zonedDateTime21 = localDateTime9.atZone(zoneId18);
        java.time.Month month22 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime9);
        java.time.LocalDateTime localDateTime24 = localDateTime9.minusHours((long) (byte) 100);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + month22 + "' != '" + java.time.Month.JANUARY + "'", month22.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        java.io.File file1 = new java.io.File("iso8601");
        boolean boolean2 = file1.canWrite();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "iso8601");
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Fri");
        boolean boolean2 = printStream1.checkError();
        printStream1.println(false);
        printStream1.print((double) 30);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        java.util.OptionalLong optionalLong1 = java.util.OptionalLong.of((long) '-');
        long long3 = optionalLong1.orElse(1645434854L);
        org.junit.Assert.assertNotNull(optionalLong1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 45L + "'", long3 == 45L);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime88.plusHours((long) 256);
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime88.minusHours((long) (short) 100);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(offsetDateTime95);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        boolean boolean12 = zoneRules11.isFixedOffset();
        java.security.CodeSource codeSource13 = null;
        java.security.PermissionCollection permissionCollection14 = null;
        java.security.ProtectionDomain protectionDomain15 = new java.security.ProtectionDomain(codeSource13, permissionCollection14);
        boolean boolean16 = zoneRules11.equals((java.lang.Object) codeSource13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray19 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList20 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, zoneOffsetTransitionArray19);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray22 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList23 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, zoneOffsetTransitionArray22);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray25 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26, zoneOffsetTransitionRuleArray25);
        java.time.zone.ZoneRules zoneRules28 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26);
        boolean boolean29 = zoneRules28.isFixedOffset();
        java.time.Instant instant30 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition31 = zoneRules28.previousTransition(instant30);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList32 = zoneRules28.getTransitionRules();
        java.time.Instant instant33 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition34 = zoneRules28.previousTransition(instant33);
        java.time.Instant instant35 = java.time.Instant.MAX;
        java.time.Instant instant37 = instant35.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset38 = zoneRules28.getOffset(instant37);
        java.time.ZoneOffset zoneOffset39 = zoneRules11.getStandardOffset(instant37);
        java.nio.file.attribute.FileTime fileTime41 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.time.Instant instant42 = fileTime41.toInstant();
        java.time.Duration duration43 = java.time.Duration.ZERO;
        java.time.Duration duration44 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal45 = null;
        java.time.temporal.Temporal temporal46 = duration44.subtractFrom(temporal45);
        long long47 = duration44.toDays();
        java.time.Duration duration48 = duration43.plus(duration44);
        java.time.Duration duration49 = java.time.Duration.from((java.time.temporal.TemporalAmount) duration43);
        long long50 = duration43.toHours();
        java.time.Instant instant51 = instant42.minus((java.time.temporal.TemporalAmount) duration43);
        int int52 = instant37.compareTo(instant42);
        java.time.ZoneId zoneId53 = java.time.ZoneId.systemDefault();
        java.lang.String str54 = zoneId53.getId();
        java.time.ZonedDateTime zonedDateTime55 = java.time.ZonedDateTime.now(zoneId53);
        java.time.ZoneId zoneId56 = java.time.ZoneId.systemDefault();
        java.lang.String str57 = zoneId56.getId();
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime55.withZoneSameInstant(zoneId56);
        java.time.ZoneId zoneId59 = java.time.ZoneId.systemDefault();
        java.lang.String str60 = zoneId59.getId();
        java.time.ZonedDateTime zonedDateTime61 = java.time.ZonedDateTime.now(zoneId59);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime61.withYear((int) (short) 1);
        boolean boolean64 = zonedDateTime58.equals((java.lang.Object) zonedDateTime63);
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime58.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology67 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime58);
        java.time.ZoneId zoneId68 = zonedDateTime58.getZone();
        java.time.ZonedDateTime zonedDateTime69 = instant42.atZone(zoneId68);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(protectionDomain15.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList32);
        org.junit.Assert.assertNull(zoneOffsetTransition34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(fileTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNull(temporal46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(zoneId53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Etc/UTC" + "'", str54, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(zoneId56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Etc/UTC" + "'", str57, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(zoneId59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Etc/UTC" + "'", str60, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime61);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(zonedDateTime69);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        boolean boolean3 = inetAddress0.isLoopbackAddress();
        boolean boolean4 = inetAddress0.isLinkLocalAddress();
        boolean boolean5 = inetAddress0.isMCNodeLocal();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long3 = timeUnit1.toMinutes(1645434849L);
        long long5 = timeUnit1.toNanos((long) 9);
        long long7 = timeUnit1.toMillis((long) 9);
        long long9 = timeUnit1.toMillis((long) 2);
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from((long) 1, timeUnit1);
        java.util.function.UnaryOperator<java.security.NoSuchProviderException> noSuchProviderExceptionUnaryOperator11 = java.util.function.UnaryOperator.identity();
        boolean boolean12 = fileTime10.equals((java.lang.Object) noSuchProviderExceptionUnaryOperator11);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 27L + "'", long3 == 27L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 9000L + "'", long5 == 9000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(noSuchProviderExceptionUnaryOperator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.ofEpochDay((long) 10);
        int int4 = localDate1.compareTo((java.time.chrono.ChronoLocalDate) localDate3);
        java.time.chrono.IsoChronology isoChronology5 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate10 = isoChronology5.dateYearDay((java.time.chrono.Era) isoEra7, 0, 16);
        java.time.LocalTime localTime11 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime12 = localDate10.atTime(localTime11);
        java.time.LocalDate localDate14 = localDate10.withMonth(1);
        boolean boolean15 = localDate10.isLeapYear();
        java.time.chrono.ChronoPeriod chronoPeriod16 = localDate3.until((java.time.chrono.ChronoLocalDate) localDate10);
        java.time.temporal.TemporalUnit temporalUnit17 = null;
        boolean boolean18 = localDate3.isSupported(temporalUnit17);
        java.time.LocalDate localDate20 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate22 = java.time.LocalDate.ofEpochDay((long) 10);
        int int23 = localDate20.compareTo((java.time.chrono.ChronoLocalDate) localDate22);
        java.time.chrono.IsoChronology isoChronology24 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra26 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate29 = isoChronology24.dateYearDay((java.time.chrono.Era) isoEra26, 0, 16);
        java.time.LocalTime localTime30 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime31 = localDate29.atTime(localTime30);
        java.time.LocalDate localDate33 = localDate29.withMonth(1);
        boolean boolean34 = localDate29.isLeapYear();
        java.time.chrono.ChronoPeriod chronoPeriod35 = localDate22.until((java.time.chrono.ChronoLocalDate) localDate29);
        java.time.Period period36 = java.time.Period.between(localDate3, localDate22);
        java.time.ZoneId zoneId37 = java.time.ZoneId.systemDefault();
        java.lang.String str38 = zoneId37.getId();
        java.time.ZonedDateTime zonedDateTime39 = java.time.ZonedDateTime.now(zoneId37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime39.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit42 = null;
        boolean boolean43 = zonedDateTime39.isSupported(temporalUnit42);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange45 = zonedDateTime39.range((java.time.temporal.TemporalField) chronoField44);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime47 = java.time.LocalTime.MAX;
        long long48 = chronoField46.getFrom((java.time.temporal.TemporalAccessor) localTime47);
        boolean boolean49 = zonedDateTime39.isSupported((java.time.temporal.TemporalField) chronoField46);
        java.time.chrono.IsoChronology isoChronology50 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra52 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate55 = isoChronology50.dateYearDay((java.time.chrono.Era) isoEra52, 0, 16);
        java.time.LocalTime localTime56 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime57 = localDate55.atTime(localTime56);
        java.time.LocalDate localDate59 = localDate55.withMonth(1);
        long long60 = localDate59.toEpochDay();
        java.time.chrono.IsoChronology isoChronology61 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra63 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate66 = isoChronology61.dateYearDay((java.time.chrono.Era) isoEra63, 0, 16);
        java.time.LocalTime localTime67 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime68 = localDate66.atTime(localTime67);
        java.time.LocalDate localDate70 = localDate66.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod71 = localDate59.until((java.time.chrono.ChronoLocalDate) localDate70);
        java.time.LocalDate localDate73 = localDate59.plusDays((long) (short) 0);
        java.time.LocalDate localDate75 = localDate73.minusDays((long) 9);
        java.time.LocalDate localDate77 = java.time.LocalDate.MIN;
        java.time.ZoneId zoneId78 = java.time.ZoneId.systemDefault();
        java.lang.String str79 = zoneId78.getId();
        java.time.ZonedDateTime zonedDateTime80 = java.time.ZonedDateTime.now(zoneId78);
        java.time.ZoneId zoneId81 = java.time.ZoneId.systemDefault();
        java.lang.String str82 = zoneId81.getId();
        java.time.ZonedDateTime zonedDateTime83 = zonedDateTime80.withZoneSameInstant(zoneId81);
        java.time.ZoneId zoneId84 = java.time.ZoneId.systemDefault();
        java.lang.String str85 = zoneId84.getId();
        java.time.ZonedDateTime zonedDateTime86 = java.time.ZonedDateTime.now(zoneId84);
        java.time.ZonedDateTime zonedDateTime88 = zonedDateTime86.withYear((int) (short) 1);
        boolean boolean89 = zonedDateTime83.equals((java.lang.Object) zonedDateTime88);
        java.time.ZonedDateTime zonedDateTime91 = zonedDateTime83.minusMonths((long) (byte) -1);
        java.time.temporal.ChronoField chronoField92 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        java.time.temporal.TemporalUnit temporalUnit93 = chronoField92.getBaseUnit();
        long long94 = localDate77.until((java.time.temporal.Temporal) zonedDateTime91, temporalUnit93);
        java.time.chrono.ChronoLocalDate chronoLocalDate95 = localDate73.minus(1645434851L, temporalUnit93);
        boolean boolean96 = zonedDateTime39.isSupported(temporalUnit93);
        long long97 = period36.get(temporalUnit93);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra7.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronoPeriod16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(isoChronology24);
        org.junit.Assert.assertTrue("'" + isoEra26 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra26.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronoPeriod35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Etc/UTC" + "'", str38, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField44.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField46.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 23L + "'", long48 == 23L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(isoChronology50);
        org.junit.Assert.assertTrue("'" + isoEra52 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra52.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-719147L) + "'", long60 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology61);
        org.junit.Assert.assertTrue("'" + isoEra63 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra63.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(chronoPeriod71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(zoneId78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Etc/UTC" + "'", str79, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime80);
        org.junit.Assert.assertNotNull(zoneId81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Etc/UTC" + "'", str82, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime83);
        org.junit.Assert.assertNotNull(zoneId84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Etc/UTC" + "'", str85, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertNotNull(zonedDateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(zonedDateTime91);
        org.junit.Assert.assertTrue("'" + chronoField92 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField92.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + temporalUnit93 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit93.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 365243238234L + "'", long94 == 365243238234L);
        org.junit.Assert.assertNotNull(chronoLocalDate95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        boolean boolean13 = zoneRules12.isFixedOffset();
        java.time.Instant instant14 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules12.previousTransition(instant14);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = zoneRules12.getTransitionRules();
        java.time.Instant instant17 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition18 = zoneRules12.previousTransition(instant17);
        boolean boolean19 = attribute0.equals((java.lang.Object) zoneOffsetTransition18);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.time.ZoneId zoneId22 = java.time.ZoneId.systemDefault();
        java.lang.String str23 = zoneId22.getId();
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.now(zoneId22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.withYear((int) (short) 1);
        java.time.LocalTime localTime27 = zonedDateTime26.toLocalTime();
        java.util.stream.DoubleStream doubleStream29 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj30 = properties21.getOrDefault((java.lang.Object) zonedDateTime26, (java.lang.Object) doubleStream29);
        java.lang.Object obj33 = properties21.setProperty("P0D", "DIRECT");
        java.util.Set<java.lang.Object> objSet34 = properties21.keySet();
        boolean boolean35 = attribute0.equals((java.lang.Object) properties21);
        java.io.PrintStream printStream37 = new java.io.PrintStream("20220221Z");
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale39 = dateTimeFormatter38.getLocale();
        java.util.Locale locale40 = java.util.Locale.US;
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale40.getDisplayCountry(locale41);
        java.lang.String str43 = locale39.getDisplayVariant(locale40);
        java.lang.Object[] objArray45 = null;
        java.io.PrintStream printStream46 = printStream37.format(locale39, "DecimalStyle[a+-.]", objArray45);
        properties21.list(printStream46);
        printStream46.write((int) '#');
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.wrap(byteArray52, (int) (short) 0, 0);
        int int56 = byteBuffer55.arrayOffset();
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.slice();
        java.nio.Buffer buffer58 = byteBuffer55.rewind();
        byte[] byteArray59 = byteBuffer55.array();
        printStream46.write(byteArray59);
        printStream46.println(280505843712L);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList16);
        org.junit.Assert.assertNull(zoneOffsetTransition18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Etc/UTC" + "'", str23, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(doubleStream29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Stati Uniti" + "'", str42, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(buffer58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, -1]");
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        char[] charArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.wrap(charArray0, 0, 1969);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        java.util.OptionalInt optionalInt2 = intStream1.max();
        java.lang.String str3 = optionalInt2.toString();
        java.util.function.IntConsumer intConsumer4 = null;
        optionalInt2.ifPresent(intConsumer4);
        boolean boolean7 = optionalInt2.equals((java.lang.Object) 59);
        java.util.LongSummaryStatistics longSummaryStatistics8 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream11 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics12 = longStream11.summaryStatistics();
        java.util.function.IntConsumer intConsumer13 = longSummaryStatistics8.andThen((java.util.function.IntConsumer) longSummaryStatistics12);
        optionalInt2.ifPresent((java.util.function.IntConsumer) longSummaryStatistics12);
        long long15 = longSummaryStatistics12.getCount();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalInt.empty" + "'", str3, "OptionalInt.empty");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(longSummaryStatistics12);
        org.junit.Assert.assertEquals(longSummaryStatistics12.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 9L + "'", long15 == 9L);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Fri");
        boolean boolean2 = printStream1.checkError();
        printStream1.print((double) (byte) -1);
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray8 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, zoneOffsetTransitionArray8);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray11 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, zoneOffsetTransitionArray11);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray14 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15, zoneOffsetTransitionRuleArray14);
        java.time.zone.ZoneRules zoneRules17 = java.time.zone.ZoneRules.of(zoneOffset6, zoneOffset7, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        boolean boolean30 = zoneOffsetTransitionList9.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition31 = null;
        boolean boolean32 = zoneOffsetTransitionList9.add(zoneOffsetTransition31);
        java.lang.Object[] objArray33 = zoneOffsetTransitionList9.toArray();
        java.io.PrintStream printStream34 = printStream1.printf("ISO", objArray33);
        printStream34.print((double) 1645434863000L);
        printStream34.close();
        printStream34.write(11000000);
        printStream34.print((long) (-999999999));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[null]");
        org.junit.Assert.assertNotNull(printStream34);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedDate(formatStyle0);
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.duplicate();
        boolean boolean8 = longBuffer2.isDirect();
        boolean boolean9 = longBuffer2.hasArray();
        java.nio.ByteOrder byteOrder10 = longBuffer2.order();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteOrder10);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.LocalTime localTime5 = zonedDateTime4.toLocalTime();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap6 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap7 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology8 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean9 = strMapMap7.containsKey((java.lang.Object) isoChronology8);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal11 = null;
        java.time.temporal.Temporal temporal12 = duration10.subtractFrom(temporal11);
        long long13 = duration10.toDays();
        boolean boolean14 = strMapMap7.contains((java.lang.Object) duration10);
        java.lang.Cloneable cloneable15 = strMapMap6.get((java.lang.Object) duration10);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.plus(duration17);
        long long22 = duration17.toDays();
        java.time.Duration duration23 = duration10.plus(duration17);
        java.time.LocalTime localTime24 = localTime5.plus((java.time.temporal.TemporalAmount) duration10);
        java.time.ZoneId zoneId25 = java.time.ZoneId.systemDefault();
        java.lang.String str26 = zoneId25.getId();
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.now(zoneId25);
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime27.withYear((int) (short) 1);
        java.time.LocalTime localTime30 = zonedDateTime29.toLocalTime();
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.lang.String str34 = zoneOffset33.getId();
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset33);
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray38 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, zoneOffsetTransitionArray38);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray41 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList42 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList42, zoneOffsetTransitionArray41);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray44 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList45, zoneOffsetTransitionRuleArray44);
        java.time.zone.ZoneRules zoneRules47 = java.time.zone.ZoneRules.of(zoneOffset36, zoneOffset37, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList42, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList45);
        int int48 = zoneOffset33.compareTo(zoneOffset36);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime49 = zonedDateTime29.withZoneSameLocal((java.time.ZoneId) zoneOffset33);
        java.time.LocalTime localTime50 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset33);
        int int51 = localTime24.compareTo(localTime50);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(isoChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNull(temporal12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(cloneable15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+18:00" + "'", str34, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.LocalTime localTime5 = zonedDateTime4.toLocalTime();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray16 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList17, zoneOffsetTransitionArray16);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray19 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList20 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList20, zoneOffsetTransitionRuleArray19);
        java.time.zone.ZoneRules zoneRules22 = java.time.zone.ZoneRules.of(zoneOffset11, zoneOffset12, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList17, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList20);
        int int23 = zoneOffset8.compareTo(zoneOffset11);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime24 = zonedDateTime4.withZoneSameLocal((java.time.ZoneId) zoneOffset8);
        java.time.LocalTime localTime25 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset8);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray28 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList29 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList29, zoneOffsetTransitionArray28);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray31 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList32 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, zoneOffsetTransitionArray31);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray34 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList35 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList35, zoneOffsetTransitionRuleArray34);
        java.time.zone.ZoneRules zoneRules37 = java.time.zone.ZoneRules.of(zoneOffset26, zoneOffset27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList29, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList35);
        boolean boolean38 = zoneRules37.isFixedOffset();
        java.time.Instant instant39 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition40 = zoneRules37.previousTransition(instant39);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList41 = zoneRules37.getTransitionRules();
        java.time.Instant instant42 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition43 = zoneRules37.previousTransition(instant42);
        java.time.Instant instant44 = java.time.Instant.MAX;
        java.time.Instant instant46 = instant44.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset47 = zoneRules37.getOffset(instant46);
        java.time.OffsetTime offsetTime48 = java.time.OffsetTime.of(localTime25, zoneOffset47);
        java.time.Clock clock49 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset47);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneRules37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition40);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList41);
        org.junit.Assert.assertNull(zoneOffsetTransition43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertNotNull(clock49);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.net.URL uRL8 = new java.net.URL(uRL4, "/");
        int int9 = uRL8.getPort();
        java.security.cert.Certificate[] certificateArray10 = new java.security.cert.Certificate[] {};
        java.security.CodeSource codeSource11 = new java.security.CodeSource(uRL8, certificateArray10);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        java.lang.String str13 = proxy12.toString();
        java.lang.String str14 = proxy12.toString();
        java.net.URLConnection uRLConnection15 = uRL8.openConnection(proxy12);
        java.lang.String str17 = uRLConnection15.getHeaderField("DayOfWeek");
        java.lang.String str18 = uRLConnection15.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = uRLConnection15.getRequestProperties();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Already connected");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals(uRL8.toString(), "file:/");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(certificateArray10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DIRECT" + "'", str13, "DIRECT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DIRECT" + "'", str14, "DIRECT");
        org.junit.Assert.assertNotNull(uRLConnection15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "sun.net.www.protocol.file.FileURLConnection:file:/" + "'", str18, "sun.net.www.protocol.file.FileURLConnection:file:/");
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        java.util.Date date1 = new java.util.Date(0L);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withYear((int) (short) 1);
        boolean boolean11 = zonedDateTime5.equals((java.lang.Object) zonedDateTime10);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime5.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology14 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime5);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime15 = zonedDateTime5.toLocalDateTime();
        java.time.LocalTime localTime16 = java.time.LocalTime.MAX;
        java.time.temporal.TemporalUnit temporalUnit17 = null;
        boolean boolean18 = localTime16.isSupported(temporalUnit17);
        java.time.LocalTime localTime20 = localTime16.withNano((int) '4');
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale24 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = chronoField21.getDisplayName(locale24);
        boolean boolean27 = chronoField21.isTimeBased();
        java.time.temporal.ValueRange valueRange28 = localTime16.range((java.time.temporal.TemporalField) chronoField21);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        boolean boolean30 = localTime16.isSupported((java.time.temporal.TemporalField) chronoField29);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = zonedDateTime5.get((java.time.temporal.TemporalField) chronoField29);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Invalid field 'InstantSeconds' for get() method, use getLong() instead");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField21.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale24.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "599b081c1808" + "'", str25, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClockHourOfDay" + "'", str26, "ClockHourOfDay");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField29.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer5.asShortBuffer();
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.wrap(byteArray10, (int) (short) 0, 0);
        int int14 = byteBuffer13.arrayOffset();
        java.nio.ShortBuffer shortBuffer15 = byteBuffer13.asShortBuffer();
        java.nio.ShortBuffer shortBuffer16 = shortBuffer15.slice();
        java.nio.ShortBuffer shortBuffer17 = shortBuffer15.asReadOnlyBuffer();
        java.nio.ShortBuffer shortBuffer18 = shortBuffer15.compact();
        java.nio.Buffer buffer19 = shortBuffer18.rewind();
        int int20 = shortBuffer7.compareTo(shortBuffer18);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(shortBuffer15);
        org.junit.Assert.assertNotNull(shortBuffer16);
        org.junit.Assert.assertNotNull(shortBuffer17);
        org.junit.Assert.assertNotNull(shortBuffer18);
        org.junit.Assert.assertNotNull(buffer19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration2 = duration0.minusMillis((long) (byte) 0);
        java.time.Duration duration4 = duration2.plusMillis((long) 'u');
        java.time.Duration duration6 = duration4.minusSeconds((long) 1439);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics8 = longStream7.summaryStatistics();
        java.util.function.IntConsumer intConsumer9 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics8);
        java.util.stream.IntStream intStream10 = intStream3.peek((java.util.function.IntConsumer) longSummaryStatistics4);
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        int int13 = charBuffer12.limit();
        java.util.stream.IntStream intStream14 = charBuffer12.chars();
        java.util.LongSummaryStatistics longSummaryStatistics15 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream18 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics19 = longStream18.summaryStatistics();
        java.util.function.IntConsumer intConsumer20 = longSummaryStatistics15.andThen((java.util.function.IntConsumer) longSummaryStatistics19);
        java.util.stream.IntStream intStream21 = intStream14.peek((java.util.function.IntConsumer) longSummaryStatistics15);
        longSummaryStatistics4.combine(longSummaryStatistics15);
        java.util.LongSummaryStatistics longSummaryStatistics23 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream26 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics27 = longStream26.summaryStatistics();
        java.util.function.IntConsumer intConsumer28 = longSummaryStatistics23.andThen((java.util.function.IntConsumer) longSummaryStatistics27);
        java.util.function.IntConsumer intConsumer29 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics23);
        longSummaryStatistics4.accept((long) 3);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3,000000, max=3}");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(longSummaryStatistics8);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertEquals(longSummaryStatistics15.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(longSummaryStatistics19);
        org.junit.Assert.assertEquals(longSummaryStatistics19.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer20);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertEquals(longSummaryStatistics23.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream26);
        org.junit.Assert.assertNotNull(longSummaryStatistics27);
        org.junit.Assert.assertEquals(longSummaryStatistics27.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer28);
        org.junit.Assert.assertNotNull(intConsumer29);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        java.nio.DoubleBuffer doubleBuffer1 = java.nio.DoubleBuffer.allocate(171);
        org.junit.Assert.assertNotNull(doubleBuffer1);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.nio.channels.AsynchronousCloseException asynchronousCloseException12 = new java.nio.channels.AsynchronousCloseException();
        int int13 = zoneOffsetTransitionList6.lastIndexOf((java.lang.Object) asynchronousCloseException12);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        java.net.NetworkInterface networkInterface3 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics4.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics4.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics4.getGeometricMeanImpl();
        double double9 = descriptiveStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getSkewnessImpl();
        boolean boolean11 = networkInterface3.equals((java.lang.Object) descriptiveStatistics4);
        int int12 = networkInterface3.getMTU();
        java.lang.String str13 = networkInterface3.getDisplayName();
        java.lang.String str14 = networkInterface3.getDisplayName();
        int int15 = networkInterface3.getIndex();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(networkInterface3);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1500 + "'", int12 == 1500);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eth0" + "'", str13, "eth0");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eth0" + "'", str14, "eth0");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 18 + "'", int15 == 18);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        long long6 = zonedDateTime2.toEpochSecond();
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(zoneId7);
        java.time.ZonedDateTime zonedDateTime11 = zonedDateTime9.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        boolean boolean22 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str24 = localDateTime21.format(dateTimeFormatter23);
        java.time.chrono.Chronology chronology25 = dateTimeFormatter23.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod29 = chronology25.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime9.plus((java.time.temporal.TemporalAmount) chronoPeriod29);
        boolean boolean31 = zonedDateTime2.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime30);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime2.minusNanos((long) '.');
        java.time.ZonedDateTime zonedDateTime35 = zonedDateTime33.plusWeeks((long) 4);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645435391L + "'", long6 == 1645435391L);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str24, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronoPeriod29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime35);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        int int1 = offsetDateTime0.getNano();
        org.junit.Assert.assertNotNull(offsetDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 233000000 + "'", int1 == 233000000);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.time.ZoneId zoneId8 = java.time.ZoneId.systemDefault();
        java.lang.String str9 = zoneId8.getId();
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.now(zoneId8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.LocalTime localTime13 = zonedDateTime12.toLocalTime();
        java.util.stream.DoubleStream doubleStream15 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj16 = properties7.getOrDefault((java.lang.Object) zonedDateTime12, (java.lang.Object) doubleStream15);
        java.lang.Object obj19 = properties7.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration20 = properties7.propertyNames();
        java.nio.file.LinkOption linkOption21 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj23 = properties7.getOrDefault((java.lang.Object) linkOption21, (java.lang.Object) 9000L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.time.ZoneId zoneId26 = java.time.ZoneId.systemDefault();
        java.lang.String str27 = zoneId26.getId();
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.now(zoneId26);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.withYear((int) (short) 1);
        java.time.LocalTime localTime31 = zonedDateTime30.toLocalTime();
        java.util.stream.DoubleStream doubleStream33 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj34 = properties25.getOrDefault((java.lang.Object) zonedDateTime30, (java.lang.Object) doubleStream33);
        java.lang.Object obj37 = properties25.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration38 = properties25.propertyNames();
        java.nio.file.LinkOption linkOption39 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj41 = properties25.getOrDefault((java.lang.Object) linkOption39, (java.lang.Object) 9000L);
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.time.ZoneId zoneId44 = java.time.ZoneId.systemDefault();
        java.lang.String str45 = zoneId44.getId();
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.now(zoneId44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime46.withYear((int) (short) 1);
        java.time.LocalTime localTime49 = zonedDateTime48.toLocalTime();
        java.util.stream.DoubleStream doubleStream51 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj52 = properties43.getOrDefault((java.lang.Object) zonedDateTime48, (java.lang.Object) doubleStream51);
        java.lang.Object obj55 = properties43.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration56 = properties43.propertyNames();
        java.nio.file.LinkOption linkOption57 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj59 = properties43.getOrDefault((java.lang.Object) linkOption57, (java.lang.Object) 9000L);
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        java.time.ZoneId zoneId62 = java.time.ZoneId.systemDefault();
        java.lang.String str63 = zoneId62.getId();
        java.time.ZonedDateTime zonedDateTime64 = java.time.ZonedDateTime.now(zoneId62);
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime64.withYear((int) (short) 1);
        java.time.LocalTime localTime67 = zonedDateTime66.toLocalTime();
        java.util.stream.DoubleStream doubleStream69 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj70 = properties61.getOrDefault((java.lang.Object) zonedDateTime66, (java.lang.Object) doubleStream69);
        java.lang.Object obj73 = properties61.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration74 = properties61.propertyNames();
        java.nio.file.LinkOption linkOption75 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj77 = properties61.getOrDefault((java.lang.Object) linkOption75, (java.lang.Object) 9000L);
        java.nio.file.OpenOption[] openOptionArray78 = new java.nio.file.OpenOption[] { linkOption21, linkOption39, linkOption57, linkOption75 };
        java.nio.channels.FileChannel fileChannel79 = java.nio.channels.FileChannel.open(path5, openOptionArray78);
        boolean boolean80 = fileChannel79.isOpen();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.SeekableByteChannel seekableByteChannel82 = fileChannel79.truncate((long) '+');
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Etc/UTC" + "'", str9, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(wildcardEnumeration20);
        org.junit.Assert.assertTrue("'" + linkOption21 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption21.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 9000L + "'", obj23, 9000L);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(doubleStream33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(wildcardEnumeration38);
        org.junit.Assert.assertTrue("'" + linkOption39 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption39.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + 9000L + "'", obj41, 9000L);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(doubleStream51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(wildcardEnumeration56);
        org.junit.Assert.assertTrue("'" + linkOption57 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption57.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + 9000L + "'", obj59, 9000L);
        org.junit.Assert.assertNotNull(zoneId62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Etc/UTC" + "'", str63, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(doubleStream69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(wildcardEnumeration74);
        org.junit.Assert.assertTrue("'" + linkOption75 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption75.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + 9000L + "'", obj77, 9000L);
        org.junit.Assert.assertNotNull(openOptionArray78);
        org.junit.Assert.assertNotNull(fileChannel79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.net.URLStreamHandler uRLStreamHandler8 = null;
        java.net.URL uRL9 = new java.net.URL(uRL4, "hi!", uRLStreamHandler8);
        java.lang.String str10 = uRL9.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals(uRL9.toString(), "file:/hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "file:/hi!" + "'", str10, "file:/hi!");
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "Chinese");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Chinese");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withYear((int) (short) 1);
        boolean boolean11 = zonedDateTime5.equals((java.lang.Object) zonedDateTime10);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime5.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology14 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime5);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime15 = zonedDateTime5.toLocalDateTime();
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.plus(duration17);
        java.time.temporal.Temporal temporal22 = localDateChronoLocalDateTime15.minus((java.time.temporal.TemporalAmount) duration16);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(temporal22);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.MIN;
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray3, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology7 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean8 = byteBuffer6.equals((java.lang.Object) isoChronology7);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap9 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology10 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean11 = strMapMap9.containsKey((java.lang.Object) isoChronology10);
        java.time.chrono.IsoEra isoEra12 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate15 = isoChronology10.dateYearDay((java.time.chrono.Era) isoEra12, (-1), 10);
        int int17 = isoChronology7.prolepticYear((java.time.chrono.Era) isoEra12, (int) '#');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.temporal.Temporal temporal19 = isoEra12.adjustInto((java.time.temporal.Temporal) localDateTime18);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate23 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset22);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset22);
        java.time.Month month25 = java.time.Month.JANUARY;
        java.time.Month month26 = month25.firstMonthOfQuarter();
        java.time.Month month27 = month26.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery28 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period29 = month26.query(periodTemporalQuery28);
        java.time.Period period30 = zoneOffset22.query(periodTemporalQuery28);
        java.time.Period period31 = localDateTime18.query(periodTemporalQuery28);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray34 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, zoneOffsetTransitionArray34);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray40 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList41, zoneOffsetTransitionRuleArray40);
        java.time.zone.ZoneRules zoneRules43 = java.time.zone.ZoneRules.of(zoneOffset32, zoneOffset33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList41);
        java.time.Clock clock44 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset32);
        java.time.LocalDate localDate45 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset32);
        java.time.OffsetDateTime offsetDateTime46 = java.time.OffsetDateTime.of(localDateTime18, zoneOffset32);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = locale48.toLanguageTag();
        java.lang.String str50 = chronoField47.getDisplayName(locale48);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap51 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology52 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean53 = strMapMap51.containsKey((java.lang.Object) isoChronology52);
        java.time.chrono.IsoEra isoEra54 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate57 = isoChronology52.dateYearDay((java.time.chrono.Era) isoEra54, (-1), 10);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.wrap(byteArray60, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology64 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean65 = byteBuffer63.equals((java.lang.Object) isoChronology64);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap66 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology67 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean68 = strMapMap66.containsKey((java.lang.Object) isoChronology67);
        java.time.chrono.IsoEra isoEra69 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate72 = isoChronology67.dateYearDay((java.time.chrono.Era) isoEra69, (-1), 10);
        int int74 = isoChronology64.prolepticYear((java.time.chrono.Era) isoEra69, (int) '#');
        java.time.LocalDate localDate77 = isoChronology52.dateYearDay((java.time.chrono.Era) isoEra69, (int) (byte) 0, 2);
        boolean boolean78 = chronoField47.isSupportedBy((java.time.temporal.TemporalAccessor) localDate77);
        boolean boolean79 = chronoField47.isDateBased();
        boolean boolean80 = localDateTime18.isSupported((java.time.temporal.TemporalField) chronoField47);
        long long81 = offsetDateTime0.getLong((java.time.temporal.TemporalField) chronoField47);
        int int82 = offsetDateTime0.getSecond();
        java.time.temporal.ChronoField chronoField83 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.ValueRange valueRange84 = offsetDateTime0.range((java.time.temporal.TemporalField) chronoField83);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(isoChronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(isoChronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + isoEra12 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra12.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-34) + "'", int17 == (-34));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(temporal19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + month25 + "' != '" + java.time.Month.JANUARY + "'", month25.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.JANUARY + "'", month26.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month27 + "' != '" + java.time.Month.JANUARY + "'", month27.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNotNull(clock44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField47.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "en-GB" + "'", str49, "en-GB");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "AlignedWeekOfYear" + "'", str50, "AlignedWeekOfYear");
        org.junit.Assert.assertNotNull(isoChronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + isoEra54 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra54.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(isoChronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(isoChronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + isoEra69 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra69.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-34) + "'", int74 == (-34));
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + chronoField83 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField83.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(valueRange84);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition25 = null;
        boolean boolean26 = zoneOffsetTransitionList3.add(zoneOffsetTransition25);
        java.lang.Object[] objArray27 = zoneOffsetTransitionList3.toArray();
        java.lang.String[] strArray28 = java.util.Locale.getISOLanguages();
        java.lang.String[] strArray29 = zoneOffsetTransitionList3.toArray(strArray28);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream30 = zoneOffsetTransitionList3.stream();
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream31 = zoneOffsetTransitionStream30.distinct();
        java.lang.Object[] objArray32 = zoneOffsetTransitionStream31.toArray();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[null]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream30);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[null]");
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double[] doubleArray9 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double10 = univariateStatistic3.evaluate(doubleArray9);
        java.util.stream.DoubleStream doubleStream11 = java.util.stream.DoubleStream.of(doubleArray9);
        java.util.function.DoublePredicate doublePredicate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = doubleStream11.anyMatch(doublePredicate12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleStream11);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.minus(duration17);
        java.time.OffsetTime offsetTime22 = offsetTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray29 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, zoneOffsetTransitionArray29);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray32 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33, zoneOffsetTransitionRuleArray32);
        java.time.zone.ZoneRules zoneRules35 = java.time.zone.ZoneRules.of(zoneOffset24, zoneOffset25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33);
        java.time.OffsetTime offsetTime36 = localTime23.atOffset(zoneOffset24);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange38 = offsetTime36.range((java.time.temporal.TemporalField) chronoField37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal41 = null;
        java.time.temporal.Temporal temporal42 = duration40.subtractFrom(temporal41);
        long long43 = duration40.toDays();
        java.time.Duration duration44 = duration39.minus(duration40);
        java.time.OffsetTime offsetTime45 = offsetTime36.minus((java.time.temporal.TemporalAmount) duration40);
        boolean boolean46 = offsetTime22.isAfter(offsetTime36);
        java.time.OffsetTime offsetTime48 = offsetTime22.withNano((int) '#');
        java.time.LocalTime localTime49 = offsetTime22.toLocalTime();
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int52 = chronoField50.checkValidIntValue((long) 59);
        boolean boolean53 = localTime49.isSupported((java.time.temporal.TemporalField) chronoField50);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNull(temporal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField50.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = java.time.OffsetTime.of(localTime0, zoneOffset2);
        java.time.OffsetTime offsetTime15 = offsetTime13.minusHours(0L);
        java.time.LocalTime localTime16 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray19 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList20 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, zoneOffsetTransitionArray19);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray22 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList23 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, zoneOffsetTransitionArray22);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray25 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26, zoneOffsetTransitionRuleArray25);
        java.time.zone.ZoneRules zoneRules28 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26);
        java.time.OffsetTime offsetTime29 = localTime16.atOffset(zoneOffset17);
        java.time.temporal.Temporal temporal30 = offsetTime13.adjustInto((java.time.temporal.Temporal) offsetTime29);
        java.time.ZoneId zoneId31 = java.time.ZoneId.systemDefault();
        java.lang.String str32 = zoneId31.getId();
        java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.now(zoneId31);
        java.time.ZoneId zoneId34 = java.time.ZoneId.systemDefault();
        java.lang.String str35 = zoneId34.getId();
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime33.withZoneSameInstant(zoneId34);
        java.time.ZoneId zoneId37 = java.time.ZoneId.systemDefault();
        java.lang.String str38 = zoneId37.getId();
        java.time.ZonedDateTime zonedDateTime39 = java.time.ZonedDateTime.now(zoneId37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime39.withYear((int) (short) 1);
        boolean boolean42 = zonedDateTime36.equals((java.lang.Object) zonedDateTime41);
        java.time.ZonedDateTime zonedDateTime44 = zonedDateTime36.minusMonths((long) (byte) -1);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.lang.String str48 = zoneOffset47.getId();
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset47);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.MAX;
        java.lang.String str53 = zoneOffset52.getId();
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset52);
        boolean boolean55 = localDateTime49.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime54);
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.MAX;
        java.lang.String str59 = zoneOffset58.getId();
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset58);
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.MAX;
        java.lang.String str64 = zoneOffset63.getId();
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset63);
        boolean boolean66 = localDateTime60.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime65);
        java.time.format.DateTimeFormatter dateTimeFormatter67 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str68 = localDateTime65.format(dateTimeFormatter67);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int70 = localDateTime65.get((java.time.temporal.TemporalField) chronoField69);
        boolean boolean71 = localDateTime54.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime65);
        java.lang.String str72 = localDateTime65.toString();
        java.time.temporal.ChronoField chronoField73 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange74 = chronoField73.range();
        boolean boolean75 = localDateTime65.isSupported((java.time.temporal.TemporalField) chronoField73);
        java.time.temporal.ValueRange valueRange76 = zonedDateTime36.range((java.time.temporal.TemporalField) chronoField73);
        java.time.Duration duration77 = java.time.Duration.between(temporal30, (java.time.temporal.Temporal) zonedDateTime36);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(offsetTime29);
        org.junit.Assert.assertNotNull(temporal30);
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Etc/UTC" + "'", str32, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Etc/UTC" + "'", str35, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Etc/UTC" + "'", str38, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+18:00" + "'", str48, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+18:00" + "'", str53, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+18:00" + "'", str59, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+18:00" + "'", str64, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str68, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField69.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str72, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertTrue("'" + chronoField73 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField73.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(valueRange76);
        org.junit.Assert.assertNotNull(duration77);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.util.Map<java.time.temporal.TemporalField, java.lang.Long> temporalFieldMap1 = null;
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate7 = isoChronology2.dateYearDay((java.time.chrono.Era) isoEra4, 0, 16);
        java.time.LocalTime localTime8 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime9 = localDate7.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate7.withMonth(1);
        java.time.Duration duration12 = java.time.Duration.ZERO;
        java.time.Duration duration13 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal14 = null;
        java.time.temporal.Temporal temporal15 = duration13.subtractFrom(temporal14);
        long long16 = duration13.toDays();
        java.time.Duration duration17 = duration12.plus(duration13);
        java.time.LocalDate localDate18 = localDate11.minus((java.time.temporal.TemporalAmount) duration12);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.lang.String str22 = zoneOffset21.getId();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset21);
        java.time.LocalTime localTime24 = localDateTime23.toLocalTime();
        java.time.temporal.Temporal temporal25 = localDate18.adjustInto((java.time.temporal.Temporal) localDateTime23);
        java.time.LocalDateTime localDateTime27 = localDateTime23.minusDays((long) (-1));
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.lang.String str31 = zoneOffset30.getId();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset30);
        java.time.LocalTime localTime33 = localDateTime32.toLocalTime();
        boolean boolean34 = localDateTime27.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.lang.String str38 = zoneOffset37.getId();
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.lang.String str43 = zoneOffset42.getId();
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset42);
        boolean boolean45 = localDateTime39.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.MAX;
        java.lang.String str49 = zoneOffset48.getId();
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset48);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.MAX;
        java.lang.String str54 = zoneOffset53.getId();
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset53);
        boolean boolean56 = localDateTime50.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        java.time.format.DateTimeFormatter dateTimeFormatter57 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str58 = localDateTime55.format(dateTimeFormatter57);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int60 = localDateTime55.get((java.time.temporal.TemporalField) chronoField59);
        boolean boolean61 = localDateTime44.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        java.lang.String str62 = localDateTime55.toString();
        java.time.chrono.Chronology chronology63 = localDateTime55.getChronology();
        java.time.LocalDateTime localDateTime65 = localDateTime55.plusYears((long) (short) 0);
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.MAX;
        java.lang.String str69 = zoneOffset68.getId();
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset68);
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray73 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList74 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList74, zoneOffsetTransitionArray73);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray76 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList77 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList77, zoneOffsetTransitionArray76);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray79 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList80 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList80, zoneOffsetTransitionRuleArray79);
        java.time.zone.ZoneRules zoneRules82 = java.time.zone.ZoneRules.of(zoneOffset71, zoneOffset72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList74, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList77, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList80);
        int int83 = zoneOffset68.compareTo(zoneOffset71);
        long long84 = localDateTime65.toEpochSecond(zoneOffset71);
        java.lang.String str85 = zoneOffset71.getId();
        java.time.ZonedDateTime zonedDateTime86 = java.time.ZonedDateTime.of(localDateTime32, (java.time.ZoneId) zoneOffset71);
        java.time.format.ResolverStyle resolverStyle87 = java.time.format.ResolverStyle.STRICT;
        java.time.temporal.TemporalAccessor temporalAccessor88 = chronoField0.resolve(temporalFieldMap1, (java.time.temporal.TemporalAccessor) zoneOffset71, resolverStyle87);
        java.time.Clock clock89 = java.time.Clock.systemUTC();
        java.time.ZonedDateTime zonedDateTime90 = java.time.ZonedDateTime.now(clock89);
        boolean boolean91 = chronoField0.isSupportedBy((java.time.temporal.TemporalAccessor) zonedDateTime90);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra4.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNull(temporal15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+18:00" + "'", str22, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(temporal25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+18:00" + "'", str31, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+18:00" + "'", str38, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+18:00" + "'", str43, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+18:00" + "'", str49, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+18:00" + "'", str54, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str58, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField59.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str62, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+18:00" + "'", str69, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(zoneRules82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 97L + "'", long84 == 97L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertTrue("'" + resolverStyle87 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle87.equals(java.time.format.ResolverStyle.STRICT));
        org.junit.Assert.assertNull(temporalAccessor88);
        org.junit.Assert.assertNotNull(clock89);
        org.junit.Assert.assertNotNull(zonedDateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        long long10 = localDate9.toEpochDay();
        java.time.chrono.IsoChronology isoChronology11 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra13 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate16 = isoChronology11.dateYearDay((java.time.chrono.Era) isoEra13, 0, 16);
        java.time.LocalTime localTime17 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime18 = localDate16.atTime(localTime17);
        java.time.LocalDate localDate20 = localDate16.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod21 = localDate9.until((java.time.chrono.ChronoLocalDate) localDate20);
        java.time.LocalDate localDate23 = localDate9.plusDays((long) (short) 0);
        java.time.LocalDate localDate25 = localDate23.minusYears((long) 23);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-719147L) + "'", long10 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology11);
        org.junit.Assert.assertTrue("'" + isoEra13 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra13.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronoPeriod21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        java.net.NetworkInterface networkInterface3 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        java.time.Month month4 = java.time.Month.JANUARY;
        java.time.Month month5 = month4.firstMonthOfQuarter();
        java.time.Month month6 = month5.firstMonthOfQuarter();
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.lang.String str10 = zoneOffset9.getId();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset9);
        java.time.LocalTime localTime12 = localDateTime11.toLocalTime();
        java.time.LocalDate localDate13 = localDateTime11.toLocalDate();
        java.time.format.DateTimeFormatter dateTimeFormatter14 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.format.DecimalStyle decimalStyle15 = java.time.format.DecimalStyle.ofDefaultLocale();
        java.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withDecimalStyle(decimalStyle15);
        java.lang.String str17 = localDate13.format(dateTimeFormatter14);
        java.time.temporal.Temporal temporal18 = month5.adjustInto((java.time.temporal.Temporal) localDate13);
        boolean boolean19 = inetAddress0.equals((java.lang.Object) month5);
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(networkInterface3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.JANUARY + "'", month4.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month5 + "' != '" + java.time.Month.JANUARY + "'", month5.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month6 + "' != '" + java.time.Month.JANUARY + "'", month6.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+18:00" + "'", str10, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(decimalStyle15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long3 = timeUnit1.toMinutes(1645434849L);
        long long5 = timeUnit1.toNanos((long) 9);
        long long7 = timeUnit1.toMillis((long) 9);
        long long9 = timeUnit1.toMillis((long) 2);
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from((long) 1, timeUnit1);
        long long11 = fileTime10.toMillis();
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 27L + "'", long3 == 27L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 9000L + "'", long5 == 9000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        double double3 = descriptiveStatistics0.getSkewness();
        long long4 = descriptiveStatistics0.getN();
        double double5 = descriptiveStatistics0.getSkewness();
        double double6 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = null;
        descriptiveStatistics0.setMaxImpl(univariateStatistic7);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics9.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics9.getGeometricMeanImpl();
        double[] doubleArray18 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double19 = univariateStatistic12.evaluate(doubleArray18);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics20.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics20.getGeometricMeanImpl();
        double[] doubleArray29 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double30 = univariateStatistic23.evaluate(doubleArray29);
        double double31 = univariateStatistic12.evaluate(doubleArray29);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic12);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = descriptiveStatistics0.getMax();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        java.time.Duration duration1 = java.time.Duration.ofSeconds(97L);
        int int2 = duration1.getNano();
        java.time.Duration duration4 = duration1.withSeconds(1645434854L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(duration4);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics29 = new java.util.DoubleSummaryStatistics();
        double double30 = doubleSummaryStatistics29.getMin();
        boolean boolean31 = localDateTime9.equals((java.lang.Object) double30);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray34 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, zoneOffsetTransitionArray34);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray40 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList41, zoneOffsetTransitionRuleArray40);
        java.time.zone.ZoneRules zoneRules43 = java.time.zone.ZoneRules.of(zoneOffset32, zoneOffset33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList41);
        boolean boolean44 = zoneRules43.isFixedOffset();
        java.time.Instant instant45 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition46 = zoneRules43.previousTransition(instant45);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList47 = zoneRules43.getTransitionRules();
        java.time.Instant instant48 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition49 = zoneRules43.previousTransition(instant48);
        java.time.Instant instant50 = java.time.Instant.MAX;
        java.time.Instant instant52 = instant50.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset53 = zoneRules43.getOffset(instant52);
        java.time.Instant instant54 = localDateTime9.toInstant(zoneOffset53);
        java.time.Period period56 = java.time.Period.ofYears((int) '\000');
        java.time.chrono.ChronoPeriod chronoPeriod57 = period56.normalized();
        java.time.Month month58 = java.time.Month.JANUARY;
        java.time.Month month59 = month58.firstMonthOfQuarter();
        java.time.Month month60 = month59.firstMonthOfQuarter();
        boolean boolean61 = period56.equals((java.lang.Object) month59);
        java.time.Month month63 = month59.plus((long) 256);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant64 = instant54.with((java.time.temporal.TemporalAdjuster) month59);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MonthOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals(doubleSummaryStatistics29.toString(), "DoubleSummaryStatistics{count=0, sum=0,000000, min=Infinity, average=0,000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition46);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList47);
        org.junit.Assert.assertNull(zoneOffsetTransition49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronoPeriod57);
        org.junit.Assert.assertTrue("'" + month58 + "' != '" + java.time.Month.JANUARY + "'", month58.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month59 + "' != '" + java.time.Month.JANUARY + "'", month59.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month60 + "' != '" + java.time.Month.JANUARY + "'", month60.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + month63 + "' != '" + java.time.Month.MAY + "'", month63.equals(java.time.Month.MAY));
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal1 = null;
        java.time.temporal.Temporal temporal2 = duration0.subtractFrom(temporal1);
        long long3 = duration0.toDays();
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration0.addTo(temporal4);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, 0, 16);
        java.time.LocalTime localTime12 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime13 = localDate11.atTime(localTime12);
        java.time.LocalTime localTime15 = localTime12.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean18 = strMapMap16.containsKey((java.lang.Object) isoChronology17);
        java.time.chrono.IsoEra isoEra19 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate22 = isoChronology17.dateYearDay((java.time.chrono.Era) isoEra19, (-1), 10);
        java.time.Duration duration23 = java.time.Duration.ZERO;
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal25 = null;
        java.time.temporal.Temporal temporal26 = duration24.subtractFrom(temporal25);
        long long27 = duration24.toDays();
        java.time.Duration duration28 = duration23.plus(duration24);
        long long29 = duration24.toDays();
        java.lang.String str30 = duration24.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate31 = localDate22.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.LocalTime localTime32 = localTime12.minus((java.time.temporal.TemporalAmount) duration24);
        java.time.temporal.Temporal temporal33 = duration0.addTo((java.time.temporal.Temporal) localTime12);
        java.time.LocalTime localTime35 = localTime12.minusHours(100L);
        java.time.LocalTime localTime37 = localTime12.plusMinutes((-719147L));
        int int38 = localTime12.getHour();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNull(temporal2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + isoEra19 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra19.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNull(temporal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0S" + "'", str30, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 23 + "'", int38 == 23);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHoursMinutesSeconds((-2022), 16, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value -2022 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        java.util.Date date5 = new java.util.Date(171, (-34), (int) (short) 100, 256, 13);
        int int6 = date5.getYear();
        java.security.cert.CertPath certPath7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.Timestamp timestamp8 = new java.security.Timestamp(date5, certPath7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Mon Jun 18 16:13:00 UTC 2068");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 168 + "'", int6 == 168);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange2 = java.time.temporal.ValueRange.of((long) 9, (-719147L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value must be less than maximum value");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalDate localDate20 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra14, 120, (int) '-');
        java.time.LocalTime localTime21 = java.time.LocalTime.MIDNIGHT;
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime22 = localDate20.atTime(localTime21);
        int int23 = localDate20.getYear();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-119) + "'", int23 == (-119));
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray15 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList16 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, zoneOffsetTransitionArray15);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray18 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, zoneOffsetTransitionArray18);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray21 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22, zoneOffsetTransitionRuleArray21);
        java.time.zone.ZoneRules zoneRules24 = java.time.zone.ZoneRules.of(zoneOffset13, zoneOffset14, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray30 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, zoneOffsetTransitionArray30);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray33 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34, zoneOffsetTransitionRuleArray33);
        java.time.zone.ZoneRules zoneRules36 = java.time.zone.ZoneRules.of(zoneOffset25, zoneOffset26, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34);
        boolean boolean37 = zoneOffsetTransitionList16.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray43 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, zoneOffsetTransitionArray43);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray46 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList47 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList47, zoneOffsetTransitionRuleArray46);
        java.time.zone.ZoneRules zoneRules49 = java.time.zone.ZoneRules.of(zoneOffset38, zoneOffset39, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList47);
        int int51 = zoneOffsetTransitionList44.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray54 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList55 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, zoneOffsetTransitionArray54);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray60 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList61, zoneOffsetTransitionRuleArray60);
        java.time.zone.ZoneRules zoneRules63 = java.time.zone.ZoneRules.of(zoneOffset52, zoneOffset53, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList61);
        java.time.zone.ZoneRules zoneRules64 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList61);
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.MAX;
        java.lang.String str68 = zoneOffset67.getId();
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset67);
        int int70 = zoneOffset1.compareTo(zoneOffset67);
        java.time.ZoneId zoneId71 = java.time.ZoneId.systemDefault();
        java.lang.String str72 = zoneId71.getId();
        java.time.ZonedDateTime zonedDateTime73 = java.time.ZonedDateTime.now(zoneId71);
        java.time.ZoneId zoneId74 = java.time.ZoneId.systemDefault();
        java.lang.String str75 = zoneId74.getId();
        java.time.ZonedDateTime zonedDateTime76 = zonedDateTime73.withZoneSameInstant(zoneId74);
        java.lang.String str77 = zonedDateTime76.toString();
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale79 = java.util.Locale.UK;
        java.lang.String str80 = locale79.toLanguageTag();
        java.lang.String str81 = chronoField78.getDisplayName(locale79);
        long long82 = zonedDateTime76.getLong((java.time.temporal.TemporalField) chronoField78);
        java.util.Locale locale83 = java.util.Locale.ITALIAN;
        java.util.Locale locale84 = java.util.Locale.ITALIAN;
        java.lang.String str85 = locale83.getDisplayName(locale84);
        java.lang.String str86 = chronoField78.getDisplayName(locale83);
        boolean boolean87 = zoneOffset67.isSupported((java.time.temporal.TemporalField) chronoField78);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(zoneRules64);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+18:00" + "'", str68, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(zoneId71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Etc/UTC" + "'", str72, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertNotNull(zoneId74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Etc/UTC" + "'", str75, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-21T09:23:11.790Z[Etc/UTC]" + "'", str77, "2022-02-21T09:23:11.790Z[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField78.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "en-GB" + "'", str80, "en-GB");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "AlignedWeekOfYear" + "'", str81, "AlignedWeekOfYear");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 8L + "'", long82 == 8L);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "it");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "italiano" + "'", str85, "italiano");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "AlignedWeekOfYear" + "'", str86, "AlignedWeekOfYear");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.getHostName();
        boolean boolean2 = inetAddress0.isMulticastAddress();
        java.lang.String str3 = inetAddress0.getHostName();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808" + "'", str1, "599b081c1808");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "599b081c1808" + "'", str3, "599b081c1808");
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray0 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList1 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList1, zoneOffsetTransitionArray0);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream3 = zoneOffsetTransitionList1.stream();
        java.util.Optional<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionOptional4 = zoneOffsetTransitionStream3.findFirst();
        java.lang.String str5 = zoneOffsetTransitionOptional4.toString();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition6 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition7 = zoneOffsetTransitionOptional4.orElse(zoneOffsetTransition6);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionOptional4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional.empty" + "'", str5, "Optional.empty");
        org.junit.Assert.assertNull(zoneOffsetTransition7);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj3 = charBuffer2.array();
        java.nio.CharBuffer charBuffer5 = charBuffer2.append('.');
        java.lang.String str6 = charBuffer2.toString();
        java.nio.CharBuffer charBuffer8 = charBuffer2.append('a');
        int int9 = charBuffer2.arrayOffset();
        java.time.temporal.TemporalQuery[] temporalQueryArray11 = new java.time.temporal.TemporalQuery[0];
        @SuppressWarnings("unchecked")
        java.time.temporal.TemporalQuery<?>[] wildcardTemporalQueryArray12 = (java.time.temporal.TemporalQuery<?>[]) temporalQueryArray11;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor13 = dateTimeFormatter0.parseBest((java.lang.CharSequence) charBuffer2, (java.time.temporal.TemporalQuery<?>[]) temporalQueryArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: At least two queries must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str6, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(temporalQueryArray11);
        org.junit.Assert.assertNotNull(wildcardTemporalQueryArray12);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Fri");
        boolean boolean2 = printStream1.checkError();
        printStream1.println(false);
        printStream1.println('.');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.parse((java.lang.CharSequence) "23:59:59.999999999+18:00");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '23:59:59.999999999+18:00' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.time.format.DecimalStyle decimalStyle1 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle3 = decimalStyle1.withNegativeSign('-');
        char char4 = decimalStyle1.getPositiveSign();
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle1.withPositiveSign('+');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(decimalStyle1);
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '+' + "'", char4 == '+');
        org.junit.Assert.assertNotNull(decimalStyle6);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        java.nio.charset.CoderResult coderResult1 = java.nio.charset.CoderResult.malformedForLength(10);
        int int2 = coderResult1.length();
        boolean boolean3 = coderResult1.isOverflow();
        // The following exception was thrown during execution in test generation
        try {
            coderResult1.throwException();
            org.junit.Assert.fail("Expected exception of type java.nio.charset.MalformedInputException; message: Input length = 10");
        } catch (java.nio.charset.MalformedInputException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(coderResult1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.util.stream.LongStream longStream9 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator10 = java.util.function.LongUnaryOperator.identity();
        long long12 = longUnaryOperator10.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream13 = longStream9.map(longUnaryOperator10);
        boolean boolean14 = longStream13.isParallel();
        boolean boolean15 = longStream13.isParallel();
        long[] longArray16 = longStream13.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer17 = longBuffer6.get(longArray16);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longStream9);
        org.junit.Assert.assertNotNull(longUnaryOperator10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 7187392471159151072L + "'", long12 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]");
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate3 = java.time.LocalDate.ofYearDay((int) 'u', 16);
        java.time.Period period4 = java.time.Period.between(localDate0, localDate3);
        java.time.Duration duration7 = java.time.Duration.ofSeconds((long) 1024, (long) 64);
        java.time.Duration duration9 = duration7.minusMillis(0L);
        java.time.ZoneId zoneId10 = java.time.ZoneId.systemDefault();
        java.lang.String str11 = zoneId10.getId();
        java.time.ZonedDateTime zonedDateTime12 = java.time.ZonedDateTime.now(zoneId10);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime12.withYear((int) (short) 1);
        java.time.LocalTime localTime15 = zonedDateTime14.toLocalTime();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap17 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology18 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean19 = strMapMap17.containsKey((java.lang.Object) isoChronology18);
        java.time.Duration duration20 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal21 = null;
        java.time.temporal.Temporal temporal22 = duration20.subtractFrom(temporal21);
        long long23 = duration20.toDays();
        boolean boolean24 = strMapMap17.contains((java.lang.Object) duration20);
        java.lang.Cloneable cloneable25 = strMapMap16.get((java.lang.Object) duration20);
        java.time.Duration duration26 = java.time.Duration.ZERO;
        java.time.Duration duration27 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal28 = null;
        java.time.temporal.Temporal temporal29 = duration27.subtractFrom(temporal28);
        long long30 = duration27.toDays();
        java.time.Duration duration31 = duration26.plus(duration27);
        long long32 = duration27.toDays();
        java.time.Duration duration33 = duration20.plus(duration27);
        java.time.LocalTime localTime34 = localTime15.plus((java.time.temporal.TemporalAmount) duration20);
        java.time.Duration duration35 = duration7.minus(duration20);
        java.time.chrono.ChronoLocalDate chronoLocalDate36 = localDate3.plus((java.time.temporal.TemporalAmount) duration20);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Etc/UTC" + "'", str11, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(isoChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNull(temporal22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(cloneable25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNull(temporal29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(chronoLocalDate36);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.getHostName();
        java.lang.String str2 = inetAddress0.getCanonicalHostName();
        boolean boolean3 = inetAddress0.isSiteLocalAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808" + "'", str1, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "599b081c1808" + "'", str2, "599b081c1808");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (byte) 1);
        java.util.stream.IntStream intStream2 = intStream1.distinct();
        boolean boolean3 = intStream2.isParallel();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate(16);
        int int6 = charBuffer5.limit();
        java.util.stream.IntStream intStream7 = charBuffer5.chars();
        java.util.LongSummaryStatistics longSummaryStatistics8 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream11 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics12 = longStream11.summaryStatistics();
        java.util.function.IntConsumer intConsumer13 = longSummaryStatistics8.andThen((java.util.function.IntConsumer) longSummaryStatistics12);
        java.util.stream.IntStream intStream14 = intStream7.peek((java.util.function.IntConsumer) longSummaryStatistics8);
        java.util.stream.IntStream intStream15 = java.util.stream.IntStream.concat(intStream2, intStream14);
        java.util.OptionalInt optionalInt16 = intStream15.min();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=16, sum=0, min=0, average=0,000000, max=0}");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(longSummaryStatistics12);
        org.junit.Assert.assertEquals(longSummaryStatistics12.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer13);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertNotNull(intStream15);
        org.junit.Assert.assertNotNull(optionalInt16);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        java.util.OptionalDouble optionalDouble0 = java.util.OptionalDouble.empty();
        org.junit.Assert.assertNotNull(optionalDouble0);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        boolean boolean12 = zoneRules11.isFixedOffset();
        java.time.Instant instant13 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition14 = zoneRules11.previousTransition(instant13);
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra17 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate20 = isoChronology15.dateYearDay((java.time.chrono.Era) isoEra17, 0, 16);
        java.time.LocalTime localTime21 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime22 = localDate20.atTime(localTime21);
        java.time.LocalDate localDate24 = localDate20.withMonth(1);
        java.time.Duration duration25 = java.time.Duration.ZERO;
        java.time.Duration duration26 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal27 = null;
        java.time.temporal.Temporal temporal28 = duration26.subtractFrom(temporal27);
        long long29 = duration26.toDays();
        java.time.Duration duration30 = duration25.plus(duration26);
        java.time.LocalDate localDate31 = localDate24.minus((java.time.temporal.TemporalAmount) duration25);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.lang.String str35 = zoneOffset34.getId();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset34);
        java.time.LocalTime localTime37 = localDateTime36.toLocalTime();
        java.time.temporal.Temporal temporal38 = localDate31.adjustInto((java.time.temporal.Temporal) localDateTime36);
        java.time.LocalDateTime localDateTime40 = localDateTime36.minusDays((long) (-1));
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.lang.String str44 = zoneOffset43.getId();
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset43);
        java.time.LocalTime localTime46 = localDateTime45.toLocalTime();
        boolean boolean47 = localDateTime40.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime45);
        java.time.LocalDateTime localDateTime49 = localDateTime45.withDayOfMonth(7);
        java.time.LocalTime localTime50 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray53 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList54 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, zoneOffsetTransitionArray53);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray56 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList57 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList57, zoneOffsetTransitionArray56);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray59 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList60 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList60, zoneOffsetTransitionRuleArray59);
        java.time.zone.ZoneRules zoneRules62 = java.time.zone.ZoneRules.of(zoneOffset51, zoneOffset52, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList57, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList60);
        java.time.OffsetTime offsetTime63 = localTime50.atOffset(zoneOffset51);
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.MAX;
        java.lang.String str67 = zoneOffset66.getId();
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset66);
        java.time.OffsetTime offsetTime69 = offsetTime63.withOffsetSameLocal(zoneOffset66);
        boolean boolean70 = zoneRules11.isValidOffset(localDateTime49, zoneOffset66);
        java.time.Period period72 = java.time.Period.ofYears((int) '\000');
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList73 = period72.getUnits();
        java.time.LocalDateTime localDateTime74 = localDateTime49.plus((java.time.temporal.TemporalAmount) period72);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition14);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertTrue("'" + isoEra17 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra17.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNull(temporal28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+18:00" + "'", str35, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(temporal38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+18:00" + "'", str44, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNotNull(offsetTime63);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+18:00" + "'", str67, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(offsetTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(temporalUnitList73);
        org.junit.Assert.assertNotNull(localDateTime74);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.LocalDate localDate7 = localDate5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.LocalDateTime localDateTime8 = localDate7.atStartOfDay();
        java.time.LocalDate localDate10 = localDate7.plusYears((long) (byte) -1);
        java.time.LocalDate localDate12 = localDate10.withDayOfYear((int) (short) 1);
        java.time.ZoneId zoneId13 = java.time.ZoneId.systemDefault();
        java.lang.String str14 = zoneId13.getId();
        java.time.ZonedDateTime zonedDateTime15 = java.time.ZonedDateTime.now(zoneId13);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit18 = null;
        boolean boolean19 = zonedDateTime15.isSupported(temporalUnit18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange21 = zonedDateTime15.range((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        long long24 = chronoField22.getFrom((java.time.temporal.TemporalAccessor) localTime23);
        boolean boolean25 = zonedDateTime15.isSupported((java.time.temporal.TemporalField) chronoField22);
        boolean boolean26 = chronoField22.isDateBased();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = localDate12.getLong((java.time.temporal.TemporalField) chronoField22);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: ClockHourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField20.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 23L + "'", long24 == 23L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(168, (float) 11);
        int int3 = resizableDoubleArray2.getNumElements();
        int int4 = resizableDoubleArray2.getNumElements();
        resizableDoubleArray2.addElement((double) 31);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.time.Instant instant2 = fileTime1.toInstant();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal5 = null;
        java.time.temporal.Temporal temporal6 = duration4.subtractFrom(temporal5);
        long long7 = duration4.toDays();
        java.time.Duration duration8 = duration3.plus(duration4);
        java.time.Duration duration9 = java.time.Duration.from((java.time.temporal.TemporalAmount) duration3);
        long long10 = duration3.toHours();
        java.time.Instant instant11 = instant2.minus((java.time.temporal.TemporalAmount) duration3);
        int int12 = instant2.getNano();
        java.util.Date date13 = java.util.Date.from(instant2);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNull(temporal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000000 + "'", int12 == 10000000);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.time.Instant instant2 = fileTime1.toInstant();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal5 = null;
        java.time.temporal.Temporal temporal6 = duration4.subtractFrom(temporal5);
        long long7 = duration4.toDays();
        java.time.Duration duration8 = duration3.plus(duration4);
        java.time.Duration duration9 = java.time.Duration.from((java.time.temporal.TemporalAmount) duration3);
        long long10 = duration3.toHours();
        java.time.Instant instant11 = instant2.minus((java.time.temporal.TemporalAmount) duration3);
        java.time.ZoneId zoneId12 = java.time.ZoneId.systemDefault();
        java.lang.String str13 = zoneId12.getId();
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.now(zoneId12);
        java.time.ZoneId zoneId15 = java.time.ZoneId.systemDefault();
        java.lang.String str16 = zoneId15.getId();
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime14.withZoneSameInstant(zoneId15);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.minusYears((long) (short) 0);
        java.time.LocalDate localDate21 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology22 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra24 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate27 = isoChronology22.dateYearDay((java.time.chrono.Era) isoEra24, 0, 16);
        java.time.LocalTime localTime28 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime29 = localDate27.atTime(localTime28);
        java.time.LocalDate localDate31 = localDate27.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod32 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate21, (java.time.chrono.ChronoLocalDate) localDate27);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray38 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, zoneOffsetTransitionArray38);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray41 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList42 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList42, zoneOffsetTransitionRuleArray41);
        java.time.zone.ZoneRules zoneRules44 = java.time.zone.ZoneRules.of(zoneOffset33, zoneOffset34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList42);
        java.time.Clock clock45 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset33);
        java.time.format.TextStyle textStyle46 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = zoneOffset33.getDisplayName(textStyle46, locale47);
        java.time.ZonedDateTime zonedDateTime49 = localDate21.atStartOfDay((java.time.ZoneId) zoneOffset33);
        boolean boolean50 = zonedDateTime17.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime49);
        java.time.temporal.ChronoField chronoField51 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale54 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = chronoField51.getDisplayName(locale54);
        long long57 = zonedDateTime49.getLong((java.time.temporal.TemporalField) chronoField51);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = instant11.get((java.time.temporal.TemporalField) chronoField51);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: ClockHourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNull(temporal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(isoChronology22);
        org.junit.Assert.assertTrue("'" + isoEra24 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra24.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronoPeriod32);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(clock45);
        org.junit.Assert.assertTrue("'" + textStyle46 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle46.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+18:00" + "'", str48, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + chronoField51 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField51.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale54.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "599b081c1808" + "'", str55, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ClockHourOfDay" + "'", str56, "ClockHourOfDay");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 24L + "'", long57 == 24L);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        byte[] byteArray5 = new byte[] { (byte) 100, (byte) 0, (byte) -1, (byte) 0, (byte) 100 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        float float8 = byteBuffer6.getFloat((int) (short) 0);
        int int9 = byteBuffer6.arrayOffset();
        // The following exception was thrown during execution in test generation
        try {
            byte byte11 = byteBuffer6.get((int) '.');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 46");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 0, -1, 0, 100]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 9.518232E21f + "'", float8 == 9.518232E21f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate5 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset4);
        java.time.Month month7 = java.time.Month.JANUARY;
        java.time.Month month8 = month7.firstMonthOfQuarter();
        java.time.Month month9 = month8.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery10 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period11 = month8.query(periodTemporalQuery10);
        java.time.Period period12 = zoneOffset4.query(periodTemporalQuery10);
        java.time.Period period13 = localDateTime0.query(periodTemporalQuery10);
        java.time.Period period15 = period13.minusMonths((long) 100);
        int int16 = period13.getDays();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.JANUARY + "'", month7.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.JANUARY + "'", month8.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month9 + "' != '" + java.time.Month.JANUARY + "'", month9.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean2 = instant0.isSupported((java.time.temporal.TemporalField) chronoField1);
        java.time.Instant instant4 = instant0.plusNanos((long) 9);
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray8 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, zoneOffsetTransitionArray8);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray11 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, zoneOffsetTransitionArray11);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray14 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15, zoneOffsetTransitionRuleArray14);
        java.time.zone.ZoneRules zoneRules17 = java.time.zone.ZoneRules.of(zoneOffset6, zoneOffset7, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        boolean boolean42 = zoneOffsetTransitionList21.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray45 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, zoneOffsetTransitionArray45);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray51 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52, zoneOffsetTransitionRuleArray51);
        java.time.zone.ZoneRules zoneRules54 = java.time.zone.ZoneRules.of(zoneOffset43, zoneOffset44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52);
        int int56 = zoneOffsetTransitionList49.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray59 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList60 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, zoneOffsetTransitionArray59);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray62 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList63 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, zoneOffsetTransitionArray62);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray65 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList66 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66, zoneOffsetTransitionRuleArray65);
        java.time.zone.ZoneRules zoneRules68 = java.time.zone.ZoneRules.of(zoneOffset57, zoneOffset58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66);
        java.time.zone.ZoneRules zoneRules69 = java.time.zone.ZoneRules.of(zoneOffset5, zoneOffset6, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66);
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.MAX;
        java.lang.String str73 = zoneOffset72.getId();
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset72);
        int int75 = zoneOffset6.compareTo(zoneOffset72);
        java.time.OffsetDateTime offsetDateTime76 = instant4.atOffset(zoneOffset72);
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofTotalSeconds(13);
        java.time.OffsetDateTime offsetDateTime79 = instant4.atOffset(zoneOffset78);
        java.time.format.TextStyle textStyle80 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale81 = java.util.Locale.CHINESE;
        java.util.Locale locale82 = java.util.Locale.US;
        java.util.Locale locale83 = java.util.Locale.ITALIAN;
        java.lang.String str84 = locale82.getDisplayCountry(locale83);
        java.util.Set<java.lang.String> strSet85 = locale82.getUnicodeLocaleAttributes();
        java.lang.String str87 = locale82.getExtension('x');
        java.lang.String str88 = locale81.getDisplayLanguage(locale82);
        java.lang.String str89 = zoneOffset78.getDisplayName(textStyle80, locale81);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField1.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(zoneRules68);
        org.junit.Assert.assertNotNull(zoneRules69);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+18:00" + "'", str73, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertTrue("'" + textStyle80 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle80.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "it");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Stati Uniti" + "'", str84, "Stati Uniti");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Chinese" + "'", str88, "Chinese");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+00:00:13" + "'", str89, "+00:00:13");
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        boolean boolean5 = file2.delete();
        java.net.URI uRI6 = file2.toURI();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434897000L + "'", long3 == 1645434897000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        boolean boolean13 = zoneRules12.isFixedOffset();
        java.time.Instant instant14 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules12.previousTransition(instant14);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = zoneRules12.getTransitionRules();
        java.time.Instant instant17 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition18 = zoneRules12.previousTransition(instant17);
        java.time.Instant instant19 = java.time.Instant.MAX;
        java.time.Instant instant21 = instant19.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset22 = zoneRules12.getOffset(instant21);
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery24 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period25 = offsetDateTime23.query(periodTemporalQuery24);
        java.time.chrono.Chronology chronology26 = period25.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate30 = chronology26.date((int) (byte) -1, 41, 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 41");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList16);
        org.junit.Assert.assertNull(zoneOffsetTransition18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(periodTemporalQuery24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics8 = longStream7.summaryStatistics();
        java.util.function.IntConsumer intConsumer9 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics8);
        java.util.stream.IntStream intStream10 = intStream3.peek((java.util.function.IntConsumer) longSummaryStatistics4);
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        int int13 = charBuffer12.limit();
        java.util.stream.IntStream intStream14 = charBuffer12.chars();
        java.util.LongSummaryStatistics longSummaryStatistics15 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream18 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics19 = longStream18.summaryStatistics();
        java.util.function.IntConsumer intConsumer20 = longSummaryStatistics15.andThen((java.util.function.IntConsumer) longSummaryStatistics19);
        java.util.stream.IntStream intStream21 = intStream14.peek((java.util.function.IntConsumer) longSummaryStatistics15);
        longSummaryStatistics4.combine(longSummaryStatistics15);
        java.lang.String str23 = longSummaryStatistics15.toString();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(longSummaryStatistics8);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertEquals(longSummaryStatistics15.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(longSummaryStatistics19);
        org.junit.Assert.assertEquals(longSummaryStatistics19.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer20);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}" + "'", str23, "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        java.io.PrintStream printStream1 = new java.io.PrintStream("20220221Z");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress8 = java.net.InetAddress.getByAddress(byteArray7);
        java.net.InetAddress inetAddress9 = java.net.InetAddress.getByAddress("1970-01-01", byteArray7);
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.wrap(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray7, 64800, (int) '-');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress8);
        org.junit.Assert.assertNotNull(inetAddress9);
        org.junit.Assert.assertNotNull(byteBuffer10);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics3.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic6);
        double[] doubleArray8 = descriptiveStatistics0.getSortedValues();
        java.lang.String str9 = descriptiveStatistics0.toString();
        double double10 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics11.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getGeometricMeanImpl();
        double[] doubleArray20 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double21 = univariateStatistic14.evaluate(doubleArray20);
        descriptiveStatistics0.setSumImpl(univariateStatistic14);
        double double23 = descriptiveStatistics0.getSum();
        int int24 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic25);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        java.util.stream.LongStream longStream8 = longStream6.limit((long) ' ');
        java.util.Iterator<java.lang.Long> longItor9 = longStream8.iterator();
        java.util.LongSummaryStatistics longSummaryStatistics10 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream13 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics14 = longStream13.summaryStatistics();
        java.util.function.IntConsumer intConsumer15 = longSummaryStatistics10.andThen((java.util.function.IntConsumer) longSummaryStatistics14);
        long long16 = longSummaryStatistics14.getMax();
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.allocate(16);
        int int19 = charBuffer18.limit();
        java.util.stream.IntStream intStream20 = charBuffer18.chars();
        java.util.LongSummaryStatistics longSummaryStatistics21 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream24 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics25 = longStream24.summaryStatistics();
        java.util.function.IntConsumer intConsumer26 = longSummaryStatistics21.andThen((java.util.function.IntConsumer) longSummaryStatistics25);
        java.util.stream.IntStream intStream27 = intStream20.peek((java.util.function.IntConsumer) longSummaryStatistics21);
        java.nio.CharBuffer charBuffer29 = java.nio.CharBuffer.allocate(16);
        int int30 = charBuffer29.limit();
        java.util.stream.IntStream intStream31 = charBuffer29.chars();
        java.util.LongSummaryStatistics longSummaryStatistics32 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream35 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics36 = longStream35.summaryStatistics();
        java.util.function.IntConsumer intConsumer37 = longSummaryStatistics32.andThen((java.util.function.IntConsumer) longSummaryStatistics36);
        java.util.stream.IntStream intStream38 = intStream31.peek((java.util.function.IntConsumer) longSummaryStatistics32);
        longSummaryStatistics21.combine(longSummaryStatistics32);
        longSummaryStatistics14.combine(longSummaryStatistics32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream41 = longStream8.peek((java.util.function.LongConsumer) longSummaryStatistics32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(longItor9);
        org.junit.Assert.assertEquals(longSummaryStatistics10.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(longSummaryStatistics14);
        org.junit.Assert.assertEquals(longSummaryStatistics14.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 9L + "'", long16 == 9L);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertEquals(longSummaryStatistics21.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream24);
        org.junit.Assert.assertNotNull(longSummaryStatistics25);
        org.junit.Assert.assertEquals(longSummaryStatistics25.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer26);
        org.junit.Assert.assertNotNull(intStream27);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(intStream31);
        org.junit.Assert.assertEquals(longSummaryStatistics32.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream35);
        org.junit.Assert.assertNotNull(longSummaryStatistics36);
        org.junit.Assert.assertEquals(longSummaryStatistics36.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5,000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer37);
        org.junit.Assert.assertNotNull(intStream38);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant92 = offsetDateTime91.toInstant();
        java.time.Instant instant94 = instant92.plusMillis(1645434851L);
        java.time.temporal.ChronoField chronoField96 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        java.time.temporal.TemporalUnit temporalUnit97 = chronoField96.getBaseUnit();
        java.time.Instant instant98 = instant92.minus((long) 10, temporalUnit97);
        java.util.Date date99 = java.util.Date.from(instant98);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertTrue("'" + chronoField96 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField96.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + temporalUnit97 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit97.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant98);
        org.junit.Assert.assertNotNull(date99);
        org.junit.Assert.assertEquals(date99.toString(), "Wed Dec 31 00:01:37 UTC 1969");
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        java.time.Month month0 = java.time.Month.MAY;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.MAY + "'", month0.equals(java.time.Month.MAY));
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap1 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean3 = strMapMap1.containsKey((java.lang.Object) isoChronology2);
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal5 = null;
        java.time.temporal.Temporal temporal6 = duration4.subtractFrom(temporal5);
        long long7 = duration4.toDays();
        boolean boolean8 = strMapMap1.contains((java.lang.Object) duration4);
        java.lang.Cloneable cloneable9 = strMapMap0.get((java.lang.Object) duration4);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        boolean boolean20 = localDateTime14.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.lang.String str24 = zoneOffset23.getId();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.MAX;
        java.lang.String str29 = zoneOffset28.getId();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset28);
        boolean boolean31 = localDateTime25.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.format.DateTimeFormatter dateTimeFormatter32 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str33 = localDateTime30.format(dateTimeFormatter32);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int35 = localDateTime30.get((java.time.temporal.TemporalField) chronoField34);
        boolean boolean36 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.lang.String str37 = localDateTime30.toString();
        java.time.chrono.Chronology chronology38 = localDateTime30.getChronology();
        java.time.LocalDateTime localDateTime40 = localDateTime30.plusYears((long) (short) 0);
        java.time.temporal.Temporal temporal41 = duration4.subtractFrom((java.time.temporal.Temporal) localDateTime30);
        java.time.LocalTime localTime42 = localDateTime30.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime44 = localTime42.withHour(233000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 233000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNull(temporal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(cloneable9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+18:00" + "'", str24, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+18:00" + "'", str29, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str33, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField34.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str37, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(temporal41);
        org.junit.Assert.assertNotNull(localTime42);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        boolean boolean12 = zoneRules11.isFixedOffset();
        java.time.Instant instant13 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition14 = zoneRules11.previousTransition(instant13);
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra17 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate20 = isoChronology15.dateYearDay((java.time.chrono.Era) isoEra17, 0, 16);
        java.time.LocalTime localTime21 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime22 = localDate20.atTime(localTime21);
        java.time.LocalDate localDate24 = localDate20.withMonth(1);
        java.time.Duration duration25 = java.time.Duration.ZERO;
        java.time.Duration duration26 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal27 = null;
        java.time.temporal.Temporal temporal28 = duration26.subtractFrom(temporal27);
        long long29 = duration26.toDays();
        java.time.Duration duration30 = duration25.plus(duration26);
        java.time.LocalDate localDate31 = localDate24.minus((java.time.temporal.TemporalAmount) duration25);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.lang.String str35 = zoneOffset34.getId();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset34);
        java.time.LocalTime localTime37 = localDateTime36.toLocalTime();
        java.time.temporal.Temporal temporal38 = localDate31.adjustInto((java.time.temporal.Temporal) localDateTime36);
        java.time.LocalDateTime localDateTime40 = localDateTime36.minusDays((long) (-1));
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.lang.String str44 = zoneOffset43.getId();
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset43);
        java.time.LocalTime localTime46 = localDateTime45.toLocalTime();
        boolean boolean47 = localDateTime40.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime45);
        java.time.LocalDateTime localDateTime49 = localDateTime45.withDayOfMonth(7);
        java.time.LocalTime localTime50 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray53 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList54 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, zoneOffsetTransitionArray53);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray56 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList57 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList57, zoneOffsetTransitionArray56);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray59 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList60 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList60, zoneOffsetTransitionRuleArray59);
        java.time.zone.ZoneRules zoneRules62 = java.time.zone.ZoneRules.of(zoneOffset51, zoneOffset52, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList57, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList60);
        java.time.OffsetTime offsetTime63 = localTime50.atOffset(zoneOffset51);
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.MAX;
        java.lang.String str67 = zoneOffset66.getId();
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset66);
        java.time.OffsetTime offsetTime69 = offsetTime63.withOffsetSameLocal(zoneOffset66);
        boolean boolean70 = zoneRules11.isValidOffset(localDateTime49, zoneOffset66);
        java.time.LocalDateTime localDateTime72 = localDateTime49.withSecond(0);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition14);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertTrue("'" + isoEra17 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra17.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNull(temporal28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+18:00" + "'", str35, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(temporal38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+18:00" + "'", str44, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNotNull(offsetTime63);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+18:00" + "'", str67, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(offsetTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        java.lang.String str1 = proxy0.toString();
        java.net.Proxy.Type type2 = proxy0.type();
        java.lang.String str3 = proxy0.toString();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DIRECT" + "'", str1, "DIRECT");
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type2.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DIRECT" + "'", str3, "DIRECT");
        org.junit.Assert.assertNull(socketAddress4);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.LocalDate localDate7 = localDate5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.LocalDateTime localDateTime8 = localDate7.atStartOfDay();
        java.time.chrono.Era era9 = localDate7.getEra();
        java.time.LocalDateTime localDateTime12 = localDate7.atTime(3, (int) '#');
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MAX;
        java.lang.String str16 = zoneOffset15.getId();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        int int30 = zoneOffset15.compareTo(zoneOffset18);
        java.lang.String str31 = zoneOffset15.getId();
        java.time.Instant instant32 = localDateTime12.toInstant(zoneOffset15);
        java.time.Month month33 = java.time.Month.JANUARY;
        java.time.Month month34 = month33.firstMonthOfQuarter();
        java.time.Month month35 = java.time.Month.JANUARY;
        java.time.Month month36 = month35.firstMonthOfQuarter();
        java.time.Month month37 = month36.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery38 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period39 = month36.query(periodTemporalQuery38);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate41 = localDateTime40.toLocalDate();
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate45 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset44);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset44);
        java.time.Month month47 = java.time.Month.JANUARY;
        java.time.Month month48 = month47.firstMonthOfQuarter();
        java.time.Month month49 = month48.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery50 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period51 = month48.query(periodTemporalQuery50);
        java.time.Period period52 = zoneOffset44.query(periodTemporalQuery50);
        java.time.Period period53 = localDateTime40.query(periodTemporalQuery50);
        java.time.Period period54 = month36.query(periodTemporalQuery50);
        java.time.Period period55 = month34.query(periodTemporalQuery50);
        java.time.Period period56 = instant32.query(periodTemporalQuery50);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + era9 + "' != '" + java.time.chrono.IsoEra.CE + "'", era9.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+18:00" + "'", str16, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+18:00" + "'", str31, "+18:00");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + month33 + "' != '" + java.time.Month.JANUARY + "'", month33.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.JANUARY + "'", month34.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month35 + "' != '" + java.time.Month.JANUARY + "'", month35.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month36 + "' != '" + java.time.Month.JANUARY + "'", month36.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month37 + "' != '" + java.time.Month.JANUARY + "'", month37.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + month47 + "' != '" + java.time.Month.JANUARY + "'", month47.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month48 + "' != '" + java.time.Month.JANUARY + "'", month48.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month49 + "' != '" + java.time.Month.JANUARY + "'", month49.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime1 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray4 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList5 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, zoneOffsetTransitionArray4);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray7 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList8 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, zoneOffsetTransitionArray7);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray10 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11, zoneOffsetTransitionRuleArray10);
        java.time.zone.ZoneRules zoneRules13 = java.time.zone.ZoneRules.of(zoneOffset2, zoneOffset3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11);
        java.time.OffsetTime offsetTime14 = localTime1.atOffset(zoneOffset2);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange16 = offsetTime14.range((java.time.temporal.TemporalField) chronoField15);
        java.time.OffsetTime offsetTime18 = chronoField0.adjustInto(offsetTime14, (long) 16);
        java.time.OffsetTime offsetTime19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = offsetTime14.compareTo(offsetTime19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField15.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange16);
        org.junit.Assert.assertNotNull(offsetTime18);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray10 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, zoneOffsetTransitionArray10);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray16 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17, zoneOffsetTransitionRuleArray16);
        java.time.zone.ZoneRules zoneRules19 = java.time.zone.ZoneRules.of(zoneOffset8, zoneOffset9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17);
        long long20 = localDateTime7.toEpochSecond(zoneOffset8);
        java.time.LocalDateTime localDateTime22 = localDateTime7.plusDays((long) (byte) 1);
        java.time.ZoneId zoneId23 = java.time.ZoneId.systemDefault();
        java.lang.String str24 = zoneId23.getId();
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.now(zoneId23);
        java.time.ZoneId zoneId26 = java.time.ZoneId.systemDefault();
        java.lang.String str27 = zoneId26.getId();
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime25.withZoneSameInstant(zoneId26);
        java.time.ZoneId zoneId29 = java.time.ZoneId.systemDefault();
        java.lang.String str30 = zoneId29.getId();
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.now(zoneId29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.withYear((int) (short) 1);
        boolean boolean34 = zonedDateTime28.equals((java.lang.Object) zonedDateTime33);
        int int35 = zonedDateTime33.getMinute();
        java.time.Duration duration36 = java.time.Duration.between((java.time.temporal.Temporal) localDateTime7, (java.time.temporal.Temporal) zonedDateTime33);
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime33.plusSeconds(1645434863000L);
        java.time.LocalTime localTime39 = java.time.LocalTime.MAX;
        java.time.temporal.TemporalUnit temporalUnit40 = null;
        boolean boolean41 = localTime39.isSupported(temporalUnit40);
        java.time.LocalTime localTime43 = localTime39.withNano((int) '4');
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale47 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = chronoField44.getDisplayName(locale47);
        boolean boolean50 = chronoField44.isTimeBased();
        java.time.temporal.ValueRange valueRange51 = localTime39.range((java.time.temporal.TemporalField) chronoField44);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        boolean boolean53 = localTime39.isSupported((java.time.temporal.TemporalField) chronoField52);
        java.time.ZonedDateTime zonedDateTime55 = zonedDateTime38.with((java.time.temporal.TemporalField) chronoField52, (long) (byte) -1);
        java.time.Clock clock56 = java.time.Clock.systemUTC();
        java.time.ZonedDateTime zonedDateTime57 = java.time.ZonedDateTime.now(clock56);
        int int58 = zonedDateTime57.getSecond();
        java.time.ZonedDateTime zonedDateTime60 = zonedDateTime57.withHour(4);
        java.time.ZonedDateTime zonedDateTime62 = zonedDateTime57.plusDays((long) 10);
        boolean boolean63 = zonedDateTime38.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime62);
        java.time.ZonedDateTime zonedDateTime64 = zonedDateTime62.withLaterOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime62.minusDays((-719147L));
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62134279201L) + "'", long20 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Etc/UTC" + "'", str24, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 23 + "'", int35 == 23);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale47.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "599b081c1808" + "'", str48, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClockHourOfDay" + "'", str49, "ClockHourOfDay");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(valueRange51);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField52.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(clock56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertNotNull(zonedDateTime66);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.lang.Object obj13 = properties1.setProperty("P0D", "DIRECT");
        java.util.Set<java.lang.Object> objSet14 = properties1.keySet();
        java.lang.String str16 = properties1.getProperty("ClockHourOfDay");
        java.io.InputStream inputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        boolean boolean3 = charBuffer1.isReadOnly();
        java.nio.CharBuffer charBuffer5 = charBuffer1.put('x');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer9 = charBuffer1.append((java.lang.CharSequence) "P1968Y1D", (-2004260627), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2004260627");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charBuffer5);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap1 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean3 = strMapMap1.containsKey((java.lang.Object) isoChronology2);
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal5 = null;
        java.time.temporal.Temporal temporal6 = duration4.subtractFrom(temporal5);
        long long7 = duration4.toDays();
        boolean boolean8 = strMapMap1.contains((java.lang.Object) duration4);
        java.lang.Cloneable cloneable9 = strMapMap0.get((java.lang.Object) duration4);
        java.time.Duration duration11 = duration4.plusSeconds(1645434841L);
        java.time.Duration duration13 = duration11.plusDays((long) (-2004260627));
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNull(temporal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(cloneable9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.LocalTime localTime5 = zonedDateTime4.toLocalTime();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap6 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap7 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology8 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean9 = strMapMap7.containsKey((java.lang.Object) isoChronology8);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal11 = null;
        java.time.temporal.Temporal temporal12 = duration10.subtractFrom(temporal11);
        long long13 = duration10.toDays();
        boolean boolean14 = strMapMap7.contains((java.lang.Object) duration10);
        java.lang.Cloneable cloneable15 = strMapMap6.get((java.lang.Object) duration10);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.plus(duration17);
        long long22 = duration17.toDays();
        java.time.Duration duration23 = duration10.plus(duration17);
        java.time.LocalTime localTime24 = localTime5.plus((java.time.temporal.TemporalAmount) duration10);
        java.time.Duration duration26 = duration10.minusMillis((-62134279201L));
        java.time.Duration duration28 = duration26.plusMillis(8783316670000L);
        java.time.Duration duration30 = duration28.minusHours(0L);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(isoChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNull(temporal12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(cloneable15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.text.Format format1 = dateTimeFormatter0.toFormat();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap9 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology10 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean11 = strMapMap9.containsKey((java.lang.Object) isoChronology10);
        java.time.Duration duration12 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal13 = null;
        java.time.temporal.Temporal temporal14 = duration12.subtractFrom(temporal13);
        long long15 = duration12.toDays();
        boolean boolean16 = strMapMap9.contains((java.lang.Object) duration12);
        java.lang.Cloneable cloneable17 = strMapMap8.get((java.lang.Object) duration12);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap18 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology19 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean20 = strMapMap18.containsKey((java.lang.Object) isoChronology19);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap21 = java.nio.charset.Charset.availableCharsets();
        boolean boolean22 = strMap21.isEmpty();
        java.util.Locale locale23 = java.util.Locale.US;
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.Cloneable cloneable26 = strMapMap18.put(strMap21, (java.lang.Cloneable) locale24);
        int int27 = strMap21.size();
        java.util.Date date33 = new java.util.Date(1, (int) 'x', (int) '0', 16, 256);
        java.lang.Cloneable cloneable34 = strMapMap8.put(strMap21, (java.lang.Cloneable) date33);
        java.util.Set<java.lang.String> strSet35 = strMap21.keySet();
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet35);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = format1.format((java.lang.Object) strList36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format target must implement TemporalAccessor");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(format1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNull(temporal14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(cloneable17);
        org.junit.Assert.assertNotNull(isoChronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Stati Uniti" + "'", str25, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 171 + "'", int27 == 171);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Feb 17 20:16:00 UTC 1911");
        org.junit.Assert.assertNull(cloneable34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra29 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate32 = isoChronology27.dateYearDay((java.time.chrono.Era) isoEra29, 0, 16);
        java.time.LocalTime localTime33 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime34 = localDate32.atTime(localTime33);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray43 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44, zoneOffsetTransitionRuleArray43);
        java.time.zone.ZoneRules zoneRules46 = java.time.zone.ZoneRules.of(zoneOffset35, zoneOffset36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44);
        long long47 = localDateTime34.toEpochSecond(zoneOffset35);
        java.time.LocalDateTime localDateTime49 = localDateTime34.plusDays((long) (byte) 1);
        boolean boolean50 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.Month month51 = localDateTime20.getMonth();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + isoEra29 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra29.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-62134279201L) + "'", long47 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + month51 + "' != '" + java.time.Month.JANUARY + "'", month51.equals(java.time.Month.JANUARY));
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit5 = null;
        boolean boolean6 = zonedDateTime2.isSupported(temporalUnit5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange8 = zonedDateTime2.range((java.time.temporal.TemporalField) chronoField7);
        java.time.ZoneId zoneId9 = zonedDateTime2.getZone();
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField7.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange8);
        org.junit.Assert.assertNotNull(zoneId9);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.net.URI uRI15 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI16 = uRI15.normalize();
        java.lang.String str17 = uRI16.getRawSchemeSpecificPart();
        boolean boolean18 = zonedDateTime6.equals((java.lang.Object) uRI16);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap19 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology20 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean21 = strMapMap19.containsKey((java.lang.Object) isoChronology20);
        java.time.Duration duration22 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal23 = null;
        java.time.temporal.Temporal temporal24 = duration22.subtractFrom(temporal23);
        long long25 = duration22.toDays();
        boolean boolean26 = strMapMap19.contains((java.lang.Object) duration22);
        java.time.format.DateTimeFormatter dateTimeFormatter27 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable28 = strMapMap19.get((java.lang.Object) dateTimeFormatter27);
        java.lang.String str29 = zonedDateTime6.format(dateTimeFormatter27);
        java.time.OffsetDateTime offsetDateTime30 = zonedDateTime6.toOffsetDateTime();
        int int31 = zonedDateTime6.getDayOfYear();
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "//Etc/UTC" + "'", str17, "//Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(isoChronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNull(temporal24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(cloneable28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "00010221Z" + "'", str29, "00010221Z");
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean2 = instant0.isSupported((java.time.temporal.TemporalField) chronoField1);
        java.time.Instant instant4 = instant0.plusNanos((long) 9);
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray8 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, zoneOffsetTransitionArray8);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray11 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, zoneOffsetTransitionArray11);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray14 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15, zoneOffsetTransitionRuleArray14);
        java.time.zone.ZoneRules zoneRules17 = java.time.zone.ZoneRules.of(zoneOffset6, zoneOffset7, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        boolean boolean42 = zoneOffsetTransitionList21.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray45 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, zoneOffsetTransitionArray45);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray51 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52, zoneOffsetTransitionRuleArray51);
        java.time.zone.ZoneRules zoneRules54 = java.time.zone.ZoneRules.of(zoneOffset43, zoneOffset44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52);
        int int56 = zoneOffsetTransitionList49.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray59 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList60 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, zoneOffsetTransitionArray59);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray62 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList63 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, zoneOffsetTransitionArray62);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray65 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList66 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66, zoneOffsetTransitionRuleArray65);
        java.time.zone.ZoneRules zoneRules68 = java.time.zone.ZoneRules.of(zoneOffset57, zoneOffset58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66);
        java.time.zone.ZoneRules zoneRules69 = java.time.zone.ZoneRules.of(zoneOffset5, zoneOffset6, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66);
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.MAX;
        java.lang.String str73 = zoneOffset72.getId();
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset72);
        int int75 = zoneOffset6.compareTo(zoneOffset72);
        java.time.OffsetDateTime offsetDateTime76 = instant4.atOffset(zoneOffset72);
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofTotalSeconds(13);
        java.time.OffsetDateTime offsetDateTime79 = instant4.atOffset(zoneOffset78);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime80 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) zoneOffset78);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalTime from TemporalAccessor: +00:00:13 of type java.time.ZoneOffset");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField1.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(zoneRules68);
        org.junit.Assert.assertNotNull(zoneRules69);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+18:00" + "'", str73, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap1 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>(14);
        boolean boolean2 = strMapMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.lang.String str27 = localDateTime20.toString();
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.lang.String str31 = zoneOffset30.getId();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset30);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.lang.String str36 = zoneOffset35.getId();
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset35);
        boolean boolean38 = localDateTime32.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.MAX;
        java.lang.String str42 = zoneOffset41.getId();
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset41);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.lang.String str47 = zoneOffset46.getId();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset46);
        boolean boolean49 = localDateTime43.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.format.DateTimeFormatter dateTimeFormatter50 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str51 = localDateTime48.format(dateTimeFormatter50);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int53 = localDateTime48.get((java.time.temporal.TemporalField) chronoField52);
        boolean boolean54 = localDateTime37.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.lang.String str55 = localDateTime48.toString();
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange57 = chronoField56.range();
        boolean boolean58 = localDateTime48.isSupported((java.time.temporal.TemporalField) chronoField56);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        boolean boolean60 = localDateTime48.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime59);
        boolean boolean61 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime59);
        java.time.LocalDateTime localDateTime63 = localDateTime59.withYear(2);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str27, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+18:00" + "'", str31, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+18:00" + "'", str36, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+18:00" + "'", str42, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+18:00" + "'", str47, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str51, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField52.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str55, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField56.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer3 = java.nio.IntBuffer.wrap(intArray0, 1969, 78000000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.nio.Buffer buffer8 = byteBuffer5.mark();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean16 = byteBuffer14.equals((java.lang.Object) isoChronology15);
        boolean boolean17 = byteBuffer14.hasArray();
        int int18 = byteBuffer14.remaining();
        java.nio.ByteOrder byteOrder19 = byteBuffer14.order();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer5.order(byteOrder19);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer23 = byteBuffer20.putChar(18, '-');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteOrder19);
        org.junit.Assert.assertNotNull(byteBuffer20);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.Buffer buffer7 = longBuffer2.flip();
        java.nio.LongBuffer longBuffer8 = longBuffer2.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = longBuffer2.get(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        int[] intArray4 = intStream3.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt5 = intStream3.max();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap3 = java.nio.charset.Charset.availableCharsets();
        boolean boolean4 = strMap3.isEmpty();
        java.util.Locale locale5 = java.util.Locale.US;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.Cloneable cloneable8 = strMapMap0.put(strMap3, (java.lang.Cloneable) locale6);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap9 = java.nio.charset.Charset.availableCharsets();
        boolean boolean10 = strMap9.isEmpty();
        java.util.Set<java.lang.String> strSet11 = strMap9.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate12 = java.util.function.Predicate.isEqual((java.lang.Object) strMap9);
        java.util.Set<java.lang.String> strSet13 = strMap9.keySet();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.US;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.lang.String str18 = locale16.getDisplayScript();
        java.lang.String str19 = locale14.getDisplayName(locale16);
        java.lang.Cloneable cloneable20 = strMapMap0.putIfAbsent(strMap9, (java.lang.Cloneable) locale14);
        java.nio.IntBuffer intBuffer22 = java.nio.IntBuffer.allocate(13);
        java.nio.IntBuffer intBuffer23 = intBuffer22.slice();
        int[] intArray24 = new int[] {};
        java.util.stream.IntStream intStream25 = java.util.stream.IntStream.of(intArray24);
        java.nio.IntBuffer intBuffer26 = intBuffer22.put(intArray24);
        boolean boolean27 = strMapMap0.equals((java.lang.Object) intBuffer22);
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Stati Uniti" + "'", str7, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(resolverStylePredicate12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Stati Uniti" + "'", str17, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "coreano" + "'", str19, "coreano");
        org.junit.Assert.assertNotNull(cloneable20);
        org.junit.Assert.assertNotNull(intBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertNotNull(intBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        java.util.function.DoublePredicate doublePredicate2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = doubleStream1.allMatch(doublePredicate2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        java.lang.Throwable throwable1 = null;
        java.security.NoSuchAlgorithmException noSuchAlgorithmException2 = new java.security.NoSuchAlgorithmException("HourOfDay", throwable1);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        int int3 = zonedDateTime2.getYear();
        java.time.Instant instant4 = java.time.Instant.EPOCH;
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean6 = instant4.isSupported((java.time.temporal.TemporalField) chronoField5);
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(zoneId7);
        java.time.ZoneId zoneId10 = java.time.ZoneId.systemDefault();
        java.lang.String str11 = zoneId10.getId();
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime9.withZoneSameInstant(zoneId10);
        long long13 = zonedDateTime9.toEpochSecond();
        java.time.temporal.ValueRange valueRange14 = chronoField5.rangeRefinedBy((java.time.temporal.TemporalAccessor) zonedDateTime9);
        int int15 = zonedDateTime2.get((java.time.temporal.TemporalField) chronoField5);
        java.time.temporal.ValueRange valueRange16 = chronoField5.range();
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField5.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Etc/UTC" + "'", str11, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645435393L + "'", long13 == 1645435393L);
        org.junit.Assert.assertNotNull(valueRange14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(valueRange16);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(37, 7);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 37 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        boolean boolean3 = file2.exists();
        boolean boolean4 = file2.canExecute();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        boolean boolean13 = zoneRules12.isFixedOffset();
        java.time.Instant instant14 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules12.previousTransition(instant14);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = zoneRules12.getTransitionRules();
        java.time.Instant instant17 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition18 = zoneRules12.previousTransition(instant17);
        java.time.Instant instant19 = java.time.Instant.MAX;
        java.time.Instant instant21 = instant19.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset22 = zoneRules12.getOffset(instant21);
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery24 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period25 = offsetDateTime23.query(periodTemporalQuery24);
        java.time.chrono.Chronology chronology26 = period25.getChronology();
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MAX;
        java.lang.String str30 = zoneOffset29.getId();
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset29);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.lang.String str35 = zoneOffset34.getId();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset34);
        boolean boolean37 = localDateTime31.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str39 = localDateTime36.format(dateTimeFormatter38);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int41 = localDateTime36.get((java.time.temporal.TemporalField) chronoField40);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.lang.String str45 = zoneOffset44.getId();
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset44);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.MAX;
        java.lang.String str50 = zoneOffset49.getId();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset49);
        boolean boolean52 = localDateTime46.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.format.DateTimeFormatter dateTimeFormatter53 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str54 = localDateTime51.format(dateTimeFormatter53);
        boolean boolean55 = localDateTime36.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean57 = localDateTime36.isSupported((java.time.temporal.TemporalField) chronoField56);
        java.time.Period period59 = java.time.Period.ofYears((int) '\000');
        java.time.Period period61 = period59.minusDays((long) (short) 0);
        java.time.LocalDateTime localDateTime62 = localDateTime36.plus((java.time.temporal.TemporalAmount) period59);
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.MAX;
        java.time.Clock clock64 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset63);
        java.time.ZoneId zoneId65 = java.time.ZoneId.systemDefault();
        java.lang.String str66 = zoneId65.getId();
        java.lang.String str67 = zoneId65.getId();
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.ofInstant(localDateTime62, zoneOffset63, zoneId65);
        java.time.Clock clock69 = java.time.Clock.system(zoneId65);
        java.time.chrono.ChronoLocalDate chronoLocalDate70 = chronology26.dateNow(clock69);
        int[] intArray71 = new int[] {};
        java.util.stream.IntStream intStream72 = java.util.stream.IntStream.of(intArray71);
        java.nio.IntBuffer intBuffer73 = java.nio.IntBuffer.wrap(intArray71);
        boolean boolean74 = intBuffer73.hasArray();
        boolean boolean75 = chronoLocalDate70.equals((java.lang.Object) boolean74);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList16);
        org.junit.Assert.assertNull(zoneOffsetTransition18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(periodTemporalQuery24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+18:00" + "'", str30, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+18:00" + "'", str35, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str39, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+18:00" + "'", str45, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+18:00" + "'", str50, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str54, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField56.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(zoneId65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Etc/UTC" + "'", str66, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Etc/UTC" + "'", str67, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(clock69);
        org.junit.Assert.assertNotNull(chronoLocalDate70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intStream72);
        org.junit.Assert.assertNotNull(intBuffer73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.nio.file.Path path25 = path18.relativize(path24);
        boolean boolean26 = path11.startsWith(path18);
        java.net.URI uRI27 = path18.toUri();
        java.io.File file30 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long31 = file30.lastModified();
        java.net.URL uRL32 = file30.toURL();
        java.nio.file.Path path33 = file30.toPath();
        java.io.File file36 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long37 = file36.lastModified();
        java.net.URL uRL38 = file36.toURL();
        java.nio.file.Path path39 = file36.toPath();
        java.nio.file.Path path40 = path33.relativize(path39);
        java.nio.CharBuffer charBuffer42 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer44 = charBuffer42.append((java.lang.CharSequence) "Etc/UTC");
        int int45 = charBuffer44.arrayOffset();
        boolean boolean46 = path39.equals((java.lang.Object) int45);
        boolean boolean47 = path18.endsWith(path39);
        java.io.File file50 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long51 = file50.lastModified();
        java.net.URL uRL52 = file50.toURL();
        java.nio.file.Path path53 = file50.toPath();
        java.io.File file56 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long57 = file56.lastModified();
        java.net.URL uRL58 = file56.toURL();
        java.nio.file.Path path59 = file56.toPath();
        java.nio.file.Path path60 = path53.relativize(path59);
        boolean boolean62 = path53.startsWith("x-windows-iso2022jp");
        int int63 = path53.getNameCount();
        int int64 = path18.compareTo(path53);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(uRI27);
        org.junit.Assert.assertEquals(file30.getParent(), "/");
        org.junit.Assert.assertEquals(file30.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(uRL32);
        org.junit.Assert.assertEquals(uRL32.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path33);
        org.junit.Assert.assertEquals(file36.getParent(), "/");
        org.junit.Assert.assertEquals(file36.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(uRL38);
        org.junit.Assert.assertEquals(uRL38.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertNotNull(path40);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertNotNull(charBuffer44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals(file50.getParent(), "/");
        org.junit.Assert.assertEquals(file50.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(uRL52);
        org.junit.Assert.assertEquals(uRL52.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path53);
        org.junit.Assert.assertEquals(file56.getParent(), "/");
        org.junit.Assert.assertEquals(file56.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(uRL58);
        org.junit.Assert.assertEquals(uRL58.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path59);
        org.junit.Assert.assertNotNull(path60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_WEEK_DATE;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZonedDateTime zonedDateTime7 = zonedDateTime5.minusYears((long) (short) 0);
        java.time.LocalDate localDate9 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology10 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra12 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate15 = isoChronology10.dateYearDay((java.time.chrono.Era) isoEra12, 0, 16);
        java.time.LocalTime localTime16 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime17 = localDate15.atTime(localTime16);
        java.time.LocalDate localDate19 = localDate15.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod20 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate9, (java.time.chrono.ChronoLocalDate) localDate15);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray29 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30, zoneOffsetTransitionRuleArray29);
        java.time.zone.ZoneRules zoneRules32 = java.time.zone.ZoneRules.of(zoneOffset21, zoneOffset22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30);
        java.time.Clock clock33 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset21);
        java.time.format.TextStyle textStyle34 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = zoneOffset21.getDisplayName(textStyle34, locale35);
        java.time.ZonedDateTime zonedDateTime37 = localDate9.atStartOfDay((java.time.ZoneId) zoneOffset21);
        boolean boolean38 = zonedDateTime5.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale42 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = chronoField39.getDisplayName(locale42);
        long long45 = zonedDateTime37.getLong((java.time.temporal.TemporalField) chronoField39);
        boolean boolean46 = chronoField39.isDateBased();
        java.time.LocalDate localDate48 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology49 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra51 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate54 = isoChronology49.dateYearDay((java.time.chrono.Era) isoEra51, 0, 16);
        java.time.LocalTime localTime55 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime56 = localDate54.atTime(localTime55);
        java.time.LocalDate localDate58 = localDate54.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod59 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate48, (java.time.chrono.ChronoLocalDate) localDate54);
        boolean boolean60 = localDate48.isLeapYear();
        boolean boolean61 = chronoField39.isSupportedBy((java.time.temporal.TemporalAccessor) localDate48);
        java.time.chrono.ChronoLocalDate chronoLocalDate62 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = localDate48.isAfter(chronoLocalDate62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(isoChronology10);
        org.junit.Assert.assertTrue("'" + isoEra12 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra12.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronoPeriod20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(clock33);
        org.junit.Assert.assertTrue("'" + textStyle34 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle34.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+18:00" + "'", str36, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale42.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "599b081c1808" + "'", str43, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ClockHourOfDay" + "'", str44, "ClockHourOfDay");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 24L + "'", long45 == 24L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(isoChronology49);
        org.junit.Assert.assertTrue("'" + isoEra51 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra51.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(chronoPeriod59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray10 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, zoneOffsetTransitionArray10);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray16 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17, zoneOffsetTransitionRuleArray16);
        java.time.zone.ZoneRules zoneRules19 = java.time.zone.ZoneRules.of(zoneOffset8, zoneOffset9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17);
        long long20 = localDateTime7.toEpochSecond(zoneOffset8);
        java.time.LocalDateTime localDateTime22 = localDateTime7.plusDays((long) (byte) 1);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime25 = localDateTime7.with((java.time.temporal.TemporalField) chronoField23, 9L);
        java.time.LocalDateTime localDateTime27 = localDateTime7.minusNanos(365243238234L);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62134279201L) + "'", long20 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField23.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition25 = null;
        boolean boolean26 = zoneOffsetTransitionList3.add(zoneOffsetTransition25);
        java.lang.Object[] objArray27 = zoneOffsetTransitionList3.toArray();
        java.lang.String[] strArray28 = java.util.Locale.getISOLanguages();
        java.lang.String[] strArray29 = zoneOffsetTransitionList3.toArray(strArray28);
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.time.ZoneId zoneId32 = java.time.ZoneId.systemDefault();
        java.lang.String str33 = zoneId32.getId();
        java.time.ZonedDateTime zonedDateTime34 = java.time.ZonedDateTime.now(zoneId32);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime34.withYear((int) (short) 1);
        java.time.LocalTime localTime37 = zonedDateTime36.toLocalTime();
        java.util.stream.DoubleStream doubleStream39 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj40 = properties31.getOrDefault((java.lang.Object) zonedDateTime36, (java.lang.Object) doubleStream39);
        java.lang.Object obj43 = properties31.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration44 = properties31.propertyNames();
        boolean boolean45 = zoneOffsetTransitionList3.remove((java.lang.Object) properties31);
        properties31.clear();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[null]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Etc/UTC" + "'", str33, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(doubleStream39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(wildcardEnumeration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap3 = java.nio.charset.Charset.availableCharsets();
        boolean boolean4 = strMap3.isEmpty();
        java.util.Locale locale5 = java.util.Locale.US;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.Cloneable cloneable8 = strMapMap0.put(strMap3, (java.lang.Cloneable) locale6);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.nio.charset.Charset>> strEntrySet9 = strMap3.entrySet();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator10 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator11 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator12 = doubleUnaryOperator10.andThen(doubleUnaryOperator11);
        java.util.function.DoubleUnaryOperator doubleUnaryOperator13 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator14 = doubleUnaryOperator11.andThen(doubleUnaryOperator13);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset15 = strMap3.get((java.lang.Object) doubleUnaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Stati Uniti" + "'", str7, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable8);
        org.junit.Assert.assertNotNull(strEntrySet9);
        org.junit.Assert.assertNotNull(doubleUnaryOperator10);
        org.junit.Assert.assertNotNull(doubleUnaryOperator11);
        org.junit.Assert.assertNotNull(doubleUnaryOperator12);
        org.junit.Assert.assertNotNull(doubleUnaryOperator13);
        org.junit.Assert.assertNotNull(doubleUnaryOperator14);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.TUESDAY;
        java.time.temporal.TemporalField temporalField1 = null;
        boolean boolean2 = dayOfWeek0.isSupported(temporalField1);
        java.time.DayOfWeek dayOfWeek4 = dayOfWeek0.minus(1645434841L);
        java.time.chrono.IsoChronology isoChronology5 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate10 = isoChronology5.dateYearDay((java.time.chrono.Era) isoEra7, 0, 16);
        java.time.LocalTime localTime11 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime12 = localDate10.atTime(localTime11);
        java.time.LocalDate localDate14 = localDate10.withMonth(1);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal17 = null;
        java.time.temporal.Temporal temporal18 = duration16.subtractFrom(temporal17);
        long long19 = duration16.toDays();
        java.time.Duration duration20 = duration15.plus(duration16);
        java.time.LocalDate localDate21 = localDate14.minus((java.time.temporal.TemporalAmount) duration15);
        java.time.LocalDate localDate23 = localDate14.minusWeeks((long) 100);
        java.time.chrono.IsoChronology isoChronology24 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra26 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate29 = isoChronology24.dateYearDay((java.time.chrono.Era) isoEra26, 0, 16);
        java.time.Duration duration30 = java.time.Duration.ZERO;
        java.time.LocalDate localDate31 = localDate29.plus((java.time.temporal.TemporalAmount) duration30);
        java.time.LocalDateTime localDateTime32 = localDate31.atStartOfDay();
        java.time.LocalDate localDate34 = localDate31.plusYears((long) (byte) -1);
        java.time.LocalDate localDate35 = localDate23.with((java.time.temporal.TemporalAdjuster) localDate31);
        java.lang.String str36 = localDate31.toString();
        java.time.LocalDate localDate38 = localDate31.plusDays((long) 171);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime40 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray43 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, zoneOffsetTransitionArray43);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray46 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList47 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, zoneOffsetTransitionArray46);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray49 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList50 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList50, zoneOffsetTransitionRuleArray49);
        java.time.zone.ZoneRules zoneRules52 = java.time.zone.ZoneRules.of(zoneOffset41, zoneOffset42, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList50);
        java.time.OffsetTime offsetTime53 = localTime40.atOffset(zoneOffset41);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange55 = offsetTime53.range((java.time.temporal.TemporalField) chronoField54);
        java.time.OffsetTime offsetTime57 = chronoField39.adjustInto(offsetTime53, (long) 16);
        java.time.LocalTime localTime58 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray61 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList62 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, zoneOffsetTransitionArray61);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray64 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList65 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, zoneOffsetTransitionArray64);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray67 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList68 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList68, zoneOffsetTransitionRuleArray67);
        java.time.zone.ZoneRules zoneRules70 = java.time.zone.ZoneRules.of(zoneOffset59, zoneOffset60, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList68);
        java.time.OffsetTime offsetTime71 = localTime58.atOffset(zoneOffset59);
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange73 = offsetTime71.range((java.time.temporal.TemporalField) chronoField72);
        long long74 = offsetTime57.getLong((java.time.temporal.TemporalField) chronoField72);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery75 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period76 = offsetTime57.query(periodTemporalQuery75);
        java.time.Period period77 = localDate38.query(periodTemporalQuery75);
        java.time.Period period78 = dayOfWeek4.query(periodTemporalQuery75);
        java.time.Period period80 = period78.withYears(0);
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + dayOfWeek4 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek4.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra7.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNull(temporal18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(isoChronology24);
        org.junit.Assert.assertTrue("'" + isoEra26 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra26.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0001-01-16" + "'", str36, "0001-01-16");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField39.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneRules52);
        org.junit.Assert.assertNotNull(offsetTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField54.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange55);
        org.junit.Assert.assertNotNull(offsetTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(zoneRules70);
        org.junit.Assert.assertNotNull(offsetTime71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField72.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 23L + "'", long74 == 23L);
        org.junit.Assert.assertNotNull(periodTemporalQuery75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(16);
        java.nio.IntBuffer intBuffer2 = intBuffer1.compact();
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertNotNull(intBuffer2);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.time.chrono.IsoEra isoEra11 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate14 = isoChronology9.dateYearDay((java.time.chrono.Era) isoEra11, (-1), 10);
        int int16 = isoChronology6.prolepticYear((java.time.chrono.Era) isoEra11, (int) '#');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.temporal.Temporal temporal18 = isoEra11.adjustInto((java.time.temporal.Temporal) localDateTime17);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.lang.String str22 = zoneOffset21.getId();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset21);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean25 = localDateTime23.isSupported((java.time.temporal.TemporalField) chronoField24);
        java.time.chrono.IsoChronology isoChronology26 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra28 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate31 = isoChronology26.dateYearDay((java.time.chrono.Era) isoEra28, 0, 16);
        java.time.LocalTime localTime32 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime33 = localDate31.atTime(localTime32);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray42 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43, zoneOffsetTransitionRuleArray42);
        java.time.zone.ZoneRules zoneRules45 = java.time.zone.ZoneRules.of(zoneOffset34, zoneOffset35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43);
        long long46 = localDateTime33.toEpochSecond(zoneOffset34);
        int int47 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MINUTE_OF_DAY;
        int int49 = localDateTime33.get((java.time.temporal.TemporalField) chronoField48);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange50 = isoEra11.range((java.time.temporal.TemporalField) chronoField48);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MinuteOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + isoEra11 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra11.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-34) + "'", int16 == (-34));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+18:00" + "'", str22, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(isoChronology26);
        org.junit.Assert.assertTrue("'" + isoEra28 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra28.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-62134279201L) + "'", long46 == (-62134279201L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1969 + "'", int47 == 1969);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_DAY + "'", chronoField48.equals(java.time.temporal.ChronoField.MINUTE_OF_DAY));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1439 + "'", int49 == 1439);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal1 = null;
        java.time.temporal.Temporal temporal2 = duration0.subtractFrom(temporal1);
        long long3 = duration0.toDays();
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration0.addTo(temporal4);
        java.time.Duration duration7 = duration0.plusMillis((long) 7);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNull(temporal2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertNotNull(duration7);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file3 = file2.getAbsoluteFile();
        java.net.URL uRL4 = file3.toURL();
        java.net.URL uRL6 = new java.net.URL(uRL4, "java.text.ParsePosition[index=0,errorIndex=-1]");
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = uRL6.getContent(classArray7);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /java.text.ParsePosition[index=0,errorIndex=-1] (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals(uRL6.toString(), "file:/java.text.ParsePosition[index=0,errorIndex=-1]");
        org.junit.Assert.assertNotNull(classArray7);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.chrono.Chronology chronology27 = localDateTime9.getChronology();
        java.time.LocalTime localTime28 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray31 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList32 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, zoneOffsetTransitionArray31);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray34 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, zoneOffsetTransitionArray34);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray37 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList38, zoneOffsetTransitionRuleArray37);
        java.time.zone.ZoneRules zoneRules40 = java.time.zone.ZoneRules.of(zoneOffset29, zoneOffset30, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList38);
        java.time.OffsetTime offsetTime41 = localTime28.atOffset(zoneOffset29);
        java.lang.String str42 = offsetTime41.toString();
        java.time.ZoneOffset zoneOffset43 = offsetTime41.getOffset();
        java.time.format.DateTimeFormatter dateTimeFormatter44 = java.time.format.DateTimeFormatter.ISO_TIME;
        boolean boolean45 = offsetTime41.equals((java.lang.Object) dateTimeFormatter44);
        java.time.LocalTime localTime46 = offsetTime41.toLocalTime();
        java.time.ZoneId zoneId47 = java.time.ZoneId.systemDefault();
        java.lang.String str48 = zoneId47.getId();
        java.time.ZonedDateTime zonedDateTime49 = java.time.ZonedDateTime.now(zoneId47);
        java.time.ZoneId zoneId50 = java.time.ZoneId.systemDefault();
        java.lang.String str51 = zoneId50.getId();
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime49.withZoneSameInstant(zoneId50);
        java.time.ZoneId zoneId53 = java.time.ZoneId.systemDefault();
        java.lang.String str54 = zoneId53.getId();
        java.time.ZonedDateTime zonedDateTime55 = java.time.ZonedDateTime.now(zoneId53);
        java.time.ZonedDateTime zonedDateTime57 = zonedDateTime55.withYear((int) (short) 1);
        boolean boolean58 = zonedDateTime52.equals((java.lang.Object) zonedDateTime57);
        java.time.ZonedDateTime zonedDateTime60 = zonedDateTime52.minusMinutes((long) (short) 0);
        java.time.ZoneId zoneId61 = java.time.ZoneId.systemDefault();
        java.lang.String str62 = zoneId61.getId();
        java.time.ZonedDateTime zonedDateTime63 = java.time.ZonedDateTime.now(zoneId61);
        java.time.ZoneId zoneId64 = java.time.ZoneId.systemDefault();
        java.lang.String str65 = zoneId64.getId();
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime63.withZoneSameInstant(zoneId64);
        java.time.ZonedDateTime zonedDateTime68 = zonedDateTime66.minusYears((long) (short) 0);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        long long70 = zonedDateTime66.getLong((java.time.temporal.TemporalField) chronoField69);
        boolean boolean71 = zonedDateTime52.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime66);
        java.time.ZoneOffset zoneOffset72 = zonedDateTime52.getOffset();
        java.time.OffsetTime offsetTime73 = java.time.OffsetTime.of(localTime46, zoneOffset72);
        long long74 = localDateTime9.toEpochSecond(zoneOffset72);
        java.time.Duration duration75 = java.time.Duration.ZERO;
        java.time.Duration duration77 = duration75.minusMillis((long) (byte) 0);
        java.time.Duration duration79 = duration75.plusNanos((long) 781000000);
        java.time.Duration duration80 = java.time.Duration.ZERO;
        java.time.Duration duration82 = duration80.minusMillis((long) (byte) 0);
        java.time.Duration duration84 = duration82.plusMillis((long) 'u');
        java.time.Duration duration86 = duration82.minusNanos((long) ' ');
        java.time.Duration duration87 = duration79.minus(duration82);
        boolean boolean88 = zoneOffset72.equals((java.lang.Object) duration79);
        java.time.Duration duration90 = duration79.minusNanos((long) 7);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneRules40);
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "23:59:59.999999999+18:00" + "'", str42, "23:59:59.999999999+18:00");
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(zoneId47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(zoneId50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Etc/UTC" + "'", str51, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(zoneId53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Etc/UTC" + "'", str54, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(zoneId61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Etc/UTC" + "'", str62, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertNotNull(zoneId64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Etc/UTC" + "'", str65, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField69.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 13L + "'", long70 == 13L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetTime73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 64897L + "'", long74 == 64897L);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(duration90);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        java.nio.DoubleBuffer doubleBuffer5 = doubleBuffer4.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer8 = doubleBuffer5.put(9, 46.0d);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        boolean boolean1 = strMap0.isEmpty();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        int int3 = strMap0.size();
        java.util.Locale locale4 = java.util.Locale.US;
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale4.getLanguage();
        java.nio.charset.Charset charset9 = strMap0.get((java.lang.Object) str8);
        java.nio.charset.Charset charset11 = java.nio.charset.Charset.defaultCharset();
        boolean boolean12 = charset11.isRegistered();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset13 = strMap0.put("LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0,000000, max=-9223372036854775808}", charset11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Stati Uniti" + "'", str6, "Stati Uniti");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en" + "'", str8, "en");
        org.junit.Assert.assertNull(charset9);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer5.asShortBuffer();
        java.nio.ShortBuffer shortBuffer8 = shortBuffer7.slice();
        // The following exception was thrown during execution in test generation
        try {
            short short9 = shortBuffer7.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        java.time.format.DateTimeFormatter dateTimeFormatter18 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale19 = dateTimeFormatter18.getLocale();
        java.lang.String str20 = chronoField17.getDisplayName(locale19);
        java.time.temporal.TemporalUnit temporalUnit21 = chronoField17.getRangeUnit();
        boolean boolean22 = localDateTime4.isSupported(temporalUnit21);
        int int23 = localDateTime4.getSecond();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField17.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AM/PM" + "'", str20, "AM/PM");
        org.junit.Assert.assertTrue("'" + temporalUnit21 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit21.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 37 + "'", int23 == 37);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate5 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset4);
        java.time.Month month7 = java.time.Month.JANUARY;
        java.time.Month month8 = month7.firstMonthOfQuarter();
        java.time.Month month9 = month8.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery10 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period11 = month8.query(periodTemporalQuery10);
        java.time.Period period12 = zoneOffset4.query(periodTemporalQuery10);
        java.time.Period period13 = localDateTime0.query(periodTemporalQuery10);
        java.time.Period period15 = period13.minusMonths((long) 100);
        java.time.Period period17 = period13.withDays(365);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.JANUARY + "'", month7.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.JANUARY + "'", month8.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month9 + "' != '" + java.time.Month.JANUARY + "'", month9.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = java.time.LocalTime.of(2, 10000000, (-5), 78000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 10000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) 1);
        org.junit.Assert.assertNotNull(fileTime1);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.ofEpochDay((long) 10);
        int int4 = localDate1.compareTo((java.time.chrono.ChronoLocalDate) localDate3);
        java.time.chrono.IsoChronology isoChronology5 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate10 = isoChronology5.dateYearDay((java.time.chrono.Era) isoEra7, 0, 16);
        java.time.LocalTime localTime11 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime12 = localDate10.atTime(localTime11);
        java.time.LocalDate localDate14 = localDate10.withMonth(1);
        boolean boolean15 = localDate10.isLeapYear();
        java.time.chrono.ChronoPeriod chronoPeriod16 = localDate3.until((java.time.chrono.ChronoLocalDate) localDate10);
        java.time.DayOfWeek dayOfWeek17 = localDate10.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra7.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronoPeriod16);
        org.junit.Assert.assertTrue("'" + dayOfWeek17 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek17.equals(java.time.DayOfWeek.TUESDAY));
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.ZonedDateTime zonedDateTime1 = java.time.ZonedDateTime.now(clock0);
        int int2 = zonedDateTime1.getSecond();
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime1.withHour(4);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.minusDays((long) '4');
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.lang.String str10 = zoneOffset9.getId();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        boolean boolean17 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset18);
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime20.plusNanos((long) (short) 10);
        java.time.Duration duration23 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal24 = null;
        java.time.temporal.Temporal temporal25 = duration23.subtractFrom(temporal24);
        long long26 = duration23.toDays();
        java.time.temporal.Temporal temporal27 = null;
        java.time.temporal.Temporal temporal28 = duration23.addTo(temporal27);
        java.time.chrono.IsoChronology isoChronology29 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra31 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate34 = isoChronology29.dateYearDay((java.time.chrono.Era) isoEra31, 0, 16);
        java.time.LocalTime localTime35 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime36 = localDate34.atTime(localTime35);
        java.time.LocalTime localTime38 = localTime35.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap39 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology40 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean41 = strMapMap39.containsKey((java.lang.Object) isoChronology40);
        java.time.chrono.IsoEra isoEra42 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate45 = isoChronology40.dateYearDay((java.time.chrono.Era) isoEra42, (-1), 10);
        java.time.Duration duration46 = java.time.Duration.ZERO;
        java.time.Duration duration47 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal48 = null;
        java.time.temporal.Temporal temporal49 = duration47.subtractFrom(temporal48);
        long long50 = duration47.toDays();
        java.time.Duration duration51 = duration46.plus(duration47);
        long long52 = duration47.toDays();
        java.lang.String str53 = duration47.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate54 = localDate45.plus((java.time.temporal.TemporalAmount) duration47);
        java.time.LocalTime localTime55 = localTime35.minus((java.time.temporal.TemporalAmount) duration47);
        java.time.temporal.Temporal temporal56 = duration23.addTo((java.time.temporal.Temporal) localTime35);
        int int57 = localTime35.getMinute();
        java.time.LocalTime localTime59 = localTime35.withMinute((int) (short) 0);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime60 = zonedDateTime22.with((java.time.temporal.TemporalAdjuster) localTime59);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale64 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = chronoField61.getDisplayName(locale64);
        boolean boolean67 = chronoField61.isTimeBased();
        int int68 = localTime59.get((java.time.temporal.TemporalField) chronoField61);
        java.time.ZonedDateTime zonedDateTime70 = zonedDateTime4.with((java.time.temporal.TemporalField) chronoField61, 1L);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(zonedDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 13 + "'", int2 == 13);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+18:00" + "'", str10, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNull(temporal25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNull(temporal28);
        org.junit.Assert.assertNotNull(isoChronology29);
        org.junit.Assert.assertTrue("'" + isoEra31 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra31.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(isoChronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + isoEra42 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra42.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNull(temporal49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT0S" + "'", str53, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(temporal56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 59 + "'", int57 == 59);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField61.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale64.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "599b081c1808" + "'", str65, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ClockHourOfDay" + "'", str66, "ClockHourOfDay");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 23 + "'", int68 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime70);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics3.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic6);
        double[] doubleArray8 = descriptiveStatistics0.getSortedValues();
        double double9 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) (short) 10);
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        int int4 = fieldPosition2.getField();
        int int5 = fieldPosition2.getField();
        java.text.Format.Field field6 = fieldPosition2.getFieldAttribute();
        org.junit.Assert.assertNull(field3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNull(field6);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalDate localDate20 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra14, 120, (int) '-');
        java.time.ZoneId zoneId21 = java.time.ZoneId.systemDefault();
        java.lang.String str22 = zoneId21.getId();
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.now(zoneId21);
        java.time.ZoneId zoneId24 = java.time.ZoneId.systemDefault();
        java.lang.String str25 = zoneId24.getId();
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime23.withZoneSameInstant(zoneId24);
        java.time.ZoneId zoneId27 = java.time.ZoneId.systemDefault();
        java.lang.String str28 = zoneId27.getId();
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.now(zoneId27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime29.withYear((int) (short) 1);
        boolean boolean32 = zonedDateTime26.equals((java.lang.Object) zonedDateTime31);
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime26.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology35 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime26);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        long long37 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField36);
        boolean boolean38 = isoEra14.isSupported((java.time.temporal.TemporalField) chronoField36);
        java.time.DayOfWeek dayOfWeek39 = java.time.DayOfWeek.FRIDAY;
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap40 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology41 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean42 = strMapMap40.containsKey((java.lang.Object) isoChronology41);
        java.time.Duration duration43 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal44 = null;
        java.time.temporal.Temporal temporal45 = duration43.subtractFrom(temporal44);
        long long46 = duration43.toDays();
        boolean boolean47 = strMapMap40.contains((java.lang.Object) duration43);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray50 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, zoneOffsetTransitionArray50);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray53 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList54 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, zoneOffsetTransitionArray53);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray56 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList57 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList57, zoneOffsetTransitionRuleArray56);
        java.time.zone.ZoneRules zoneRules59 = java.time.zone.ZoneRules.of(zoneOffset48, zoneOffset49, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList57);
        java.time.Clock clock60 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset48);
        java.time.format.TextStyle textStyle61 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = zoneOffset48.getDisplayName(textStyle61, locale62);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray64 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList65 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, zoneOffsetTransitionArray64);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream67 = zoneOffsetTransitionList65.stream();
        int int68 = zoneOffsetTransitionList65.size();
        java.lang.Cloneable cloneable69 = strMapMap40.getOrDefault((java.lang.Object) textStyle61, (java.lang.Cloneable) zoneOffsetTransitionList65);
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale71 = java.util.Locale.UK;
        java.lang.String str72 = locale71.toLanguageTag();
        java.lang.String str73 = chronoField70.getDisplayName(locale71);
        java.lang.String str74 = locale71.getScript();
        java.lang.String str75 = dayOfWeek39.getDisplayName(textStyle61, locale71);
        java.util.Locale locale76 = java.util.Locale.US;
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.lang.String str78 = locale76.getDisplayCountry(locale77);
        java.lang.String str79 = isoEra14.getDisplayName(textStyle61, locale76);
        java.util.Locale locale80 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str81 = locale76.getDisplayCountry(locale80);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Etc/UTC" + "'", str22, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(zoneId24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Etc/UTC" + "'", str25, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Etc/UTC" + "'", str28, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField36.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645435393L + "'", long37 == 1645435393L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + dayOfWeek39 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek39.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertNotNull(isoChronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNull(temporal45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneRules59);
        org.junit.Assert.assertNotNull(clock60);
        org.junit.Assert.assertTrue("'" + textStyle61 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle61.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+18:00" + "'", str63, "+18:00");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(cloneable69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField70.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "en-GB" + "'", str72, "en-GB");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "AlignedWeekOfYear" + "'", str73, "AlignedWeekOfYear");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Fri" + "'", str75, "Fri");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Stati Uniti" + "'", str78, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u7f8e\u570b" + "'", str81, "\u7f8e\u570b");
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.slice();
        java.nio.FloatBuffer floatBuffer5 = floatBuffer1.put(floatBuffer3);
        java.nio.Buffer buffer7 = floatBuffer5.position(1);
        float float8 = floatBuffer5.get();
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        java.net.NetworkInterface networkInterface3 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics4.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics4.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics4.getGeometricMeanImpl();
        double double9 = descriptiveStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getSkewnessImpl();
        boolean boolean11 = networkInterface3.equals((java.lang.Object) descriptiveStatistics4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics4.getGeometricMeanImpl();
        long long13 = descriptiveStatistics4.getN();
        double[] doubleArray14 = descriptiveStatistics4.getSortedValues();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(networkInterface3);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        java.time.LocalTime localTime22 = localDateTime21.toLocalTime();
        java.time.temporal.Temporal temporal23 = localDate16.adjustInto((java.time.temporal.Temporal) localDateTime21);
        java.time.LocalDateTime localDateTime25 = localDateTime21.minusDays((long) (-1));
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.MAX;
        java.lang.String str29 = zoneOffset28.getId();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset28);
        java.time.LocalTime localTime31 = localDateTime30.toLocalTime();
        boolean boolean32 = localDateTime25.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.lang.String str36 = zoneOffset35.getId();
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset35);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.MAX;
        java.lang.String str41 = zoneOffset40.getId();
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset40);
        boolean boolean43 = localDateTime37.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.lang.String str47 = zoneOffset46.getId();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.MAX;
        java.lang.String str52 = zoneOffset51.getId();
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset51);
        boolean boolean54 = localDateTime48.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.format.DateTimeFormatter dateTimeFormatter55 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str56 = localDateTime53.format(dateTimeFormatter55);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int58 = localDateTime53.get((java.time.temporal.TemporalField) chronoField57);
        boolean boolean59 = localDateTime42.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.lang.String str60 = localDateTime53.toString();
        java.time.chrono.Chronology chronology61 = localDateTime53.getChronology();
        java.time.LocalDateTime localDateTime63 = localDateTime53.plusYears((long) (short) 0);
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.MAX;
        java.lang.String str67 = zoneOffset66.getId();
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset66);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        int int81 = zoneOffset66.compareTo(zoneOffset69);
        long long82 = localDateTime63.toEpochSecond(zoneOffset69);
        java.lang.String str83 = zoneOffset69.getId();
        java.time.ZonedDateTime zonedDateTime84 = java.time.ZonedDateTime.of(localDateTime30, (java.time.ZoneId) zoneOffset69);
        java.time.LocalDateTime localDateTime86 = localDateTime30.minusDays(1645434863L);
        java.time.LocalDateTime localDateTime88 = localDateTime86.withSecond(1);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(temporal23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+18:00" + "'", str29, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+18:00" + "'", str36, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+18:00" + "'", str41, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+18:00" + "'", str47, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+18:00" + "'", str52, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str56, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField57.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str60, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+18:00" + "'", str67, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 97L + "'", long82 == 97L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+18:00" + "'", str83, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        boolean boolean5 = doubleBuffer4.hasArray();
        java.nio.DoubleBuffer doubleBuffer6 = doubleBuffer4.slice();
        java.nio.DoubleBuffer doubleBuffer7 = doubleBuffer6.slice();
        boolean boolean8 = doubleBuffer6.hasArray();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor4 = strSet3.iterator();
        java.lang.Object obj5 = null;
        boolean boolean6 = strSet3.remove(obj5);
        java.time.format.DateTimeFormatter dateTimeFormatter7 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.time.ZoneId zoneId8 = java.time.ZoneId.systemDefault();
        java.lang.String str9 = zoneId8.getId();
        java.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withZone(zoneId8);
        boolean boolean11 = strSet3.contains((java.lang.Object) dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Stati Uniti" + "'", str2, "Stati Uniti");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Etc/UTC" + "'", str9, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        java.io.File file4 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long5 = file4.lastModified();
        java.net.URL uRL6 = file4.toURL();
        java.io.File file7 = file4.getCanonicalFile();
        java.lang.String str8 = file4.getPath();
        long long9 = file4.getFreeSpace();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file10 = java.io.File.createTempFile("DayOfYear", "java.nio.HeapIntBuffer[pos=0 lim=13 cap=13]", file4);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No such file or directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file4.getParent(), "/");
        org.junit.Assert.assertEquals(file4.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(uRL6);
        org.junit.Assert.assertEquals(uRL6.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/");
        org.junit.Assert.assertEquals(file7.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/1970-01-01T18:01:37.00000012" + "'", str8, "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.time.chrono.IsoEra isoEra11 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate14 = isoChronology9.dateYearDay((java.time.chrono.Era) isoEra11, (-1), 10);
        int int16 = isoChronology6.prolepticYear((java.time.chrono.Era) isoEra11, (int) '#');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.temporal.Temporal temporal18 = isoEra11.adjustInto((java.time.temporal.Temporal) localDateTime17);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate22 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset21);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset21);
        java.time.Month month24 = java.time.Month.JANUARY;
        java.time.Month month25 = month24.firstMonthOfQuarter();
        java.time.Month month26 = month25.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = month25.query(periodTemporalQuery27);
        java.time.Period period29 = zoneOffset21.query(periodTemporalQuery27);
        java.time.Period period30 = localDateTime17.query(periodTemporalQuery27);
        java.time.Period period32 = period30.withDays(1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + isoEra11 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra11.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-34) + "'", int16 == (-34));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + month24 + "' != '" + java.time.Month.JANUARY + "'", month24.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month25 + "' != '" + java.time.Month.JANUARY + "'", month25.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.JANUARY + "'", month26.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean17 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.OffsetTime offsetTime19 = offsetTime13.plusMinutes((long) 'u');
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray29 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30, zoneOffsetTransitionRuleArray29);
        java.time.zone.ZoneRules zoneRules32 = java.time.zone.ZoneRules.of(zoneOffset21, zoneOffset22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30);
        java.time.OffsetTime offsetTime33 = localTime20.atOffset(zoneOffset21);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange35 = offsetTime33.range((java.time.temporal.TemporalField) chronoField34);
        java.time.Duration duration36 = java.time.Duration.ZERO;
        java.time.Duration duration37 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal38 = null;
        java.time.temporal.Temporal temporal39 = duration37.subtractFrom(temporal38);
        long long40 = duration37.toDays();
        java.time.Duration duration41 = duration36.minus(duration37);
        java.time.OffsetTime offsetTime42 = offsetTime33.minus((java.time.temporal.TemporalAmount) duration37);
        java.time.LocalTime localTime43 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray46 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList47 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, zoneOffsetTransitionArray46);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray49 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList50 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, zoneOffsetTransitionArray49);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray52 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList53 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList53, zoneOffsetTransitionRuleArray52);
        java.time.zone.ZoneRules zoneRules55 = java.time.zone.ZoneRules.of(zoneOffset44, zoneOffset45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList53);
        java.time.OffsetTime offsetTime56 = localTime43.atOffset(zoneOffset44);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange58 = offsetTime56.range((java.time.temporal.TemporalField) chronoField57);
        java.time.Duration duration59 = java.time.Duration.ZERO;
        java.time.Duration duration60 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal61 = null;
        java.time.temporal.Temporal temporal62 = duration60.subtractFrom(temporal61);
        long long63 = duration60.toDays();
        java.time.Duration duration64 = duration59.minus(duration60);
        java.time.OffsetTime offsetTime65 = offsetTime56.minus((java.time.temporal.TemporalAmount) duration60);
        boolean boolean66 = offsetTime42.isAfter(offsetTime56);
        java.time.OffsetTime offsetTime68 = offsetTime42.withNano((int) '#');
        java.time.LocalTime localTime69 = offsetTime42.toLocalTime();
        boolean boolean70 = offsetTime19.isEqual(offsetTime42);
        java.time.temporal.ChronoField chronoField71 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.chrono.IsoChronology isoChronology72 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra74 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate77 = isoChronology72.dateYearDay((java.time.chrono.Era) isoEra74, 0, 16);
        java.time.LocalTime localTime78 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime79 = localDate77.atTime(localTime78);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray82 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList83 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList83, zoneOffsetTransitionArray82);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray85 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList86 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList86, zoneOffsetTransitionArray85);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray88 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList89 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList89, zoneOffsetTransitionRuleArray88);
        java.time.zone.ZoneRules zoneRules91 = java.time.zone.ZoneRules.of(zoneOffset80, zoneOffset81, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList83, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList86, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList89);
        long long92 = localDateTime79.toEpochSecond(zoneOffset80);
        java.time.LocalTime localTime93 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset80);
        java.time.temporal.ValueRange valueRange94 = chronoField71.rangeRefinedBy((java.time.temporal.TemporalAccessor) localTime93);
        java.time.OffsetTime offsetTime95 = offsetTime19.with((java.time.temporal.TemporalAdjuster) localTime93);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNull(temporal39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneRules55);
        org.junit.Assert.assertNotNull(offsetTime56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField57.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNull(temporal62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(offsetTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(offsetTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + chronoField71 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField71.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertNotNull(isoChronology72);
        org.junit.Assert.assertTrue("'" + isoEra74 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra74.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(zoneRules91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-62134279201L) + "'", long92 == (-62134279201L));
        org.junit.Assert.assertNotNull(localTime93);
        org.junit.Assert.assertNotNull(valueRange94);
        org.junit.Assert.assertNotNull(offsetTime95);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        boolean boolean12 = zoneRules11.isFixedOffset();
        java.time.Instant instant13 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition14 = zoneRules11.nextTransition(instant13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.lang.String str24 = zoneOffset23.getId();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset23);
        boolean boolean26 = localDateTime20.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.MAX;
        java.lang.String str28 = zoneOffset27.getId();
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.of(localDateTime25, (java.time.ZoneId) zoneOffset27);
        java.util.Date date31 = new java.util.Date((long) (byte) 1);
        java.lang.Cloneable cloneable32 = strMapMap15.getOrDefault((java.lang.Object) localDateTime25, (java.lang.Cloneable) date31);
        date31.setYear((int) (byte) 1);
        java.time.Instant instant35 = date31.toInstant();
        java.time.ZoneOffset zoneOffset36 = zoneRules11.getOffset(instant35);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+18:00" + "'", str24, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+18:00" + "'", str28, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 UTC 1901");
        org.junit.Assert.assertNotNull(cloneable32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(zoneOffset36);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        java.net.InetAddress inetAddress1 = java.net.InetAddress.getByName("");
        boolean boolean2 = inetAddress1.isMCNodeLocal();
        org.junit.Assert.assertNotNull(inetAddress1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        boolean boolean13 = zoneRules12.isFixedOffset();
        java.time.Instant instant14 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules12.previousTransition(instant14);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = zoneRules12.getTransitionRules();
        java.time.Instant instant17 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition18 = zoneRules12.previousTransition(instant17);
        java.time.Instant instant19 = java.time.Instant.MAX;
        java.time.Instant instant21 = instant19.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset22 = zoneRules12.getOffset(instant21);
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery24 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period25 = offsetDateTime23.query(periodTemporalQuery24);
        java.time.chrono.Chronology chronology26 = period25.getChronology();
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MAX;
        java.lang.String str30 = zoneOffset29.getId();
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset29);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.lang.String str35 = zoneOffset34.getId();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset34);
        boolean boolean37 = localDateTime31.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str39 = localDateTime36.format(dateTimeFormatter38);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int41 = localDateTime36.get((java.time.temporal.TemporalField) chronoField40);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.lang.String str45 = zoneOffset44.getId();
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset44);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.MAX;
        java.lang.String str50 = zoneOffset49.getId();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset49);
        boolean boolean52 = localDateTime46.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.format.DateTimeFormatter dateTimeFormatter53 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str54 = localDateTime51.format(dateTimeFormatter53);
        boolean boolean55 = localDateTime36.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean57 = localDateTime36.isSupported((java.time.temporal.TemporalField) chronoField56);
        java.time.Period period59 = java.time.Period.ofYears((int) '\000');
        java.time.Period period61 = period59.minusDays((long) (short) 0);
        java.time.LocalDateTime localDateTime62 = localDateTime36.plus((java.time.temporal.TemporalAmount) period59);
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.MAX;
        java.time.Clock clock64 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset63);
        java.time.ZoneId zoneId65 = java.time.ZoneId.systemDefault();
        java.lang.String str66 = zoneId65.getId();
        java.lang.String str67 = zoneId65.getId();
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.ofInstant(localDateTime62, zoneOffset63, zoneId65);
        java.time.Clock clock69 = java.time.Clock.system(zoneId65);
        java.time.chrono.ChronoLocalDate chronoLocalDate70 = chronology26.dateNow(clock69);
        java.time.OffsetTime offsetTime71 = java.time.OffsetTime.now(clock69);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList16);
        org.junit.Assert.assertNull(zoneOffsetTransition18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(periodTemporalQuery24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+18:00" + "'", str30, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+18:00" + "'", str35, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str39, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+18:00" + "'", str45, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+18:00" + "'", str50, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str54, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField56.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(zoneId65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Etc/UTC" + "'", str66, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Etc/UTC" + "'", str67, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(clock69);
        org.junit.Assert.assertNotNull(chronoLocalDate70);
        org.junit.Assert.assertNotNull(offsetTime71);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofPattern("java.nio.channels.AsynchronousCloseException");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown pattern letter: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean17 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.temporal.TemporalUnit temporalUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime20 = offsetTime13.plus(31556889864403199L, temporalUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor4 = strSet3.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = strItor4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Stati Uniti" + "'", str2, "Stati Uniti");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strItor4);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.IntStream intStream4 = intStream3.distinct();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt5 = intStream3.max();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.temporal.TemporalUnit temporalUnit16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime17 = localDateTime9.minus((long) 0, temporalUnit16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime88.plusHours((long) 256);
        java.time.Duration duration94 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal95 = null;
        java.time.temporal.Temporal temporal96 = duration94.subtractFrom(temporal95);
        long long97 = duration94.toDays();
        java.time.OffsetDateTime offsetDateTime98 = offsetDateTime93.minus((java.time.temporal.TemporalAmount) duration94);
        long long99 = offsetDateTime98.toEpochSecond();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNull(temporal96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertNotNull(offsetDateTime98);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 921697L + "'", long99 == 921697L);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.TUESDAY;
        java.time.format.TextStyle textStyle1 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = dayOfWeek0.getDisplayName(textStyle1, locale2);
        java.lang.String str4 = locale2.toLanguageTag();
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertTrue("'" + textStyle1 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle1.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Di" + "'", str3, "Di");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "de" + "'", str4, "de");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.write("");
        printWriter1.flush();
        printWriter1.write("/");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.slice();
        float float4 = floatBuffer1.get((int) (byte) 0);
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate3 = java.time.LocalDate.of(365, 14, 18);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 14");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.net.URI uRI1 = new java.net.URI("");
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream3 = new java.io.PrintStream(outputStream0, true, "java.text.AttributedCharacterIterator$Attribute(reading)");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.DayOfWeek dayOfWeek90 = offsetDateTime88.getDayOfWeek();
        java.time.OffsetDateTime offsetDateTime92 = offsetDateTime88.plusWeeks(97L);
        java.time.Duration duration93 = java.time.Duration.ZERO;
        java.time.Duration duration94 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal95 = null;
        java.time.temporal.Temporal temporal96 = duration94.subtractFrom(temporal95);
        long long97 = duration94.toDays();
        java.time.Duration duration98 = duration93.minus(duration94);
        java.time.OffsetDateTime offsetDateTime99 = offsetDateTime88.minus((java.time.temporal.TemporalAmount) duration93);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertTrue("'" + dayOfWeek90 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek90.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertNotNull(offsetDateTime92);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNull(temporal96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertNotNull(duration98);
        org.junit.Assert.assertNotNull(offsetDateTime99);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MIN;
        java.time.ZoneId zoneId1 = java.time.ZoneId.systemDefault();
        java.lang.String str2 = zoneId1.getId();
        java.time.ZonedDateTime zonedDateTime3 = java.time.ZonedDateTime.now(zoneId1);
        java.time.ZoneId zoneId4 = java.time.ZoneId.systemDefault();
        java.lang.String str5 = zoneId4.getId();
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime3.withZoneSameInstant(zoneId4);
        java.lang.String str7 = zonedDateTime6.toString();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String str10 = locale9.toLanguageTag();
        java.lang.String str11 = chronoField8.getDisplayName(locale9);
        long long12 = zonedDateTime6.getLong((java.time.temporal.TemporalField) chronoField8);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime14 = offsetTime0.with((java.time.temporal.TemporalField) chronoField8, 23L);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime3);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T09:14:20.252Z[Etc/UTC]" + "'", str7, "2022-02-21T09:14:20.252Z[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField8.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en-GB" + "'", str10, "en-GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AlignedWeekOfYear" + "'", str11, "AlignedWeekOfYear");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 8L + "'", long12 == 8L);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.util.Locale locale2 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "599b081c1808" + "'", str3, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DIRECT" + "'", str4, "DIRECT");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.util.Date date5 = new java.util.Date((int) (byte) 1, 37, (int) (short) 100, 59, (int) '#');
        org.junit.Assert.assertEquals(date5.toString(), "Thu May 12 11:35:00 UTC 1904");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        int[] intArray4 = intStream3.toArray();
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.function.IntToDoubleFunction intToDoubleFunction6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream7 = intStream5.mapToDouble(intToDoubleFunction6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit5 = null;
        boolean boolean6 = zonedDateTime2.isSupported(temporalUnit5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange8 = zonedDateTime2.range((java.time.temporal.TemporalField) chronoField7);
        java.time.ZoneId zoneId9 = java.time.ZoneId.systemDefault();
        java.lang.String str10 = zoneId9.getId();
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.now(zoneId9);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withYear((int) (short) 1);
        java.time.LocalTime localTime14 = zonedDateTime13.toLocalTime();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean18 = strMapMap16.containsKey((java.lang.Object) isoChronology17);
        java.time.Duration duration19 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal20 = null;
        java.time.temporal.Temporal temporal21 = duration19.subtractFrom(temporal20);
        long long22 = duration19.toDays();
        boolean boolean23 = strMapMap16.contains((java.lang.Object) duration19);
        java.lang.Cloneable cloneable24 = strMapMap15.get((java.lang.Object) duration19);
        java.time.Duration duration25 = java.time.Duration.ZERO;
        java.time.Duration duration26 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal27 = null;
        java.time.temporal.Temporal temporal28 = duration26.subtractFrom(temporal27);
        long long29 = duration26.toDays();
        java.time.Duration duration30 = duration25.plus(duration26);
        long long31 = duration26.toDays();
        java.time.Duration duration32 = duration19.plus(duration26);
        java.time.LocalTime localTime33 = localTime14.plus((java.time.temporal.TemporalAmount) duration19);
        java.time.LocalTime localTime35 = localTime33.plusHours(97L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime37 = chronoField7.adjustInto(localTime33, 27L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfWeek (valid values 1 - 7): 27");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField7.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange8);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Etc/UTC" + "'", str10, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNull(temporal21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(cloneable24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNull(temporal28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.write("");
        char[] charArray8 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write(charArray8, (-34), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("{}", "ParseCaseSensitive(false)Value(Year,4)Value(MonthOfYear,2)Value(DayOfMonth,2)[Offset(+HHMMss,'Z')]", 10);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.net.SocketException socketException0 = new java.net.SocketException();
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        long long6 = zonedDateTime2.toEpochSecond();
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(zoneId7);
        java.time.ZonedDateTime zonedDateTime11 = zonedDateTime9.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        boolean boolean22 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str24 = localDateTime21.format(dateTimeFormatter23);
        java.time.chrono.Chronology chronology25 = dateTimeFormatter23.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod29 = chronology25.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime9.plus((java.time.temporal.TemporalAmount) chronoPeriod29);
        boolean boolean31 = zonedDateTime2.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime30);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime30.minusNanos((long) (short) 0);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645434860L + "'", long6 == 1645434860L);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str24, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronoPeriod29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedDateTime33);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.lang.String str3 = isoChronology1.toString();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISO" + "'", str3, "ISO");
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream2, "DecimalStyle[a+-.]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        zoneOffsetTransitionList3.clear();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition26 = null;
        boolean boolean27 = zoneOffsetTransitionList3.add(zoneOffsetTransition26);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator28 = zoneOffsetTransitionList3.spliterator();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator28);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.LocalDateTime localDateTime10 = localDate9.atStartOfDay();
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale14 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = chronoField11.getDisplayName(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime18 = localDateTime10.with((java.time.temporal.TemporalField) chronoField11, (long) 70);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for ClockHourOfDay (valid values 1 - 24): 70");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField11.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale14.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "599b081c1808" + "'", str15, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClockHourOfDay" + "'", str16, "ClockHourOfDay");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.time.Instant instant2 = fileTime1.toInstant();
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.MAX;
        java.lang.String str6 = zoneOffset5.getId();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset5);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MAX;
        java.lang.String str11 = zoneOffset10.getId();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset10);
        boolean boolean13 = localDateTime7.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.format.DateTimeFormatter dateTimeFormatter14 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str15 = localDateTime12.format(dateTimeFormatter14);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal16 = instant2.adjustInto((java.time.temporal.Temporal) localDateTime12);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+18:00" + "'", str6, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+18:00" + "'", str11, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str15, "1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        int int0 = java.util.Spliterator.SIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 64 + "'", int0 == 64);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.time.LocalDate localDate0 = null;
        java.time.Duration duration1 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal2 = null;
        java.time.temporal.Temporal temporal3 = duration1.subtractFrom(temporal2);
        long long4 = duration1.toDays();
        java.time.temporal.Temporal temporal5 = null;
        java.time.temporal.Temporal temporal6 = duration1.addTo(temporal5);
        java.time.chrono.IsoChronology isoChronology7 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra9 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate12 = isoChronology7.dateYearDay((java.time.chrono.Era) isoEra9, 0, 16);
        java.time.LocalTime localTime13 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime14 = localDate12.atTime(localTime13);
        java.time.LocalTime localTime16 = localTime13.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap17 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology18 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean19 = strMapMap17.containsKey((java.lang.Object) isoChronology18);
        java.time.chrono.IsoEra isoEra20 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate23 = isoChronology18.dateYearDay((java.time.chrono.Era) isoEra20, (-1), 10);
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.Duration duration25 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal26 = null;
        java.time.temporal.Temporal temporal27 = duration25.subtractFrom(temporal26);
        long long28 = duration25.toDays();
        java.time.Duration duration29 = duration24.plus(duration25);
        long long30 = duration25.toDays();
        java.lang.String str31 = duration25.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate32 = localDate23.plus((java.time.temporal.TemporalAmount) duration25);
        java.time.LocalTime localTime33 = localTime13.minus((java.time.temporal.TemporalAmount) duration25);
        java.time.temporal.Temporal temporal34 = duration1.addTo((java.time.temporal.Temporal) localTime13);
        java.time.LocalTime localTime36 = localTime13.minusHours(100L);
        int int37 = localTime36.getSecond();
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray43 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, zoneOffsetTransitionArray43);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray46 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList47 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList47, zoneOffsetTransitionRuleArray46);
        java.time.zone.ZoneRules zoneRules49 = java.time.zone.ZoneRules.of(zoneOffset38, zoneOffset39, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList47);
        boolean boolean50 = zoneRules49.isFixedOffset();
        java.time.Instant instant51 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition52 = zoneRules49.previousTransition(instant51);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList53 = zoneRules49.getTransitionRules();
        java.time.Instant instant54 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition55 = zoneRules49.previousTransition(instant54);
        java.time.Instant instant56 = java.time.Instant.MAX;
        java.time.Instant instant58 = instant56.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset59 = zoneRules49.getOffset(instant58);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime60 = java.time.OffsetDateTime.of(localDate0, localTime36, zoneOffset59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: date");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNull(temporal3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNull(temporal6);
        org.junit.Assert.assertNotNull(isoChronology7);
        org.junit.Assert.assertTrue("'" + isoEra9 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra9.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(isoChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + isoEra20 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra20.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNull(temporal27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0S" + "'", str31, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition52);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList53);
        org.junit.Assert.assertNull(zoneOffsetTransition55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(zoneOffset59);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray0 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList1 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList1, zoneOffsetTransitionArray0);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream3 = zoneOffsetTransitionList1.stream();
        java.util.Optional<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionOptional4 = zoneOffsetTransitionStream3.findFirst();
        java.lang.String str5 = zoneOffsetTransitionOptional4.toString();
        java.lang.String str6 = zoneOffsetTransitionOptional4.toString();
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionOptional4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Optional.empty" + "'", str5, "Optional.empty");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional.empty" + "'", str6, "Optional.empty");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        double double1 = doubleSummaryStatistics0.getMin();
        java.lang.String str2 = doubleSummaryStatistics0.toString();
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}" + "'", str2, "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        java.security.cert.CertPath certPath2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.Timestamp timestamp3 = new java.security.Timestamp(date1, certPath2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.THURSDAY;
        java.time.DayOfWeek dayOfWeek2 = dayOfWeek0.minus(31556889864403199L);
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + dayOfWeek2 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek2.equals(java.time.DayOfWeek.TUESDAY));
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.nio.file.Path path25 = path18.relativize(path24);
        boolean boolean26 = path11.startsWith(path18);
        java.net.URI uRI27 = path18.toUri();
        java.nio.file.OpenOption[] openOptionArray28 = new java.nio.file.OpenOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.AsynchronousFileChannel asynchronousFileChannel29 = java.nio.channels.AsynchronousFileChannel.open(path18, openOptionArray28);
            org.junit.Assert.fail("Expected exception of type java.nio.file.NoSuchFileException; message: /1970-01-01T18:01:37.00000012");
        } catch (java.nio.file.NoSuchFileException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(uRI27);
        org.junit.Assert.assertNotNull(openOptionArray28);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.stream.DoubleStream.Builder builder3 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.peek((java.util.function.DoubleConsumer) builder3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfDouble ofDouble5 = doubleStream2.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.time.Period period1 = java.time.Period.ofWeeks(0);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.ZonedDateTime zonedDateTime13 = java.time.ZonedDateTime.of(localDateTime9, (java.time.ZoneId) zoneOffset11);
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime13.plusNanos((long) (short) 10);
        java.time.ZoneId zoneId16 = java.time.ZoneId.systemDefault();
        java.lang.String str17 = zoneId16.getId();
        java.time.ZonedDateTime zonedDateTime18 = java.time.ZonedDateTime.now(zoneId16);
        java.time.ZoneId zoneId19 = java.time.ZoneId.systemDefault();
        java.lang.String str20 = zoneId19.getId();
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime18.withZoneSameInstant(zoneId19);
        long long22 = zonedDateTime18.toEpochSecond();
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime18.minusMonths((long) (-34));
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime18.withDayOfYear((int) '#');
        java.time.DayOfWeek dayOfWeek27 = zonedDateTime18.getDayOfWeek();
        boolean boolean28 = zonedDateTime15.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Etc/UTC" + "'", str17, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Etc/UTC" + "'", str20, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645434861L + "'", long22 == 1645434861L);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + dayOfWeek27 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek27.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.time.Month month1 = java.time.Month.FEBRUARY;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.of((int) (byte) -1, month1, (int) '#', 10, 7);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 35");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.FEBRUARY + "'", month1.equals(java.time.Month.FEBRUARY));
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.LocalTime localTime5 = zonedDateTime4.toLocalTime();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray16 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList17, zoneOffsetTransitionArray16);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray19 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList20 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList20, zoneOffsetTransitionRuleArray19);
        java.time.zone.ZoneRules zoneRules22 = java.time.zone.ZoneRules.of(zoneOffset11, zoneOffset12, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList17, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList20);
        int int23 = zoneOffset8.compareTo(zoneOffset11);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime24 = zonedDateTime4.withZoneSameLocal((java.time.ZoneId) zoneOffset8);
        java.time.Duration duration25 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal26 = null;
        java.time.temporal.Temporal temporal27 = duration25.subtractFrom(temporal26);
        long long28 = duration25.toDays();
        java.time.temporal.Temporal temporal29 = null;
        java.time.temporal.Temporal temporal30 = duration25.addTo(temporal29);
        java.time.chrono.IsoChronology isoChronology31 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate36 = isoChronology31.dateYearDay((java.time.chrono.Era) isoEra33, 0, 16);
        java.time.LocalTime localTime37 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime38 = localDate36.atTime(localTime37);
        java.time.LocalTime localTime40 = localTime37.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap41 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology42 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean43 = strMapMap41.containsKey((java.lang.Object) isoChronology42);
        java.time.chrono.IsoEra isoEra44 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate47 = isoChronology42.dateYearDay((java.time.chrono.Era) isoEra44, (-1), 10);
        java.time.Duration duration48 = java.time.Duration.ZERO;
        java.time.Duration duration49 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal50 = null;
        java.time.temporal.Temporal temporal51 = duration49.subtractFrom(temporal50);
        long long52 = duration49.toDays();
        java.time.Duration duration53 = duration48.plus(duration49);
        long long54 = duration49.toDays();
        java.lang.String str55 = duration49.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate56 = localDate47.plus((java.time.temporal.TemporalAmount) duration49);
        java.time.LocalTime localTime57 = localTime37.minus((java.time.temporal.TemporalAmount) duration49);
        java.time.temporal.Temporal temporal58 = duration25.addTo((java.time.temporal.Temporal) localTime37);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal59 = zoneOffset8.adjustInto(temporal58);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNull(temporal27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNull(temporal30);
        org.junit.Assert.assertNotNull(isoChronology31);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra33.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(isoChronology42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + isoEra44 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra44.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNull(temporal51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT0S" + "'", str55, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(temporal58);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.util.Date date5 = new java.util.Date(171, (-34), (int) (short) 100, 256, 13);
        java.nio.CharBuffer charBuffer7 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer9 = charBuffer7.append((java.lang.CharSequence) "Etc/UTC");
        int int10 = charBuffer9.arrayOffset();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer14 = charBuffer12.append((java.lang.CharSequence) "Etc/UTC");
        int int15 = charBuffer9.read(charBuffer14);
        boolean boolean16 = date5.equals((java.lang.Object) charBuffer9);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Jun 18 16:13:00 UTC 2068");
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.text.ParseException parseException2 = new java.text.ParseException("DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}", 70);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.util.Comparator<java.nio.file.LinkOption> linkOptionComparator0 = java.util.Comparator.naturalOrder();
        org.junit.Assert.assertNotNull(linkOptionComparator0);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.util.function.UnaryOperator<java.io.File> fileUnaryOperator0 = java.util.function.UnaryOperator.identity();
        org.junit.Assert.assertNotNull(fileUnaryOperator0);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.MINUTES;
        org.junit.Assert.assertNotNull(timeUnit0);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.MAX;
        java.lang.String str5 = zoneOffset4.getId();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.lang.String str10 = zoneOffset9.getId();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset9);
        boolean boolean12 = localDateTime6.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.format.DateTimeFormatter dateTimeFormatter13 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str14 = localDateTime11.format(dateTimeFormatter13);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int16 = localDateTime11.get((java.time.temporal.TemporalField) chronoField15);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.lang.String str25 = zoneOffset24.getId();
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset24);
        boolean boolean27 = localDateTime21.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str29 = localDateTime26.format(dateTimeFormatter28);
        boolean boolean30 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean32 = localDateTime11.isSupported((java.time.temporal.TemporalField) chronoField31);
        boolean boolean33 = month0.isSupported((java.time.temporal.TemporalField) chronoField31);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<?> wildcardChronoZonedDateTime34 = java.time.chrono.ChronoZonedDateTime.from((java.time.temporal.TemporalAccessor) month0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: JANUARY of type java.time.Month");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+18:00" + "'", str5, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+18:00" + "'", str10, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str14, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField15.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+18:00" + "'", str25, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str29, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField31.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime88.plusHours((long) 256);
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime88.minusSeconds((long) '0');
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime97 = offsetDateTime95.withMinute(171);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 171");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(offsetDateTime95);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.nio.charset.CoderResult coderResult1 = java.nio.charset.CoderResult.malformedForLength(10);
        // The following exception was thrown during execution in test generation
        try {
            coderResult1.throwException();
            org.junit.Assert.fail("Expected exception of type java.nio.charset.MalformedInputException; message: Input length = 10");
        } catch (java.nio.charset.MalformedInputException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(coderResult1);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.stream.LongStream longStream3 = longStream2.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong4 = longStream2.min();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.lang.Object obj13 = properties1.setProperty("en-GB", "2022-02-21T09:14:01.826Z[Etc/UTC]");
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties1.elements();
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream15, "x-windows-iso2022jp");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objEnumeration14);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        java.util.OptionalInt optionalInt2 = intStream1.max();
        java.lang.String str3 = optionalInt2.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = optionalInt2.getAsInt();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalInt.empty" + "'", str3, "OptionalInt.empty");
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.nio.file.Path path25 = path18.relativize(path24);
        boolean boolean26 = path11.startsWith(path18);
        java.nio.file.Path path27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path28 = path11.resolve(path27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate3 = java.time.LocalDate.of((int) '4', (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 32");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        int int2 = intBuffer1.get();
        int[] intArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer6 = intBuffer1.put(intArray3, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.minus(duration17);
        java.time.OffsetTime offsetTime22 = offsetTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray29 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, zoneOffsetTransitionArray29);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray32 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33, zoneOffsetTransitionRuleArray32);
        java.time.zone.ZoneRules zoneRules35 = java.time.zone.ZoneRules.of(zoneOffset24, zoneOffset25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33);
        java.time.OffsetTime offsetTime36 = localTime23.atOffset(zoneOffset24);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange38 = offsetTime36.range((java.time.temporal.TemporalField) chronoField37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal41 = null;
        java.time.temporal.Temporal temporal42 = duration40.subtractFrom(temporal41);
        long long43 = duration40.toDays();
        java.time.Duration duration44 = duration39.minus(duration40);
        java.time.OffsetTime offsetTime45 = offsetTime36.minus((java.time.temporal.TemporalAmount) duration40);
        boolean boolean46 = offsetTime22.isAfter(offsetTime36);
        java.time.OffsetTime offsetTime48 = offsetTime22.withNano((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime50 = offsetTime48.withMinute((-1));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): -1");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNull(temporal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(offsetTime48);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.stream.DoubleStream.Builder builder3 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.peek((java.util.function.DoubleConsumer) builder3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream5 = doubleStream2.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.security.ProtectionDomain protectionDomain2 = new java.security.ProtectionDomain(codeSource0, permissionCollection1);
        java.lang.String str3 = protectionDomain2.toString();
        org.junit.Assert.assertEquals(protectionDomain2.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ProtectionDomain  null\n null\n <no principals>\n null\n" + "'", str3, "ProtectionDomain  null\n null\n <no principals>\n null\n");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.lang.String str14 = offsetTime13.toString();
        java.time.ZoneOffset zoneOffset15 = offsetTime13.getOffset();
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_TIME;
        boolean boolean17 = offsetTime13.equals((java.lang.Object) dateTimeFormatter16);
        java.time.format.DateTimeFormatter dateTimeFormatter18 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.format.DecimalStyle decimalStyle19 = java.time.format.DecimalStyle.ofDefaultLocale();
        java.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withDecimalStyle(decimalStyle19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = offsetTime13.format(dateTimeFormatter20);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "23:59:59.999999999+18:00" + "'", str14, "23:59:59.999999999+18:00");
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(decimalStyle19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean30 = localDateTime9.isSupported((java.time.temporal.TemporalField) chronoField29);
        java.time.Period period32 = java.time.Period.ofYears((int) '\000');
        java.time.Period period34 = period32.minusDays((long) (short) 0);
        java.time.LocalDateTime localDateTime35 = localDateTime9.plus((java.time.temporal.TemporalAmount) period32);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime37 = localDateTime9.withDayOfMonth(999999999);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 999999999");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField29.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.util.function.IntUnaryOperator intUnaryOperator1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream2 = java.util.stream.IntStream.iterate(13, intUnaryOperator1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        java.nio.CharBuffer charBuffer4 = charBuffer1.append('.');
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime5 = java.time.OffsetDateTime.parse((java.lang.CharSequence) charBuffer4);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '???????????????' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(charBuffer4);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("java.nio.HeapFloatBuffer[pos=256 lim=256 cap=256]");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: java.nio.HeapFloatBuffer[pos=256 lim=256 cap=256]");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        intStream3.close();
        intStream3.close();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream6 = intStream3.asLongStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.isReadOnly();
        java.nio.CharBuffer charBuffer10 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj11 = charBuffer10.array();
        java.nio.ByteOrder byteOrder12 = charBuffer10.order();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.order(byteOrder12);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.slice();
        java.lang.Object obj15 = byteBuffer14.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putChar((int) (short) -1, '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteOrder12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.of(64, 4096, 365, 59, 1969, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 4096");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        int int0 = java.util.Spliterator.DISTINCT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit5 = null;
        boolean boolean6 = zonedDateTime2.isSupported(temporalUnit5);
        java.time.temporal.TemporalUnit temporalUnit7 = null;
        boolean boolean8 = zonedDateTime2.isSupported(temporalUnit7);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator0 = java.util.function.UnaryOperator.identity();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray1 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList2 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList2, zoneOffsetTransitionArray1);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream4 = zoneOffsetTransitionList2.stream();
        java.io.Serializable serializable5 = serializableUnaryOperator0.apply((java.io.Serializable) zoneOffsetTransitionList2);
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator6 = java.util.function.UnaryOperator.identity();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray7 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList8 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, zoneOffsetTransitionArray7);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream10 = zoneOffsetTransitionList8.stream();
        java.io.Serializable serializable11 = serializableUnaryOperator6.apply((java.io.Serializable) zoneOffsetTransitionList8);
        java.io.Serializable serializable13 = serializableUnaryOperator6.apply((java.io.Serializable) 100L);
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator14 = java.util.function.UnaryOperator.identity();
        java.util.function.Function<java.lang.SecurityException, java.io.Serializable> securityExceptionFunction15 = serializableUnaryOperator6.compose((java.util.function.Function<java.io.Serializable, java.io.Serializable>) serializableUnaryOperator14);
        java.util.function.Function<java.io.Serializable, java.io.Serializable> serializableFunction16 = serializableUnaryOperator0.compose((java.util.function.Function<java.io.Serializable, java.io.Serializable>) serializableUnaryOperator14);
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator17 = java.util.function.UnaryOperator.identity();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray18 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, zoneOffsetTransitionArray18);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream21 = zoneOffsetTransitionList19.stream();
        java.io.Serializable serializable22 = serializableUnaryOperator17.apply((java.io.Serializable) zoneOffsetTransitionList19);
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator23 = java.util.function.UnaryOperator.identity();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray24 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, zoneOffsetTransitionArray24);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream27 = zoneOffsetTransitionList25.stream();
        java.io.Serializable serializable28 = serializableUnaryOperator23.apply((java.io.Serializable) zoneOffsetTransitionList25);
        java.io.Serializable serializable30 = serializableUnaryOperator23.apply((java.io.Serializable) 100L);
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator31 = java.util.function.UnaryOperator.identity();
        java.util.function.Function<java.lang.SecurityException, java.io.Serializable> securityExceptionFunction32 = serializableUnaryOperator23.compose((java.util.function.Function<java.io.Serializable, java.io.Serializable>) serializableUnaryOperator31);
        java.util.function.Function<java.io.Serializable, java.io.Serializable> serializableFunction33 = serializableUnaryOperator17.compose((java.util.function.Function<java.io.Serializable, java.io.Serializable>) serializableUnaryOperator31);
        java.util.function.Function<java.util.stream.Collector.Characteristics, java.io.Serializable> characteristicsFunction34 = serializableFunction16.compose((java.util.function.Function<java.io.Serializable, java.io.Serializable>) serializableUnaryOperator17);
        org.junit.Assert.assertNotNull(serializableUnaryOperator0);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(serializableUnaryOperator6);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream10);
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + 100L + "'", serializable13, 100L);
        org.junit.Assert.assertNotNull(serializableUnaryOperator14);
        org.junit.Assert.assertNotNull(securityExceptionFunction15);
        org.junit.Assert.assertNotNull(serializableFunction16);
        org.junit.Assert.assertNotNull(serializableUnaryOperator17);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream21);
        org.junit.Assert.assertNotNull(serializable22);
        org.junit.Assert.assertNotNull(serializableUnaryOperator23);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream27);
        org.junit.Assert.assertNotNull(serializable28);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + 100L + "'", serializable30, 100L);
        org.junit.Assert.assertNotNull(serializableUnaryOperator31);
        org.junit.Assert.assertNotNull(securityExceptionFunction32);
        org.junit.Assert.assertNotNull(serializableFunction33);
        org.junit.Assert.assertNotNull(characteristicsFunction34);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ofPattern("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime3 = java.time.ZonedDateTime.parse((java.lang.CharSequence) "00010221Z", dateTimeFormatter2);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '00010221Z' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.OptionalDouble optionalDouble1 = longStream0.average();
        double double3 = optionalDouble1.orElse((double) 2);
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 2.0d + "'", double3 == 2.0d);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.String str2 = properties1.toString();
        java.lang.String str5 = properties1.getProperty("", "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str5, "1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        float[] floatArray6 = new float[] { '-', (byte) 1, 24L, 2, 1645434861L, 1645434859L };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer9 = java.nio.FloatBuffer.wrap(floatArray6, (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[45.0, 1.0, 24.0, 2.0, 1.64543488E9, 1.64543488E9]");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray29 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, zoneOffsetTransitionArray29);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray32 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33, zoneOffsetTransitionRuleArray32);
        java.time.zone.ZoneRules zoneRules35 = java.time.zone.ZoneRules.of(zoneOffset24, zoneOffset25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33);
        boolean boolean36 = zoneOffsetTransitionList15.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition37 = null;
        boolean boolean38 = zoneOffsetTransitionList15.add(zoneOffsetTransition37);
        java.lang.Object[] objArray39 = zoneOffsetTransitionList15.toArray();
        java.lang.String[] strArray40 = java.util.Locale.getISOLanguages();
        java.lang.String[] strArray41 = zoneOffsetTransitionList15.toArray(strArray40);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream42 = zoneOffsetTransitionList15.stream();
        boolean boolean43 = zoneOffsetTransitionList3.containsAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[null]");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        resizableDoubleArray0.addElement((-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) (-34));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        java.util.OptionalInt optionalInt2 = intStream1.max();
        java.lang.String str3 = optionalInt2.toString();
        boolean boolean4 = optionalInt2.isPresent();
        int int6 = optionalInt2.orElse(10);
        int int8 = optionalInt2.orElse(1);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalInt.empty" + "'", str3, "OptionalInt.empty");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.DayOfWeek dayOfWeek8 = localDate5.getDayOfWeek();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra11 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate14 = isoChronology9.dateYearDay((java.time.chrono.Era) isoEra11, 0, 16);
        java.time.LocalTime localTime15 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime16 = localDate14.atTime(localTime15);
        java.time.LocalDate localDate18 = localDate14.withMonth(1);
        java.time.Period period19 = localDate5.until((java.time.chrono.ChronoLocalDate) localDate14);
        java.time.Period period21 = period19.withYears((int) (short) 100);
        boolean boolean22 = period21.isZero();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + dayOfWeek8 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek8.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + isoEra11 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra11.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.Buffer buffer7 = longBuffer2.flip();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer10 = longBuffer2.put(4096, 1645434848L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.lang.String str3 = charBuffer1.toString();
        java.nio.CharBuffer charBuffer6 = charBuffer1.put(4, '4');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer9 = charBuffer6.subSequence(14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str3, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(charBuffer6);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.time.format.FormatStyle formatStyle0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: timeStyle");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.nio.CharBuffer charBuffer14 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer16 = charBuffer14.append((java.lang.CharSequence) "Etc/UTC");
        int int17 = charBuffer16.arrayOffset();
        boolean boolean18 = path11.equals((java.lang.Object) int17);
        java.nio.file.Path path19 = path11.getRoot();
        java.nio.file.Path path20 = path19.getRoot();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(path19);
        org.junit.Assert.assertNotNull(path20);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.net.URL uRL8 = new java.net.URL(uRL4, "/");
        java.lang.Object obj9 = uRL8.getContent();
        java.lang.String str10 = uRL8.getPath();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals(uRL8.toString(), "file:/");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/" + "'", str10, "/");
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.time.Instant instant0 = java.time.Instant.MAX;
        java.time.Instant instant2 = instant0.plusNanos((long) (short) -1);
        long long3 = instant2.getEpochSecond();
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.lang.String str7 = zoneOffset6.getId();
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.now((java.time.ZoneId) zoneOffset6);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'x', 70, zoneOffset6);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime10 = java.time.OffsetDateTime.ofInstant(instant2, (java.time.ZoneId) zoneOffset6);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000001");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 31556889864403199L + "'", long3 == 31556889864403199L);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+18:00" + "'", str7, "+18:00");
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.LocalDate localDate7 = localDate5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.LocalDateTime localDateTime8 = localDate7.atStartOfDay();
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange10 = chronoField9.range();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDate7.get((java.time.temporal.TemporalField) chronoField9);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: SecondOfMinute");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField9.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange10);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.LocalDate localDate18 = localDate9.minusWeeks((long) 100);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        boolean boolean20 = chronoField19.isTimeBased();
        boolean boolean21 = localDate18.isSupported((java.time.temporal.TemporalField) chronoField19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.lang.String str25 = zoneOffset24.getId();
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset24);
        java.time.LocalTime localTime27 = localDateTime26.toLocalTime();
        java.time.temporal.ValueRange valueRange28 = chronoField19.rangeRefinedBy((java.time.temporal.TemporalAccessor) localTime27);
        java.time.ZoneId zoneId29 = java.time.ZoneId.systemDefault();
        java.lang.String str30 = zoneId29.getId();
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.now(zoneId29);
        java.time.ZoneId zoneId32 = java.time.ZoneId.systemDefault();
        java.lang.String str33 = zoneId32.getId();
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime31.withZoneSameInstant(zoneId32);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime35 = zonedDateTime31.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime37 = chronoField19.adjustInto(zonedDateTime31, 1645434841L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MilliOfSecond (valid values 0 - 999): 1645434841");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField19.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+18:00" + "'", str25, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Etc/UTC" + "'", str33, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime35);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        // The following exception was thrown during execution in test generation
        try {
            filterOutputStream1.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.LocalDate localDate7 = localDate5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.LocalDateTime localDateTime8 = localDate7.atStartOfDay();
        java.time.LocalDate localDate10 = localDate7.plusYears((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime13 = localDate7.atTime((int) '.', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 46");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.io.InvalidObjectException invalidObjectException1 = new java.io.InvalidObjectException("en-GB");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) (short) 10);
        int int3 = fieldPosition2.getField();
        int int4 = fieldPosition2.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = java.time.LocalTime.of(1969, 70, (int) (byte) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 1969");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 1024, (long) 64);
        java.time.temporal.TemporalUnit temporalUnit4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration5 = duration2.plus(53L, temporalUnit4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: unit");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        int int0 = java.util.Spliterator.IMMUTABLE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1024 + "'", int0 == 1024);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.time.temporal.ValueRange valueRange3 = java.time.temporal.ValueRange.of((long) '4', (long) (short) -1, (long) 'x');
        java.time.ZoneId zoneId5 = java.time.ZoneId.systemDefault();
        java.lang.String str6 = zoneId5.getId();
        java.time.ZonedDateTime zonedDateTime7 = java.time.ZonedDateTime.now(zoneId5);
        java.time.ZoneId zoneId8 = java.time.ZoneId.systemDefault();
        java.lang.String str9 = zoneId8.getId();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime7.withZoneSameInstant(zoneId8);
        java.lang.String str11 = zonedDateTime10.toString();
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.toLanguageTag();
        java.lang.String str15 = chronoField12.getDisplayName(locale13);
        long long16 = zonedDateTime10.getLong((java.time.temporal.TemporalField) chronoField12);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = chronoField12.getDisplayName(locale17);
        int int21 = valueRange3.checkValidIntValue(100L, (java.time.temporal.TemporalField) chronoField12);
        org.junit.Assert.assertNotNull(valueRange3);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Etc/UTC" + "'", str9, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T09:14:23.097Z[Etc/UTC]" + "'", str11, "2022-02-21T09:14:23.097Z[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField12.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en-GB" + "'", str14, "en-GB");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AlignedWeekOfYear" + "'", str15, "AlignedWeekOfYear");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 8L + "'", long16 == 8L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "italiano" + "'", str19, "italiano");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AlignedWeekOfYear" + "'", str20, "AlignedWeekOfYear");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        boolean boolean17 = valueRange15.isValidIntValue((long) '#');
        boolean boolean19 = valueRange15.isValidValue((long) 16);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.chrono.Chronology chronology13 = dateTimeFormatter11.getChronology();
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.LocalDate localDate23 = localDate19.withMonth(1);
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = chronology13.date((java.time.temporal.TemporalAccessor) localDate19);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray30 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, zoneOffsetTransitionArray30);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray33 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34, zoneOffsetTransitionRuleArray33);
        java.time.zone.ZoneRules zoneRules36 = java.time.zone.ZoneRules.of(zoneOffset25, zoneOffset26, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34);
        java.time.Clock clock37 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset25);
        java.time.format.TextStyle textStyle38 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = zoneOffset25.getDisplayName(textStyle38, locale39);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        java.time.format.DateTimeFormatter dateTimeFormatter42 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale43 = dateTimeFormatter42.getLocale();
        java.lang.String str44 = chronoField41.getDisplayName(locale43);
        java.lang.String str45 = chronology13.getDisplayName(textStyle38, locale43);
        java.lang.String str46 = locale43.getDisplayCountry();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(clock37);
        org.junit.Assert.assertTrue("'" + textStyle38 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle38.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+18:00" + "'", str40, "+18:00");
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField41.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AM/PM" + "'", str44, "AM/PM");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISO" + "'", str45, "ISO");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "United States" + "'", str46, "United States");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant92 = offsetDateTime91.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime94 = offsetDateTime91.withHour(999999999);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 999999999");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(instant92);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.OffsetDateTime offsetDateTime4 = java.time.OffsetDateTime.now((java.time.ZoneId) zoneOffset2);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'x', 70, zoneOffset2);
        java.lang.String str6 = zoneOffset2.getId();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+18:00" + "'", str6, "+18:00");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime1 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray4 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList5 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, zoneOffsetTransitionArray4);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray7 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList8 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, zoneOffsetTransitionArray7);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray10 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11, zoneOffsetTransitionRuleArray10);
        java.time.zone.ZoneRules zoneRules13 = java.time.zone.ZoneRules.of(zoneOffset2, zoneOffset3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11);
        java.time.OffsetTime offsetTime14 = localTime1.atOffset(zoneOffset2);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange16 = offsetTime14.range((java.time.temporal.TemporalField) chronoField15);
        java.time.OffsetTime offsetTime18 = chronoField0.adjustInto(offsetTime14, (long) 16);
        java.time.ZoneId zoneId19 = java.time.ZoneId.systemDefault();
        java.lang.String str20 = zoneId19.getId();
        java.time.ZonedDateTime zonedDateTime21 = java.time.ZonedDateTime.now(zoneId19);
        java.time.ZoneId zoneId22 = java.time.ZoneId.systemDefault();
        java.lang.String str23 = zoneId22.getId();
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime21.withZoneSameInstant(zoneId22);
        long long25 = zonedDateTime21.toEpochSecond();
        java.time.temporal.TemporalUnit temporalUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = offsetTime14.until((java.time.temporal.Temporal) zonedDateTime21, temporalUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField15.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange16);
        org.junit.Assert.assertNotNull(offsetTime18);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Etc/UTC" + "'", str20, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Etc/UTC" + "'", str23, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645434863L + "'", long25 == 1645434863L);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        zoneOffsetTransitionList3.clear();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition26 = null;
        boolean boolean27 = zoneOffsetTransitionList3.add(zoneOffsetTransition26);
        java.util.ListIterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionItor28 = zoneOffsetTransitionList3.listIterator();
        boolean boolean29 = zoneOffsetTransitionItor28.hasNext();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = zonedDateTime2.getZone();
        java.time.temporal.TemporalUnit temporalUnit4 = null;
        boolean boolean5 = zonedDateTime2.isSupported(temporalUnit4);
        java.time.Instant instant6 = zonedDateTime2.toInstant();
        java.time.temporal.TemporalUnit temporalUnit8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime9 = zonedDateTime2.plus((long) '#', temporalUnit8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(instant6);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj3 = charBuffer2.array();
        boolean boolean4 = isoChronology0.equals(obj3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap5 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = strMapMap5.containsKey((java.lang.Object) isoChronology6);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, (-1), 10);
        int int13 = isoChronology0.prolepticYear((java.time.chrono.Era) isoEra8, 0);
        java.time.Month month14 = java.time.Month.JANUARY;
        java.time.Month month15 = month14.firstMonthOfQuarter();
        java.time.Month month16 = month15.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean18 = month16.isSupported((java.time.temporal.TemporalField) chronoField17);
        boolean boolean19 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField17);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = chronoField17.checkValidValue((long) 1024);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for AmPmOfDay (valid values 0 - 1): 1024");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + month14 + "' != '" + java.time.Month.JANUARY + "'", month14.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.JANUARY + "'", month15.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month16 + "' != '" + java.time.Month.JANUARY + "'", month16.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField17.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter12.println("hi!");
        properties1.list(printWriter12);
        java.lang.Object obj18 = properties1.setProperty("AM/PM", "italiano");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap19 = java.nio.charset.Charset.availableCharsets();
        boolean boolean20 = strMap19.isEmpty();
        java.util.Set<java.lang.String> strSet21 = strMap19.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate22 = java.util.function.Predicate.isEqual((java.lang.Object) strMap19);
        properties1.putAll((java.util.Map<java.lang.String, java.nio.charset.Charset>) strMap19);
        properties1.clear();
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(resolverStylePredicate22);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        boolean boolean11 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        boolean boolean22 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str24 = localDateTime21.format(dateTimeFormatter23);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int26 = localDateTime21.get((java.time.temporal.TemporalField) chronoField25);
        boolean boolean27 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.lang.String str28 = localDateTime21.toString();
        java.time.chrono.Chronology chronology29 = localDateTime21.getChronology();
        java.time.LocalDateTime localDateTime31 = localDateTime21.plusYears((long) (short) 0);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.lang.String str35 = zoneOffset34.getId();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset34);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray42 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, zoneOffsetTransitionArray42);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray45 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46, zoneOffsetTransitionRuleArray45);
        java.time.zone.ZoneRules zoneRules48 = java.time.zone.ZoneRules.of(zoneOffset37, zoneOffset38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46);
        int int49 = zoneOffset34.compareTo(zoneOffset37);
        long long50 = localDateTime31.toEpochSecond(zoneOffset37);
        java.lang.String str51 = zoneOffset37.getId();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId52 = java.time.ZoneId.ofOffset("OptionalInt.empty", zoneOffset37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prefix should be GMT, UTC or UT, is: OptionalInt.empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str24, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField25.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str28, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+18:00" + "'", str35, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 97L + "'", long50 == 97L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+18:00" + "'", str51, "+18:00");
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        boolean boolean1 = java.nio.charset.Charset.isSupported("Tuesday");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.OptionalDouble optionalDouble2 = doubleStream1.findAny();
        java.util.function.DoublePredicate doublePredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = doubleStream1.noneMatch(doublePredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.time.format.DecimalStyle decimalStyle0 = java.time.format.DecimalStyle.STANDARD;
        char char1 = decimalStyle0.getZeroDigit();
        java.time.format.DecimalStyle decimalStyle3 = decimalStyle0.withZeroDigit('a');
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.lang.String str7 = zoneOffset6.getId();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset6);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.lang.String str17 = zoneOffset16.getId();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset16);
        boolean boolean19 = localDateTime13.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        boolean boolean20 = localDateTime8.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray24 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, zoneOffsetTransitionArray24);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray30 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31, zoneOffsetTransitionRuleArray30);
        java.time.zone.ZoneRules zoneRules33 = java.time.zone.ZoneRules.of(zoneOffset22, zoneOffset23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray42 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43, zoneOffsetTransitionRuleArray42);
        java.time.zone.ZoneRules zoneRules45 = java.time.zone.ZoneRules.of(zoneOffset34, zoneOffset35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray51 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, zoneOffsetTransitionArray51);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray54 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList55 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList55, zoneOffsetTransitionRuleArray54);
        java.time.zone.ZoneRules zoneRules57 = java.time.zone.ZoneRules.of(zoneOffset46, zoneOffset47, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList55);
        boolean boolean58 = zoneOffsetTransitionList37.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52);
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray61 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList62 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, zoneOffsetTransitionArray61);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray64 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList65 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, zoneOffsetTransitionArray64);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray67 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList68 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList68, zoneOffsetTransitionRuleArray67);
        java.time.zone.ZoneRules zoneRules70 = java.time.zone.ZoneRules.of(zoneOffset59, zoneOffset60, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList68);
        int int72 = zoneOffsetTransitionList65.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray75 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList76 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, zoneOffsetTransitionArray75);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray78 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList79 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, zoneOffsetTransitionArray78);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray81 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList82 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList82, zoneOffsetTransitionRuleArray81);
        java.time.zone.ZoneRules zoneRules84 = java.time.zone.ZoneRules.of(zoneOffset73, zoneOffset74, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList82);
        java.time.zone.ZoneRules zoneRules85 = java.time.zone.ZoneRules.of(zoneOffset21, zoneOffset22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList82);
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.MAX;
        java.lang.String str89 = zoneOffset88.getId();
        java.time.LocalDateTime localDateTime90 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset88);
        int int91 = zoneOffset22.compareTo(zoneOffset88);
        java.time.OffsetDateTime offsetDateTime92 = java.time.OffsetDateTime.of(localDateTime13, zoneOffset22);
        java.time.zone.ZoneRules zoneRules93 = zoneOffset22.getRules();
        boolean boolean94 = decimalStyle0.equals((java.lang.Object) zoneRules93);
        org.junit.Assert.assertNotNull(decimalStyle0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '0' + "'", char1 == '0');
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+18:00" + "'", str7, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+18:00" + "'", str17, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneRules57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(zoneRules70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(zoneRules84);
        org.junit.Assert.assertNotNull(zoneRules85);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+18:00" + "'", str89, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime92);
        org.junit.Assert.assertNotNull(zoneRules93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isSiteLocalAddress();
        boolean boolean2 = inetAddress0.isMCGlobal();
        boolean boolean3 = inetAddress0.isMCGlobal();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = inetAddress0.isReachable((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: timeout can't be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator0 = java.util.function.UnaryOperator.identity();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray1 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList2 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList2, zoneOffsetTransitionArray1);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream4 = zoneOffsetTransitionList2.stream();
        java.io.Serializable serializable5 = serializableUnaryOperator0.apply((java.io.Serializable) zoneOffsetTransitionList2);
        java.io.Serializable serializable7 = serializableUnaryOperator0.apply((java.io.Serializable) 100L);
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator8 = java.util.function.UnaryOperator.identity();
        java.util.function.Function<java.lang.SecurityException, java.io.Serializable> securityExceptionFunction9 = serializableUnaryOperator0.compose((java.util.function.Function<java.io.Serializable, java.io.Serializable>) serializableUnaryOperator8);
        java.net.URISyntaxException uRISyntaxException12 = new java.net.URISyntaxException("italiano", "");
        java.lang.String str13 = uRISyntaxException12.getReason();
        java.net.URISyntaxException uRISyntaxException16 = new java.net.URISyntaxException("italiano", "");
        uRISyntaxException12.addSuppressed((java.lang.Throwable) uRISyntaxException16);
        java.io.Serializable serializable18 = serializableUnaryOperator8.apply((java.io.Serializable) uRISyntaxException12);
        java.security.cert.CertificateException certificateException19 = new java.security.cert.CertificateException((java.lang.Throwable) uRISyntaxException12);
        org.junit.Assert.assertNotNull(serializableUnaryOperator0);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + 100L + "'", serializable7, 100L);
        org.junit.Assert.assertNotNull(serializableUnaryOperator8);
        org.junit.Assert.assertNotNull(securityExceptionFunction9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(serializable18);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.util.Locale locale2 = new java.util.Locale("599b081c1808", "DIRECT");
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale2.getDisplayCountry(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale2.getExtension('-');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: -");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DIRECT" + "'", str4, "DIRECT");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.LocalTime localTime5 = localDateTime4.toLocalTime();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime11 = localDate6.atTime(31, 2, (int) (short) 1, 171);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 31");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant92 = offsetDateTime91.toInstant();
        java.nio.CharBuffer charBuffer94 = java.nio.CharBuffer.allocate(16);
        int int95 = charBuffer94.limit();
        java.util.stream.IntStream intStream96 = charBuffer94.chars();
        boolean boolean97 = offsetDateTime91.equals((java.lang.Object) intStream96);
        java.time.OffsetDateTime offsetDateTime99 = offsetDateTime91.plusYears((long) 7);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(charBuffer94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 16 + "'", int95 == 16);
        org.junit.Assert.assertNotNull(intStream96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(offsetDateTime99);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        boolean boolean13 = zoneRules12.isFixedOffset();
        java.time.Instant instant14 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules12.previousTransition(instant14);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = zoneRules12.getTransitionRules();
        java.time.Instant instant17 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition18 = zoneRules12.previousTransition(instant17);
        java.time.Instant instant19 = java.time.Instant.MAX;
        java.time.Instant instant21 = instant19.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset22 = zoneRules12.getOffset(instant21);
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset22);
        java.time.temporal.TemporalUnit temporalUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime26 = offsetDateTime23.minus((long) ' ', temporalUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList16);
        org.junit.Assert.assertNull(zoneOffsetTransition18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.print(false);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics4.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics7.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        descriptiveStatistics4.setSumsqImpl(univariateStatistic10);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics13.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics13.getGeometricMeanImpl();
        double[] doubleArray22 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double23 = univariateStatistic16.evaluate(doubleArray22);
        descriptiveStatistics0.setMaxImpl(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.security.cert.CertificateEncodingException certificateEncodingException1 = new java.security.cert.CertificateEncodingException("DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file3 = file2.getAbsoluteFile();
        boolean boolean4 = file3.canRead();
        boolean boolean5 = file3.isAbsolute();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        double double3 = descriptiveStatistics0.getSkewness();
        long long4 = descriptiveStatistics0.getN();
        double double5 = descriptiveStatistics0.getSkewness();
        double double6 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = null;
        descriptiveStatistics0.setMaxImpl(univariateStatistic7);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = descriptiveStatistics0.getPercentile((double) 1645434863L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 1.645434863E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) '0');
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        longStream2.close();
        java.util.stream.LongStream longStream4 = longStream2.parallel();
        longStream2.close();
        java.util.function.LongPredicate longPredicate6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = longStream2.allMatch(longPredicate6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.Buffer buffer7 = longBuffer2.flip();
        java.nio.Buffer buffer8 = longBuffer2.rewind();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(buffer8);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        java.util.OptionalInt optionalInt2 = intStream1.max();
        java.lang.String str3 = optionalInt2.toString();
        boolean boolean4 = optionalInt2.isPresent();
        boolean boolean5 = optionalInt2.isPresent();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalInt.empty" + "'", str3, "OptionalInt.empty");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        java.time.LocalDate localDate3 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate5 = java.time.LocalDate.ofEpochDay((long) 10);
        int int6 = localDate3.compareTo((java.time.chrono.ChronoLocalDate) localDate5);
        java.time.LocalTime localTime7 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray10 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, zoneOffsetTransitionArray10);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray16 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17, zoneOffsetTransitionRuleArray16);
        java.time.zone.ZoneRules zoneRules19 = java.time.zone.ZoneRules.of(zoneOffset8, zoneOffset9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17);
        java.time.OffsetTime offsetTime20 = localTime7.atOffset(zoneOffset8);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray24 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, zoneOffsetTransitionArray24);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray30 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31, zoneOffsetTransitionRuleArray30);
        java.time.zone.ZoneRules zoneRules33 = java.time.zone.ZoneRules.of(zoneOffset22, zoneOffset23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray42 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43, zoneOffsetTransitionRuleArray42);
        java.time.zone.ZoneRules zoneRules45 = java.time.zone.ZoneRules.of(zoneOffset34, zoneOffset35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray51 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, zoneOffsetTransitionArray51);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray54 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList55 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList55, zoneOffsetTransitionRuleArray54);
        java.time.zone.ZoneRules zoneRules57 = java.time.zone.ZoneRules.of(zoneOffset46, zoneOffset47, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList55);
        boolean boolean58 = zoneOffsetTransitionList37.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52);
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray61 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList62 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, zoneOffsetTransitionArray61);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray64 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList65 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, zoneOffsetTransitionArray64);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray67 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList68 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList68, zoneOffsetTransitionRuleArray67);
        java.time.zone.ZoneRules zoneRules70 = java.time.zone.ZoneRules.of(zoneOffset59, zoneOffset60, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList68);
        int int72 = zoneOffsetTransitionList65.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray75 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList76 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, zoneOffsetTransitionArray75);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray78 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList79 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, zoneOffsetTransitionArray78);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray81 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList82 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList82, zoneOffsetTransitionRuleArray81);
        java.time.zone.ZoneRules zoneRules84 = java.time.zone.ZoneRules.of(zoneOffset73, zoneOffset74, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList82);
        java.time.zone.ZoneRules zoneRules85 = java.time.zone.ZoneRules.of(zoneOffset21, zoneOffset22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList82);
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.MAX;
        java.lang.String str89 = zoneOffset88.getId();
        java.time.LocalDateTime localDateTime90 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset88);
        int int91 = zoneOffset22.compareTo(zoneOffset88);
        java.time.ZonedDateTime zonedDateTime92 = java.time.ZonedDateTime.of(localDate3, localTime7, (java.time.ZoneId) zoneOffset88);
        java.time.LocalDateTime localDateTime93 = java.time.LocalDateTime.ofEpochSecond((long) 171, 16, zoneOffset88);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneRules57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(zoneRules70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(zoneRules84);
        org.junit.Assert.assertNotNull(zoneRules85);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+18:00" + "'", str89, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime92);
        org.junit.Assert.assertNotNull(localDateTime93);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime88.plusHours((long) 256);
        java.time.OffsetDateTime offsetDateTime94 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = offsetDateTime93.isEqual(offsetDateTime94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = zoneOffsetTransitionList18.subList(16, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        int int0 = java.util.Spliterator.SUBSIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16384 + "'", int0 == 16384);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        boolean boolean12 = zoneRules11.isFixedOffset();
        java.security.CodeSource codeSource13 = null;
        java.security.PermissionCollection permissionCollection14 = null;
        java.security.ProtectionDomain protectionDomain15 = new java.security.ProtectionDomain(codeSource13, permissionCollection14);
        boolean boolean16 = zoneRules11.equals((java.lang.Object) codeSource13);
        java.time.Instant instant17 = null;
        boolean boolean18 = zoneRules11.isDaylightSavings(instant17);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(protectionDomain15.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime6.withDayOfYear(4);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.Spliterator<java.lang.Long> longSpliterator1 = longStream0.spliterator();
        long long2 = longSpliterator1.estimateSize();
        long long3 = longSpliterator1.estimateSize();
        boolean boolean5 = longSpliterator1.hasCharacteristics((-1));
        int int6 = longSpliterator1.characteristics();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longSpliterator1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16448 + "'", int6 == 16448);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.minus(duration17);
        java.time.OffsetTime offsetTime22 = offsetTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray29 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, zoneOffsetTransitionArray29);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray32 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33, zoneOffsetTransitionRuleArray32);
        java.time.zone.ZoneRules zoneRules35 = java.time.zone.ZoneRules.of(zoneOffset24, zoneOffset25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33);
        java.time.OffsetTime offsetTime36 = localTime23.atOffset(zoneOffset24);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange38 = offsetTime36.range((java.time.temporal.TemporalField) chronoField37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal41 = null;
        java.time.temporal.Temporal temporal42 = duration40.subtractFrom(temporal41);
        long long43 = duration40.toDays();
        java.time.Duration duration44 = duration39.minus(duration40);
        java.time.OffsetTime offsetTime45 = offsetTime36.minus((java.time.temporal.TemporalAmount) duration40);
        boolean boolean46 = offsetTime22.isAfter(offsetTime36);
        java.time.OffsetTime offsetTime48 = offsetTime22.withNano((int) '#');
        java.time.temporal.TemporalUnit temporalUnit49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime50 = offsetTime48.truncatedTo(temporalUnit49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNull(temporal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(offsetTime48);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = java.time.OffsetTime.of(localTime0, zoneOffset2);
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.LocalTime localTime23 = localTime20.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap24 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology25 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean26 = strMapMap24.containsKey((java.lang.Object) isoChronology25);
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate30 = isoChronology25.dateYearDay((java.time.chrono.Era) isoEra27, (-1), 10);
        java.time.Duration duration31 = java.time.Duration.ZERO;
        java.time.Duration duration32 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal33 = null;
        java.time.temporal.Temporal temporal34 = duration32.subtractFrom(temporal33);
        long long35 = duration32.toDays();
        java.time.Duration duration36 = duration31.plus(duration32);
        long long37 = duration32.toDays();
        java.lang.String str38 = duration32.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate39 = localDate30.plus((java.time.temporal.TemporalAmount) duration32);
        java.time.LocalTime localTime40 = localTime20.minus((java.time.temporal.TemporalAmount) duration32);
        boolean boolean41 = localTime0.isAfter(localTime40);
        java.time.DayOfWeek dayOfWeek42 = java.time.DayOfWeek.TUESDAY;
        java.time.temporal.TemporalField temporalField43 = null;
        boolean boolean44 = dayOfWeek42.isSupported(temporalField43);
        int int45 = dayOfWeek42.getValue();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime46 = localTime40.with((java.time.temporal.TemporalAdjuster) dayOfWeek42);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: DayOfWeek");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(isoChronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra27.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNull(temporal34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0S" + "'", str38, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + dayOfWeek42 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek42.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        long long2 = intStream1.count();
        java.util.LongSummaryStatistics longSummaryStatistics3 = new java.util.LongSummaryStatistics();
        // The following exception was thrown during execution in test generation
        try {
            intStream1.forEachOrdered((java.util.function.IntConsumer) longSummaryStatistics3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals(longSummaryStatistics3.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        java.nio.DoubleBuffer doubleBuffer5 = doubleBuffer4.asReadOnlyBuffer();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics6.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics6.getGeometricMeanImpl();
        double[] doubleArray15 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double16 = univariateStatistic9.evaluate(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer17 = doubleBuffer5.get(doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.security.InvalidKeyException invalidKeyException0 = new java.security.InvalidKeyException();
        java.util.concurrent.ExecutionException executionException1 = new java.util.concurrent.ExecutionException((java.lang.Throwable) invalidKeyException0);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime1 = java.time.OffsetTime.parse((java.lang.CharSequence) "Di");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Di' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_OFFSET_TIME;
        java.time.format.ResolverStyle resolverStyle1 = dateTimeFormatter0.getResolverStyle();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor3 = dateTimeFormatter0.parse((java.lang.CharSequence) "ProtectionDomain  null\n null\n <no principals>\n null\n");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'ProtectionDomain  null? null? <no principals>? null?' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + resolverStyle1 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle1.equals(java.time.format.ResolverStyle.STRICT));
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str1 = strMapMap0.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap2 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology3 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean4 = strMapMap2.containsKey((java.lang.Object) isoChronology3);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        boolean boolean6 = strMap5.isEmpty();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.Cloneable cloneable10 = strMapMap2.put(strMap5, (java.lang.Cloneable) locale8);
        int int11 = strMap5.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap12 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = strMapMap12.containsKey((java.lang.Object) isoChronology13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal16 = null;
        java.time.temporal.Temporal temporal17 = duration15.subtractFrom(temporal16);
        long long18 = duration15.toDays();
        boolean boolean19 = strMapMap12.contains((java.lang.Object) duration15);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable21 = strMapMap12.get((java.lang.Object) dateTimeFormatter20);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet22 = strMapMap12.keySet();
        java.lang.Cloneable cloneable23 = strMapMap0.put(strMap5, (java.lang.Cloneable) strMapMap12);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap24 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str25 = strMapMap24.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap26 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean28 = strMapMap26.containsKey((java.lang.Object) isoChronology27);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap29 = java.nio.charset.Charset.availableCharsets();
        boolean boolean30 = strMap29.isEmpty();
        java.util.Locale locale31 = java.util.Locale.US;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.lang.Cloneable cloneable34 = strMapMap26.put(strMap29, (java.lang.Cloneable) locale32);
        int int35 = strMap29.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap36 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology37 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean38 = strMapMap36.containsKey((java.lang.Object) isoChronology37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal40 = null;
        java.time.temporal.Temporal temporal41 = duration39.subtractFrom(temporal40);
        long long42 = duration39.toDays();
        boolean boolean43 = strMapMap36.contains((java.lang.Object) duration39);
        java.time.format.DateTimeFormatter dateTimeFormatter44 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable45 = strMapMap36.get((java.lang.Object) dateTimeFormatter44);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet46 = strMapMap36.keySet();
        java.lang.Cloneable cloneable47 = strMapMap24.put(strMap29, (java.lang.Cloneable) strMapMap36);
        java.util.Date date53 = new java.util.Date(1, (int) 'x', (int) '0', 16, 256);
        int int54 = date53.getMinutes();
        java.lang.Cloneable cloneable55 = strMapMap12.put(strMap29, (java.lang.Cloneable) date53);
        java.util.Collection<java.nio.charset.Charset> charsetCollection56 = strMap29.values();
        java.time.ZoneId zoneId57 = java.time.ZoneId.systemDefault();
        java.lang.String str58 = zoneId57.getId();
        java.time.ZonedDateTime zonedDateTime59 = java.time.ZonedDateTime.now(zoneId57);
        java.time.ZoneId zoneId60 = java.time.ZoneId.systemDefault();
        java.lang.String str61 = zoneId60.getId();
        java.time.ZonedDateTime zonedDateTime62 = zonedDateTime59.withZoneSameInstant(zoneId60);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap63 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology64 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean65 = strMapMap63.containsKey((java.lang.Object) isoChronology64);
        java.time.Duration duration66 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal67 = null;
        java.time.temporal.Temporal temporal68 = duration66.subtractFrom(temporal67);
        long long69 = duration66.toDays();
        boolean boolean70 = strMapMap63.contains((java.lang.Object) duration66);
        java.time.format.DateTimeFormatter dateTimeFormatter71 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable72 = strMapMap63.get((java.lang.Object) dateTimeFormatter71);
        java.lang.String str73 = dateTimeFormatter71.toString();
        java.lang.String str74 = zonedDateTime62.format(dateTimeFormatter71);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset75 = strMap29.get((java.lang.Object) zonedDateTime62);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Stati Uniti" + "'", str9, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 171 + "'", int11 == 171);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNull(temporal17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(cloneable21);
        org.junit.Assert.assertNotNull(strMapSet22);
        org.junit.Assert.assertNull(cloneable23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Stati Uniti" + "'", str33, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 171 + "'", int35 == 171);
        org.junit.Assert.assertNotNull(isoChronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNull(temporal41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(cloneable45);
        org.junit.Assert.assertNotNull(strMapSet46);
        org.junit.Assert.assertNull(cloneable47);
        org.junit.Assert.assertEquals(date53.toString(), "Fri Feb 17 20:16:00 UTC 1911");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16 + "'", int54 == 16);
        org.junit.Assert.assertNull(cloneable55);
        org.junit.Assert.assertNotNull(charsetCollection56);
        org.junit.Assert.assertNotNull(zoneId57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Etc/UTC" + "'", str58, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertNotNull(zoneId60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Etc/UTC" + "'", str61, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertNotNull(isoChronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNull(temporal68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(cloneable72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ParseCaseSensitive(false)Value(Year,4)Value(MonthOfYear,2)Value(DayOfMonth,2)[Offset(+HHMMss,'Z')]" + "'", str73, "ParseCaseSensitive(false)Value(Year,4)Value(MonthOfYear,2)Value(DayOfMonth,2)[Offset(+HHMMss,'Z')]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "20220221Z" + "'", str74, "20220221Z");
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.security.KeyException keyException1 = new java.security.KeyException("-18:00");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.put(byteBuffer14);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer15.duplicate();
        boolean boolean17 = byteBuffer15.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putFloat((float) (-1L));
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.stream.LongStream longStream4 = longStream2.limit(1645434854L);
        java.util.function.LongToIntFunction longToIntFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream6 = longStream2.mapToInt(longToIntFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.security.cert.CertificateException certificateException1 = new java.security.cert.CertificateException("+18:00");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.Month month3 = month1.plus((long) 'x');
        java.time.ZoneId zoneId4 = java.time.ZoneId.systemDefault();
        java.lang.String str5 = zoneId4.getId();
        java.time.ZonedDateTime zonedDateTime6 = java.time.ZonedDateTime.now(zoneId4);
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = zonedDateTime6.withZoneSameInstant(zoneId7);
        java.time.ZoneId zoneId10 = java.time.ZoneId.systemDefault();
        java.lang.String str11 = zoneId10.getId();
        java.time.ZonedDateTime zonedDateTime12 = java.time.ZonedDateTime.now(zoneId10);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime12.withYear((int) (short) 1);
        boolean boolean15 = zonedDateTime9.equals((java.lang.Object) zonedDateTime14);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime9.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology18 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime9);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        long long20 = zonedDateTime9.getLong((java.time.temporal.TemporalField) chronoField19);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange21 = month3.range((java.time.temporal.TemporalField) chronoField19);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.JANUARY + "'", month3.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Etc/UTC" + "'", str11, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField19.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645434864L + "'", long20 == 1645434864L);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.LocalTime localTime5 = localDateTime4.toLocalTime();
        java.time.chrono.Chronology chronology6 = localDateTime4.getChronology();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        long long3 = date1.getTime();
        int int4 = date1.getDay();
        int int5 = date1.getYear();
        java.util.Date date11 = new java.util.Date(171, (-34), (int) (short) 100, 256, 13);
        int int12 = date1.compareTo(date11);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Jun 18 16:13:00 UTC 2068");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj3 = charBuffer2.array();
        boolean boolean4 = isoChronology0.equals(obj3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap5 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = strMapMap5.containsKey((java.lang.Object) isoChronology6);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, (-1), 10);
        int int13 = isoChronology0.prolepticYear((java.time.chrono.Era) isoEra8, 0);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = chronoField14.getDisplayName(locale15);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap18 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology19 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean20 = strMapMap18.containsKey((java.lang.Object) isoChronology19);
        java.time.chrono.IsoEra isoEra21 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate24 = isoChronology19.dateYearDay((java.time.chrono.Era) isoEra21, (-1), 10);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.wrap(byteArray27, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology31 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean32 = byteBuffer30.equals((java.lang.Object) isoChronology31);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap33 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology34 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean35 = strMapMap33.containsKey((java.lang.Object) isoChronology34);
        java.time.chrono.IsoEra isoEra36 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate39 = isoChronology34.dateYearDay((java.time.chrono.Era) isoEra36, (-1), 10);
        int int41 = isoChronology31.prolepticYear((java.time.chrono.Era) isoEra36, (int) '#');
        java.time.LocalDate localDate44 = isoChronology19.dateYearDay((java.time.chrono.Era) isoEra36, (int) (byte) 0, 2);
        boolean boolean45 = chronoField14.isSupportedBy((java.time.temporal.TemporalAccessor) localDate44);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = isoEra8.get((java.time.temporal.TemporalField) chronoField14);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField14.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en-GB" + "'", str16, "en-GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AlignedWeekOfYear" + "'", str17, "AlignedWeekOfYear");
        org.junit.Assert.assertNotNull(isoChronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + isoEra21 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra21.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(isoChronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(isoChronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + isoEra36 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra36.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-34) + "'", int41 == (-34));
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.lang.String str27 = localDateTime20.toString();
        java.time.chrono.Chronology chronology28 = localDateTime20.getChronology();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String str31 = locale30.toLanguageTag();
        java.lang.String str32 = chronoField29.getDisplayName(locale30);
        java.time.LocalDateTime localDateTime34 = localDateTime20.with((java.time.temporal.TemporalField) chronoField29, (long) (byte) 10);
        java.time.Month month35 = java.time.Month.AUGUST;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange36 = chronoField29.rangeRefinedBy((java.time.temporal.TemporalAccessor) month35);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str27, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField29.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en-GB" + "'", str31, "en-GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AlignedWeekOfYear" + "'", str32, "AlignedWeekOfYear");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + month35 + "' != '" + java.time.Month.AUGUST + "'", month35.equals(java.time.Month.AUGUST));
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        intStream3.close();
        intStream3.close();
        // The following exception was thrown during execution in test generation
        try {
            java.util.IntSummaryStatistics intSummaryStatistics6 = intStream3.summaryStatistics();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics3.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic6);
        double[] doubleArray8 = descriptiveStatistics0.getSortedValues();
        double double9 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.time.temporal.TemporalUnit temporalUnit1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration2 = java.time.Duration.of(23L, temporalUnit1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: unit");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.OptionalDouble optionalDouble3 = doubleStream2.findAny();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble4 = doubleStream2.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.println('4');
        printWriter1.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.write(59);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.chrono.IsoChronology isoChronology29 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra31 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate34 = isoChronology29.dateYearDay((java.time.chrono.Era) isoEra31, 0, 16);
        java.time.LocalTime localTime35 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime36 = localDate34.atTime(localTime35);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray42 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, zoneOffsetTransitionArray42);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray45 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46, zoneOffsetTransitionRuleArray45);
        java.time.zone.ZoneRules zoneRules48 = java.time.zone.ZoneRules.of(zoneOffset37, zoneOffset38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46);
        long long49 = localDateTime36.toEpochSecond(zoneOffset37);
        java.time.LocalDateTime localDateTime51 = localDateTime36.plusDays((long) (byte) 1);
        java.time.temporal.Temporal temporal52 = localDateTime24.adjustInto((java.time.temporal.Temporal) localDateTime36);
        java.time.LocalDateTime localDateTime54 = localDateTime36.withNano((int) 'u');
        java.io.UnsupportedEncodingException unsupportedEncodingException56 = new java.io.UnsupportedEncodingException("/");
        boolean boolean57 = localDateTime54.equals((java.lang.Object) unsupportedEncodingException56);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(isoChronology29);
        org.junit.Assert.assertTrue("'" + isoEra31 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra31.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-62134279201L) + "'", long49 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(temporal52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.compact();
        java.nio.Buffer buffer8 = longBuffer2.flip();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = longBuffer2.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(buffer8);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj3 = charBuffer2.array();
        boolean boolean4 = isoChronology0.equals(obj3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap5 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = strMapMap5.containsKey((java.lang.Object) isoChronology6);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, (-1), 10);
        int int13 = isoChronology0.prolepticYear((java.time.chrono.Era) isoEra8, 0);
        java.lang.String str14 = isoChronology0.getCalendarType();
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra17 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate20 = isoChronology15.dateYearDay((java.time.chrono.Era) isoEra17, 0, 16);
        java.time.LocalTime localTime21 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime22 = localDate20.atTime(localTime21);
        java.time.LocalDate localDate24 = localDate20.withMonth(1);
        java.time.Duration duration25 = java.time.Duration.ZERO;
        java.time.Duration duration26 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal27 = null;
        java.time.temporal.Temporal temporal28 = duration26.subtractFrom(temporal27);
        long long29 = duration26.toDays();
        java.time.Duration duration30 = duration25.plus(duration26);
        java.time.LocalDate localDate31 = localDate24.minus((java.time.temporal.TemporalAmount) duration25);
        java.time.LocalDate localDate33 = localDate24.minusWeeks((long) 100);
        java.time.chrono.IsoChronology isoChronology34 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra36 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate39 = isoChronology34.dateYearDay((java.time.chrono.Era) isoEra36, 0, 16);
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.time.LocalDate localDate41 = localDate39.plus((java.time.temporal.TemporalAmount) duration40);
        java.time.LocalDateTime localDateTime42 = localDate41.atStartOfDay();
        java.time.LocalDate localDate44 = localDate41.plusYears((long) (byte) -1);
        java.time.LocalDate localDate45 = localDate33.with((java.time.temporal.TemporalAdjuster) localDate41);
        java.lang.String str46 = localDate41.toString();
        java.time.LocalDate localDate48 = localDate41.plusDays((long) 171);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime49 = isoChronology0.zonedDateTime((java.time.temporal.TemporalAccessor) localDate48);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: 0001-07-06 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "iso8601" + "'", str14, "iso8601");
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertTrue("'" + isoEra17 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra17.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNull(temporal28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(isoChronology34);
        org.junit.Assert.assertTrue("'" + isoEra36 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra36.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0001-01-16" + "'", str46, "0001-01-16");
        org.junit.Assert.assertNotNull(localDate48);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setLanguageTag("OptionalInt.empty");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: OptionalInt.empty [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println(true);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write("599b081c1808", 0, 365);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 365");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.Spliterator<java.lang.Long> longSpliterator1 = longStream0.spliterator();
        java.util.stream.LongStream longStream2 = longStream0.sequential();
        longStream2.close();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longSpliterator1);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.wrap(byteArray9, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = byteBuffer12.equals((java.lang.Object) isoChronology13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean17 = strMapMap15.containsKey((java.lang.Object) isoChronology16);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, (-1), 10);
        int int23 = isoChronology13.prolepticYear((java.time.chrono.Era) isoEra18, (int) '#');
        java.time.LocalDate localDate26 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra18, (int) (byte) 0, 2);
        java.time.chrono.ChronoPeriod chronoPeriod30 = isoChronology1.period(1, (int) (short) 1, 365);
        java.time.LocalDate localDate31 = isoChronology1.dateNow();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-34) + "'", int23 == (-34));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        double double3 = descriptiveStatistics0.getSkewness();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setWindowSize((-34));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: window size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed((int) (short) -1, 13);
        java.util.function.IntPredicate intPredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = intStream2.filter(intPredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        // The following exception was thrown during execution in test generation
        try {
            filterOutputStream1.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        int int0 = java.util.Spliterator.CONCURRENT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4096 + "'", int0 == 4096);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        java.util.stream.LongStream longStream8 = longStream6.limit((long) ' ');
        java.util.Iterator<java.lang.Long> longItor9 = longStream8.iterator();
        // The following exception was thrown during execution in test generation
        try {
            longItor9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(longItor9);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.put(byteBuffer14);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = byteBuffer5.putInt(4, (int) '\000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.util.OptionalLong optionalLong1 = java.util.OptionalLong.of((long) 100);
        java.util.function.LongSupplier longSupplier2 = null;
        long long3 = optionalLong1.orElseGet(longSupplier2);
        java.util.function.LongSupplier longSupplier4 = null;
        long long5 = optionalLong1.orElseGet(longSupplier4);
        org.junit.Assert.assertNotNull(optionalLong1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.slice();
        java.nio.Buffer buffer8 = byteBuffer5.rewind();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = byteBuffer5.put((byte) 10);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(buffer8);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList12 = period11.getUnits();
        java.time.chrono.ChronoPeriod chronoPeriod13 = period11.negated();
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.DayOfWeek dayOfWeek22 = localDate19.getDayOfWeek();
        java.time.chrono.IsoChronology isoChronology23 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate28 = isoChronology23.dateYearDay((java.time.chrono.Era) isoEra25, 0, 16);
        java.time.LocalTime localTime29 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime30 = localDate28.atTime(localTime29);
        java.time.LocalDate localDate32 = localDate28.withMonth(1);
        java.time.Period period33 = localDate19.until((java.time.chrono.ChronoLocalDate) localDate28);
        java.time.Period period34 = period11.plus((java.time.temporal.TemporalAmount) period33);
        boolean boolean35 = period33.isNegative();
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList36 = period33.getUnits();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(temporalUnitList12);
        org.junit.Assert.assertNotNull(chronoPeriod13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + dayOfWeek22 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek22.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(isoChronology23);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra25.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(temporalUnitList36);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.put(byteBuffer14);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer15.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = byteBuffer15.getLong((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.ZonedDateTime zonedDateTime13 = java.time.ZonedDateTime.of(localDateTime9, (java.time.ZoneId) zoneOffset11);
        java.time.temporal.TemporalUnit temporalUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime16 = zonedDateTime13.minus((long) 24, temporalUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime13);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str17 = localDateTime14.format(dateTimeFormatter16);
        java.time.chrono.Chronology chronology18 = dateTimeFormatter16.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod22 = chronology18.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime2.plus((java.time.temporal.TemporalAmount) chronoPeriod22);
        boolean boolean25 = chronoPeriod22.equals((java.lang.Object) "java.nio.HeapFloatBufferR[pos=0 lim=256 cap=256]");
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str17, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronoPeriod22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        short[] shortArray5 = new short[] { (byte) 100, (byte) 0, (short) 0, (short) 100, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer8 = java.nio.ShortBuffer.wrap(shortArray5, 256, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 100, 0]");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter4.print((float) '\000');
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj9 = charBuffer8.array();
        boolean boolean10 = charBuffer8.isReadOnly();
        java.nio.CharBuffer charBuffer12 = charBuffer8.put('x');
        java.lang.CharSequence charSequence13 = null;
        java.nio.CharBuffer charBuffer14 = charBuffer8.append(charSequence13);
        java.io.PrintWriter printWriter15 = printWriter4.append((java.lang.CharSequence) charBuffer14);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter19 = printWriter4.append((java.lang.CharSequence) "{}", (int) (byte) 0, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 13");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI5 = new java.net.URI("AM/PM", "", "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]", "AlignedWeekOfYear", "ClockHourOfDay");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: AM/PM://java.text.FieldPosition%5Bfield=-1,attribute=null,beginIndex=0,endIndex=0%5D?AlignedWeekOfYear#ClockHourOfDay");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.MONDAY;
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.MONDAY));
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.Object obj1 = strMapMap0.clone();
        java.lang.String str2 = strMapMap0.toString();
        java.util.Set<java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>> strMapEntrySet3 = strMapMap0.entrySet();
        java.util.Enumeration<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapEnumeration4 = strMapMap0.keys();
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = strMapEnumeration4.nextElement();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(strMapEntrySet3);
        org.junit.Assert.assertNotNull(strMapEnumeration4);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter4.print((float) '\000');
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj9 = charBuffer8.array();
        boolean boolean10 = charBuffer8.isReadOnly();
        java.nio.CharBuffer charBuffer12 = charBuffer8.put('x');
        java.lang.CharSequence charSequence13 = null;
        java.nio.CharBuffer charBuffer14 = charBuffer8.append(charSequence13);
        java.io.PrintWriter printWriter15 = printWriter4.append((java.lang.CharSequence) charBuffer14);
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj18 = charBuffer17.array();
        java.nio.CharBuffer charBuffer20 = charBuffer17.append('.');
        java.lang.String str21 = charBuffer17.toString();
        char char23 = charBuffer17.charAt(0);
        char[] charArray24 = charBuffer17.array();
        // The following exception was thrown during execution in test generation
        try {
            printWriter15.write(charArray24, 16448, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str21, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), ".\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), ".\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[., \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str1 = inetAddress0.getHostName();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "localhost" + "'", str1, "localhost");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.security.ProtectionDomain protectionDomain2 = new java.security.ProtectionDomain(codeSource0, permissionCollection1);
        java.security.PermissionCollection permissionCollection3 = protectionDomain2.getPermissions();
        java.lang.String str4 = protectionDomain2.toString();
        org.junit.Assert.assertEquals(protectionDomain2.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(permissionCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ProtectionDomain  null\n null\n <no principals>\n null\n" + "'", str4, "ProtectionDomain  null\n null\n <no principals>\n null\n");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI3 = new java.net.URI("1970-01-01T18:01:37.000000120", "(file:/1970-01-01T18:01:37.00000012 <no signer certificates>)", "DIRECT");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Illegal character in scheme name at index 0: 1970-01-01T18:01:37.000000120:(file:/1970-01-01T18:01:37.00000012%20%3Cno%20signer%20certificates%3E)#DIRECT");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate8 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset7);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.of(64, (int) ' ', 16448, (int) (short) 1, 1, 100, 59, zoneOffset7);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 32");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.temporal.TemporalUnit temporalUnit2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate3 = localDate0.minus(0L, temporalUnit2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.lang.String str1 = java.net.URLConnection.getDefaultRequestProperty("ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        java.util.Date date6 = new java.util.Date((-1), (-34), 999999999, (int) (short) -1, 256, (int) '#');
        java.security.cert.CertPath certPath7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.Timestamp timestamp8 = new java.security.Timestamp(date6, certPath7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date6.toString(), "Thu Mar 03 03:16:35 UTC 2739803");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration3.subtractFrom(temporal4);
        long long6 = duration3.toDays();
        boolean boolean7 = strMapMap0.contains((java.lang.Object) duration3);
        java.time.format.DateTimeFormatter dateTimeFormatter8 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable9 = strMapMap0.get((java.lang.Object) dateTimeFormatter8);
        java.lang.Cloneable cloneable11 = strMapMap0.get((java.lang.Object) false);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap12 = java.nio.charset.Charset.availableCharsets();
        boolean boolean13 = strMap12.isEmpty();
        java.util.Set<java.lang.String> strSet14 = strMap12.keySet();
        int int15 = strMap12.size();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.toLanguageTag();
        java.lang.String str19 = chronoField16.getDisplayName(locale17);
        java.lang.Cloneable cloneable20 = strMapMap0.replace(strMap12, (java.lang.Cloneable) locale17);
        java.util.stream.DoubleStream doubleStream22 = java.util.stream.DoubleStream.of(0.0d);
        java.util.stream.DoubleStream doubleStream23 = doubleStream22.sorted();
        java.lang.Cloneable cloneable24 = strMapMap0.get((java.lang.Object) doubleStream22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.PrimitiveIterator.OfDouble ofDouble25 = doubleStream22.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(cloneable9);
        org.junit.Assert.assertNull(cloneable11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 171 + "'", int15 == 171);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en-GB" + "'", str18, "en-GB");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AlignedWeekOfYear" + "'", str19, "AlignedWeekOfYear");
        org.junit.Assert.assertNull(cloneable20);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertNull(cloneable24);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition25 = null;
        boolean boolean26 = zoneOffsetTransitionList3.add(zoneOffsetTransition25);
        java.lang.Object[] objArray27 = zoneOffsetTransitionList3.toArray();
        java.lang.String[] strArray28 = java.util.Locale.getISOLanguages();
        java.lang.String[] strArray29 = zoneOffsetTransitionList3.toArray(strArray28);
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.time.ZoneId zoneId32 = java.time.ZoneId.systemDefault();
        java.lang.String str33 = zoneId32.getId();
        java.time.ZonedDateTime zonedDateTime34 = java.time.ZonedDateTime.now(zoneId32);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime34.withYear((int) (short) 1);
        java.time.LocalTime localTime37 = zonedDateTime36.toLocalTime();
        java.util.stream.DoubleStream doubleStream39 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj40 = properties31.getOrDefault((java.lang.Object) zonedDateTime36, (java.lang.Object) doubleStream39);
        java.lang.Object obj43 = properties31.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration44 = properties31.propertyNames();
        boolean boolean45 = zoneOffsetTransitionList3.remove((java.lang.Object) properties31);
        java.time.LocalDate localDate47 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate49 = java.time.LocalDate.ofEpochDay((long) 10);
        int int50 = localDate47.compareTo((java.time.chrono.ChronoLocalDate) localDate49);
        java.time.chrono.IsoChronology isoChronology51 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra53 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate56 = isoChronology51.dateYearDay((java.time.chrono.Era) isoEra53, 0, 16);
        java.time.LocalTime localTime57 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime58 = localDate56.atTime(localTime57);
        java.time.LocalDate localDate60 = localDate56.withMonth(1);
        boolean boolean61 = localDate56.isLeapYear();
        java.time.chrono.ChronoPeriod chronoPeriod62 = localDate49.until((java.time.chrono.ChronoLocalDate) localDate56);
        java.time.chrono.IsoChronology isoChronology63 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer65 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj66 = charBuffer65.array();
        boolean boolean67 = isoChronology63.equals(obj66);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap68 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology69 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean70 = strMapMap68.containsKey((java.lang.Object) isoChronology69);
        java.time.chrono.IsoEra isoEra71 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate74 = isoChronology69.dateYearDay((java.time.chrono.Era) isoEra71, (-1), 10);
        int int76 = isoChronology63.prolepticYear((java.time.chrono.Era) isoEra71, 0);
        java.time.Month month77 = java.time.Month.JANUARY;
        java.time.Month month78 = month77.firstMonthOfQuarter();
        java.time.Month month79 = month78.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField80 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean81 = month79.isSupported((java.time.temporal.TemporalField) chronoField80);
        boolean boolean82 = isoEra71.isSupported((java.time.temporal.TemporalField) chronoField80);
        boolean boolean83 = localDate49.isSupported((java.time.temporal.TemporalField) chronoField80);
        java.lang.Object obj84 = properties31.remove((java.lang.Object) chronoField80);
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset86 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray87 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList88 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList88, zoneOffsetTransitionArray87);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray90 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList91 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList91, zoneOffsetTransitionArray90);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray93 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList94 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList94, zoneOffsetTransitionRuleArray93);
        java.time.zone.ZoneRules zoneRules96 = java.time.zone.ZoneRules.of(zoneOffset85, zoneOffset86, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList88, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList91, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList94);
        java.time.LocalDateTime localDateTime97 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition98 = zoneRules96.getTransition(localDateTime97);
        boolean boolean99 = properties31.equals((java.lang.Object) zoneOffsetTransition98);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[null]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Etc/UTC" + "'", str33, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(doubleStream39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(wildcardEnumeration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(isoChronology51);
        org.junit.Assert.assertTrue("'" + isoEra53 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra53.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronoPeriod62);
        org.junit.Assert.assertNotNull(isoChronology63);
        org.junit.Assert.assertNotNull(charBuffer65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(isoChronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + isoEra71 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra71.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + month77 + "' != '" + java.time.Month.JANUARY + "'", month77.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month78 + "' != '" + java.time.Month.JANUARY + "'", month78.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month79 + "' != '" + java.time.Month.JANUARY + "'", month79.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField80 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField80.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(zoneOffset86);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(zoneRules96);
        org.junit.Assert.assertNull(zoneOffsetTransition98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        int int92 = offsetDateTime88.getDayOfMonth();
        int int93 = offsetDateTime88.getNano();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 120 + "'", int93 == 120);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(outputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.util.Iterator<java.nio.file.Path> pathItor13 = path5.iterator();
        java.nio.file.WatchService watchService14 = null;
        java.nio.file.WatchEvent.Kind[] kindArray16 = new java.nio.file.WatchEvent.Kind[0];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray17 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray16;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey18 = path5.register(watchService14, wildcardKindArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434863000L + "'", long3 == 1645434863000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645434863000L + "'", long9 == 1645434863000L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(pathItor13);
        org.junit.Assert.assertNotNull(kindArray16);
        org.junit.Assert.assertNotNull(wildcardKindArray17);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.util.stream.IntStream intStream0 = java.util.stream.IntStream.empty();
        java.util.stream.LongStream longStream1 = intStream0.asLongStream();
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.of((int) (byte) 1);
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of((int) (byte) 1);
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.concat(intStream3, intStream5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream7 = java.util.stream.IntStream.concat(intStream0, intStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.io.InvalidObjectException invalidObjectException1 = new java.io.InvalidObjectException("1970-01-01");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        int int0 = java.util.Spliterator.SUBSIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16384 + "'", int0 == 16384);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        int int3 = zonedDateTime2.getYear();
        java.time.temporal.TemporalUnit temporalUnit5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime6 = zonedDateTime2.plus((long) 21, temporalUnit5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        boolean boolean1 = chronoField0.isTimeBased();
        boolean boolean2 = chronoField0.isDateBased();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        java.util.function.DoubleToLongFunction doubleToLongFunction2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream3 = doubleStream1.mapToLong(doubleToLongFunction2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        int int17 = duration10.getNano();
        long long18 = duration10.toHours();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.getHostName();
        java.lang.String str2 = inetAddress0.getCanonicalHostName();
        boolean boolean3 = inetAddress0.isMCNodeLocal();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808" + "'", str1, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "599b081c1808" + "'", str2, "599b081c1808");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.stream.LongStream.Builder builder3 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream longStream4 = longStream2.peek((java.util.function.LongConsumer) builder3);
        builder3.accept(1645434860L);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.put(byteBuffer14);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer15.duplicate();
        boolean boolean17 = byteBuffer15.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer20 = byteBuffer15.putLong((int) (byte) 1, (long) 365);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant92 = offsetDateTime91.toInstant();
        java.time.Instant instant94 = instant92.minusMillis(1645434864L);
        java.time.ZoneId zoneId95 = java.time.ZoneId.systemDefault();
        java.lang.String str96 = zoneId95.getId();
        java.time.ZonedDateTime zonedDateTime97 = java.time.ZonedDateTime.now(zoneId95);
        java.time.OffsetDateTime offsetDateTime98 = java.time.OffsetDateTime.ofInstant(instant94, zoneId95);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertNotNull(zoneId95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Etc/UTC" + "'", str96, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime97);
        org.junit.Assert.assertNotNull(offsetDateTime98);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        long long3 = date1.getTime();
        boolean boolean5 = date1.equals((java.lang.Object) "/UTC");
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofPattern("DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown pattern letter: o");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        java.time.LocalTime localTime22 = localDateTime21.toLocalTime();
        java.time.temporal.Temporal temporal23 = localDate16.adjustInto((java.time.temporal.Temporal) localDateTime21);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime26 = localDate16.atTime(1969, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 1969");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(temporal23);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_DAY;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_DAY));
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.put(byteBuffer14);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer15.duplicate();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.compact();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.wrap(byteArray20, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology24 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean25 = byteBuffer23.equals((java.lang.Object) isoChronology24);
        boolean boolean26 = byteBuffer23.hasArray();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.wrap(byteArray29, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer23.put(byteBuffer32);
        boolean boolean34 = byteBuffer23.hasArray();
        int int35 = byteBuffer17.compareTo(byteBuffer23);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer37 = byteBuffer17.putLong((long) 1969);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(isoChronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.LocalDate localDate7 = localDate5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.LocalDateTime localDateTime8 = localDate7.atStartOfDay();
        java.time.chrono.Era era9 = localDate7.getEra();
        java.time.chrono.IsoChronology isoChronology10 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra12 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate15 = isoChronology10.dateYearDay((java.time.chrono.Era) isoEra12, 0, 16);
        java.time.LocalTime localTime16 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime17 = localDate15.atTime(localTime16);
        java.time.LocalTime localTime19 = localTime16.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap20 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology21 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean22 = strMapMap20.containsKey((java.lang.Object) isoChronology21);
        java.time.chrono.IsoEra isoEra23 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate26 = isoChronology21.dateYearDay((java.time.chrono.Era) isoEra23, (-1), 10);
        java.time.Duration duration27 = java.time.Duration.ZERO;
        java.time.Duration duration28 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal29 = null;
        java.time.temporal.Temporal temporal30 = duration28.subtractFrom(temporal29);
        long long31 = duration28.toDays();
        java.time.Duration duration32 = duration27.plus(duration28);
        long long33 = duration28.toDays();
        java.lang.String str34 = duration28.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate35 = localDate26.plus((java.time.temporal.TemporalAmount) duration28);
        java.time.LocalTime localTime36 = localTime16.minus((java.time.temporal.TemporalAmount) duration28);
        int int37 = localTime16.getNano();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal38 = era9.adjustInto((java.time.temporal.Temporal) localTime16);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Era");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + era9 + "' != '" + java.time.chrono.IsoEra.CE + "'", era9.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(isoChronology10);
        org.junit.Assert.assertTrue("'" + isoEra12 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra12.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(isoChronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + isoEra23 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra23.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNull(temporal30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0S" + "'", str34, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999999999 + "'", int37 == 999999999);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        boolean boolean4 = file2.setWritable(false);
        java.net.URL uRL5 = file2.toURL();
        java.lang.String str6 = uRL5.getPath();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(uRL5);
        org.junit.Assert.assertEquals(uRL5.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/1970-01-01T18:01:37.00000012" + "'", str6, "/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("599b081c1808", "//Etc/UTC", (int) '0');
        int int4 = uRISyntaxException3.getIndex();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.lang.String str1 = attribute0.toString();
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZoneId zoneId5 = java.time.ZoneId.systemDefault();
        java.lang.String str6 = zoneId5.getId();
        java.time.ZonedDateTime zonedDateTime7 = zonedDateTime4.withZoneSameInstant(zoneId5);
        java.time.ZoneId zoneId8 = java.time.ZoneId.systemDefault();
        java.lang.String str9 = zoneId8.getId();
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.now(zoneId8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        boolean boolean13 = zonedDateTime7.equals((java.lang.Object) zonedDateTime12);
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime7.minusMinutes((long) (short) 0);
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.String str17 = zonedDateTime7.format(dateTimeFormatter16);
        boolean boolean18 = attribute0.equals((java.lang.Object) str17);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Etc/UTC" + "'", str9, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "20220221Z" + "'", str17, "20220221Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer5.asShortBuffer();
        java.nio.ShortBuffer shortBuffer8 = shortBuffer7.slice();
        // The following exception was thrown during execution in test generation
        try {
            short short10 = shortBuffer8.get(18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.lang.String str2 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter12.println("hi!");
        properties1.list(printWriter12);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str17 = strMapMap16.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap18 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology19 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean20 = strMapMap18.containsKey((java.lang.Object) isoChronology19);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap21 = java.nio.charset.Charset.availableCharsets();
        boolean boolean22 = strMap21.isEmpty();
        java.util.Locale locale23 = java.util.Locale.US;
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.Cloneable cloneable26 = strMapMap18.put(strMap21, (java.lang.Cloneable) locale24);
        int int27 = strMap21.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap28 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology29 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean30 = strMapMap28.containsKey((java.lang.Object) isoChronology29);
        java.time.Duration duration31 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal32 = null;
        java.time.temporal.Temporal temporal33 = duration31.subtractFrom(temporal32);
        long long34 = duration31.toDays();
        boolean boolean35 = strMapMap28.contains((java.lang.Object) duration31);
        java.time.format.DateTimeFormatter dateTimeFormatter36 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable37 = strMapMap28.get((java.lang.Object) dateTimeFormatter36);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet38 = strMapMap28.keySet();
        java.lang.Cloneable cloneable39 = strMapMap16.put(strMap21, (java.lang.Cloneable) strMapMap28);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap40 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.Object obj41 = strMapMap40.clone();
        java.lang.String str42 = strMapMap40.toString();
        java.util.Set<java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>> strMapEntrySet43 = strMapMap40.entrySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap44 = java.nio.charset.Charset.availableCharsets();
        boolean boolean45 = strMap44.isEmpty();
        java.util.Set<java.lang.String> strSet46 = strMap44.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate47 = java.util.function.Predicate.isEqual((java.lang.Object) strMap44);
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = locale48.toLanguageTag();
        java.lang.Cloneable cloneable50 = strMapMap40.replace(strMap44, (java.lang.Cloneable) locale48);
        java.util.Locale locale53 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str54 = locale53.getLanguage();
        java.lang.Cloneable cloneable55 = strMapMap28.put(strMap44, (java.lang.Cloneable) locale53);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray59 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList60 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, zoneOffsetTransitionArray59);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray62 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList63 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, zoneOffsetTransitionArray62);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray65 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList66 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66, zoneOffsetTransitionRuleArray65);
        java.time.zone.ZoneRules zoneRules68 = java.time.zone.ZoneRules.of(zoneOffset57, zoneOffset58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        boolean boolean81 = zoneOffsetTransitionList60.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition82 = null;
        boolean boolean83 = zoneOffsetTransitionList60.add(zoneOffsetTransition82);
        java.lang.Object[] objArray84 = zoneOffsetTransitionList60.toArray();
        java.lang.String[] strArray85 = java.util.Locale.getISOLanguages();
        java.lang.String[] strArray86 = zoneOffsetTransitionList60.toArray(strArray85);
        java.io.PrintWriter printWriter87 = printWriter12.printf(locale53, "599b081c1808", (java.lang.Object[]) strArray85);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(isoChronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Stati Uniti" + "'", str25, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 171 + "'", int27 == 171);
        org.junit.Assert.assertNotNull(isoChronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNull(temporal33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(cloneable37);
        org.junit.Assert.assertNotNull(strMapSet38);
        org.junit.Assert.assertNull(cloneable39);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNotNull(strMapEntrySet43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(resolverStylePredicate47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "en-GB" + "'", str49, "en-GB");
        org.junit.Assert.assertNull(cloneable50);
        org.junit.Assert.assertEquals(locale53.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "599b081c1808" + "'", str54, "599b081c1808");
        org.junit.Assert.assertNull(cloneable55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(zoneRules68);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[null]");
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(printWriter87);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer5.asShortBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putInt(2, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortBuffer7);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.io.File file9 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long10 = file9.lastModified();
        java.net.URL uRL11 = file9.toURL();
        java.security.CodeSigner[] codeSignerArray12 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource13 = new java.security.CodeSource(uRL11, codeSignerArray12);
        java.net.URL uRL14 = codeSource13.getLocation();
        java.lang.String str15 = uRL14.getHost();
        boolean boolean16 = longBuffer5.equals((java.lang.Object) uRL14);
        java.lang.Object obj17 = null;
        boolean boolean18 = uRL14.equals(obj17);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertEquals(file9.getParent(), "/");
        org.junit.Assert.assertEquals(file9.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 15032385535000L + "'", long10 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL11);
        org.junit.Assert.assertEquals(uRL11.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray12);
        org.junit.Assert.assertNotNull(uRL14);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.put(byteBuffer14);
        // The following exception was thrown during execution in test generation
        try {
            byte byte17 = byteBuffer14.get((int) '\000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration3.subtractFrom(temporal4);
        long long6 = duration3.toDays();
        boolean boolean7 = strMapMap0.contains((java.lang.Object) duration3);
        boolean boolean9 = strMapMap0.equals((java.lang.Object) (short) -1);
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.lang.String str1 = attribute0.toString();
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(input_method_segment)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.temporal.TemporalUnit temporalUnit1 = null;
        boolean boolean2 = localTime0.isSupported(temporalUnit1);
        java.time.LocalTime localTime4 = localTime0.withNano((int) '4');
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale8 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str9 = locale8.getLanguage();
        java.lang.String str10 = chronoField5.getDisplayName(locale8);
        boolean boolean11 = chronoField5.isTimeBased();
        java.time.temporal.ValueRange valueRange12 = localTime0.range((java.time.temporal.TemporalField) chronoField5);
        long long13 = valueRange12.getLargestMinimum();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField5.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale8.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "599b081c1808" + "'", str9, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClockHourOfDay" + "'", str10, "ClockHourOfDay");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(valueRange12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.security.cert.CertificateEncodingException certificateEncodingException0 = new java.security.cert.CertificateEncodingException();
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.time.Clock clock1 = java.time.Clock.system(zoneId0);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertNotNull(clock1);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.io.File file5 = file2.getCanonicalFile();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.security.CodeSigner[] codeSignerArray11 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource12 = new java.security.CodeSource(uRL10, codeSignerArray11);
        java.net.URL uRL14 = new java.net.URL(uRL10, "/");
        java.lang.Object obj15 = uRL14.getContent();
        boolean boolean16 = file5.equals((java.lang.Object) uRL14);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 15032385535000L + "'", long3 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/");
        org.junit.Assert.assertEquals(file5.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 15032385535000L + "'", long9 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray11);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setLanguageTag("iso8601");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: iso8601 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.util.stream.IntStream intStream0 = java.util.stream.IntStream.empty();
        java.util.stream.LongStream longStream1 = intStream0.asLongStream();
        java.util.function.LongBinaryOperator longBinaryOperator3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = longStream1.reduce(1645434847L, longBinaryOperator3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream0);
        org.junit.Assert.assertNotNull(longStream1);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 1024, (long) 64);
        java.time.Duration duration4 = duration2.minusMillis(0L);
        java.time.ZoneId zoneId5 = java.time.ZoneId.systemDefault();
        java.lang.String str6 = zoneId5.getId();
        java.time.ZonedDateTime zonedDateTime7 = java.time.ZonedDateTime.now(zoneId5);
        java.time.ZonedDateTime zonedDateTime9 = zonedDateTime7.withYear((int) (short) 1);
        java.time.LocalTime localTime10 = zonedDateTime9.toLocalTime();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap11 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap12 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = strMapMap12.containsKey((java.lang.Object) isoChronology13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal16 = null;
        java.time.temporal.Temporal temporal17 = duration15.subtractFrom(temporal16);
        long long18 = duration15.toDays();
        boolean boolean19 = strMapMap12.contains((java.lang.Object) duration15);
        java.lang.Cloneable cloneable20 = strMapMap11.get((java.lang.Object) duration15);
        java.time.Duration duration21 = java.time.Duration.ZERO;
        java.time.Duration duration22 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal23 = null;
        java.time.temporal.Temporal temporal24 = duration22.subtractFrom(temporal23);
        long long25 = duration22.toDays();
        java.time.Duration duration26 = duration21.plus(duration22);
        long long27 = duration22.toDays();
        java.time.Duration duration28 = duration15.plus(duration22);
        java.time.LocalTime localTime29 = localTime10.plus((java.time.temporal.TemporalAmount) duration15);
        java.time.Duration duration30 = duration2.minus(duration15);
        java.time.Duration duration32 = duration30.plusMinutes(23L);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNull(temporal17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(cloneable20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNull(temporal24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        java.io.UnsupportedEncodingException unsupportedEncodingException1 = new java.io.UnsupportedEncodingException("/");
        java.security.GeneralSecurityException generalSecurityException2 = new java.security.GeneralSecurityException((java.lang.Throwable) unsupportedEncodingException1);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean30 = localDateTime9.isSupported((java.time.temporal.TemporalField) chronoField29);
        java.time.Period period32 = java.time.Period.ofYears((int) '\000');
        java.time.Period period34 = period32.minusDays((long) (short) 0);
        java.time.LocalDateTime localDateTime35 = localDateTime9.plus((java.time.temporal.TemporalAmount) period32);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime36 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = localDateTime9.isEqual(localDateChronoLocalDateTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField29.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) 0, (byte) -1, (byte) 0, (byte) 100 };
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.wrap(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            filterOutputStream1.write(byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 0, -1, 0, 100]");
        org.junit.Assert.assertNotNull(byteBuffer8);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant92 = offsetDateTime91.toInstant();
        java.nio.CharBuffer charBuffer94 = java.nio.CharBuffer.allocate(16);
        int int95 = charBuffer94.limit();
        java.util.stream.IntStream intStream96 = charBuffer94.chars();
        boolean boolean97 = offsetDateTime91.equals((java.lang.Object) intStream96);
        java.lang.String str98 = offsetDateTime91.toString();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(charBuffer94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 16 + "'", int95 == 16);
        org.junit.Assert.assertNotNull(intStream96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "1970-01-10T18:01:37.000000120+18:00" + "'", str98, "1970-01-10T18:01:37.000000120+18:00");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        java.nio.IntBuffer intBuffer2 = intBuffer1.slice();
        int[] intArray3 = intBuffer1.array();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate(16);
        int int6 = charBuffer5.limit();
        java.util.stream.IntStream intStream7 = charBuffer5.chars();
        int[] intArray8 = intStream7.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer9 = intBuffer1.put(intArray8);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertNotNull(intBuffer2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("Tuesday", "zh", 48, "2022-02-21T09:14:13.671Z[Etc/UTC]", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: tuesday");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant92 = offsetDateTime91.toInstant();
        java.nio.CharBuffer charBuffer94 = java.nio.CharBuffer.allocate(16);
        int int95 = charBuffer94.limit();
        java.util.stream.IntStream intStream96 = charBuffer94.chars();
        boolean boolean97 = offsetDateTime91.equals((java.lang.Object) intStream96);
        java.time.OffsetDateTime offsetDateTime99 = offsetDateTime91.plusWeeks(9L);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(charBuffer94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 16 + "'", int95 == 16);
        org.junit.Assert.assertNotNull(intStream96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(offsetDateTime99);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit5 = null;
        boolean boolean6 = zonedDateTime2.isSupported(temporalUnit5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange8 = zonedDateTime2.range((java.time.temporal.TemporalField) chronoField7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime10 = java.time.LocalTime.MAX;
        long long11 = chronoField9.getFrom((java.time.temporal.TemporalAccessor) localTime10);
        boolean boolean12 = zonedDateTime2.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.LocalDate localDate14 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra17 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate20 = isoChronology15.dateYearDay((java.time.chrono.Era) isoEra17, 0, 16);
        java.time.LocalTime localTime21 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime22 = localDate20.atTime(localTime21);
        java.time.LocalDate localDate24 = localDate20.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod25 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate14, (java.time.chrono.ChronoLocalDate) localDate20);
        java.time.LocalDate localDate27 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate29 = java.time.LocalDate.ofEpochDay((long) 10);
        int int30 = localDate27.compareTo((java.time.chrono.ChronoLocalDate) localDate29);
        java.time.temporal.Temporal temporal31 = localDate14.adjustInto((java.time.temporal.Temporal) localDate29);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate33 = chronoField9.adjustInto((java.time.chrono.ChronoLocalDate) localDate14, 14L);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: ClockHourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField7.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField9.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 23L + "'", long11 == 23L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertTrue("'" + isoEra17 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra17.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronoPeriod25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(temporal31);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (byte) 1);
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.of((int) (byte) 1);
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.concat(intStream1, intStream3);
        long long5 = intStream4.count();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.OVERFLOW;
        boolean boolean1 = coderResult0.isOverflow();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        long long7 = longStream6.count();
        java.lang.Runnable runnable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream9 = longStream6.onClose(runnable8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.time.Clock clock0 = java.time.Clock.systemDefaultZone();
        org.junit.Assert.assertNotNull(clock0);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "599b081c1808");
        java.util.stream.IntStream intStream2 = charBuffer1.chars();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter12.println("hi!");
        properties1.list(printWriter12);
        printWriter12.println(10);
        printWriter12.print(16);
        printWriter12.println((float) 10);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.slice();
        java.nio.FloatBuffer floatBuffer3 = floatBuffer2.asReadOnlyBuffer();
        java.nio.Buffer buffer4 = floatBuffer3.rewind();
        float[] floatArray10 = new float[] { (byte) -1, 20160L, '4', 10L, 1645434862L };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer13 = floatBuffer3.put(floatArray10, 1, 0);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 20160.0, 52.0, 10.0, 1.64543488E9]");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.LocalDate localDate7 = localDate5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.chrono.IsoChronology isoChronology8 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra10 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate13 = isoChronology8.dateYearDay((java.time.chrono.Era) isoEra10, 0, 16);
        java.time.Duration duration14 = java.time.Duration.ZERO;
        java.time.LocalDate localDate15 = localDate13.plus((java.time.temporal.TemporalAmount) duration14);
        boolean boolean16 = localDate5.isBefore((java.time.chrono.ChronoLocalDate) localDate15);
        int int17 = localDate15.lengthOfMonth();
        java.time.LocalDate localDate19 = localDate15.withMonth(9);
        int int20 = localDate15.getDayOfYear();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(isoChronology8);
        org.junit.Assert.assertTrue("'" + isoEra10 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra10.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        long long3 = date1.getTime();
        int int4 = date1.getDay();
        int int5 = date1.getYear();
        int int6 = date1.getTimezoneOffset();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withYear((int) (short) 1);
        boolean boolean11 = zonedDateTime5.equals((java.lang.Object) zonedDateTime10);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime5.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology14 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime5);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        long long16 = zonedDateTime5.getLong((java.time.temporal.TemporalField) chronoField15);
        int int17 = zonedDateTime5.getDayOfMonth();
        long long18 = zonedDateTime5.toEpochSecond();
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField15.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645434869L + "'", long16 == 1645434869L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21 + "'", int17 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645434869L + "'", long18 == 1645434869L);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.net.URISyntaxException uRISyntaxException2 = new java.net.URISyntaxException("italiano", "");
        java.lang.String str3 = uRISyntaxException2.getReason();
        java.text.ParseException parseException6 = new java.text.ParseException("1970-01-01T18:01:37.00000012", 14);
        uRISyntaxException2.addSuppressed((java.lang.Throwable) parseException6);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap3 = java.nio.charset.Charset.availableCharsets();
        boolean boolean4 = strMap3.isEmpty();
        java.util.Locale locale5 = java.util.Locale.US;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.Cloneable cloneable8 = strMapMap0.put(strMap3, (java.lang.Cloneable) locale6);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap9 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str10 = strMapMap9.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap11 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean13 = strMapMap11.containsKey((java.lang.Object) isoChronology12);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap14 = java.nio.charset.Charset.availableCharsets();
        boolean boolean15 = strMap14.isEmpty();
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.lang.Cloneable cloneable19 = strMapMap11.put(strMap14, (java.lang.Cloneable) locale17);
        int int20 = strMap14.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap21 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology22 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean23 = strMapMap21.containsKey((java.lang.Object) isoChronology22);
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal25 = null;
        java.time.temporal.Temporal temporal26 = duration24.subtractFrom(temporal25);
        long long27 = duration24.toDays();
        boolean boolean28 = strMapMap21.contains((java.lang.Object) duration24);
        java.time.format.DateTimeFormatter dateTimeFormatter29 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable30 = strMapMap21.get((java.lang.Object) dateTimeFormatter29);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet31 = strMapMap21.keySet();
        java.lang.Cloneable cloneable32 = strMapMap9.put(strMap14, (java.lang.Cloneable) strMapMap21);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap33 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str34 = strMapMap33.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap35 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology36 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean37 = strMapMap35.containsKey((java.lang.Object) isoChronology36);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap38 = java.nio.charset.Charset.availableCharsets();
        boolean boolean39 = strMap38.isEmpty();
        java.util.Locale locale40 = java.util.Locale.US;
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale40.getDisplayCountry(locale41);
        java.lang.Cloneable cloneable43 = strMapMap35.put(strMap38, (java.lang.Cloneable) locale41);
        int int44 = strMap38.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap45 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology46 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean47 = strMapMap45.containsKey((java.lang.Object) isoChronology46);
        java.time.Duration duration48 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal49 = null;
        java.time.temporal.Temporal temporal50 = duration48.subtractFrom(temporal49);
        long long51 = duration48.toDays();
        boolean boolean52 = strMapMap45.contains((java.lang.Object) duration48);
        java.time.format.DateTimeFormatter dateTimeFormatter53 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable54 = strMapMap45.get((java.lang.Object) dateTimeFormatter53);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet55 = strMapMap45.keySet();
        java.lang.Cloneable cloneable56 = strMapMap33.put(strMap38, (java.lang.Cloneable) strMapMap45);
        java.util.Date date62 = new java.util.Date(1, (int) 'x', (int) '0', 16, 256);
        int int63 = date62.getMinutes();
        java.lang.Cloneable cloneable64 = strMapMap21.put(strMap38, (java.lang.Cloneable) date62);
        java.util.Collection<java.nio.charset.Charset> charsetCollection65 = strMap38.values();
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray68 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList69 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList69, zoneOffsetTransitionArray68);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray74 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList75, zoneOffsetTransitionRuleArray74);
        java.time.zone.ZoneRules zoneRules77 = java.time.zone.ZoneRules.of(zoneOffset66, zoneOffset67, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList69, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList75);
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset79 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray80 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList81 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList81, zoneOffsetTransitionArray80);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray83 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList84 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList84, zoneOffsetTransitionArray83);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray86 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList87 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList87, zoneOffsetTransitionRuleArray86);
        java.time.zone.ZoneRules zoneRules89 = java.time.zone.ZoneRules.of(zoneOffset78, zoneOffset79, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList81, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList84, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList87);
        boolean boolean90 = zoneOffsetTransitionList69.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList84);
        java.lang.Cloneable cloneable91 = strMapMap0.replace(strMap38, (java.lang.Cloneable) zoneOffsetTransitionList69);
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Stati Uniti" + "'", str7, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Stati Uniti" + "'", str18, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 171 + "'", int20 == 171);
        org.junit.Assert.assertNotNull(isoChronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNull(temporal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(cloneable30);
        org.junit.Assert.assertNotNull(strMapSet31);
        org.junit.Assert.assertNull(cloneable32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNotNull(isoChronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Stati Uniti" + "'", str42, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 171 + "'", int44 == 171);
        org.junit.Assert.assertNotNull(isoChronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNull(temporal50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNull(cloneable54);
        org.junit.Assert.assertNotNull(strMapSet55);
        org.junit.Assert.assertNull(cloneable56);
        org.junit.Assert.assertEquals(date62.toString(), "Fri Feb 17 20:16:00 UTC 1911");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 16 + "'", int63 == 16);
        org.junit.Assert.assertNull(cloneable64);
        org.junit.Assert.assertNotNull(charsetCollection65);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneRules77);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(zoneOffset79);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(zoneRules89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(cloneable91);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        double double3 = descriptiveStatistics0.getSkewness();
        descriptiveStatistics0.setWindowSize(1024);
        double double6 = descriptiveStatistics0.getGeometricMean();
        double double7 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        int int0 = java.util.Spliterator.DISTINCT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.lang.String str14 = offsetTime13.toString();
        java.time.ZoneOffset zoneOffset15 = offsetTime13.getOffset();
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_TIME;
        boolean boolean17 = offsetTime13.equals((java.lang.Object) dateTimeFormatter16);
        java.util.Set<java.time.temporal.TemporalField> temporalFieldSet18 = dateTimeFormatter16.getResolverFields();
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.allocate(16);
        int int21 = charBuffer20.limit();
        java.lang.String str22 = charBuffer20.toString();
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (byte) 0);
        int int25 = parsePosition24.getIndex();
        parsePosition24.setIndex((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor28 = dateTimeFormatter16.parseUnresolved((java.lang.CharSequence) charBuffer20, parsePosition24);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "23:59:59.999999999+18:00" + "'", str14, "23:59:59.999999999+18:00");
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(temporalFieldSet18);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str22, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.io.UnsupportedEncodingException unsupportedEncodingException1 = new java.io.UnsupportedEncodingException("Stati Uniti");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter5 = new java.io.PrintWriter(file2, "2022-02-21T09:14:13.671Z[Etc/UTC]");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 2022-02-21T09:14:13.671Z[Etc/UTC]");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 15032385535000L + "'", long3 == 15032385535000L);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        int int2 = intBuffer1.get();
        int[] intArray3 = new int[] {};
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of(intArray3);
        java.nio.IntBuffer intBuffer5 = intBuffer1.get(intArray3);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer8 = intBuffer5.put(14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intBuffer5);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant1 = java.time.Instant.parse((java.lang.CharSequence) "java.nio.HeapFloatBufferR[pos=0%20lim=256%20cap=256]");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'java.nio.HeapFloatBufferR[pos=0%20lim=256%20cap=256]' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.util.Date date5 = new java.util.Date((int) (short) -1, (-34), 16448, 0, 13);
        java.security.cert.CertPath certPath6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.Timestamp timestamp7 = new java.security.Timestamp(date5, certPath6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Mar 13 00:13:00 UTC 1941");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.Buffer buffer7 = longBuffer2.flip();
        java.lang.String str8 = longBuffer2.toString();
        java.util.stream.LongStream longStream9 = java.util.stream.LongStream.empty();
        long[] longArray10 = longStream9.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer13 = longBuffer2.get(longArray10, (int) '4', 1024);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]" + "'", str8, "java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]");
        org.junit.Assert.assertNotNull(longStream9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.nio.file.attribute.FileTime fileTime3 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.time.Instant instant4 = fileTime3.toInstant();
        java.lang.String str5 = fileTime3.toString();
        int int6 = fileTime1.compareTo(fileTime3);
        java.util.concurrent.TimeUnit timeUnit7 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long8 = fileTime1.to(timeUnit7);
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.time.Instant instant11 = fileTime10.toInstant();
        int int12 = fileTime1.compareTo(fileTime10);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(fileTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.01Z" + "'", str5, "1970-01-01T00:00:00.01Z");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeUnit7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.io.File file4 = file2.getCanonicalFile();
        boolean boolean5 = file4.isDirectory();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 15032385535000L + "'", long3 == 15032385535000L);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
        org.junit.Assert.assertEquals(file4.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        long long0 = java.security.Key.serialVersionUID;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 6603384152749567654L + "'", long0 == 6603384152749567654L);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.nio.file.Path path25 = path18.relativize(path24);
        boolean boolean26 = path11.startsWith(path18);
        java.net.URI uRI27 = path18.toUri();
        java.io.File file30 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long31 = file30.lastModified();
        java.net.URL uRL32 = file30.toURL();
        java.nio.file.Path path33 = file30.toPath();
        java.io.File file36 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long37 = file36.lastModified();
        java.net.URL uRL38 = file36.toURL();
        java.nio.file.Path path39 = file36.toPath();
        java.nio.file.Path path40 = path33.relativize(path39);
        java.nio.CharBuffer charBuffer42 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer44 = charBuffer42.append((java.lang.CharSequence) "Etc/UTC");
        int int45 = charBuffer44.arrayOffset();
        boolean boolean46 = path39.equals((java.lang.Object) int45);
        boolean boolean47 = path18.endsWith(path39);
        java.nio.file.WatchService watchService48 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind49 = null;
        java.nio.file.WatchEvent.Kind[] kindArray51 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray52 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray51;
        wildcardKindArray52[0] = wildcardKind49;
        java.nio.file.WatchEvent.Modifier modifier55 = null;
        java.nio.file.WatchEvent.Modifier[] modifierArray56 = new java.nio.file.WatchEvent.Modifier[] { modifier55 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey57 = path18.register(watchService48, wildcardKindArray52, modifierArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 15032385535000L + "'", long3 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 15032385535000L + "'", long9 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 15032385535000L + "'", long16 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 15032385535000L + "'", long22 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(uRI27);
        org.junit.Assert.assertEquals(file30.getParent(), "/");
        org.junit.Assert.assertEquals(file30.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 15032385535000L + "'", long31 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL32);
        org.junit.Assert.assertEquals(uRL32.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path33);
        org.junit.Assert.assertEquals(file36.getParent(), "/");
        org.junit.Assert.assertEquals(file36.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 15032385535000L + "'", long37 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL38);
        org.junit.Assert.assertEquals(uRL38.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertNotNull(path40);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertNotNull(charBuffer44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(kindArray51);
        org.junit.Assert.assertNotNull(wildcardKindArray52);
        org.junit.Assert.assertNotNull(modifierArray56);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.net.URI uRI5 = new java.net.URI("DIRECT", "Optional.empty", "", "italiano://Etc/UTC#Etc/UTC", "java.nio.HeapFloatBufferR[pos=0 lim=256 cap=256]");
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.io.File file14 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long15 = file14.lastModified();
        java.net.URL uRL16 = file14.toURL();
        java.nio.file.Path path17 = file14.toPath();
        java.nio.file.Path path18 = path11.relativize(path17);
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.io.File file27 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long28 = file27.lastModified();
        java.net.URL uRL29 = file27.toURL();
        java.nio.file.Path path30 = file27.toPath();
        java.nio.file.Path path31 = path24.relativize(path30);
        boolean boolean32 = path17.startsWith(path24);
        java.net.URI uRI33 = path24.toUri();
        java.net.URI uRI34 = uRI5.relativize(uRI33);
        boolean boolean36 = uRI5.equals((java.lang.Object) (-719147L));
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 15032385535000L + "'", long9 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertEquals(file14.getParent(), "/");
        org.junit.Assert.assertEquals(file14.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 15032385535000L + "'", long15 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL16);
        org.junit.Assert.assertEquals(uRL16.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 15032385535000L + "'", long22 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertEquals(file27.getParent(), "/");
        org.junit.Assert.assertEquals(file27.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 15032385535000L + "'", long28 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL29);
        org.junit.Assert.assertEquals(uRL29.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path30);
        org.junit.Assert.assertNotNull(path31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(uRI33);
        org.junit.Assert.assertNotNull(uRI34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.DoubleStream doubleStream4 = intStream3.asDoubleStream();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate(16);
        int int7 = charBuffer6.limit();
        java.util.stream.IntStream intStream8 = charBuffer6.chars();
        java.util.stream.DoubleStream doubleStream9 = intStream8.asDoubleStream();
        java.util.stream.DoubleStream doubleStream10 = java.util.stream.DoubleStream.concat(doubleStream4, doubleStream9);
        java.lang.Runnable runnable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream12 = doubleStream9.onClose(runnable11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream10);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.time.Month month0 = java.time.Month.AUGUST;
        int int1 = month0.maxLength();
        int int3 = month0.firstDayOfYear(true);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.AUGUST + "'", month0.equals(java.time.Month.AUGUST));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 31 + "'", int1 == 31);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 214 + "'", int3 == 214);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.Month month2 = month1.firstMonthOfQuarter();
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = java.time.ZonedDateTime.now(zoneId3);
        java.time.ZonedDateTime zonedDateTime7 = zonedDateTime5.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit8 = null;
        boolean boolean9 = zonedDateTime5.isSupported(temporalUnit8);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange11 = zonedDateTime5.range((java.time.temporal.TemporalField) chronoField10);
        java.lang.String str12 = chronoField10.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange13 = month1.range((java.time.temporal.TemporalField) chronoField10);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: DayOfWeek");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.JANUARY + "'", month2.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField10.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DayOfWeek" + "'", str12, "DayOfWeek");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        long[] longArray1 = longStream0.toArray();
        java.util.LongSummaryStatistics longSummaryStatistics2 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream5 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics6 = longStream5.summaryStatistics();
        java.util.function.IntConsumer intConsumer7 = longSummaryStatistics2.andThen((java.util.function.IntConsumer) longSummaryStatistics6);
        // The following exception was thrown during execution in test generation
        try {
            longStream0.forEachOrdered((java.util.function.LongConsumer) longSummaryStatistics6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertEquals(longSummaryStatistics2.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longSummaryStatistics6);
        org.junit.Assert.assertEquals(longSummaryStatistics6.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer7);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        int int9 = byteBuffer5.remaining();
        java.nio.IntBuffer intBuffer10 = byteBuffer5.asIntBuffer();
        // The following exception was thrown during execution in test generation
        try {
            char char11 = byteBuffer5.getChar();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intBuffer10);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.io.File file2 = java.io.File.createTempFile("1970-01-01T18:01:37.00000012", "PT0S");
        long long3 = file2.length();
        boolean boolean4 = file2.isAbsolute();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/1970-01-01T18:01:37.000000121637889864763703360PT0S");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime30 = localDateTime24.withSecond(0);
        java.time.format.DateTimeFormatter dateTimeFormatter31 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.lang.String str32 = localDateTime24.format(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-001" + "'", str32, "1970-001");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI5 = new java.net.URI("java.nio.HeapFloatBufferR[pos=0%20lim=256%20cap=256]", "java.text.AttributedCharacterIterator$Attribute(reading)", "", "zh", "hi!");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Illegal character in scheme name at index 25: java.nio.HeapFloatBufferR[pos=0%20lim=256%20cap=256]://java.text.AttributedCharacterIterator$Attribute(reading)?zh#hi!");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.lang.String str5 = file2.getPath();
        boolean boolean8 = file2.setExecutable(true, true);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 15032385535000L + "'", long3 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/1970-01-01T18:01:37.00000012" + "'", str5, "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime91.plusYears((long) 'a');
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime91.minusMonths((long) '0');
        java.time.OffsetDateTime offsetDateTime97 = offsetDateTime91.minusYears((long) 100);
        java.time.OffsetDateTime offsetDateTime99 = offsetDateTime91.minusNanos(299105452032L);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertNotNull(offsetDateTime97);
        org.junit.Assert.assertNotNull(offsetDateTime99);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime3 = java.time.LocalTime.of(59, (-34), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 59");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getGeometricMeanImpl();
        double double5 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getSkewnessImpl();
        double double7 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.nio.file.Path path25 = path18.relativize(path24);
        boolean boolean26 = path11.startsWith(path18);
        java.nio.file.Path path28 = path11.resolveSibling("Big5");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path31 = path11.subpath(171, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 15032385535000L + "'", long3 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 15032385535000L + "'", long9 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 15032385535000L + "'", long16 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 15032385535000L + "'", long22 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(path28);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.write("");
        printWriter1.print("0001-01-16T23:59:59.999999999");
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        boolean boolean1 = strMap0.isEmpty();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = strMap0.replace("en-GB", charset4, charset5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.flush();
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.time.Period period1 = java.time.Period.ofYears((int) '\000');
        java.time.chrono.Chronology chronology2 = period1.getChronology();
        java.time.Period period4 = period1.withDays((int) (byte) 100);
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.time.Duration duration7 = duration5.minusMillis((long) (byte) 0);
        java.time.Duration duration9 = duration7.plusDays((long) 13);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period10 = period4.plus((java.time.temporal.TemporalAmount) duration9);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.lang.String str7 = uRL4.getHost();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 15032385535000L + "'", long3 == 15032385535000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putShort((int) 'u', (short) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL1 = new java.net.URL("DIRECT");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: DIRECT");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.time.Month month1 = java.time.Month.JANUARY;
        java.time.Month month2 = month1.firstMonthOfQuarter();
        java.time.Month month3 = month2.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean5 = month3.isSupported((java.time.temporal.TemporalField) chronoField4);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.of((int) (short) -1, month3, (int) ':', 21, (int) (byte) 10, 4096);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 58");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.JANUARY + "'", month2.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.JANUARY + "'", month3.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField4.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray15 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList16 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, zoneOffsetTransitionArray15);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray18 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, zoneOffsetTransitionArray18);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray21 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22, zoneOffsetTransitionRuleArray21);
        java.time.zone.ZoneRules zoneRules24 = java.time.zone.ZoneRules.of(zoneOffset13, zoneOffset14, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray30 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, zoneOffsetTransitionArray30);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray33 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34, zoneOffsetTransitionRuleArray33);
        java.time.zone.ZoneRules zoneRules36 = java.time.zone.ZoneRules.of(zoneOffset25, zoneOffset26, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34);
        boolean boolean37 = zoneOffsetTransitionList16.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray43 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, zoneOffsetTransitionArray43);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray46 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList47 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList47, zoneOffsetTransitionRuleArray46);
        java.time.zone.ZoneRules zoneRules49 = java.time.zone.ZoneRules.of(zoneOffset38, zoneOffset39, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList47);
        int int51 = zoneOffsetTransitionList44.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray54 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList55 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, zoneOffsetTransitionArray54);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray60 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList61, zoneOffsetTransitionRuleArray60);
        java.time.zone.ZoneRules zoneRules63 = java.time.zone.ZoneRules.of(zoneOffset52, zoneOffset53, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList61);
        java.time.zone.ZoneRules zoneRules64 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList61);
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.MAX;
        java.lang.String str68 = zoneOffset67.getId();
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset67);
        int int70 = zoneOffset1.compareTo(zoneOffset67);
        java.time.ZonedDateTime zonedDateTime71 = java.time.ZonedDateTime.now((java.time.ZoneId) zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(zoneRules64);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+18:00" + "'", str68, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime71);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime91.plusYears((long) 'a');
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime91.minusMonths((long) '0');
        java.time.OffsetDateTime offsetDateTime97 = offsetDateTime91.minusYears((long) 100);
        java.time.OffsetDateTime offsetDateTime99 = offsetDateTime97.minusMinutes((long) 256);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertNotNull(offsetDateTime97);
        org.junit.Assert.assertNotNull(offsetDateTime99);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.put(byteBuffer14);
        int int16 = byteBuffer5.arrayOffset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.chrono.IsoChronology isoChronology2 = localDate1.getChronology();
        java.time.chrono.IsoChronology isoChronology3 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra5 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate8 = isoChronology3.dateYearDay((java.time.chrono.Era) isoEra5, 0, 16);
        java.time.LocalTime localTime9 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime10 = localDate8.atTime(localTime9);
        java.time.LocalDate localDate12 = localDate8.withMonth(1);
        boolean boolean13 = localDate1.isAfter((java.time.chrono.ChronoLocalDate) localDate8);
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra17 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate20 = isoChronology15.dateYearDay((java.time.chrono.Era) isoEra17, 0, 16);
        java.time.LocalTime localTime21 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime22 = localDate20.atTime(localTime21);
        java.time.LocalDate localDate24 = localDate20.withMonth(1);
        long long25 = localDate24.toEpochDay();
        java.time.chrono.IsoChronology isoChronology26 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra28 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate31 = isoChronology26.dateYearDay((java.time.chrono.Era) isoEra28, 0, 16);
        java.time.LocalTime localTime32 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime33 = localDate31.atTime(localTime32);
        java.time.LocalDate localDate35 = localDate31.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod36 = localDate24.until((java.time.chrono.ChronoLocalDate) localDate35);
        java.time.LocalDate localDate38 = localDate24.plusDays((long) (short) 0);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.lang.String str43 = zoneOffset42.getId();
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset42);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.lang.String str48 = zoneOffset47.getId();
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset47);
        boolean boolean50 = localDateTime44.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.format.DateTimeFormatter dateTimeFormatter51 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str52 = localDateTime49.format(dateTimeFormatter51);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int54 = localDateTime49.get((java.time.temporal.TemporalField) chronoField53);
        java.time.ZoneId zoneId55 = java.time.ZoneId.systemDefault();
        java.lang.String str56 = zoneId55.getId();
        java.time.ZonedDateTime zonedDateTime57 = java.time.ZonedDateTime.now(zoneId55);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime57.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit60 = null;
        boolean boolean61 = zonedDateTime57.isSupported(temporalUnit60);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange63 = zonedDateTime57.range((java.time.temporal.TemporalField) chronoField62);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime65 = java.time.LocalTime.MAX;
        long long66 = chronoField64.getFrom((java.time.temporal.TemporalAccessor) localTime65);
        boolean boolean67 = zonedDateTime57.isSupported((java.time.temporal.TemporalField) chronoField64);
        java.time.ZoneId zoneId68 = java.time.ZoneId.systemDefault();
        java.lang.String str69 = zoneId68.getId();
        java.lang.String str70 = zoneId68.getId();
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime57.withZoneSameInstant(zoneId68);
        long long72 = chronoField53.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime57);
        java.time.temporal.TemporalUnit temporalUnit73 = chronoField53.getRangeUnit();
        java.time.LocalDate localDate74 = localDate38.plus((long) 1969, temporalUnit73);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate75 = localDate1.plus(97L, temporalUnit73);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000096");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + isoEra5 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra5.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertTrue("'" + isoEra17 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra17.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-719147L) + "'", long25 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology26);
        org.junit.Assert.assertTrue("'" + isoEra28 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra28.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronoPeriod36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+18:00" + "'", str43, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+18:00" + "'", str48, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str52, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField53.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(zoneId55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Etc/UTC" + "'", str56, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField62.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField64.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 23L + "'", long66 == 23L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Etc/UTC" + "'", str69, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Etc/UTC" + "'", str70, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 8L + "'", long72 == 8L);
        org.junit.Assert.assertTrue("'" + temporalUnit73 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit73.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDate74);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics8 = longStream7.summaryStatistics();
        java.util.function.IntConsumer intConsumer9 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics8);
        java.util.stream.IntStream intStream10 = intStream3.peek((java.util.function.IntConsumer) longSummaryStatistics4);
        java.util.LongSummaryStatistics longSummaryStatistics11 = new java.util.LongSummaryStatistics();
        double double12 = longSummaryStatistics11.getAverage();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream13 = intStream3.peek((java.util.function.IntConsumer) longSummaryStatistics11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(longSummaryStatistics8);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertEquals(longSummaryStatistics11.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.lang.String str3 = charBuffer1.toString();
        java.nio.CharBuffer charBuffer6 = charBuffer1.put(4, '4');
        java.nio.CharBuffer charBuffer7 = charBuffer1.compact();
        boolean boolean8 = charBuffer7.hasRemaining();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str3, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate7 = isoChronology2.dateYearDay((java.time.chrono.Era) isoEra4, 0, 16);
        java.time.LocalTime localTime8 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime9 = localDate7.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate7.withMonth(1);
        long long12 = localDate11.toEpochDay();
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra15 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate18 = isoChronology13.dateYearDay((java.time.chrono.Era) isoEra15, 0, 16);
        java.time.LocalTime localTime19 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime20 = localDate18.atTime(localTime19);
        java.time.LocalDate localDate22 = localDate18.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod23 = localDate11.until((java.time.chrono.ChronoLocalDate) localDate22);
        java.time.LocalDate localDate25 = localDate11.plusDays((long) (short) 0);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MAX;
        java.lang.String str30 = zoneOffset29.getId();
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset29);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.lang.String str35 = zoneOffset34.getId();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset34);
        boolean boolean37 = localDateTime31.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str39 = localDateTime36.format(dateTimeFormatter38);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int41 = localDateTime36.get((java.time.temporal.TemporalField) chronoField40);
        java.time.ZoneId zoneId42 = java.time.ZoneId.systemDefault();
        java.lang.String str43 = zoneId42.getId();
        java.time.ZonedDateTime zonedDateTime44 = java.time.ZonedDateTime.now(zoneId42);
        java.time.ZonedDateTime zonedDateTime46 = zonedDateTime44.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit47 = null;
        boolean boolean48 = zonedDateTime44.isSupported(temporalUnit47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange50 = zonedDateTime44.range((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.ChronoField chronoField51 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime52 = java.time.LocalTime.MAX;
        long long53 = chronoField51.getFrom((java.time.temporal.TemporalAccessor) localTime52);
        boolean boolean54 = zonedDateTime44.isSupported((java.time.temporal.TemporalField) chronoField51);
        java.time.ZoneId zoneId55 = java.time.ZoneId.systemDefault();
        java.lang.String str56 = zoneId55.getId();
        java.lang.String str57 = zoneId55.getId();
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime44.withZoneSameInstant(zoneId55);
        long long59 = chronoField40.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime44);
        java.time.temporal.TemporalUnit temporalUnit60 = chronoField40.getRangeUnit();
        java.time.LocalDate localDate61 = localDate25.plus((long) 1969, temporalUnit60);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration62 = duration0.plus(97L, temporalUnit60);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit must not have an estimated duration");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra4.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-719147L) + "'", long12 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + isoEra15 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra15.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronoPeriod23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+18:00" + "'", str30, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+18:00" + "'", str35, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str39, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(zoneId42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Etc/UTC" + "'", str43, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField49.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange50);
        org.junit.Assert.assertTrue("'" + chronoField51 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField51.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 23L + "'", long53 == 23L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(zoneId55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Etc/UTC" + "'", str56, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Etc/UTC" + "'", str57, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 8L + "'", long59 == 8L);
        org.junit.Assert.assertTrue("'" + temporalUnit60 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit60.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        java.util.OptionalDouble optionalDouble2 = doubleStream1.max();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = doubleStream1.sum();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress5 = java.net.InetAddress.getByAddress(byteArray4);
        java.net.NetworkInterface networkInterface6 = java.net.NetworkInterface.getByInetAddress(inetAddress5);
        java.lang.String str7 = inetAddress5.getCanonicalHostName();
        boolean boolean9 = inetAddress5.isReachable(16448);
        byte[] byteArray10 = inetAddress5.getAddress();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress5);
        org.junit.Assert.assertNull(networkInterface6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1.0.0.100" + "'", str7, "1.0.0.100");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 0, 0, 100]");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDate localDate29 = localDateTime9.toLocalDate();
        java.time.LocalTime localTime30 = java.time.LocalTime.MAX;
        java.time.temporal.TemporalUnit temporalUnit31 = null;
        boolean boolean32 = localTime30.isSupported(temporalUnit31);
        java.time.LocalTime localTime34 = localTime30.plusHours((long) 256);
        java.time.chrono.IsoChronology isoChronology35 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra37 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate40 = isoChronology35.dateYearDay((java.time.chrono.Era) isoEra37, 0, 16);
        java.time.LocalTime localTime41 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime42 = localDate40.atTime(localTime41);
        java.time.LocalDate localDate44 = localDate40.withMonth(1);
        long long45 = localDate44.toEpochDay();
        java.time.chrono.IsoChronology isoChronology46 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra48 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate51 = isoChronology46.dateYearDay((java.time.chrono.Era) isoEra48, 0, 16);
        java.time.LocalTime localTime52 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime53 = localDate51.atTime(localTime52);
        java.time.LocalDate localDate55 = localDate51.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod56 = localDate44.until((java.time.chrono.ChronoLocalDate) localDate55);
        java.time.LocalDate localDate58 = localDate44.plusDays((long) (short) 0);
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.MAX;
        java.lang.String str63 = zoneOffset62.getId();
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset62);
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.MAX;
        java.lang.String str68 = zoneOffset67.getId();
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset67);
        boolean boolean70 = localDateTime64.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime69);
        java.time.format.DateTimeFormatter dateTimeFormatter71 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str72 = localDateTime69.format(dateTimeFormatter71);
        java.time.temporal.ChronoField chronoField73 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int74 = localDateTime69.get((java.time.temporal.TemporalField) chronoField73);
        java.time.ZoneId zoneId75 = java.time.ZoneId.systemDefault();
        java.lang.String str76 = zoneId75.getId();
        java.time.ZonedDateTime zonedDateTime77 = java.time.ZonedDateTime.now(zoneId75);
        java.time.ZonedDateTime zonedDateTime79 = zonedDateTime77.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit80 = null;
        boolean boolean81 = zonedDateTime77.isSupported(temporalUnit80);
        java.time.temporal.ChronoField chronoField82 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange83 = zonedDateTime77.range((java.time.temporal.TemporalField) chronoField82);
        java.time.temporal.ChronoField chronoField84 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime85 = java.time.LocalTime.MAX;
        long long86 = chronoField84.getFrom((java.time.temporal.TemporalAccessor) localTime85);
        boolean boolean87 = zonedDateTime77.isSupported((java.time.temporal.TemporalField) chronoField84);
        java.time.ZoneId zoneId88 = java.time.ZoneId.systemDefault();
        java.lang.String str89 = zoneId88.getId();
        java.lang.String str90 = zoneId88.getId();
        java.time.ZonedDateTime zonedDateTime91 = zonedDateTime77.withZoneSameInstant(zoneId88);
        long long92 = chronoField73.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime77);
        java.time.temporal.TemporalUnit temporalUnit93 = chronoField73.getRangeUnit();
        java.time.LocalDate localDate94 = localDate58.plus((long) 1969, temporalUnit93);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = localDateTime9.until((java.time.temporal.Temporal) localTime34, temporalUnit93);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: 15:59:59.999999999 of type java.time.LocalTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(isoChronology35);
        org.junit.Assert.assertTrue("'" + isoEra37 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra37.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-719147L) + "'", long45 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology46);
        org.junit.Assert.assertTrue("'" + isoEra48 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra48.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+18:00" + "'", str63, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+18:00" + "'", str68, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str72, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField73 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField73.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(zoneId75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Etc/UTC" + "'", str76, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime77);
        org.junit.Assert.assertNotNull(zonedDateTime79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + chronoField82 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField82.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange83);
        org.junit.Assert.assertTrue("'" + chronoField84 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField84.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 23L + "'", long86 == 23L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(zoneId88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Etc/UTC" + "'", str89, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Etc/UTC" + "'", str90, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 8L + "'", long92 == 8L);
        org.junit.Assert.assertTrue("'" + temporalUnit93 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit93.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDate94);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.nio.Buffer buffer8 = byteBuffer5.mark();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer11 = byteBuffer5.put(2, (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(buffer8);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.time.format.TextStyle textStyle0 = java.time.format.TextStyle.SHORT;
        org.junit.Assert.assertTrue("'" + textStyle0 + "' != '" + java.time.format.TextStyle.SHORT + "'", textStyle0.equals(java.time.format.TextStyle.SHORT));
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.println('4');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter11 = printWriter1.append((java.lang.CharSequence) "1970-01-01T18:01:37.000000130+18:00", 37, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -37");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.time.ZoneId zoneId0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Clock clock1 = java.time.Clock.system(zoneId0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: zone");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.util.stream.IntStream intStream0 = java.util.stream.IntStream.empty();
        java.util.stream.LongStream longStream1 = intStream0.asLongStream();
        java.util.function.LongToIntFunction longToIntFunction2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream3 = longStream1.mapToInt(longToIntFunction2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream0);
        org.junit.Assert.assertNotNull(longStream1);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        // The following exception was thrown during execution in test generation
        try {
            java.time.DayOfWeek dayOfWeek1 = java.time.DayOfWeek.of((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfWeek: 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        java.nio.DoubleBuffer doubleBuffer5 = doubleBuffer4.asReadOnlyBuffer();
        boolean boolean6 = doubleBuffer5.hasRemaining();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = doubleBuffer5.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.Duration duration19 = java.time.Duration.ofSeconds((long) 1024, (long) 64);
        java.time.Duration duration21 = duration19.minusMillis(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal22 = localDate16.minus((java.time.temporal.TemporalAmount) duration21);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Seconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.slice();
        java.nio.FloatBuffer floatBuffer3 = floatBuffer2.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer7 = floatBuffer4.put((int) 'u', (float) 53L);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        java.time.Duration duration7 = java.time.Duration.ZERO;
        java.time.Duration duration8 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal9 = null;
        java.time.temporal.Temporal temporal10 = duration8.subtractFrom(temporal9);
        long long11 = duration8.toDays();
        java.time.Duration duration12 = duration7.plus(duration8);
        long long13 = duration8.toDays();
        java.lang.String str14 = duration8.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate15 = localDate6.plus((java.time.temporal.TemporalAmount) duration8);
        java.time.LocalDate localDate17 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology18 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra20 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate23 = isoChronology18.dateYearDay((java.time.chrono.Era) isoEra20, 0, 16);
        java.time.LocalTime localTime24 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime25 = localDate23.atTime(localTime24);
        java.time.LocalDate localDate27 = localDate23.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod28 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate17, (java.time.chrono.ChronoLocalDate) localDate23);
        java.time.LocalDate localDate30 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate32 = java.time.LocalDate.ofEpochDay((long) 10);
        int int33 = localDate30.compareTo((java.time.chrono.ChronoLocalDate) localDate32);
        java.time.temporal.Temporal temporal34 = localDate17.adjustInto((java.time.temporal.Temporal) localDate32);
        java.time.LocalDate localDate36 = localDate32.withMonth((int) (short) 10);
        java.time.format.DateTimeFormatter dateTimeFormatter37 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.String str38 = localDate32.format(dateTimeFormatter37);
        java.time.Period period39 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate32);
        java.time.chrono.ChronoPeriod chronoPeriod40 = period39.normalized();
        java.lang.String str41 = period39.toString();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNull(temporal10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(isoChronology18);
        org.junit.Assert.assertTrue("'" + isoEra20 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra20.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronoPeriod28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "19700111" + "'", str38, "19700111");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(chronoPeriod40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "P1968Y1D" + "'", str41, "P1968Y1D");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.util.concurrent.TimeoutException timeoutException1 = new java.util.concurrent.TimeoutException("1970-01-01T18:01:37.00000012");
        java.security.PrivilegedActionException privilegedActionException2 = new java.security.PrivilegedActionException((java.lang.Exception) timeoutException1);
        java.lang.String str3 = privilegedActionException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.security.PrivilegedActionException: java.util.concurrent.TimeoutException: 1970-01-01T18:01:37.00000012" + "'", str3, "java.security.PrivilegedActionException: java.util.concurrent.TimeoutException: 1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        builder0.accept((double) (byte) 10);
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.of("java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unknown chronology: java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.stream.LongStream.Builder builder3 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream longStream4 = longStream2.peek((java.util.function.LongConsumer) builder3);
        java.util.stream.LongStream.Builder builder6 = builder3.add((-62134279201L));
        builder6.accept((long) (-1));
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        long long7 = longStream6.count();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Long> longStream8 = longStream6.boxed();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        java.lang.String str1 = proxy0.toString();
        java.lang.String str2 = proxy0.toString();
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.MAX;
        java.lang.String str6 = zoneOffset5.getId();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset5);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MAX;
        java.lang.String str11 = zoneOffset10.getId();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset10);
        boolean boolean13 = localDateTime7.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.of(localDateTime12, (java.time.ZoneId) zoneOffset14);
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime16.plusNanos((long) (short) 10);
        boolean boolean19 = proxy0.equals((java.lang.Object) zonedDateTime18);
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DIRECT" + "'", str1, "DIRECT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DIRECT" + "'", str2, "DIRECT");
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+18:00" + "'", str6, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+18:00" + "'", str11, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.security.NoSuchProviderException noSuchProviderException2 = new java.security.NoSuchProviderException("java.text.AttributedCharacterIterator$Attribute(reading)");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("/1.0.0.100", (java.lang.Throwable) noSuchProviderException2);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream4 = new java.io.PrintStream(outputStream0, false, "/1970-01-01T18:01:37.00000012");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.net.URI uRI4 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.lang.String str5 = uRI4.toASCIIString();
        java.lang.String str6 = uRI4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "italiano://Etc/UTC#Etc/UTC" + "'", str5, "italiano://Etc/UTC#Etc/UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "italiano://Etc/UTC#Etc/UTC" + "'", str6, "italiano://Etc/UTC#Etc/UTC");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.util.stream.Stream.Builder<java.time.temporal.Temporal> temporalBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.Stream<java.time.temporal.Temporal> temporalStream1 = temporalBuilder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.time.temporal.Temporal> temporalStream2 = temporalBuilder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(temporalBuilder0);
        org.junit.Assert.assertNotNull(temporalStream1);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println(true);
        printWriter1.close();
        printWriter1.write(70);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.nio.charset.CodingErrorAction codingErrorAction0 = java.nio.charset.CodingErrorAction.IGNORE;
        org.junit.Assert.assertNotNull(codingErrorAction0);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        short[] shortArray4 = new short[] { (short) 10, (byte) 100, (short) 100, (short) 1 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray4, 1500, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[10, 100, 100, 1]");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.lang.String[] strArray13 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray18 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, zoneOffsetTransitionArray18);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray21 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, zoneOffsetTransitionArray21);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray24 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList25, zoneOffsetTransitionRuleArray24);
        java.time.zone.ZoneRules zoneRules27 = java.time.zone.ZoneRules.of(zoneOffset16, zoneOffset17, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList25);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray30 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, zoneOffsetTransitionArray30);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray36 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList37, zoneOffsetTransitionRuleArray36);
        java.time.zone.ZoneRules zoneRules39 = java.time.zone.ZoneRules.of(zoneOffset28, zoneOffset29, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList37);
        boolean boolean40 = zoneOffsetTransitionList19.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34);
        zoneOffsetTransitionList19.clear();
        boolean boolean42 = strSet14.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19);
        java.io.File file45 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long46 = file45.lastModified();
        java.net.URL uRL47 = file45.toURL();
        java.nio.file.Path path48 = file45.toPath();
        java.io.File file51 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long52 = file51.lastModified();
        java.net.URL uRL53 = file51.toURL();
        java.nio.file.Path path54 = file51.toPath();
        java.nio.file.Path path55 = path48.relativize(path54);
        java.io.File file58 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long59 = file58.lastModified();
        java.net.URL uRL60 = file58.toURL();
        java.nio.file.Path path61 = file58.toPath();
        java.io.File file64 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long65 = file64.lastModified();
        java.net.URL uRL66 = file64.toURL();
        java.nio.file.Path path67 = file64.toPath();
        java.nio.file.Path path68 = path61.relativize(path67);
        boolean boolean69 = path54.startsWith(path61);
        java.io.File file72 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long73 = file72.lastModified();
        java.net.URL uRL74 = file72.toURL();
        java.nio.file.Path path75 = file72.toPath();
        java.io.File file78 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long79 = file78.lastModified();
        java.net.URL uRL80 = file78.toURL();
        java.nio.file.Path path81 = file78.toPath();
        java.nio.file.Path path82 = path75.relativize(path81);
        java.nio.CharBuffer charBuffer84 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer86 = charBuffer84.append((java.lang.CharSequence) "Etc/UTC");
        int int87 = charBuffer86.arrayOffset();
        boolean boolean88 = path81.equals((java.lang.Object) int87);
        java.nio.file.Path path89 = path61.relativize(path81);
        boolean boolean90 = zoneOffsetTransitionList19.remove((java.lang.Object) path81);
        java.nio.file.Path path92 = path81.resolveSibling("1970-01-01T18:01:37.00000012");
        java.util.Spliterator<java.nio.file.Path> pathSpliterator93 = path81.spliterator();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals(file45.getParent(), "/");
        org.junit.Assert.assertEquals(file45.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(uRL47);
        org.junit.Assert.assertEquals(uRL47.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path48);
        org.junit.Assert.assertEquals(file51.getParent(), "/");
        org.junit.Assert.assertEquals(file51.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(uRL53);
        org.junit.Assert.assertEquals(uRL53.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path54);
        org.junit.Assert.assertNotNull(path55);
        org.junit.Assert.assertEquals(file58.getParent(), "/");
        org.junit.Assert.assertEquals(file58.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(uRL60);
        org.junit.Assert.assertEquals(uRL60.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path61);
        org.junit.Assert.assertEquals(file64.getParent(), "/");
        org.junit.Assert.assertEquals(file64.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(uRL66);
        org.junit.Assert.assertEquals(uRL66.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path67);
        org.junit.Assert.assertNotNull(path68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals(file72.getParent(), "/");
        org.junit.Assert.assertEquals(file72.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(uRL74);
        org.junit.Assert.assertEquals(uRL74.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path75);
        org.junit.Assert.assertEquals(file78.getParent(), "/");
        org.junit.Assert.assertEquals(file78.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(uRL80);
        org.junit.Assert.assertEquals(uRL80.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path81);
        org.junit.Assert.assertNotNull(path82);
        org.junit.Assert.assertNotNull(charBuffer84);
        org.junit.Assert.assertNotNull(charBuffer86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(path89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(path92);
        org.junit.Assert.assertNotNull(pathSpliterator93);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        int int2 = intBuffer1.get();
        int[] intArray3 = new int[] {};
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of(intArray3);
        java.nio.IntBuffer intBuffer5 = intBuffer1.get(intArray3);
        java.nio.IntBuffer intBuffer7 = java.nio.IntBuffer.allocate(13);
        java.nio.IntBuffer intBuffer8 = intBuffer7.slice();
        int[] intArray9 = new int[] {};
        java.util.stream.IntStream intStream10 = java.util.stream.IntStream.of(intArray9);
        java.nio.IntBuffer intBuffer11 = intBuffer7.put(intArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer14 = intBuffer1.get(intArray9, 31, 1024);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intBuffer5);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(intBuffer11);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.lang.Throwable throwable0 = null;
        java.security.InvalidKeyException invalidKeyException1 = new java.security.InvalidKeyException(throwable0);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.parse((java.lang.CharSequence) "en");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'en' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate7 = isoChronology2.dateYearDay((java.time.chrono.Era) isoEra4, 0, 16);
        java.time.LocalTime localTime8 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime9 = localDate7.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate7.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod12 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate7);
        java.time.chrono.ChronoPeriod chronoPeriod13 = chronoPeriod12.negated();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra4.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(chronoPeriod13);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.net.NetworkInterface networkInterface1 = java.net.NetworkInterface.getByName("Di");
        org.junit.Assert.assertNull(networkInterface1);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        long long2 = intStream1.count();
        java.util.LongSummaryStatistics longSummaryStatistics3 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream6 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics7 = longStream6.summaryStatistics();
        java.util.function.IntConsumer intConsumer8 = longSummaryStatistics3.andThen((java.util.function.IntConsumer) longSummaryStatistics7);
        long long9 = longSummaryStatistics7.getMax();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream10 = intStream1.peek((java.util.function.IntConsumer) longSummaryStatistics7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals(longSummaryStatistics3.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longSummaryStatistics7);
        org.junit.Assert.assertEquals(longSummaryStatistics7.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9L + "'", long9 == 9L);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.chrono.Chronology chronology13 = dateTimeFormatter11.getChronology();
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.LocalDate localDate23 = localDate19.withMonth(1);
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = chronology13.date((java.time.temporal.TemporalAccessor) localDate19);
        java.time.LocalDate localDate26 = localDate19.plusMonths(0L);
        long long27 = localDate26.toEpochDay();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-719147L) + "'", long27 == (-719147L));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.util.Comparator<java.time.chrono.ChronoLocalDate> chronoLocalDateComparator0 = java.time.chrono.ChronoLocalDate.timeLineOrder();
        org.junit.Assert.assertNotNull(chronoLocalDateComparator0);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.put(byteBuffer14);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer15.duplicate();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer20 = byteBuffer17.putShort((int) 'x', (short) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer17);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.SUNDAY;
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.SUNDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.SUNDAY));
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.time.Duration duration1 = java.time.Duration.ofDays((long) 171);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        short[] shortArray3 = new short[] { (byte) 0, (byte) 0, (short) 1 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer6 = java.nio.ShortBuffer.wrap(shortArray3, 0, 16384);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[0, 0, 1]");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = java.time.OffsetTime.of(localTime0, zoneOffset2);
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.LocalTime localTime23 = localTime20.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap24 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology25 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean26 = strMapMap24.containsKey((java.lang.Object) isoChronology25);
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate30 = isoChronology25.dateYearDay((java.time.chrono.Era) isoEra27, (-1), 10);
        java.time.Duration duration31 = java.time.Duration.ZERO;
        java.time.Duration duration32 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal33 = null;
        java.time.temporal.Temporal temporal34 = duration32.subtractFrom(temporal33);
        long long35 = duration32.toDays();
        java.time.Duration duration36 = duration31.plus(duration32);
        long long37 = duration32.toDays();
        java.lang.String str38 = duration32.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate39 = localDate30.plus((java.time.temporal.TemporalAmount) duration32);
        java.time.LocalTime localTime40 = localTime20.minus((java.time.temporal.TemporalAmount) duration32);
        boolean boolean41 = localTime0.isAfter(localTime40);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.lang.String str45 = zoneOffset44.getId();
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset44);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.MAX;
        java.lang.String str50 = zoneOffset49.getId();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset49);
        boolean boolean52 = localDateTime46.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime53 = localTime0.with((java.time.temporal.TemporalAdjuster) localDateTime46);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(isoChronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra27.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNull(temporal34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0S" + "'", str38, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+18:00" + "'", str45, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+18:00" + "'", str50, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.ZonedDateTime zonedDateTime13 = java.time.ZonedDateTime.of(localDateTime9, (java.time.ZoneId) zoneOffset11);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime13.withLaterOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime13.minusSeconds((long) ':');
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(59);
        org.junit.Assert.assertNotNull(shortBuffer1);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        java.nio.CharBuffer charBuffer4 = charBuffer1.append('.');
        java.lang.String str5 = charBuffer1.toString();
        char char7 = charBuffer1.charAt(0);
        java.nio.CharBuffer charBuffer8 = charBuffer1.asReadOnlyBuffer();
        java.nio.CharBuffer charBuffer10 = java.nio.CharBuffer.allocate(16);
        int int11 = charBuffer10.limit();
        char char12 = charBuffer10.get();
        char[] charArray17 = new char[] { 'x', 'a', '4', '.' };
        java.nio.CharBuffer charBuffer18 = charBuffer10.get(charArray17);
        java.nio.CharBuffer charBuffer19 = java.nio.CharBuffer.wrap(charArray17);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer20 = charBuffer8.put(charArray17);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str5, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charBuffer19);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(0);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration3.subtractFrom(temporal4);
        long long6 = duration3.toDays();
        boolean boolean7 = strMapMap0.contains((java.lang.Object) duration3);
        java.time.format.DateTimeFormatter dateTimeFormatter8 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable9 = strMapMap0.get((java.lang.Object) dateTimeFormatter8);
        java.lang.Cloneable cloneable11 = strMapMap0.get((java.lang.Object) false);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap12 = java.nio.charset.Charset.availableCharsets();
        boolean boolean13 = strMap12.isEmpty();
        java.util.Set<java.lang.String> strSet14 = strMap12.keySet();
        int int15 = strMap12.size();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.toLanguageTag();
        java.lang.String str19 = chronoField16.getDisplayName(locale17);
        java.lang.Cloneable cloneable20 = strMapMap0.replace(strMap12, (java.lang.Cloneable) locale17);
        java.util.Comparator<? super java.lang.String> wildcardComparator21 = strMap12.comparator();
        java.util.Set<java.lang.String> strSet22 = strMap12.keySet();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strSet22.spliterator();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(cloneable9);
        org.junit.Assert.assertNull(cloneable11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 171 + "'", int15 == 171);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en-GB" + "'", str18, "en-GB");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AlignedWeekOfYear" + "'", str19, "AlignedWeekOfYear");
        org.junit.Assert.assertNull(cloneable20);
        org.junit.Assert.assertNotNull(wildcardComparator21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strSpliterator23);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.stream.LongStream longStream3 = longStream2.unordered();
        java.util.function.LongPredicate longPredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = longStream2.allMatch(longPredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.io.File file4 = file2.getCanonicalFile();
        long long5 = file4.length();
        java.lang.String str6 = file4.getPath();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
        org.junit.Assert.assertEquals(file4.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/1970-01-01T18:01:37.00000012" + "'", str6, "/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.wrap(byteArray9, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = byteBuffer12.equals((java.lang.Object) isoChronology13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean17 = strMapMap15.containsKey((java.lang.Object) isoChronology16);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, (-1), 10);
        int int23 = isoChronology13.prolepticYear((java.time.chrono.Era) isoEra18, (int) '#');
        java.time.LocalDate localDate26 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra18, (int) (byte) 0, 2);
        java.time.chrono.ChronoPeriod chronoPeriod30 = isoChronology1.period(1, (int) (short) 1, 365);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate34 = isoChronology1.date((int) 'a', 31, 16384);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 31");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-34) + "'", int23 == (-34));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronoPeriod30);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        int int0 = java.util.Spliterator.ORDERED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16 + "'", int0 == 16);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.LocalTime localTime5 = zonedDateTime4.toLocalTime();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        java.time.OffsetTime offsetTime11 = java.time.OffsetTime.of(localTime5, zoneOffset8);
        java.lang.String str12 = localTime5.toString();
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(offsetTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "09:14:32.749" + "'", str12, "09:14:32.749");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.time.Clock clock7 = java.time.Clock.systemUTC();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.Clock clock9 = clock7.withZone((java.time.ZoneId) zoneOffset8);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of((int) '.', (int) 'a', 365, 1500, 4096, 32, 0, (java.time.ZoneId) zoneOffset8);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 97");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(clock9);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Di");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "di");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.util.stream.Collector.Characteristics characteristics0 = java.util.stream.Collector.Characteristics.CONCURRENT;
        org.junit.Assert.assertTrue("'" + characteristics0 + "' != '" + java.util.stream.Collector.Characteristics.CONCURRENT + "'", characteristics0.equals(java.util.stream.Collector.Characteristics.CONCURRENT));
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.stream.DoubleStream.Builder builder3 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.peek((java.util.function.DoubleConsumer) builder3);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = doubleStream2.sum();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.stream.DoubleStream doubleStream3 = doubleStream2.parallel();
        java.util.function.DoublePredicate doublePredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream5 = doubleStream2.filter(doublePredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDate localDate29 = localDateTime9.toLocalDate();
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.lang.String str33 = zoneOffset32.getId();
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset32);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.lang.String str38 = zoneOffset37.getId();
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset37);
        boolean boolean40 = localDateTime34.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.lang.String str44 = zoneOffset43.getId();
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset43);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.MAX;
        java.lang.String str49 = zoneOffset48.getId();
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset48);
        boolean boolean51 = localDateTime45.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime50);
        java.time.format.DateTimeFormatter dateTimeFormatter52 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str53 = localDateTime50.format(dateTimeFormatter52);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int55 = localDateTime50.get((java.time.temporal.TemporalField) chronoField54);
        boolean boolean56 = localDateTime39.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime50);
        java.lang.String str57 = localDateTime50.toString();
        java.time.chrono.Chronology chronology58 = localDateTime50.getChronology();
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.lang.String str61 = locale60.toLanguageTag();
        java.lang.String str62 = chronoField59.getDisplayName(locale60);
        java.time.LocalDateTime localDateTime64 = localDateTime50.with((java.time.temporal.TemporalField) chronoField59, (long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal66 = localDate29.with((java.time.temporal.TemporalField) chronoField59, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for AlignedWeekOfYear (valid values 1 - 53): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+18:00" + "'", str33, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+18:00" + "'", str38, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+18:00" + "'", str44, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+18:00" + "'", str49, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str53, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField54.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str57, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField59.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "en-GB" + "'", str61, "en-GB");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "AlignedWeekOfYear" + "'", str62, "AlignedWeekOfYear");
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (byte) 1);
        java.util.stream.IntStream intStream2 = intStream1.distinct();
        boolean boolean3 = intStream2.isParallel();
        java.util.function.IntConsumer intConsumer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream5 = intStream2.peek(intConsumer4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime30 = localDateTime9.withHour(9);
        java.time.LocalDateTime localDateTime32 = localDateTime30.minusNanos((long) 7);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.minus(duration17);
        java.time.OffsetTime offsetTime22 = offsetTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray29 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, zoneOffsetTransitionArray29);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray32 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33, zoneOffsetTransitionRuleArray32);
        java.time.zone.ZoneRules zoneRules35 = java.time.zone.ZoneRules.of(zoneOffset24, zoneOffset25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33);
        java.time.OffsetTime offsetTime36 = localTime23.atOffset(zoneOffset24);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange38 = offsetTime36.range((java.time.temporal.TemporalField) chronoField37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal41 = null;
        java.time.temporal.Temporal temporal42 = duration40.subtractFrom(temporal41);
        long long43 = duration40.toDays();
        java.time.Duration duration44 = duration39.minus(duration40);
        java.time.OffsetTime offsetTime45 = offsetTime36.minus((java.time.temporal.TemporalAmount) duration40);
        boolean boolean46 = offsetTime22.isAfter(offsetTime36);
        java.time.OffsetTime offsetTime48 = offsetTime22.withNano((int) '#');
        java.time.LocalTime localTime49 = offsetTime22.toLocalTime();
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.MAX;
        java.lang.String str53 = zoneOffset52.getId();
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset52);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.lang.String str58 = zoneOffset57.getId();
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset57);
        boolean boolean60 = localDateTime54.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime59);
        java.time.format.DateTimeFormatter dateTimeFormatter61 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str62 = localDateTime59.format(dateTimeFormatter61);
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int64 = localDateTime59.get((java.time.temporal.TemporalField) chronoField63);
        java.time.ZoneId zoneId65 = java.time.ZoneId.systemDefault();
        java.lang.String str66 = zoneId65.getId();
        java.time.ZonedDateTime zonedDateTime67 = java.time.ZonedDateTime.now(zoneId65);
        java.time.ZonedDateTime zonedDateTime69 = zonedDateTime67.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit70 = null;
        boolean boolean71 = zonedDateTime67.isSupported(temporalUnit70);
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange73 = zonedDateTime67.range((java.time.temporal.TemporalField) chronoField72);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime75 = java.time.LocalTime.MAX;
        long long76 = chronoField74.getFrom((java.time.temporal.TemporalAccessor) localTime75);
        boolean boolean77 = zonedDateTime67.isSupported((java.time.temporal.TemporalField) chronoField74);
        java.time.ZoneId zoneId78 = java.time.ZoneId.systemDefault();
        java.lang.String str79 = zoneId78.getId();
        java.lang.String str80 = zoneId78.getId();
        java.time.ZonedDateTime zonedDateTime81 = zonedDateTime67.withZoneSameInstant(zoneId78);
        long long82 = chronoField63.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime67);
        java.time.temporal.TemporalUnit temporalUnit83 = chronoField63.getRangeUnit();
        boolean boolean84 = offsetTime22.isSupported(temporalUnit83);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNull(temporal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+18:00" + "'", str53, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+18:00" + "'", str58, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str62, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField63.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(zoneId65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Etc/UTC" + "'", str66, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField72.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField74.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 23L + "'", long76 == 23L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(zoneId78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Etc/UTC" + "'", str79, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Etc/UTC" + "'", str80, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 8L + "'", long82 == 8L);
        org.junit.Assert.assertTrue("'" + temporalUnit83 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit83.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.Spliterator<java.lang.Long> longSpliterator1 = longStream0.spliterator();
        long long2 = longSpliterator1.estimateSize();
        long long3 = longSpliterator1.estimateSize();
        int int4 = longSpliterator1.characteristics();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.Long> wildcardComparator5 = longSpliterator1.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longSpliterator1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16448 + "'", int4 == 16448);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        date1.setDate((int) (short) 1);
        int int5 = date1.getHours();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.lang.String str1 = zoneOffset0.getId();
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now((java.time.ZoneId) zoneOffset0);
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.MAX;
        java.lang.String str6 = zoneOffset5.getId();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset5);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MAX;
        java.lang.String str11 = zoneOffset10.getId();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset10);
        boolean boolean13 = localDateTime7.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.format.DateTimeFormatter dateTimeFormatter14 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str15 = localDateTime12.format(dateTimeFormatter14);
        java.time.chrono.Chronology chronology16 = dateTimeFormatter14.getChronology();
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra19 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate22 = isoChronology17.dateYearDay((java.time.chrono.Era) isoEra19, 0, 16);
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime24 = localDate22.atTime(localTime23);
        java.time.LocalDate localDate26 = localDate22.withMonth(1);
        java.time.chrono.ChronoLocalDate chronoLocalDate27 = chronology16.date((java.time.temporal.TemporalAccessor) localDate22);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray30 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, zoneOffsetTransitionArray30);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray36 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList37, zoneOffsetTransitionRuleArray36);
        java.time.zone.ZoneRules zoneRules39 = java.time.zone.ZoneRules.of(zoneOffset28, zoneOffset29, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList37);
        java.time.Clock clock40 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset28);
        java.time.format.TextStyle textStyle41 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.lang.String str43 = zoneOffset28.getDisplayName(textStyle41, locale42);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        java.time.format.DateTimeFormatter dateTimeFormatter45 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale46 = dateTimeFormatter45.getLocale();
        java.lang.String str47 = chronoField44.getDisplayName(locale46);
        java.lang.String str48 = chronology16.getDisplayName(textStyle41, locale46);
        java.util.Locale locale49 = java.util.Locale.UK;
        java.lang.String str50 = locale49.toLanguageTag();
        boolean boolean51 = locale49.hasExtensions();
        java.lang.String str52 = zoneOffset0.getDisplayName(textStyle41, locale49);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime54 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        java.time.OffsetTime offsetTime67 = localTime54.atOffset(zoneOffset55);
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange69 = offsetTime67.range((java.time.temporal.TemporalField) chronoField68);
        java.time.OffsetTime offsetTime71 = chronoField53.adjustInto(offsetTime67, (long) 16);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = zoneOffset0.getLong((java.time.temporal.TemporalField) chronoField53);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MilliOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "+18:00" + "'", str1, "+18:00");
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+18:00" + "'", str6, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+18:00" + "'", str11, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str15, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + isoEra19 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra19.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronoLocalDate27);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(clock40);
        org.junit.Assert.assertTrue("'" + textStyle41 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle41.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+18:00" + "'", str43, "+18:00");
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AM/PM" + "'", str47, "AM/PM");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISO" + "'", str48, "ISO");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "en-GB" + "'", str50, "en-GB");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+18:00" + "'", str52, "+18:00");
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField53.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertNotNull(offsetTime67);
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField68.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange69);
        org.junit.Assert.assertNotNull(offsetTime71);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.time.format.ResolverStyle resolverStyle1 = dateTimeFormatter0.getResolverStyle();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + resolverStyle1 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle1.equals(java.time.format.ResolverStyle.STRICT));
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList12 = period11.getUnits();
        java.time.temporal.TemporalAmount temporalAmount13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period14 = period11.plus(temporalAmount13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: amount");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(temporalUnitList12);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate7 = isoChronology2.dateYearDay((java.time.chrono.Era) isoEra4, 0, 16);
        java.time.LocalTime localTime8 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime9 = localDate7.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate7.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod12 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate7);
        java.time.LocalDate localDate14 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate16 = java.time.LocalDate.ofEpochDay((long) 10);
        int int17 = localDate14.compareTo((java.time.chrono.ChronoLocalDate) localDate16);
        java.time.temporal.Temporal temporal18 = localDate1.adjustInto((java.time.temporal.Temporal) localDate16);
        java.time.LocalDate localDate20 = localDate16.withMonth((int) (short) 10);
        boolean boolean21 = localDate16.isLeapYear();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra4.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        long long16 = valueRange15.getMaximum();
        boolean boolean18 = valueRange15.isValidIntValue(100L);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 24L + "'", long16 == 24L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.lang.String str10 = zoneOffset9.getId();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset9);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime12 = java.time.ZonedDateTime.of(0, 365, (int) (byte) 1, 365, 14, 171, 70, (java.time.ZoneId) zoneOffset9);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 365");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+18:00" + "'", str10, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, 999999999, (int) '\000', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 999999999");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale3 = new java.util.Locale("599b081c1808", "DIRECT");
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setLocale(locale3);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 599b081c1808 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DIRECT" + "'", str5, "DIRECT");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant92 = offsetDateTime91.toInstant();
        long long93 = instant92.getEpochSecond();
        java.time.Instant instant94 = java.time.Instant.EPOCH;
        java.time.temporal.ChronoField chronoField95 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean96 = instant94.isSupported((java.time.temporal.TemporalField) chronoField95);
        java.time.Instant instant98 = instant94.plusNanos((long) 9);
        int int99 = instant92.compareTo(instant98);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 777697L + "'", long93 == 777697L);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertTrue("'" + chronoField95 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField95.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(instant98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.compact();
        java.nio.Buffer buffer8 = longBuffer2.flip();
        java.lang.Object obj9 = longBuffer2.array();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        boolean boolean11 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.format.DateTimeFormatter dateTimeFormatter12 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str13 = localDateTime10.format(dateTimeFormatter12);
        java.time.chrono.Chronology chronology14 = dateTimeFormatter12.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime15 = java.time.LocalTime.parse((java.lang.CharSequence) "DIRECT", dateTimeFormatter12);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'DIRECT' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str13, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray0 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList1 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList1, zoneOffsetTransitionArray0);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream3 = zoneOffsetTransitionList1.stream();
        java.util.Optional<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionOptional4 = zoneOffsetTransitionStream3.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream6 = zoneOffsetTransitionStream3.limit((long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionOptional4);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration3.subtractFrom(temporal4);
        long long6 = duration3.toDays();
        boolean boolean7 = strMapMap0.contains((java.lang.Object) duration3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        boolean boolean12 = strMap11.isEmpty();
        java.util.Locale locale13 = java.util.Locale.US;
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.lang.Cloneable cloneable16 = strMapMap8.put(strMap11, (java.lang.Cloneable) locale14);
        java.nio.charset.Charset charset18 = strMap11.get((java.lang.Object) "1970-01-01T18:01:37.000000130+18:00");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics19.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics22.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics22.getGeometricMeanImpl();
        descriptiveStatistics19.setSumsqImpl(univariateStatistic25);
        double[] doubleArray27 = descriptiveStatistics19.getSortedValues();
        java.lang.Cloneable cloneable28 = strMapMap0.put(strMap11, (java.lang.Cloneable) doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer31 = java.nio.DoubleBuffer.wrap(doubleArray27, 4096, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Stati Uniti" + "'", str15, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable16);
        org.junit.Assert.assertNull(charset18);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNull(cloneable28);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        boolean boolean13 = zoneRules12.isFixedOffset();
        java.time.Instant instant14 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules12.previousTransition(instant14);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = zoneRules12.getTransitionRules();
        java.time.Instant instant17 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition18 = zoneRules12.previousTransition(instant17);
        java.time.Instant instant19 = java.time.Instant.MAX;
        java.time.Instant instant21 = instant19.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset22 = zoneRules12.getOffset(instant21);
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset22);
        int int24 = instant0.getNano();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList16);
        org.junit.Assert.assertNull(zoneOffsetTransition18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.println('4');
        printWriter1.println((double) 171);
        printWriter1.println();
        printWriter1.println(10000L);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.IntStream intStream4 = intStream3.distinct();
        java.util.function.IntToDoubleFunction intToDoubleFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream6 = intStream4.mapToDouble(intToDoubleFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str1 = strMapMap0.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap2 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology3 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean4 = strMapMap2.containsKey((java.lang.Object) isoChronology3);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        boolean boolean6 = strMap5.isEmpty();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.Cloneable cloneable10 = strMapMap2.put(strMap5, (java.lang.Cloneable) locale8);
        int int11 = strMap5.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap12 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = strMapMap12.containsKey((java.lang.Object) isoChronology13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal16 = null;
        java.time.temporal.Temporal temporal17 = duration15.subtractFrom(temporal16);
        long long18 = duration15.toDays();
        boolean boolean19 = strMapMap12.contains((java.lang.Object) duration15);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable21 = strMapMap12.get((java.lang.Object) dateTimeFormatter20);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet22 = strMapMap12.keySet();
        java.lang.Cloneable cloneable23 = strMapMap0.put(strMap5, (java.lang.Cloneable) strMapMap12);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap24 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str25 = strMapMap24.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap26 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean28 = strMapMap26.containsKey((java.lang.Object) isoChronology27);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap29 = java.nio.charset.Charset.availableCharsets();
        boolean boolean30 = strMap29.isEmpty();
        java.util.Locale locale31 = java.util.Locale.US;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.lang.Cloneable cloneable34 = strMapMap26.put(strMap29, (java.lang.Cloneable) locale32);
        int int35 = strMap29.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap36 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology37 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean38 = strMapMap36.containsKey((java.lang.Object) isoChronology37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal40 = null;
        java.time.temporal.Temporal temporal41 = duration39.subtractFrom(temporal40);
        long long42 = duration39.toDays();
        boolean boolean43 = strMapMap36.contains((java.lang.Object) duration39);
        java.time.format.DateTimeFormatter dateTimeFormatter44 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable45 = strMapMap36.get((java.lang.Object) dateTimeFormatter44);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet46 = strMapMap36.keySet();
        java.lang.Cloneable cloneable47 = strMapMap24.put(strMap29, (java.lang.Cloneable) strMapMap36);
        java.util.Date date53 = new java.util.Date(1, (int) 'x', (int) '0', 16, 256);
        int int54 = date53.getMinutes();
        java.lang.Cloneable cloneable55 = strMapMap12.put(strMap29, (java.lang.Cloneable) date53);
        date53.setYear(14);
        java.security.cert.CertPath certPath58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.Timestamp timestamp59 = new java.security.Timestamp(date53, certPath58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Stati Uniti" + "'", str9, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 171 + "'", int11 == 171);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNull(temporal17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(cloneable21);
        org.junit.Assert.assertNotNull(strMapSet22);
        org.junit.Assert.assertNull(cloneable23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Stati Uniti" + "'", str33, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 171 + "'", int35 == 171);
        org.junit.Assert.assertNotNull(isoChronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNull(temporal41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(cloneable45);
        org.junit.Assert.assertNotNull(strMapSet46);
        org.junit.Assert.assertNull(cloneable47);
        org.junit.Assert.assertEquals(date53.toString(), "Tue Feb 17 20:16:00 UTC 1914");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16 + "'", int54 == 16);
        org.junit.Assert.assertNull(cloneable55);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.io.IOException iOException1 = new java.io.IOException("HourOfDay");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        // The following exception was thrown during execution in test generation
        try {
            java.time.DayOfWeek dayOfWeek1 = java.time.DayOfWeek.of((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfWeek: 10");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer5.asShortBuffer();
        java.nio.ShortBuffer shortBuffer8 = shortBuffer7.slice();
        java.nio.ShortBuffer shortBuffer9 = shortBuffer8.compact();
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray12 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList13 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList13, zoneOffsetTransitionArray12);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray15 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList16 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, zoneOffsetTransitionArray15);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray18 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList19, zoneOffsetTransitionRuleArray18);
        java.time.zone.ZoneRules zoneRules21 = java.time.zone.ZoneRules.of(zoneOffset10, zoneOffset11, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList19);
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        java.net.Proxy.Type type23 = proxy22.type();
        boolean boolean24 = zoneRules21.equals((java.lang.Object) proxy22);
        boolean boolean25 = shortBuffer9.equals((java.lang.Object) zoneRules21);
        short[] shortArray27 = new short[] { (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer28 = shortBuffer9.get(shortArray27);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertNotNull(shortBuffer9);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type23.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[0]");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        long long10 = localDate9.toEpochDay();
        java.time.chrono.IsoChronology isoChronology11 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra13 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate16 = isoChronology11.dateYearDay((java.time.chrono.Era) isoEra13, 0, 16);
        java.time.LocalTime localTime17 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime18 = localDate16.atTime(localTime17);
        java.time.LocalDate localDate20 = localDate16.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod21 = localDate9.until((java.time.chrono.ChronoLocalDate) localDate20);
        java.time.LocalDate localDate23 = localDate9.plusDays((long) (short) 0);
        java.time.LocalDate localDate25 = localDate23.minusDays((long) 9);
        java.lang.String str26 = localDate23.toString();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-719147L) + "'", long10 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology11);
        org.junit.Assert.assertTrue("'" + isoEra13 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra13.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronoPeriod21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0001-01-16" + "'", str26, "0001-01-16");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "en-US" + "'", str1, "en-US");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.util.stream.IntStream intStream0 = java.util.stream.IntStream.empty();
        java.util.stream.LongStream longStream1 = intStream0.asLongStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble2 = intStream0.average();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream0);
        org.junit.Assert.assertNotNull(longStream1);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream1 = new java.io.PrintStream(outputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        char char3 = charBuffer1.get();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant4 = java.time.Instant.parse((java.lang.CharSequence) charBuffer1);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '???????????????' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\000' + "'", char3 == '\000');
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.time.format.DecimalStyle decimalStyle0 = java.time.format.DecimalStyle.STANDARD;
        char char1 = decimalStyle0.getZeroDigit();
        java.time.format.DecimalStyle decimalStyle3 = decimalStyle0.withZeroDigit('a');
        java.time.format.DecimalStyle decimalStyle5 = decimalStyle0.withPositiveSign('#');
        char char6 = decimalStyle0.getDecimalSeparator();
        org.junit.Assert.assertNotNull(decimalStyle0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '0' + "'", char1 == '0');
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertNotNull(decimalStyle5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '.' + "'", char6 == '.');
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.time.format.DecimalStyle decimalStyle1 = dateTimeFormatter0.getDecimalStyle();
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj6 = charBuffer5.array();
        java.nio.CharBuffer charBuffer8 = charBuffer5.append('.');
        java.lang.String str9 = charBuffer5.toString();
        java.nio.CharBuffer charBuffer11 = charBuffer5.append('a');
        java.nio.CharBuffer charBuffer12 = charBuffer3.put(charBuffer5);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor13 = dateTimeFormatter0.parse((java.lang.CharSequence) charBuffer5);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(decimalStyle1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str9, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ProtectionDomain  null\n null\n <no principals>\n null\n");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter3.println("hi!");
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter3);
        printWriter6.print((float) '\000');
        java.nio.CharBuffer charBuffer10 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj11 = charBuffer10.array();
        boolean boolean12 = charBuffer10.isReadOnly();
        java.nio.CharBuffer charBuffer14 = charBuffer10.put('x');
        java.lang.CharSequence charSequence15 = null;
        java.nio.CharBuffer charBuffer16 = charBuffer10.append(charSequence15);
        java.io.PrintWriter printWriter17 = printWriter6.append((java.lang.CharSequence) charBuffer16);
        java.io.Writer writer18 = printWriter1.append((java.lang.CharSequence) charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(writer18);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 1024, (long) 64);
        java.time.Duration duration4 = duration2.minusMillis(0L);
        java.time.ZoneId zoneId5 = java.time.ZoneId.systemDefault();
        java.lang.String str6 = zoneId5.getId();
        java.time.ZonedDateTime zonedDateTime7 = java.time.ZonedDateTime.now(zoneId5);
        java.time.ZonedDateTime zonedDateTime9 = zonedDateTime7.withYear((int) (short) 1);
        java.time.LocalTime localTime10 = zonedDateTime9.toLocalTime();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap11 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap12 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = strMapMap12.containsKey((java.lang.Object) isoChronology13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal16 = null;
        java.time.temporal.Temporal temporal17 = duration15.subtractFrom(temporal16);
        long long18 = duration15.toDays();
        boolean boolean19 = strMapMap12.contains((java.lang.Object) duration15);
        java.lang.Cloneable cloneable20 = strMapMap11.get((java.lang.Object) duration15);
        java.time.Duration duration21 = java.time.Duration.ZERO;
        java.time.Duration duration22 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal23 = null;
        java.time.temporal.Temporal temporal24 = duration22.subtractFrom(temporal23);
        long long25 = duration22.toDays();
        java.time.Duration duration26 = duration21.plus(duration22);
        long long27 = duration22.toDays();
        java.time.Duration duration28 = duration15.plus(duration22);
        java.time.LocalTime localTime29 = localTime10.plus((java.time.temporal.TemporalAmount) duration15);
        java.time.Duration duration30 = duration2.minus(duration15);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.lang.String str35 = zoneOffset34.getId();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.MAX;
        java.lang.String str40 = zoneOffset39.getId();
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset39);
        boolean boolean42 = localDateTime36.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime41);
        java.time.format.DateTimeFormatter dateTimeFormatter43 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str44 = localDateTime41.format(dateTimeFormatter43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int46 = localDateTime41.get((java.time.temporal.TemporalField) chronoField45);
        java.time.ZoneId zoneId47 = java.time.ZoneId.systemDefault();
        java.lang.String str48 = zoneId47.getId();
        java.time.ZonedDateTime zonedDateTime49 = java.time.ZonedDateTime.now(zoneId47);
        java.time.ZonedDateTime zonedDateTime51 = zonedDateTime49.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit52 = null;
        boolean boolean53 = zonedDateTime49.isSupported(temporalUnit52);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange55 = zonedDateTime49.range((java.time.temporal.TemporalField) chronoField54);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime57 = java.time.LocalTime.MAX;
        long long58 = chronoField56.getFrom((java.time.temporal.TemporalAccessor) localTime57);
        boolean boolean59 = zonedDateTime49.isSupported((java.time.temporal.TemporalField) chronoField56);
        java.time.ZoneId zoneId60 = java.time.ZoneId.systemDefault();
        java.lang.String str61 = zoneId60.getId();
        java.lang.String str62 = zoneId60.getId();
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime49.withZoneSameInstant(zoneId60);
        long long64 = chronoField45.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime49);
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField45.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration66 = duration2.plus((long) (short) 10, temporalUnit65);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit must not have an estimated duration");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNull(temporal17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(cloneable20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNull(temporal24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+18:00" + "'", str35, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+18:00" + "'", str40, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str44, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField45.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(zoneId47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField54.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField56.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 23L + "'", long58 == 23L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(zoneId60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Etc/UTC" + "'", str61, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Etc/UTC" + "'", str62, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 8L + "'", long64 == 8L);
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.YEARS));
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale2 = dateTimeFormatter1.getLocale();
        java.time.format.DecimalStyle decimalStyle3 = java.time.format.DecimalStyle.STANDARD;
        char char4 = decimalStyle3.getZeroDigit();
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle3.withZeroDigit('a');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle3.withPositiveSign('#');
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withDecimalStyle(decimalStyle8);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.parse((java.lang.CharSequence) "java.nio.HeapFloatBufferR[pos=0 lim=256 cap=256]", dateTimeFormatter9);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'java.nio.HeapFloatBufferR[pos=0 lim=256 cap=256]' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '0' + "'", char4 == '0');
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter12.println("hi!");
        properties1.list(printWriter12);
        java.lang.Object obj18 = properties1.setProperty("AM/PM", "italiano");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap19 = java.nio.charset.Charset.availableCharsets();
        boolean boolean20 = strMap19.isEmpty();
        java.util.Set<java.lang.String> strSet21 = strMap19.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate22 = java.util.function.Predicate.isEqual((java.lang.Object) strMap19);
        properties1.putAll((java.util.Map<java.lang.String, java.nio.charset.Charset>) strMap19);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap24 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology25 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean26 = strMapMap24.containsKey((java.lang.Object) isoChronology25);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap27 = java.nio.charset.Charset.availableCharsets();
        boolean boolean28 = strMap27.isEmpty();
        java.util.Locale locale29 = java.util.Locale.US;
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.lang.Cloneable cloneable32 = strMapMap24.put(strMap27, (java.lang.Cloneable) locale30);
        int int33 = strMap27.size();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.nio.charset.Charset>> strEntrySet34 = strMap27.entrySet();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics35 = new java.util.DoubleSummaryStatistics();
        double double36 = doubleSummaryStatistics35.getMin();
        boolean boolean37 = strMap27.equals((java.lang.Object) double36);
        // The following exception was thrown during execution in test generation
        try {
            strMap19.putAll((java.util.Map<java.lang.String, java.nio.charset.Charset>) strMap27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(resolverStylePredicate22);
        org.junit.Assert.assertNotNull(isoChronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Stati Uniti" + "'", str31, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 171 + "'", int33 == 171);
        org.junit.Assert.assertNotNull(strEntrySet34);
        org.junit.Assert.assertEquals(doubleSummaryStatistics35.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.POSITIVE_INFINITY + "'", double36 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        java.nio.IntBuffer intBuffer2 = intBuffer1.slice();
        int[] intArray3 = new int[] {};
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of(intArray3);
        java.nio.IntBuffer intBuffer5 = intBuffer1.put(intArray3);
        int int7 = intBuffer5.get(9);
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertNotNull(intBuffer2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intBuffer5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean17 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.OffsetTime offsetTime19 = offsetTime13.plusMinutes((long) 'u');
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray29 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30, zoneOffsetTransitionRuleArray29);
        java.time.zone.ZoneRules zoneRules32 = java.time.zone.ZoneRules.of(zoneOffset21, zoneOffset22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30);
        java.time.OffsetTime offsetTime33 = localTime20.atOffset(zoneOffset21);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange35 = offsetTime33.range((java.time.temporal.TemporalField) chronoField34);
        java.time.Duration duration36 = java.time.Duration.ZERO;
        java.time.Duration duration37 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal38 = null;
        java.time.temporal.Temporal temporal39 = duration37.subtractFrom(temporal38);
        long long40 = duration37.toDays();
        java.time.Duration duration41 = duration36.minus(duration37);
        java.time.OffsetTime offsetTime42 = offsetTime33.minus((java.time.temporal.TemporalAmount) duration37);
        java.time.LocalTime localTime43 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray46 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList47 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, zoneOffsetTransitionArray46);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray49 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList50 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, zoneOffsetTransitionArray49);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray52 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList53 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList53, zoneOffsetTransitionRuleArray52);
        java.time.zone.ZoneRules zoneRules55 = java.time.zone.ZoneRules.of(zoneOffset44, zoneOffset45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList53);
        java.time.OffsetTime offsetTime56 = localTime43.atOffset(zoneOffset44);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange58 = offsetTime56.range((java.time.temporal.TemporalField) chronoField57);
        java.time.Duration duration59 = java.time.Duration.ZERO;
        java.time.Duration duration60 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal61 = null;
        java.time.temporal.Temporal temporal62 = duration60.subtractFrom(temporal61);
        long long63 = duration60.toDays();
        java.time.Duration duration64 = duration59.minus(duration60);
        java.time.OffsetTime offsetTime65 = offsetTime56.minus((java.time.temporal.TemporalAmount) duration60);
        boolean boolean66 = offsetTime42.isAfter(offsetTime56);
        java.time.OffsetTime offsetTime68 = offsetTime42.withNano((int) '#');
        java.time.LocalTime localTime69 = offsetTime42.toLocalTime();
        boolean boolean70 = offsetTime19.isEqual(offsetTime42);
        java.time.ZoneId zoneId71 = java.time.ZoneId.systemDefault();
        java.lang.String str72 = zoneId71.getId();
        java.time.ZonedDateTime zonedDateTime73 = java.time.ZonedDateTime.now(zoneId71);
        java.time.ZoneId zoneId74 = java.time.ZoneId.systemDefault();
        java.lang.String str75 = zoneId74.getId();
        java.time.ZonedDateTime zonedDateTime76 = zonedDateTime73.withZoneSameInstant(zoneId74);
        java.time.ZoneId zoneId77 = java.time.ZoneId.systemDefault();
        java.lang.String str78 = zoneId77.getId();
        java.time.ZonedDateTime zonedDateTime79 = java.time.ZonedDateTime.now(zoneId77);
        java.time.ZonedDateTime zonedDateTime81 = zonedDateTime79.withYear((int) (short) 1);
        boolean boolean82 = zonedDateTime76.equals((java.lang.Object) zonedDateTime81);
        java.time.ZonedDateTime zonedDateTime84 = zonedDateTime76.minusMinutes((long) (short) 0);
        java.time.temporal.ChronoField chronoField85 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean86 = zonedDateTime84.isSupported((java.time.temporal.TemporalField) chronoField85);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime88 = offsetTime42.with((java.time.temporal.TemporalField) chronoField85, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNull(temporal39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneRules55);
        org.junit.Assert.assertNotNull(offsetTime56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField57.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNull(temporal62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(offsetTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(offsetTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(zoneId71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Etc/UTC" + "'", str72, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertNotNull(zoneId74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Etc/UTC" + "'", str75, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime76);
        org.junit.Assert.assertNotNull(zoneId77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Etc/UTC" + "'", str78, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime79);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(zonedDateTime84);
        org.junit.Assert.assertTrue("'" + chronoField85 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField85.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra29 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate32 = isoChronology27.dateYearDay((java.time.chrono.Era) isoEra29, 0, 16);
        java.time.LocalTime localTime33 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime34 = localDate32.atTime(localTime33);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray43 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44, zoneOffsetTransitionRuleArray43);
        java.time.zone.ZoneRules zoneRules46 = java.time.zone.ZoneRules.of(zoneOffset35, zoneOffset36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44);
        long long47 = localDateTime34.toEpochSecond(zoneOffset35);
        java.time.LocalDateTime localDateTime49 = localDateTime34.plusDays((long) (byte) 1);
        boolean boolean50 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.LocalDateTime localDateTime52 = localDateTime49.plusDays((-62134279201L));
        java.time.DayOfWeek dayOfWeek53 = localDateTime49.getDayOfWeek();
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange55 = dayOfWeek53.range((java.time.temporal.TemporalField) chronoField54);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MilliOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + isoEra29 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra29.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-62134279201L) + "'", long47 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + dayOfWeek53 + "' != '" + java.time.DayOfWeek.WEDNESDAY + "'", dayOfWeek53.equals(java.time.DayOfWeek.WEDNESDAY));
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField54.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra29 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate32 = isoChronology27.dateYearDay((java.time.chrono.Era) isoEra29, 0, 16);
        java.time.LocalTime localTime33 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime34 = localDate32.atTime(localTime33);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray43 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44, zoneOffsetTransitionRuleArray43);
        java.time.zone.ZoneRules zoneRules46 = java.time.zone.ZoneRules.of(zoneOffset35, zoneOffset36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44);
        long long47 = localDateTime34.toEpochSecond(zoneOffset35);
        java.time.LocalDateTime localDateTime49 = localDateTime34.plusDays((long) (byte) 1);
        boolean boolean50 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.LocalDateTime localDateTime52 = localDateTime49.plusDays((-62134279201L));
        java.time.chrono.IsoChronology isoChronology53 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra55 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate58 = isoChronology53.dateYearDay((java.time.chrono.Era) isoEra55, 0, 16);
        java.time.LocalTime localTime59 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime60 = localDate58.atTime(localTime59);
        java.time.DayOfWeek dayOfWeek61 = localDate58.getDayOfWeek();
        java.time.chrono.IsoChronology isoChronology62 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra64 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate67 = isoChronology62.dateYearDay((java.time.chrono.Era) isoEra64, 0, 16);
        java.time.LocalTime localTime68 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime69 = localDate67.atTime(localTime68);
        java.time.LocalDate localDate71 = localDate67.withMonth(1);
        java.time.Period period72 = localDate58.until((java.time.chrono.ChronoLocalDate) localDate67);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime73 = localDateTime49.minus((java.time.temporal.TemporalAmount) period72);
        java.time.Period period75 = period72.plusYears((long) '#');
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + isoEra29 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra29.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-62134279201L) + "'", long47 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(isoChronology53);
        org.junit.Assert.assertTrue("'" + isoEra55 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra55.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + dayOfWeek61 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek61.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(isoChronology62);
        org.junit.Assert.assertTrue("'" + isoEra64 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra64.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime73);
        org.junit.Assert.assertNotNull(period75);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit5 = null;
        boolean boolean6 = zonedDateTime2.isSupported(temporalUnit5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange8 = zonedDateTime2.range((java.time.temporal.TemporalField) chronoField7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime10 = java.time.LocalTime.MAX;
        long long11 = chronoField9.getFrom((java.time.temporal.TemporalAccessor) localTime10);
        boolean boolean12 = zonedDateTime2.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.temporal.ValueRange valueRange13 = chronoField9.range();
        boolean boolean14 = valueRange13.isIntValue();
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField7.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField9.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 23L + "'", long11 == 23L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.security.ProtectionDomain protectionDomain2 = new java.security.ProtectionDomain(codeSource0, permissionCollection1);
        java.lang.ClassLoader classLoader3 = protectionDomain2.getClassLoader();
        java.lang.String str4 = protectionDomain2.toString();
        org.junit.Assert.assertEquals(protectionDomain2.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ProtectionDomain  null\n null\n <no principals>\n null\n" + "'", str4, "ProtectionDomain  null\n null\n <no principals>\n null\n");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.io.File file1 = new java.io.File("-18:00");
        boolean boolean2 = file1.canRead();
        boolean boolean3 = file1.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "-18:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.net.ContentHandlerFactory contentHandlerFactory0 = null;
        java.net.URLConnection.setContentHandlerFactory(contentHandlerFactory0);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.time.Month month0 = java.time.Month.APRIL;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.MAX;
        java.lang.String str5 = zoneOffset4.getId();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.lang.String str10 = zoneOffset9.getId();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        boolean boolean17 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        boolean boolean18 = localDateTime6.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray22 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList23 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, zoneOffsetTransitionArray22);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray25 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, zoneOffsetTransitionArray25);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray28 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList29 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList29, zoneOffsetTransitionRuleArray28);
        java.time.zone.ZoneRules zoneRules31 = java.time.zone.ZoneRules.of(zoneOffset20, zoneOffset21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList29);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray34 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, zoneOffsetTransitionArray34);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray40 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList41, zoneOffsetTransitionRuleArray40);
        java.time.zone.ZoneRules zoneRules43 = java.time.zone.ZoneRules.of(zoneOffset32, zoneOffset33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList41);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray46 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList47 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, zoneOffsetTransitionArray46);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray49 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList50 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, zoneOffsetTransitionArray49);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray52 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList53 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList53, zoneOffsetTransitionRuleArray52);
        java.time.zone.ZoneRules zoneRules55 = java.time.zone.ZoneRules.of(zoneOffset44, zoneOffset45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList53);
        boolean boolean56 = zoneOffsetTransitionList35.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray59 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList60 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, zoneOffsetTransitionArray59);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray62 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList63 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, zoneOffsetTransitionArray62);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray65 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList66 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66, zoneOffsetTransitionRuleArray65);
        java.time.zone.ZoneRules zoneRules68 = java.time.zone.ZoneRules.of(zoneOffset57, zoneOffset58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66);
        int int70 = zoneOffsetTransitionList63.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray73 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList74 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList74, zoneOffsetTransitionArray73);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray76 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList77 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList77, zoneOffsetTransitionArray76);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray79 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList80 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList80, zoneOffsetTransitionRuleArray79);
        java.time.zone.ZoneRules zoneRules82 = java.time.zone.ZoneRules.of(zoneOffset71, zoneOffset72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList74, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList77, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList80);
        java.time.zone.ZoneRules zoneRules83 = java.time.zone.ZoneRules.of(zoneOffset19, zoneOffset20, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList80);
        java.time.ZoneOffset zoneOffset86 = java.time.ZoneOffset.MAX;
        java.lang.String str87 = zoneOffset86.getId();
        java.time.LocalDateTime localDateTime88 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset86);
        int int89 = zoneOffset20.compareTo(zoneOffset86);
        java.time.OffsetDateTime offsetDateTime90 = java.time.OffsetDateTime.of(localDateTime11, zoneOffset20);
        java.time.LocalTime localTime91 = offsetDateTime90.toLocalTime();
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime90.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime90.plusHours((long) 256);
        java.time.OffsetDateTime offsetDateTime97 = offsetDateTime90.minusSeconds((long) '0');
        java.time.temporal.Temporal temporal98 = month0.adjustInto((java.time.temporal.Temporal) offsetDateTime90);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.APRIL + "'", month0.equals(java.time.Month.APRIL));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.APRIL + "'", month1.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+18:00" + "'", str5, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+18:00" + "'", str10, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneRules55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(zoneRules68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(zoneRules82);
        org.junit.Assert.assertNotNull(zoneRules83);
        org.junit.Assert.assertNotNull(zoneOffset86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+18:00" + "'", str87, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime90);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertNotNull(offsetDateTime97);
        org.junit.Assert.assertNotNull(temporal98);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        boolean boolean5 = doubleBuffer4.hasArray();
        java.nio.DoubleBuffer doubleBuffer6 = doubleBuffer4.slice();
        double[] doubleArray10 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer11 = java.nio.DoubleBuffer.wrap(doubleArray10);
        boolean boolean12 = doubleBuffer11.hasArray();
        double[] doubleArray16 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer17 = java.nio.DoubleBuffer.wrap(doubleArray16);
        java.nio.DoubleBuffer doubleBuffer18 = doubleBuffer11.get(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer21 = doubleBuffer6.put(doubleArray16, 16384, 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer17);
        org.junit.Assert.assertNotNull(doubleBuffer18);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate7 = isoChronology2.dateYearDay((java.time.chrono.Era) isoEra4, 0, 16);
        java.time.LocalTime localTime8 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime9 = localDate7.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate7.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod12 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate7);
        java.time.LocalDate localDate14 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate16 = java.time.LocalDate.ofEpochDay((long) 10);
        int int17 = localDate14.compareTo((java.time.chrono.ChronoLocalDate) localDate16);
        java.time.temporal.Temporal temporal18 = localDate1.adjustInto((java.time.temporal.Temporal) localDate16);
        java.time.LocalDate localDate20 = localDate16.withMonth((int) (short) 10);
        java.time.format.DateTimeFormatter dateTimeFormatter21 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.String str22 = localDate16.format(dateTimeFormatter21);
        java.time.ZoneId zoneId23 = java.time.ZoneId.systemDefault();
        java.lang.String str24 = zoneId23.getId();
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.now(zoneId23);
        java.time.ZoneId zoneId26 = java.time.ZoneId.systemDefault();
        java.lang.String str27 = zoneId26.getId();
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime25.withZoneSameInstant(zoneId26);
        java.time.ZoneId zoneId29 = java.time.ZoneId.systemDefault();
        java.lang.String str30 = zoneId29.getId();
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.now(zoneId29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.withYear((int) (short) 1);
        boolean boolean34 = zonedDateTime28.equals((java.lang.Object) zonedDateTime33);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime28.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology37 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime28);
        java.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter21.withChronology(chronology37);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.MAX;
        java.lang.String str42 = zoneOffset41.getId();
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset41);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.lang.String str47 = zoneOffset46.getId();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset46);
        boolean boolean49 = localDateTime43.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.format.DateTimeFormatter dateTimeFormatter50 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str51 = localDateTime48.format(dateTimeFormatter50);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int53 = localDateTime48.get((java.time.temporal.TemporalField) chronoField52);
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.lang.String str57 = zoneOffset56.getId();
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset56);
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.MAX;
        java.lang.String str62 = zoneOffset61.getId();
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset61);
        boolean boolean64 = localDateTime58.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime63);
        java.time.format.DateTimeFormatter dateTimeFormatter65 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str66 = localDateTime63.format(dateTimeFormatter65);
        boolean boolean67 = localDateTime48.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime63);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics68 = new java.util.DoubleSummaryStatistics();
        double double69 = doubleSummaryStatistics68.getMin();
        boolean boolean70 = localDateTime48.equals((java.lang.Object) double69);
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray73 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList74 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList74, zoneOffsetTransitionArray73);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray76 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList77 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList77, zoneOffsetTransitionArray76);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray79 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList80 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList80, zoneOffsetTransitionRuleArray79);
        java.time.zone.ZoneRules zoneRules82 = java.time.zone.ZoneRules.of(zoneOffset71, zoneOffset72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList74, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList77, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList80);
        boolean boolean83 = zoneRules82.isFixedOffset();
        java.time.Instant instant84 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition85 = zoneRules82.previousTransition(instant84);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList86 = zoneRules82.getTransitionRules();
        java.time.Instant instant87 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition88 = zoneRules82.previousTransition(instant87);
        java.time.Instant instant89 = java.time.Instant.MAX;
        java.time.Instant instant91 = instant89.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset92 = zoneRules82.getOffset(instant91);
        java.time.Instant instant93 = localDateTime48.toInstant(zoneOffset92);
        java.io.PrintWriter printWriter95 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter95.println("hi!");
        java.io.PrintWriter printWriter98 = new java.io.PrintWriter((java.io.Writer) printWriter95);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter38.formatTo((java.time.temporal.TemporalAccessor) zoneOffset92, (java.lang.Appendable) printWriter98);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra4.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "19700111" + "'", str22, "19700111");
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Etc/UTC" + "'", str24, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+18:00" + "'", str42, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+18:00" + "'", str47, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str51, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField52.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+18:00" + "'", str57, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+18:00" + "'", str62, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str66, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals(doubleSummaryStatistics68.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + Double.POSITIVE_INFINITY + "'", double69 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(zoneRules82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition85);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList86);
        org.junit.Assert.assertNull(zoneOffsetTransition88);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertNotNull(zoneOffset92);
        org.junit.Assert.assertNotNull(instant93);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        long long6 = zonedDateTime2.toEpochSecond();
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(zoneId7);
        java.time.ZonedDateTime zonedDateTime11 = zonedDateTime9.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        boolean boolean22 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str24 = localDateTime21.format(dateTimeFormatter23);
        java.time.chrono.Chronology chronology25 = dateTimeFormatter23.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod29 = chronology25.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime9.plus((java.time.temporal.TemporalAmount) chronoPeriod29);
        boolean boolean31 = zonedDateTime2.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime30);
        java.time.temporal.TemporalField temporalField32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = zonedDateTime2.get(temporalField32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645434874L + "'", long6 == 1645434874L);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str24, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronoPeriod29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withZone(zoneId2);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime5 = java.time.LocalTime.parse((java.lang.CharSequence) "OptionalInt.empty", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'OptionalInt.empty' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap1 = java.nio.charset.Charset.availableCharsets();
        boolean boolean2 = strMap1.isEmpty();
        java.util.Set<java.lang.String> strSet3 = strMap1.keySet();
        java.lang.Object[] objArray4 = strSet3.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(objArray4);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer3 = charBuffer1.append((java.lang.CharSequence) "Etc/UTC");
        // The following exception was thrown during execution in test generation
        try {
            char char5 = charBuffer1.get(16448);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.io.File file5 = file2.getCanonicalFile();
        long long6 = file5.getFreeSpace();
        java.lang.String str7 = file5.getParent();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/");
        org.junit.Assert.assertEquals(file5.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 299105394688L + "'", long6 == 299105394688L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/" + "'", str7, "/");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList12 = period11.getUnits();
        java.time.chrono.ChronoPeriod chronoPeriod13 = period11.negated();
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.DayOfWeek dayOfWeek22 = localDate19.getDayOfWeek();
        java.time.chrono.IsoChronology isoChronology23 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate28 = isoChronology23.dateYearDay((java.time.chrono.Era) isoEra25, 0, 16);
        java.time.LocalTime localTime29 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime30 = localDate28.atTime(localTime29);
        java.time.LocalDate localDate32 = localDate28.withMonth(1);
        java.time.Period period33 = localDate19.until((java.time.chrono.ChronoLocalDate) localDate28);
        java.time.Period period34 = period11.plus((java.time.temporal.TemporalAmount) period33);
        java.time.Period period36 = period34.minusDays((long) (-34));
        boolean boolean37 = period34.isZero();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(temporalUnitList12);
        org.junit.Assert.assertNotNull(chronoPeriod13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + dayOfWeek22 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek22.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(isoChronology23);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra25.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime88.plusHours((long) 256);
        java.time.DayOfWeek dayOfWeek94 = offsetDateTime88.getDayOfWeek();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertTrue("'" + dayOfWeek94 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek94.equals(java.time.DayOfWeek.THURSDAY));
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.io.File file5 = file2.getCanonicalFile();
        boolean boolean7 = file5.setExecutable(true);
        boolean boolean8 = file5.canExecute();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/");
        org.junit.Assert.assertEquals(file5.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str17 = localDateTime14.format(dateTimeFormatter16);
        java.time.chrono.Chronology chronology18 = dateTimeFormatter16.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod22 = chronology18.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime2.plus((java.time.temporal.TemporalAmount) chronoPeriod22);
        java.time.chrono.Chronology chronology24 = zonedDateTime2.getChronology();
        int int25 = zonedDateTime2.getSecond();
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str17, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronoPeriod22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 34 + "'", int25 == 34);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: 0must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer3 = charBuffer1.append((java.lang.CharSequence) "Etc/UTC");
        int int4 = charBuffer3.arrayOffset();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer8 = charBuffer6.append((java.lang.CharSequence) "Etc/UTC");
        int int9 = charBuffer3.read(charBuffer8);
        // The following exception was thrown during execution in test generation
        try {
            char char11 = charBuffer8.charAt((int) '-');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println(true);
        java.io.File file7 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long8 = file7.lastModified();
        java.net.URL uRL9 = file7.toURL();
        java.security.CodeSigner[] codeSignerArray10 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource11 = new java.security.CodeSource(uRL9, codeSignerArray10);
        java.io.PrintWriter printWriter12 = printWriter1.printf("x-windows-iso2022jp", (java.lang.Object[]) codeSignerArray10);
        printWriter1.print('\000');
        printWriter1.print((long) 256);
        org.junit.Assert.assertEquals(file7.getParent(), "/");
        org.junit.Assert.assertEquals(file7.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(uRL9);
        org.junit.Assert.assertEquals(uRL9.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray10);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.net.URI uRI15 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI16 = uRI15.normalize();
        java.lang.String str17 = uRI16.getRawSchemeSpecificPart();
        boolean boolean18 = zonedDateTime6.equals((java.lang.Object) uRI16);
        java.lang.String str19 = uRI16.getRawPath();
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "//Etc/UTC" + "'", str17, "//Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/UTC" + "'", str19, "/UTC");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed((int) (short) -1, 13);
        int[] intArray3 = new int[] {};
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of(intArray3);
        java.util.OptionalInt optionalInt5 = intStream4.max();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream6 = java.util.stream.IntStream.concat(intStream2, intStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(optionalInt5);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate7 = isoChronology2.dateYearDay((java.time.chrono.Era) isoEra4, 0, 16);
        java.time.LocalTime localTime8 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime9 = localDate7.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate7.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod12 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate7);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray15 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList16 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, zoneOffsetTransitionArray15);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray18 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, zoneOffsetTransitionArray18);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray21 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22, zoneOffsetTransitionRuleArray21);
        java.time.zone.ZoneRules zoneRules24 = java.time.zone.ZoneRules.of(zoneOffset13, zoneOffset14, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22);
        java.time.Clock clock25 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset13);
        java.time.format.TextStyle textStyle26 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = zoneOffset13.getDisplayName(textStyle26, locale27);
        java.time.ZonedDateTime zonedDateTime29 = localDate1.atStartOfDay((java.time.ZoneId) zoneOffset13);
        java.time.Period period31 = java.time.Period.ofYears((int) '\000');
        java.lang.String str32 = period31.toString();
        java.time.chrono.ChronoPeriod chronoPeriod33 = period31.negated();
        java.time.LocalDate localDate34 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod33);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate37 = localDate34.with((java.time.temporal.TemporalField) chronoField35, 23L);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MilliOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra4.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(clock25);
        org.junit.Assert.assertTrue("'" + textStyle26 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle26.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+18:00" + "'", str28, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "P0D" + "'", str32, "P0D");
        org.junit.Assert.assertNotNull(chronoPeriod33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField35.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.slice();
        java.nio.Buffer buffer8 = byteBuffer5.rewind();
        // The following exception was thrown during execution in test generation
        try {
            char char9 = byteBuffer5.getChar();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(buffer8);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.chrono.Chronology chronology27 = localDateTime9.getChronology();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap28 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology29 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean30 = strMapMap28.containsKey((java.lang.Object) isoChronology29);
        java.time.chrono.IsoEra isoEra31 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate34 = isoChronology29.dateYearDay((java.time.chrono.Era) isoEra31, (-1), 10);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.wrap(byteArray37, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology41 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean42 = byteBuffer40.equals((java.lang.Object) isoChronology41);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap43 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology44 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean45 = strMapMap43.containsKey((java.lang.Object) isoChronology44);
        java.time.chrono.IsoEra isoEra46 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate49 = isoChronology44.dateYearDay((java.time.chrono.Era) isoEra46, (-1), 10);
        int int51 = isoChronology41.prolepticYear((java.time.chrono.Era) isoEra46, (int) '#');
        java.time.LocalDate localDate54 = isoChronology29.dateYearDay((java.time.chrono.Era) isoEra46, (int) (byte) 0, 2);
        int int55 = isoEra46.getValue();
        int int57 = chronology27.prolepticYear((java.time.chrono.Era) isoEra46, 4096);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(isoChronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + isoEra31 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra31.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(isoChronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(isoChronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + isoEra46 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra46.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-34) + "'", int51 == (-34));
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-4095) + "'", int57 == (-4095));
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.duplicate();
        boolean boolean8 = longBuffer2.isDirect();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = longBuffer2.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.time.Instant instant2 = fileTime1.toInstant();
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.MAX;
        java.lang.String str6 = zoneOffset5.getId();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset5);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MAX;
        java.lang.String str11 = zoneOffset10.getId();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MAX;
        java.lang.String str16 = zoneOffset15.getId();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset15);
        boolean boolean18 = localDateTime12.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean19 = localDateTime7.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray29 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30, zoneOffsetTransitionRuleArray29);
        java.time.zone.ZoneRules zoneRules32 = java.time.zone.ZoneRules.of(zoneOffset21, zoneOffset22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray38 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, zoneOffsetTransitionArray38);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray41 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList42 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList42, zoneOffsetTransitionRuleArray41);
        java.time.zone.ZoneRules zoneRules44 = java.time.zone.ZoneRules.of(zoneOffset33, zoneOffset34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList42);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray50 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, zoneOffsetTransitionArray50);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray53 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList54 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList54, zoneOffsetTransitionRuleArray53);
        java.time.zone.ZoneRules zoneRules56 = java.time.zone.ZoneRules.of(zoneOffset45, zoneOffset46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList54);
        boolean boolean57 = zoneOffsetTransitionList36.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51);
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray63 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList64, zoneOffsetTransitionArray63);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray66 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList67 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList67, zoneOffsetTransitionRuleArray66);
        java.time.zone.ZoneRules zoneRules69 = java.time.zone.ZoneRules.of(zoneOffset58, zoneOffset59, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList64, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList67);
        int int71 = zoneOffsetTransitionList64.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray77 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList78, zoneOffsetTransitionArray77);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray80 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList81 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList81, zoneOffsetTransitionRuleArray80);
        java.time.zone.ZoneRules zoneRules83 = java.time.zone.ZoneRules.of(zoneOffset72, zoneOffset73, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList78, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList81);
        java.time.zone.ZoneRules zoneRules84 = java.time.zone.ZoneRules.of(zoneOffset20, zoneOffset21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList64, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList81);
        java.time.ZoneOffset zoneOffset87 = java.time.ZoneOffset.MAX;
        java.lang.String str88 = zoneOffset87.getId();
        java.time.LocalDateTime localDateTime89 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset87);
        int int90 = zoneOffset21.compareTo(zoneOffset87);
        java.time.OffsetDateTime offsetDateTime91 = java.time.OffsetDateTime.of(localDateTime12, zoneOffset21);
        java.time.LocalTime localTime92 = offsetDateTime91.toLocalTime();
        java.time.OffsetDateTime offsetDateTime94 = offsetDateTime91.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant95 = offsetDateTime94.toInstant();
        int int96 = instant2.compareTo(instant95);
        long long97 = instant2.getEpochSecond();
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+18:00" + "'", str6, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+18:00" + "'", str11, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+18:00" + "'", str16, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(zoneRules69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(zoneRules83);
        org.junit.Assert.assertNotNull(zoneRules84);
        org.junit.Assert.assertNotNull(zoneOffset87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+18:00" + "'", str88, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertNotNull(offsetDateTime94);
        org.junit.Assert.assertNotNull(instant95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.lang.String[] strArray0 = java.util.Locale.getISOCountries();
        org.junit.Assert.assertNotNull(strArray0);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        int int9 = byteBuffer5.remaining();
        java.nio.ByteOrder byteOrder10 = byteBuffer5.order();
        // The following exception was thrown during execution in test generation
        try {
            byte byte11 = byteBuffer5.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteOrder10);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer4 = intBuffer1.put(37, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intBuffer1);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap2 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>(10000000, (float) 171);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isSiteLocalAddress();
        boolean boolean2 = inetAddress0.isMCGlobal();
        boolean boolean3 = inetAddress0.isMCGlobal();
        boolean boolean4 = inetAddress0.isLoopbackAddress();
        boolean boolean5 = inetAddress0.isSiteLocalAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) '4', (long) ' ');
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = java.time.ZonedDateTime.now(zoneId3);
        java.time.ZonedDateTime zonedDateTime7 = zonedDateTime5.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit8 = null;
        boolean boolean9 = zonedDateTime5.isSupported(temporalUnit8);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange11 = zonedDateTime5.range((java.time.temporal.TemporalField) chronoField10);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime13 = java.time.LocalTime.MAX;
        long long14 = chronoField12.getFrom((java.time.temporal.TemporalAccessor) localTime13);
        boolean boolean15 = zonedDateTime5.isSupported((java.time.temporal.TemporalField) chronoField12);
        java.time.ZoneId zoneId16 = java.time.ZoneId.systemDefault();
        java.lang.String str17 = zoneId16.getId();
        java.lang.String str18 = zoneId16.getId();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime5.withZoneSameInstant(zoneId16);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofInstant(instant2, zoneId16);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime21 = java.time.OffsetTime.from((java.time.temporal.TemporalAccessor) localDateTime20);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetTime from TemporalAccessor: 1970-01-01T00:00:52.000000032 of type java.time.LocalDateTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField10.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 23L + "'", long14 == 23L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Etc/UTC" + "'", str17, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Etc/UTC" + "'", str18, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.io.File file2 = java.io.File.createTempFile("1970-01-01T18:01:37.00000012", "PT0S");
        long long3 = file2.length();
        java.net.URL uRL4 = file2.toURL();
        java.lang.String str5 = uRL4.getUserInfo();
        java.net.URI uRI6 = uRL4.toURI();
        java.lang.Class class7 = null;
        java.lang.Class[] classArray8 = new java.lang.Class[] { class7 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = uRL4.getContent(classArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/1970-01-01T18:01:37.000000121550587969964798529PT0S");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
// flaky:         org.junit.Assert.assertEquals(uRL4.toString(), "file:/tmp/1970-01-01T18:01:37.000000121550587969964798529PT0S");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNotNull(classArray8);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        int int0 = org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.lang.String str2 = zoneOffset1.getId();
        java.time.OffsetDateTime offsetDateTime3 = java.time.OffsetDateTime.now((java.time.ZoneId) zoneOffset1);
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.lang.String str7 = zoneOffset6.getId();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset6);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset11);
        boolean boolean14 = localDateTime8.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str16 = localDateTime13.format(dateTimeFormatter15);
        java.time.chrono.Chronology chronology17 = dateTimeFormatter15.getChronology();
        java.time.chrono.IsoChronology isoChronology18 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra20 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate23 = isoChronology18.dateYearDay((java.time.chrono.Era) isoEra20, 0, 16);
        java.time.LocalTime localTime24 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime25 = localDate23.atTime(localTime24);
        java.time.LocalDate localDate27 = localDate23.withMonth(1);
        java.time.chrono.ChronoLocalDate chronoLocalDate28 = chronology17.date((java.time.temporal.TemporalAccessor) localDate23);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray31 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList32 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, zoneOffsetTransitionArray31);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray34 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, zoneOffsetTransitionArray34);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray37 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList38, zoneOffsetTransitionRuleArray37);
        java.time.zone.ZoneRules zoneRules40 = java.time.zone.ZoneRules.of(zoneOffset29, zoneOffset30, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList38);
        java.time.Clock clock41 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset29);
        java.time.format.TextStyle textStyle42 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = zoneOffset29.getDisplayName(textStyle42, locale43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        java.time.format.DateTimeFormatter dateTimeFormatter46 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale47 = dateTimeFormatter46.getLocale();
        java.lang.String str48 = chronoField45.getDisplayName(locale47);
        java.lang.String str49 = chronology17.getDisplayName(textStyle42, locale47);
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = locale50.toLanguageTag();
        boolean boolean52 = locale50.hasExtensions();
        java.lang.String str53 = zoneOffset1.getDisplayName(textStyle42, locale50);
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter54 = java.time.format.DateTimeFormatter.ofPattern("ProtectionDomain  null\n null\n <no principals>\n null\n", locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown pattern letter: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+18:00" + "'", str2, "+18:00");
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+18:00" + "'", str7, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str16, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(isoChronology18);
        org.junit.Assert.assertTrue("'" + isoEra20 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra20.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronoLocalDate28);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneRules40);
        org.junit.Assert.assertNotNull(clock41);
        org.junit.Assert.assertTrue("'" + textStyle42 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle42.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+18:00" + "'", str44, "+18:00");
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField45.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "AM/PM" + "'", str48, "AM/PM");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISO" + "'", str49, "ISO");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en-GB" + "'", str51, "en-GB");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+18:00" + "'", str53, "+18:00");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.LocalDate localDate4 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate6 = java.time.LocalDate.ofEpochDay((long) 10);
        int int7 = localDate4.compareTo((java.time.chrono.ChronoLocalDate) localDate6);
        java.time.LocalTime localTime8 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray11 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, zoneOffsetTransitionArray11);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray17 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList18, zoneOffsetTransitionRuleArray17);
        java.time.zone.ZoneRules zoneRules20 = java.time.zone.ZoneRules.of(zoneOffset9, zoneOffset10, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList18);
        java.time.OffsetTime offsetTime21 = localTime8.atOffset(zoneOffset9);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray25 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, zoneOffsetTransitionArray25);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray28 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList29 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList29, zoneOffsetTransitionArray28);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray31 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList32 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList32, zoneOffsetTransitionRuleArray31);
        java.time.zone.ZoneRules zoneRules34 = java.time.zone.ZoneRules.of(zoneOffset23, zoneOffset24, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList29, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList32);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray43 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44, zoneOffsetTransitionRuleArray43);
        java.time.zone.ZoneRules zoneRules46 = java.time.zone.ZoneRules.of(zoneOffset35, zoneOffset36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray49 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList50 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, zoneOffsetTransitionArray49);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray52 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList53 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList53, zoneOffsetTransitionArray52);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray55 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList56 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList56, zoneOffsetTransitionRuleArray55);
        java.time.zone.ZoneRules zoneRules58 = java.time.zone.ZoneRules.of(zoneOffset47, zoneOffset48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList53, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList56);
        boolean boolean59 = zoneOffsetTransitionList38.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList53);
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray62 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList63 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, zoneOffsetTransitionArray62);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray65 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList66 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList66, zoneOffsetTransitionArray65);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray68 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList69 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList69, zoneOffsetTransitionRuleArray68);
        java.time.zone.ZoneRules zoneRules71 = java.time.zone.ZoneRules.of(zoneOffset60, zoneOffset61, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList66, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList69);
        int int73 = zoneOffsetTransitionList66.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset75 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray76 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList77 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList77, zoneOffsetTransitionArray76);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray79 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList80 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList80, zoneOffsetTransitionArray79);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray82 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList83 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList83, zoneOffsetTransitionRuleArray82);
        java.time.zone.ZoneRules zoneRules85 = java.time.zone.ZoneRules.of(zoneOffset74, zoneOffset75, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList77, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList80, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList83);
        java.time.zone.ZoneRules zoneRules86 = java.time.zone.ZoneRules.of(zoneOffset22, zoneOffset23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList53, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList66, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList83);
        java.time.ZoneOffset zoneOffset89 = java.time.ZoneOffset.MAX;
        java.lang.String str90 = zoneOffset89.getId();
        java.time.LocalDateTime localDateTime91 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset89);
        int int92 = zoneOffset23.compareTo(zoneOffset89);
        java.time.ZonedDateTime zonedDateTime93 = java.time.ZonedDateTime.of(localDate4, localTime8, (java.time.ZoneId) zoneOffset89);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime94 = isoChronology1.localDateTime((java.time.temporal.TemporalAccessor) zoneOffset89);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: +18:00 of type java.time.ZoneOffset");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(zoneRules58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(zoneRules71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(zoneOffset75);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(zoneRules85);
        org.junit.Assert.assertNotNull(zoneRules86);
        org.junit.Assert.assertNotNull(zoneOffset89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+18:00" + "'", str90, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime93);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        java.nio.CharBuffer charBuffer4 = charBuffer1.append('.');
        java.lang.String str5 = charBuffer1.toString();
        char char7 = charBuffer1.charAt(0);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration8 = java.time.Duration.parse((java.lang.CharSequence) charBuffer1);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text cannot be parsed to a Duration");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str5, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????????????????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.slice();
        java.nio.FloatBuffer floatBuffer3 = floatBuffer2.asReadOnlyBuffer();
        java.time.chrono.IsoChronology isoChronology4 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra6 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate9 = isoChronology4.dateYearDay((java.time.chrono.Era) isoEra6, 0, 16);
        java.time.LocalTime localTime10 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime11 = localDate9.atTime(localTime10);
        java.time.LocalDate localDate13 = localDate9.withMonth(1);
        boolean boolean14 = floatBuffer3.equals((java.lang.Object) 1);
        java.nio.FloatBuffer floatBuffer15 = floatBuffer3.duplicate();
        java.text.AttributedCharacterIterator.Attribute attribute16 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray19 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList20 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, zoneOffsetTransitionArray19);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray22 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList23 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, zoneOffsetTransitionArray22);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray25 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26, zoneOffsetTransitionRuleArray25);
        java.time.zone.ZoneRules zoneRules28 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26);
        boolean boolean29 = zoneRules28.isFixedOffset();
        java.time.Instant instant30 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition31 = zoneRules28.previousTransition(instant30);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList32 = zoneRules28.getTransitionRules();
        java.time.Instant instant33 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition34 = zoneRules28.previousTransition(instant33);
        boolean boolean35 = attribute16.equals((java.lang.Object) zoneOffsetTransition34);
        boolean boolean36 = floatBuffer15.equals((java.lang.Object) attribute16);
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(isoChronology4);
        org.junit.Assert.assertTrue("'" + isoEra6 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra6.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatBuffer15);
        org.junit.Assert.assertNotNull(attribute16);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList32);
        org.junit.Assert.assertNull(zoneOffsetTransition34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.io.File file5 = file2.getCanonicalFile();
        java.io.File file6 = file2.getAbsoluteFile();
        boolean boolean7 = file6.canRead();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/");
        org.junit.Assert.assertEquals(file5.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
        org.junit.Assert.assertEquals(file6.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        java.util.OptionalDouble optionalDouble2 = doubleStream1.max();
        java.util.stream.DoubleStream.Builder builder3 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream.Builder builder5 = builder3.add((double) ':');
        // The following exception was thrown during execution in test generation
        try {
            doubleStream1.forEach((java.util.function.DoubleConsumer) builder3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file3 = file2.getAbsoluteFile();
        java.net.URL uRL4 = file3.toURL();
        java.lang.String str5 = uRL4.getRef();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.net.MalformedURLException malformedURLException1 = new java.net.MalformedURLException("2022-02-21T09:14:13.599Z[Etc/UTC]");
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (byte) 100);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withYear((int) (short) 1);
        boolean boolean11 = zonedDateTime5.equals((java.lang.Object) zonedDateTime10);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime5.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology14 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime5);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime16 = zonedDateTime5.withHour(171);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 171");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer5.asShortBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar((int) 'a', 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortBuffer7);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.chrono.Chronology chronology13 = dateTimeFormatter11.getChronology();
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.LocalDate localDate23 = localDate19.withMonth(1);
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = chronology13.date((java.time.temporal.TemporalAccessor) localDate19);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray30 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, zoneOffsetTransitionArray30);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray33 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34, zoneOffsetTransitionRuleArray33);
        java.time.zone.ZoneRules zoneRules36 = java.time.zone.ZoneRules.of(zoneOffset25, zoneOffset26, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34);
        java.time.Clock clock37 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset25);
        java.time.format.TextStyle textStyle38 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = zoneOffset25.getDisplayName(textStyle38, locale39);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        java.time.format.DateTimeFormatter dateTimeFormatter42 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale43 = dateTimeFormatter42.getLocale();
        java.lang.String str44 = chronoField41.getDisplayName(locale43);
        java.lang.String str45 = chronology13.getDisplayName(textStyle38, locale43);
        java.lang.String str46 = locale43.getDisplayScript();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(clock37);
        org.junit.Assert.assertTrue("'" + textStyle38 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle38.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+18:00" + "'", str40, "+18:00");
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField41.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AM/PM" + "'", str44, "AM/PM");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISO" + "'", str45, "ISO");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.util.Hashtable<java.nio.charset.CodingErrorAction, java.nio.LongBuffer> codingErrorActionMap0 = new java.util.Hashtable<java.nio.charset.CodingErrorAction, java.nio.LongBuffer>();
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.time.chrono.IsoEra isoEra11 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate14 = isoChronology9.dateYearDay((java.time.chrono.Era) isoEra11, (-1), 10);
        int int16 = isoChronology6.prolepticYear((java.time.chrono.Era) isoEra11, (int) '#');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.temporal.Temporal temporal18 = isoEra11.adjustInto((java.time.temporal.Temporal) localDateTime17);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate22 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset21);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset21);
        java.time.Month month24 = java.time.Month.JANUARY;
        java.time.Month month25 = month24.firstMonthOfQuarter();
        java.time.Month month26 = month25.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = month25.query(periodTemporalQuery27);
        java.time.Period period29 = zoneOffset21.query(periodTemporalQuery27);
        java.time.Period period30 = localDateTime17.query(periodTemporalQuery27);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.Clock clock43 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset31);
        java.time.LocalDate localDate44 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset31);
        java.time.OffsetDateTime offsetDateTime45 = java.time.OffsetDateTime.of(localDateTime17, zoneOffset31);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange47 = zoneOffset31.range((java.time.temporal.TemporalField) chronoField46);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: SecondOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + isoEra11 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra11.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-34) + "'", int16 == (-34));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + month24 + "' != '" + java.time.Month.JANUARY + "'", month24.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month25 + "' != '" + java.time.Month.JANUARY + "'", month25.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.JANUARY + "'", month26.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(clock43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField46.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean2 = instant0.isSupported((java.time.temporal.TemporalField) chronoField1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        java.time.temporal.TemporalUnit temporalUnit4 = chronoField3.getBaseUnit();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = instant0.get((java.time.temporal.TemporalField) chronoField3);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: DayOfMonth");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField1.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField3.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + temporalUnit4 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit4.equals(java.time.temporal.ChronoUnit.DAYS));
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.time.chrono.IsoEra isoEra11 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate14 = isoChronology9.dateYearDay((java.time.chrono.Era) isoEra11, (-1), 10);
        int int16 = isoChronology6.prolepticYear((java.time.chrono.Era) isoEra11, (int) '#');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.temporal.Temporal temporal18 = isoEra11.adjustInto((java.time.temporal.Temporal) localDateTime17);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate22 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset21);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset21);
        java.time.Month month24 = java.time.Month.JANUARY;
        java.time.Month month25 = month24.firstMonthOfQuarter();
        java.time.Month month26 = month25.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = month25.query(periodTemporalQuery27);
        java.time.Period period29 = zoneOffset21.query(periodTemporalQuery27);
        java.time.Period period30 = localDateTime17.query(periodTemporalQuery27);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.Clock clock43 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset31);
        java.time.LocalDate localDate44 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset31);
        java.time.OffsetDateTime offsetDateTime45 = java.time.OffsetDateTime.of(localDateTime17, zoneOffset31);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.withDayOfYear(10000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 10000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + isoEra11 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra11.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-34) + "'", int16 == (-34));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + month24 + "' != '" + java.time.Month.JANUARY + "'", month24.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month25 + "' != '" + java.time.Month.JANUARY + "'", month25.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.JANUARY + "'", month26.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(clock43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        int[] intArray4 = intStream3.toArray();
        java.util.function.IntUnaryOperator intUnaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream6 = intStream3.map(intUnaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.util.concurrent.TimeoutException timeoutException1 = new java.util.concurrent.TimeoutException("1970-01-01T18:01:37.00000012");
        java.security.PrivilegedActionException privilegedActionException2 = new java.security.PrivilegedActionException((java.lang.Exception) timeoutException1);
        java.lang.Exception exception3 = privilegedActionException2.getException();
        java.lang.Throwable[] throwableArray4 = privilegedActionException2.getSuppressed();
        org.junit.Assert.assertNotNull(exception3);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_OFFSET_TIME;
        java.time.format.DecimalStyle decimalStyle1 = dateTimeFormatter0.getDecimalStyle();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(decimalStyle1);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        builder0.accept((double) 14);
        builder0.accept(0.0d);
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.chrono.IsoChronology isoChronology29 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra31 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate34 = isoChronology29.dateYearDay((java.time.chrono.Era) isoEra31, 0, 16);
        java.time.LocalTime localTime35 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime36 = localDate34.atTime(localTime35);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray42 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, zoneOffsetTransitionArray42);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray45 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46, zoneOffsetTransitionRuleArray45);
        java.time.zone.ZoneRules zoneRules48 = java.time.zone.ZoneRules.of(zoneOffset37, zoneOffset38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46);
        long long49 = localDateTime36.toEpochSecond(zoneOffset37);
        java.time.LocalDateTime localDateTime51 = localDateTime36.plusDays((long) (byte) 1);
        java.time.temporal.Temporal temporal52 = localDateTime24.adjustInto((java.time.temporal.Temporal) localDateTime36);
        java.time.LocalDateTime localDateTime54 = localDateTime36.withNano((int) 'u');
        java.time.temporal.TemporalAmount temporalAmount55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime56 = localDateTime54.plus(temporalAmount55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: amountToAdd");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(isoChronology29);
        org.junit.Assert.assertTrue("'" + isoEra31 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra31.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-62134279201L) + "'", long49 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(temporal52);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        double double3 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics5.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics8.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getGeometricMeanImpl();
        double[] doubleArray17 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double18 = univariateStatistic11.evaluate(doubleArray17);
        descriptiveStatistics5.setGeometricMeanImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics5.getMinImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic20);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneId zoneId15 = java.time.ZoneId.systemDefault();
        java.lang.String str16 = zoneId15.getId();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.now(zoneId15);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime17.withZoneSameInstant(zoneId18);
        java.time.ZonedDateTime zonedDateTime21 = localDateTime9.atZone(zoneId18);
        java.time.Month month22 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime9);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime24 = localDateTime9.withMonth((-2022));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): -2022");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + month22 + "' != '" + java.time.Month.JANUARY + "'", month22.equals(java.time.Month.JANUARY));
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        boolean boolean1 = strMap0.isEmpty();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate3 = java.util.function.Predicate.isEqual((java.lang.Object) strMap0);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap4 = java.nio.charset.Charset.availableCharsets();
        boolean boolean5 = strMap4.isEmpty();
        java.util.Set<java.lang.String> strSet6 = strMap4.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate7 = java.util.function.Predicate.isEqual((java.lang.Object) strMap4);
        java.time.format.ResolverStyle resolverStyle8 = java.time.format.ResolverStyle.SMART;
        boolean boolean9 = resolverStylePredicate7.test(resolverStyle8);
        boolean boolean10 = resolverStylePredicate3.test(resolverStyle8);
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(resolverStylePredicate3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(resolverStylePredicate7);
        org.junit.Assert.assertTrue("'" + resolverStyle8 + "' != '" + java.time.format.ResolverStyle.SMART + "'", resolverStyle8.equals(java.time.format.ResolverStyle.SMART));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.time.Month month0 = java.time.Month.APRIL;
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZoneId zoneId5 = java.time.ZoneId.systemDefault();
        java.lang.String str6 = zoneId5.getId();
        java.time.ZonedDateTime zonedDateTime7 = zonedDateTime4.withZoneSameInstant(zoneId5);
        java.time.ZoneId zoneId8 = java.time.ZoneId.systemDefault();
        java.lang.String str9 = zoneId8.getId();
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.now(zoneId8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        boolean boolean13 = zonedDateTime7.equals((java.lang.Object) zonedDateTime12);
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime7.minusMonths((long) (byte) -1);
        java.time.DayOfWeek dayOfWeek16 = zonedDateTime15.getDayOfWeek();
        java.time.LocalTime localTime17 = java.time.LocalTime.MAX;
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition19 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray22 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList23 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, zoneOffsetTransitionArray22);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray25 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, zoneOffsetTransitionArray25);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray28 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList29 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList29, zoneOffsetTransitionRuleArray28);
        java.time.zone.ZoneRules zoneRules31 = java.time.zone.ZoneRules.of(zoneOffset20, zoneOffset21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList29);
        java.time.Clock clock32 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset20);
        java.time.format.TextStyle textStyle33 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = zoneOffset20.getDisplayName(textStyle33, locale34);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.lang.String str39 = zoneOffset38.getId();
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset38);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.lang.String str44 = zoneOffset43.getId();
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset43);
        boolean boolean46 = localDateTime40.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime45);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.lang.String str48 = zoneOffset47.getId();
        java.time.ZonedDateTime zonedDateTime49 = java.time.ZonedDateTime.of(localDateTime45, (java.time.ZoneId) zoneOffset47);
        java.time.OffsetDateTime offsetDateTime50 = java.time.OffsetDateTime.now((java.time.ZoneId) zoneOffset47);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray53 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList54 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, zoneOffsetTransitionArray53);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray56 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList57 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList57, zoneOffsetTransitionArray56);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray59 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList60 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList60, zoneOffsetTransitionRuleArray59);
        java.time.zone.ZoneRules zoneRules62 = java.time.zone.ZoneRules.of(zoneOffset51, zoneOffset52, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList57, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList60);
        // The following exception was thrown during execution in test generation
        try {
            java.time.zone.ZoneOffsetTransitionRule zoneOffsetTransitionRule63 = java.time.zone.ZoneOffsetTransitionRule.of(month0, 120, dayOfWeek16, localTime17, true, timeDefinition19, zoneOffset20, zoneOffset47, zoneOffset52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Day of month indicator must be between -28 and 31 inclusive excluding zero");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.APRIL + "'", month0.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Etc/UTC" + "'", str9, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertTrue("'" + dayOfWeek16 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek16.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + timeDefinition19 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC + "'", timeDefinition19.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC));
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(clock32);
        org.junit.Assert.assertTrue("'" + textStyle33 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle33.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+18:00" + "'", str35, "+18:00");
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+18:00" + "'", str39, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+18:00" + "'", str44, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+18:00" + "'", str48, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneRules62);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.wrap(byteArray9, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = byteBuffer12.equals((java.lang.Object) isoChronology13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean17 = strMapMap15.containsKey((java.lang.Object) isoChronology16);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, (-1), 10);
        int int23 = isoChronology13.prolepticYear((java.time.chrono.Era) isoEra18, (int) '#');
        java.time.LocalDate localDate26 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra18, (int) (byte) 0, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate30 = isoChronology1.date(0, 120, 171);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 120");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-34) + "'", int23 == (-34));
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("", "//Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: //Etc/UTC");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime2 = java.time.LocalTime.of((int) '0', 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 48");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        java.nio.CharBuffer charBuffer4 = charBuffer1.append('.');
        java.lang.String str5 = charBuffer1.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime6 = java.time.LocalTime.parse((java.lang.CharSequence) str5);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '???????????????' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str5, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.time.format.DecimalStyle decimalStyle0 = java.time.format.DecimalStyle.STANDARD;
        char char1 = decimalStyle0.getNegativeSign();
        org.junit.Assert.assertNotNull(decimalStyle0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '-' + "'", char1 == '-');
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.io.File file2 = java.io.File.createTempFile("1970-01-01T18:01:37.00000012", "PT0S");
        long long3 = file2.length();
        java.net.URL uRL4 = file2.toURL();
        boolean boolean6 = file2.setReadable(false);
        boolean boolean7 = file2.delete();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream9 = new java.io.PrintStream(file2, "OVERFLOW");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: OVERFLOW");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/1970-01-01T18:01:37.000000121672900574688160807PT0S");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
// flaky:         org.junit.Assert.assertEquals(uRL4.toString(), "file:/tmp/1970-01-01T18:01:37.000000121672900574688160807PT0S");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds(4096);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.of(100, 14, 1500, (int) '.', (int) 'a', (int) (short) 1, 4096, zoneOffset8);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 14");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset8);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        boolean boolean12 = zoneRules11.isFixedOffset();
        java.security.CodeSource codeSource13 = null;
        java.security.PermissionCollection permissionCollection14 = null;
        java.security.ProtectionDomain protectionDomain15 = new java.security.ProtectionDomain(codeSource13, permissionCollection14);
        boolean boolean16 = zoneRules11.equals((java.lang.Object) codeSource13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray19 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList20 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, zoneOffsetTransitionArray19);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray22 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList23 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, zoneOffsetTransitionArray22);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray25 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26, zoneOffsetTransitionRuleArray25);
        java.time.zone.ZoneRules zoneRules28 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26);
        boolean boolean29 = zoneRules28.isFixedOffset();
        java.time.Instant instant30 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition31 = zoneRules28.previousTransition(instant30);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList32 = zoneRules28.getTransitionRules();
        java.time.Instant instant33 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition34 = zoneRules28.previousTransition(instant33);
        java.time.Instant instant35 = java.time.Instant.MAX;
        java.time.Instant instant37 = instant35.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset38 = zoneRules28.getOffset(instant37);
        java.time.ZoneOffset zoneOffset39 = zoneRules11.getStandardOffset(instant37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.lang.String str43 = zoneOffset42.getId();
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset42);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.lang.String str48 = zoneOffset47.getId();
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset47);
        boolean boolean50 = localDateTime44.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.format.DateTimeFormatter dateTimeFormatter51 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str52 = localDateTime49.format(dateTimeFormatter51);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int54 = localDateTime49.get((java.time.temporal.TemporalField) chronoField53);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.lang.String str58 = zoneOffset57.getId();
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset57);
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.MAX;
        java.lang.String str63 = zoneOffset62.getId();
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset62);
        boolean boolean65 = localDateTime59.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime64);
        java.time.format.DateTimeFormatter dateTimeFormatter66 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str67 = localDateTime64.format(dateTimeFormatter66);
        boolean boolean68 = localDateTime49.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime64);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean70 = localDateTime49.isSupported((java.time.temporal.TemporalField) chronoField69);
        java.time.Period period72 = java.time.Period.ofYears((int) '\000');
        java.time.Period period74 = period72.minusDays((long) (short) 0);
        java.time.LocalDateTime localDateTime75 = localDateTime49.plus((java.time.temporal.TemporalAmount) period72);
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.MAX;
        java.time.Clock clock77 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset76);
        java.time.ZoneId zoneId78 = java.time.ZoneId.systemDefault();
        java.lang.String str79 = zoneId78.getId();
        java.lang.String str80 = zoneId78.getId();
        java.time.ZonedDateTime zonedDateTime81 = java.time.ZonedDateTime.ofInstant(localDateTime75, zoneOffset76, zoneId78);
        java.util.List<java.time.ZoneOffset> zoneOffsetList82 = zoneRules11.getValidOffsets(localDateTime75);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList83 = zoneRules11.getTransitionRules();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(protectionDomain15.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList32);
        org.junit.Assert.assertNull(zoneOffsetTransition34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+18:00" + "'", str43, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+18:00" + "'", str48, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str52, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField53.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+18:00" + "'", str58, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+18:00" + "'", str63, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str67, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField69.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(clock77);
        org.junit.Assert.assertNotNull(zoneId78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Etc/UTC" + "'", str79, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Etc/UTC" + "'", str80, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(zoneOffsetList82);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList83);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.nio.charset.CodingErrorAction codingErrorAction0 = java.nio.charset.CodingErrorAction.REPLACE;
        org.junit.Assert.assertNotNull(codingErrorAction0);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getUnicodeLocaleType("00010221Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 00010221Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.security.cert.CertificateException certificateException1 = new java.security.cert.CertificateException("/");
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.security.NoSuchProviderException noSuchProviderException0 = new java.security.NoSuchProviderException();
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneId zoneId15 = java.time.ZoneId.systemDefault();
        java.lang.String str16 = zoneId15.getId();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.now(zoneId15);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime17.withZoneSameInstant(zoneId18);
        java.time.ZonedDateTime zonedDateTime21 = localDateTime9.atZone(zoneId18);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.now(zoneId18);
        java.time.zone.ZoneRules zoneRules23 = zoneId18.getRules();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.net.URI uRI15 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI16 = uRI15.normalize();
        java.lang.String str17 = uRI16.getRawSchemeSpecificPart();
        boolean boolean18 = zonedDateTime6.equals((java.lang.Object) uRI16);
        java.lang.String str19 = uRI16.getRawSchemeSpecificPart();
        java.lang.String str20 = uRI16.getRawFragment();
        java.lang.String str21 = uRI16.getRawAuthority();
        java.net.URI uRI23 = uRI16.resolve("");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "//Etc/UTC" + "'", str17, "//Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "//Etc/UTC" + "'", str19, "//Etc/UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Etc/UTC" + "'", str20, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Etc" + "'", str21, "Etc");
        org.junit.Assert.assertNotNull(uRI23);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.Spliterator<java.lang.Long> longSpliterator1 = longStream0.spliterator();
        long long2 = longSpliterator1.estimateSize();
        long long3 = longSpliterator1.estimateSize();
        boolean boolean5 = longSpliterator1.hasCharacteristics((-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.Long> wildcardComparator6 = longSpliterator1.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longSpliterator1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("1970-01-01T18:01:37.000000130+18:00", "P1968Y1D");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: P1968Y1D");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.util.Date date6 = new java.util.Date(11000000, (int) ':', 14, 37, (int) 'x', 16384);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Nov 15 19:33:04 UTC 11001904");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long2 = timeUnit0.toMinutes(1645434849L);
        long long4 = timeUnit0.toNanos((long) 9);
        java.util.concurrent.TimeUnit timeUnit6 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long8 = timeUnit6.toMinutes(1645434849L);
        long long9 = timeUnit0.convert((long) '#', timeUnit6);
        java.lang.Thread thread10 = null;
        timeUnit0.timedJoin(thread10, 0L);
        org.junit.Assert.assertNotNull(timeUnit0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 27L + "'", long2 == 27L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9000L + "'", long4 == 9000L);
        org.junit.Assert.assertNotNull(timeUnit6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 27L + "'", long8 == 27L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35L + "'", long9 == 35L);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.net.URI uRI4 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI5 = uRI4.normalize();
        java.net.URI uRI10 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI11 = uRI10.normalize();
        java.lang.String str12 = uRI11.getRawPath();
        java.lang.String str13 = uRI11.getFragment();
        java.net.URI uRI14 = uRI4.resolve(uRI11);
        java.lang.String str15 = uRI4.toString();
        java.lang.String str16 = uRI4.toASCIIString();
        org.junit.Assert.assertNotNull(uRI5);
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/UTC" + "'", str12, "/UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "italiano://Etc/UTC#Etc/UTC" + "'", str15, "italiano://Etc/UTC#Etc/UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "italiano://Etc/UTC#Etc/UTC" + "'", str16, "italiano://Etc/UTC#Etc/UTC");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.LocalTime localTime5 = zonedDateTime4.toLocalTime();
        java.time.ZonedDateTime zonedDateTime7 = zonedDateTime4.withYear((int) '\000');
        java.lang.String str8 = zonedDateTime4.toString();
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.lang.String str17 = zoneOffset16.getId();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset16);
        boolean boolean19 = localDateTime13.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str21 = localDateTime18.format(dateTimeFormatter20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int23 = localDateTime18.get((java.time.temporal.TemporalField) chronoField22);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.lang.String str27 = zoneOffset26.getId();
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset26);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.lang.String str32 = zoneOffset31.getId();
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset31);
        boolean boolean34 = localDateTime28.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.format.DateTimeFormatter dateTimeFormatter35 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str36 = localDateTime33.format(dateTimeFormatter35);
        boolean boolean37 = localDateTime18.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean39 = localDateTime18.isSupported((java.time.temporal.TemporalField) chronoField38);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime41 = zonedDateTime4.with((java.time.temporal.TemporalField) chronoField38, (long) 16);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(zonedDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0001-02-21T09:14:37.524Z[Etc/UTC]" + "'", str8, "0001-02-21T09:14:37.524Z[Etc/UTC]");
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+18:00" + "'", str17, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str21, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField22.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+18:00" + "'", str27, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+18:00" + "'", str32, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str36, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField38.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime41);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.lang.String str1 = java.net.URLConnection.getDefaultRequestProperty("hi!");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.SATURDAY;
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.SATURDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.SATURDAY));
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.time.Month month0 = java.time.Month.APRIL;
        int int1 = month0.getValue();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.APRIL + "'", month0.equals(java.time.Month.APRIL));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant92 = offsetDateTime91.toInstant();
        java.nio.CharBuffer charBuffer94 = java.nio.CharBuffer.allocate(16);
        int int95 = charBuffer94.limit();
        java.util.stream.IntStream intStream96 = charBuffer94.chars();
        boolean boolean97 = offsetDateTime91.equals((java.lang.Object) intStream96);
        java.util.IntSummaryStatistics intSummaryStatistics98 = intStream96.summaryStatistics();
        int int99 = intSummaryStatistics98.getMin();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(charBuffer94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 16 + "'", int95 == 16);
        org.junit.Assert.assertNotNull(intStream96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(intSummaryStatistics98);
        org.junit.Assert.assertEquals(intSummaryStatistics98.toString(), "IntSummaryStatistics{count=16, sum=0, min=0, average=0.000000, max=0}");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        date1.setDate((int) (short) 1);
        date1.setTime(1645434854L);
        java.lang.Object obj7 = null;
        boolean boolean8 = date1.equals(obj7);
        org.junit.Assert.assertEquals(date1.toString(), "Tue Jan 20 01:03:54 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime88.plusDays((long) 171);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration1 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal2 = null;
        java.time.temporal.Temporal temporal3 = duration1.subtractFrom(temporal2);
        long long4 = duration1.toDays();
        java.time.Duration duration5 = duration0.minus(duration1);
        java.time.Duration duration7 = duration0.minusHours((long) (short) 0);
        java.lang.String str8 = duration0.toString();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNull(temporal3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Fri");
        boolean boolean2 = printStream1.checkError();
        printStream1.print("0001-01-16");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.lang.Throwable throwable1 = null;
        java.security.cert.CertificateException certificateException2 = new java.security.cert.CertificateException("1970-01-01T00:00:00.01Z", throwable1);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.time.format.TextStyle textStyle0 = java.time.format.TextStyle.NARROW;
        org.junit.Assert.assertTrue("'" + textStyle0 + "' != '" + java.time.format.TextStyle.NARROW + "'", textStyle0.equals(java.time.format.TextStyle.NARROW));
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(18);
        org.junit.Assert.assertNotNull(intBuffer1);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        int int0 = java.util.Spliterator.SIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 64 + "'", int0 == 64);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.text.ParseException parseException2 = new java.text.ParseException("java.nio.HeapFloatBuffer[pos=256 lim=256 cap=256]", 120);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.IntStream intStream4 = intStream3.distinct();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = intStream3.sum();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        boolean boolean1 = strMap0.isEmpty();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        int int3 = strSet2.size();
        java.util.Locale locale6 = new java.util.Locale("DecimalStyle[0+-.]", "Di");
        boolean boolean7 = strSet2.equals((java.lang.Object) "Di");
        // The following exception was thrown during execution in test generation
        try {
            strSet2.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertEquals(locale6.toString(), "decimalstyle[0+-.]_DI");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        boolean boolean11 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset12);
        java.util.Date date16 = new java.util.Date((long) (byte) 1);
        java.lang.Cloneable cloneable17 = strMapMap0.getOrDefault((java.lang.Object) localDateTime10, (java.lang.Cloneable) date16);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap18 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology19 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean20 = strMapMap18.containsKey((java.lang.Object) isoChronology19);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap21 = java.nio.charset.Charset.availableCharsets();
        boolean boolean22 = strMap21.isEmpty();
        java.util.Locale locale23 = java.util.Locale.US;
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.Cloneable cloneable26 = strMapMap18.put(strMap21, (java.lang.Cloneable) locale24);
        int int27 = strMap21.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap30 = strMap21.subMap("DecimalStyle[0+-.]", "{}");
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray45 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, zoneOffsetTransitionArray45);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray51 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52, zoneOffsetTransitionRuleArray51);
        java.time.zone.ZoneRules zoneRules54 = java.time.zone.ZoneRules.of(zoneOffset43, zoneOffset44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52);
        boolean boolean55 = zoneOffsetTransitionList34.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49);
        zoneOffsetTransitionList34.clear();
        java.lang.Cloneable cloneable57 = strMapMap0.putIfAbsent(strMap21, (java.lang.Cloneable) zoneOffsetTransitionList34);
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap60 = strMap21.subMap("en", "0001-01-16T23:59:59.999999999");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(cloneable17);
        org.junit.Assert.assertNotNull(isoChronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Stati Uniti" + "'", str25, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 171 + "'", int27 == 171);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(cloneable57);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        boolean boolean3 = file2.exists();
        boolean boolean5 = file2.setLastModified(14L);
        boolean boolean8 = file2.setWritable(false, false);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.println('4');
        printWriter1.flush();
        printWriter1.println("20220221Z");
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.lang.String str27 = localDateTime20.toString();
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange29 = chronoField28.range();
        boolean boolean30 = localDateTime20.isSupported((java.time.temporal.TemporalField) chronoField28);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        boolean boolean32 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime34 = localDateTime31.minusDays(1645434860L);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.lang.String str38 = zoneOffset37.getId();
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.lang.String str43 = zoneOffset42.getId();
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset42);
        boolean boolean45 = localDateTime39.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.MAX;
        java.lang.String str49 = zoneOffset48.getId();
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset48);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.MAX;
        java.lang.String str54 = zoneOffset53.getId();
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset53);
        boolean boolean56 = localDateTime50.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        java.time.format.DateTimeFormatter dateTimeFormatter57 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str58 = localDateTime55.format(dateTimeFormatter57);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int60 = localDateTime55.get((java.time.temporal.TemporalField) chronoField59);
        boolean boolean61 = localDateTime44.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        java.lang.String str62 = localDateTime55.toString();
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange64 = chronoField63.range();
        boolean boolean65 = localDateTime55.isSupported((java.time.temporal.TemporalField) chronoField63);
        java.time.LocalDateTime localDateTime67 = localDateTime55.minusSeconds((long) 70);
        int int68 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str27, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField28.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+18:00" + "'", str38, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+18:00" + "'", str43, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+18:00" + "'", str49, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+18:00" + "'", str54, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str58, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField59.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str62, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField63.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 999998029 + "'", int68 == 999998029);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zho" + "'", str1, "zho");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.time.Instant instant0 = java.time.Instant.MAX;
        java.time.Instant instant2 = instant0.plusNanos((long) (short) -1);
        java.time.LocalTime localTime3 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray9 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList10, zoneOffsetTransitionArray9);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray12 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList13 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList13, zoneOffsetTransitionRuleArray12);
        java.time.zone.ZoneRules zoneRules15 = java.time.zone.ZoneRules.of(zoneOffset4, zoneOffset5, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList10, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList13);
        java.time.OffsetTime offsetTime16 = localTime3.atOffset(zoneOffset4);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange18 = offsetTime16.range((java.time.temporal.TemporalField) chronoField17);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean20 = offsetTime16.isSupported((java.time.temporal.TemporalField) chronoField19);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = instant0.get((java.time.temporal.TemporalField) chronoField19);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(zoneRules15);
        org.junit.Assert.assertNotNull(offsetTime16);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField17.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField19.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        resizableDoubleArray0.addElement((-1.0d));
        resizableDoubleArray0.addElement((double) 999999999);
        resizableDoubleArray0.addElement((double) 1024);
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 9.99999999E8, 1024.0]");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.util.InvalidPropertiesFormatException invalidPropertiesFormatException1 = new java.util.InvalidPropertiesFormatException("DIRECT");
        java.security.InvalidKeyException invalidKeyException2 = new java.security.InvalidKeyException((java.lang.Throwable) invalidPropertiesFormatException1);
        java.lang.String str3 = invalidPropertiesFormatException1.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.util.InvalidPropertiesFormatException: DIRECT" + "'", str3, "java.util.InvalidPropertiesFormatException: DIRECT");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.lang.String[] strArray15 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        boolean boolean42 = zoneOffsetTransitionList21.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36);
        zoneOffsetTransitionList21.clear();
        boolean boolean44 = strSet16.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21);
        boolean boolean45 = fileTime1.equals((java.lang.Object) zoneOffsetTransitionList21);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition46 = null;
        boolean boolean47 = zoneOffsetTransitionList21.add(zoneOffsetTransition46);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file3 = file2.getAbsoluteFile();
        boolean boolean4 = file3.canRead();
        java.io.File file7 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file8 = file7.getAbsoluteFile();
        boolean boolean9 = file3.renameTo(file7);
        java.nio.file.Path path10 = file7.toPath();
        java.nio.file.WatchService watchService11 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind12 = null;
        java.nio.file.WatchEvent.Kind[] kindArray14 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray15 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray14;
        wildcardKindArray15[0] = wildcardKind12;
        java.nio.file.WatchEvent.Modifier[] modifierArray18 = new java.nio.file.WatchEvent.Modifier[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey19 = path10.register(watchService11, wildcardKindArray15, modifierArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "/");
        org.junit.Assert.assertEquals(file7.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(kindArray14);
        org.junit.Assert.assertNotNull(wildcardKindArray15);
        org.junit.Assert.assertNotNull(modifierArray18);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.Spliterator<java.lang.Long> longSpliterator1 = longStream0.spliterator();
        long long2 = longSpliterator1.getExactSizeIfKnown();
        long long3 = longSpliterator1.estimateSize();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longSpliterator1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.io.File file2 = java.io.File.createTempFile("1970-01-01T18:01:37.00000012", "PT0S");
        long long3 = file2.length();
        java.net.URL uRL4 = file2.toURL();
        boolean boolean6 = file2.setReadable(false);
        boolean boolean7 = file2.isFile();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/1970-01-01T18:01:37.000000121530313702446681996PT0S");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
// flaky:         org.junit.Assert.assertEquals(uRL4.toString(), "file:/tmp/1970-01-01T18:01:37.000000121530313702446681996PT0S");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.DoubleStream doubleStream4 = intStream3.asDoubleStream();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate(16);
        int int7 = charBuffer6.limit();
        java.util.stream.IntStream intStream8 = charBuffer6.chars();
        java.util.stream.DoubleStream doubleStream9 = intStream8.asDoubleStream();
        java.util.stream.DoubleStream doubleStream10 = java.util.stream.DoubleStream.concat(doubleStream4, doubleStream9);
        java.util.function.DoubleBinaryOperator doubleBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble12 = doubleStream4.reduce(doubleBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream10);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(52);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.time.Month month0 = java.time.Month.DECEMBER;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.DECEMBER + "'", month0.equals(java.time.Month.DECEMBER));
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean1 = chronoField0.isTimeBased();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField0.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.time.Instant instant0 = java.time.Instant.MAX;
        java.time.Instant instant2 = instant0.plusNanos((long) (short) -1);
        java.time.Period period4 = java.time.Period.ofYears((int) '\000');
        java.time.chrono.ChronoPeriod chronoPeriod5 = period4.normalized();
        java.time.Month month6 = java.time.Month.JANUARY;
        java.time.Month month7 = month6.firstMonthOfQuarter();
        java.time.Month month8 = month7.firstMonthOfQuarter();
        boolean boolean9 = period4.equals((java.lang.Object) month7);
        java.time.Instant instant10 = instant2.plus((java.time.temporal.TemporalAmount) period4);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        boolean boolean22 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str24 = localDateTime21.format(dateTimeFormatter23);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int26 = localDateTime21.get((java.time.temporal.TemporalField) chronoField25);
        java.time.ZoneId zoneId27 = java.time.ZoneId.systemDefault();
        java.lang.String str28 = zoneId27.getId();
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.now(zoneId27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime29.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit32 = null;
        boolean boolean33 = zonedDateTime29.isSupported(temporalUnit32);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange35 = zonedDateTime29.range((java.time.temporal.TemporalField) chronoField34);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime37 = java.time.LocalTime.MAX;
        long long38 = chronoField36.getFrom((java.time.temporal.TemporalAccessor) localTime37);
        boolean boolean39 = zonedDateTime29.isSupported((java.time.temporal.TemporalField) chronoField36);
        java.time.ZoneId zoneId40 = java.time.ZoneId.systemDefault();
        java.lang.String str41 = zoneId40.getId();
        java.lang.String str42 = zoneId40.getId();
        java.time.ZonedDateTime zonedDateTime43 = zonedDateTime29.withZoneSameInstant(zoneId40);
        long long44 = chronoField25.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime29);
        java.time.temporal.TemporalUnit temporalUnit45 = chronoField25.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant46 = instant10.minus((long) 10000000, temporalUnit45);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Years");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(chronoPeriod5);
        org.junit.Assert.assertTrue("'" + month6 + "' != '" + java.time.Month.JANUARY + "'", month6.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.JANUARY + "'", month7.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.JANUARY + "'", month8.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str24, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField25.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Etc/UTC" + "'", str28, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField34.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField36.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 23L + "'", long38 == 23L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(zoneId40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Etc/UTC" + "'", str41, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Etc/UTC" + "'", str42, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 8L + "'", long44 == 8L);
        org.junit.Assert.assertTrue("'" + temporalUnit45 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit45.equals(java.time.temporal.ChronoUnit.YEARS));
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        boolean boolean11 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset12);
        java.util.Date date16 = new java.util.Date((long) (byte) 1);
        java.lang.Cloneable cloneable17 = strMapMap0.getOrDefault((java.lang.Object) localDateTime10, (java.lang.Cloneable) date16);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap18 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology19 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean20 = strMapMap18.containsKey((java.lang.Object) isoChronology19);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap21 = java.nio.charset.Charset.availableCharsets();
        boolean boolean22 = strMap21.isEmpty();
        java.util.Locale locale23 = java.util.Locale.US;
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.Cloneable cloneable26 = strMapMap18.put(strMap21, (java.lang.Cloneable) locale24);
        int int27 = strMap21.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap30 = strMap21.subMap("DecimalStyle[0+-.]", "{}");
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray45 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, zoneOffsetTransitionArray45);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray51 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52, zoneOffsetTransitionRuleArray51);
        java.time.zone.ZoneRules zoneRules54 = java.time.zone.ZoneRules.of(zoneOffset43, zoneOffset44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52);
        boolean boolean55 = zoneOffsetTransitionList34.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49);
        zoneOffsetTransitionList34.clear();
        java.lang.Cloneable cloneable57 = strMapMap0.putIfAbsent(strMap21, (java.lang.Cloneable) zoneOffsetTransitionList34);
        boolean boolean58 = zoneOffsetTransitionList34.isEmpty();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(cloneable17);
        org.junit.Assert.assertNotNull(isoChronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Stati Uniti" + "'", str25, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 171 + "'", int27 == 171);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(cloneable57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isSiteLocalAddress();
        boolean boolean2 = inetAddress0.isMCGlobal();
        boolean boolean3 = inetAddress0.isMCGlobal();
        boolean boolean4 = inetAddress0.isLoopbackAddress();
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.wrap(byteArray7, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology11 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean12 = byteBuffer10.equals((java.lang.Object) isoChronology11);
        java.lang.String str13 = isoChronology11.getCalendarType();
        java.time.Clock clock14 = java.time.Clock.systemUTC();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MAX;
        java.time.Clock clock16 = clock14.withZone((java.time.ZoneId) zoneOffset15);
        java.time.LocalDate localDate17 = isoChronology11.dateNow(clock16);
        boolean boolean18 = inetAddress0.equals((java.lang.Object) localDate17);
        boolean boolean19 = inetAddress0.isMCSiteLocal();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(isoChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "iso8601" + "'", str13, "iso8601");
        org.junit.Assert.assertNotNull(clock14);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(clock16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        java.net.NetworkInterface networkInterface3 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics4.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics4.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics4.getGeometricMeanImpl();
        double double9 = descriptiveStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getSkewnessImpl();
        boolean boolean11 = networkInterface3.equals((java.lang.Object) descriptiveStatistics4);
        int int12 = networkInterface3.getMTU();
        java.util.Locale locale15 = new java.util.Locale("DecimalStyle[0+-.]", "Di");
        boolean boolean16 = networkInterface3.equals((java.lang.Object) "DecimalStyle[0+-.]");
        boolean boolean17 = networkInterface3.supportsMulticast();
        java.net.NetworkInterface networkInterface18 = networkInterface3.getParent();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(networkInterface3);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1500 + "'", int12 == 1500);
        org.junit.Assert.assertEquals(locale15.toString(), "decimalstyle[0+-.]_DI");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(networkInterface18);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.lang.String str6 = zonedDateTime5.toString();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.String str10 = chronoField7.getDisplayName(locale8);
        long long11 = zonedDateTime5.getLong((java.time.temporal.TemporalField) chronoField7);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = chronoField7.getDisplayName(locale12);
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale16.getLanguage();
        java.lang.String str21 = chronoField7.getDisplayName(locale16);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T09:14:39.210Z[Etc/UTC]" + "'", str6, "2022-02-21T09:14:39.210Z[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en-GB" + "'", str9, "en-GB");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AlignedWeekOfYear" + "'", str10, "AlignedWeekOfYear");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 8L + "'", long11 == 8L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "italiano" + "'", str14, "italiano");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AlignedWeekOfYear" + "'", str15, "AlignedWeekOfYear");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Stati Uniti" + "'", str18, "Stati Uniti");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AlignedWeekOfYear" + "'", str21, "AlignedWeekOfYear");
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        boolean boolean13 = zoneRules12.isFixedOffset();
        java.time.Instant instant14 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules12.previousTransition(instant14);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = zoneRules12.getTransitionRules();
        java.time.Instant instant17 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition18 = zoneRules12.previousTransition(instant17);
        boolean boolean19 = attribute0.equals((java.lang.Object) zoneOffsetTransition18);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.time.ZoneId zoneId22 = java.time.ZoneId.systemDefault();
        java.lang.String str23 = zoneId22.getId();
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.now(zoneId22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.withYear((int) (short) 1);
        java.time.LocalTime localTime27 = zonedDateTime26.toLocalTime();
        java.util.stream.DoubleStream doubleStream29 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj30 = properties21.getOrDefault((java.lang.Object) zonedDateTime26, (java.lang.Object) doubleStream29);
        java.lang.Object obj33 = properties21.setProperty("P0D", "DIRECT");
        java.util.Set<java.lang.Object> objSet34 = properties21.keySet();
        boolean boolean35 = attribute0.equals((java.lang.Object) properties21);
        java.io.PrintStream printStream37 = new java.io.PrintStream("20220221Z");
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale39 = dateTimeFormatter38.getLocale();
        java.util.Locale locale40 = java.util.Locale.US;
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale40.getDisplayCountry(locale41);
        java.lang.String str43 = locale39.getDisplayVariant(locale40);
        java.lang.Object[] objArray45 = null;
        java.io.PrintStream printStream46 = printStream37.format(locale39, "DecimalStyle[a+-.]", objArray45);
        properties21.list(printStream46);
        java.lang.String str49 = properties21.getProperty("(file:/1970-01-01T18:01:37.00000012 <no signer certificates>)");
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList16);
        org.junit.Assert.assertNull(zoneOffsetTransition18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Etc/UTC" + "'", str23, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(doubleStream29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Stati Uniti" + "'", str42, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter4.close();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.security.CodeSource codeSource8 = null;
        java.security.PermissionCollection permissionCollection9 = null;
        java.security.ProtectionDomain protectionDomain10 = new java.security.ProtectionDomain(codeSource8, permissionCollection9);
        java.lang.ClassLoader classLoader11 = protectionDomain10.getClassLoader();
        java.security.Principal[] principalArray12 = protectionDomain10.getPrincipals();
        java.security.CodeSource codeSource13 = null;
        java.security.PermissionCollection permissionCollection14 = null;
        java.security.ProtectionDomain protectionDomain15 = new java.security.ProtectionDomain(codeSource13, permissionCollection14);
        java.security.PermissionCollection permissionCollection16 = protectionDomain15.getPermissions();
        java.security.CodeSource codeSource17 = null;
        java.security.PermissionCollection permissionCollection18 = null;
        java.security.ProtectionDomain protectionDomain19 = new java.security.ProtectionDomain(codeSource17, permissionCollection18);
        java.security.PermissionCollection permissionCollection20 = protectionDomain19.getPermissions();
        java.security.ProtectionDomain[] protectionDomainArray21 = new java.security.ProtectionDomain[] { protectionDomain10, protectionDomain15, protectionDomain19 };
        java.security.AccessControlContext accessControlContext22 = new java.security.AccessControlContext(protectionDomainArray21);
        java.io.PrintWriter printWriter23 = printWriter6.format("1970-01-01T18:01:37.000000120", (java.lang.Object[]) protectionDomainArray21);
        printWriter6.flush();
        org.junit.Assert.assertEquals(protectionDomain10.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader11);
        org.junit.Assert.assertNotNull(principalArray12);
        org.junit.Assert.assertEquals(protectionDomain15.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(permissionCollection16);
        org.junit.Assert.assertEquals(protectionDomain19.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(permissionCollection20);
        org.junit.Assert.assertNotNull(protectionDomainArray21);
        org.junit.Assert.assertNotNull(printWriter23);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        java.util.OptionalInt optionalInt0 = java.util.OptionalInt.empty();
        org.junit.Assert.assertNotNull(optionalInt0);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.time.Instant instant0 = java.time.Instant.MAX;
        java.time.Instant instant2 = instant0.plusNanos((long) (short) -1);
        java.time.Period period4 = java.time.Period.ofYears((int) '\000');
        java.time.chrono.ChronoPeriod chronoPeriod5 = period4.normalized();
        java.time.Month month6 = java.time.Month.JANUARY;
        java.time.Month month7 = month6.firstMonthOfQuarter();
        java.time.Month month8 = month7.firstMonthOfQuarter();
        boolean boolean9 = period4.equals((java.lang.Object) month7);
        java.time.Instant instant10 = instant2.plus((java.time.temporal.TemporalAmount) period4);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.chrono.Chronology chronology24 = dateTimeFormatter22.getChronology();
        java.time.chrono.IsoChronology isoChronology25 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate30 = isoChronology25.dateYearDay((java.time.chrono.Era) isoEra27, 0, 16);
        java.time.LocalTime localTime31 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime32 = localDate30.atTime(localTime31);
        java.time.LocalDate localDate34 = localDate30.withMonth(1);
        java.time.chrono.ChronoLocalDate chronoLocalDate35 = chronology24.date((java.time.temporal.TemporalAccessor) localDate30);
        java.time.chrono.IsoChronology isoChronology36 = localDate30.getChronology();
        java.time.Duration duration37 = java.time.Duration.ZERO;
        java.time.Duration duration39 = duration37.minusMillis((long) (byte) 0);
        java.time.chrono.IsoChronology isoChronology41 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer43 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj44 = charBuffer43.array();
        boolean boolean45 = isoChronology41.equals(obj44);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap46 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology47 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean48 = strMapMap46.containsKey((java.lang.Object) isoChronology47);
        java.time.chrono.IsoEra isoEra49 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate52 = isoChronology47.dateYearDay((java.time.chrono.Era) isoEra49, (-1), 10);
        int int54 = isoChronology41.prolepticYear((java.time.chrono.Era) isoEra49, 0);
        java.time.Month month55 = java.time.Month.JANUARY;
        java.time.Month month56 = month55.firstMonthOfQuarter();
        java.time.Month month57 = month56.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean59 = month57.isSupported((java.time.temporal.TemporalField) chronoField58);
        boolean boolean60 = isoEra49.isSupported((java.time.temporal.TemporalField) chronoField58);
        java.time.temporal.TemporalUnit temporalUnit61 = chronoField58.getRangeUnit();
        java.time.Duration duration62 = duration37.minus((long) 0, temporalUnit61);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = instant10.until((java.time.temporal.Temporal) localDate30, temporalUnit61);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain Instant from TemporalAccessor: 0001-01-16 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(chronoPeriod5);
        org.junit.Assert.assertTrue("'" + month6 + "' != '" + java.time.Month.JANUARY + "'", month6.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.JANUARY + "'", month7.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.JANUARY + "'", month8.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(isoChronology25);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra27.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronoLocalDate35);
        org.junit.Assert.assertNotNull(isoChronology36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(isoChronology41);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(isoChronology47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + isoEra49 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra49.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + month55 + "' != '" + java.time.Month.JANUARY + "'", month55.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month56 + "' != '" + java.time.Month.JANUARY + "'", month56.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month57 + "' != '" + java.time.Month.JANUARY + "'", month57.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField58.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit61 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit61.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(duration62);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDate localDate27 = localDateTime9.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime28 = java.time.OffsetTime.from((java.time.temporal.TemporalAccessor) localDateTime9);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetTime from TemporalAccessor: 1970-01-01T18:01:37.000000120 of type java.time.LocalDateTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.DoubleStream doubleStream4 = intStream3.asDoubleStream();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate(16);
        int int7 = charBuffer6.limit();
        java.util.stream.IntStream intStream8 = charBuffer6.chars();
        java.util.stream.DoubleStream doubleStream9 = intStream8.asDoubleStream();
        java.util.stream.DoubleStream doubleStream10 = java.util.stream.DoubleStream.concat(doubleStream4, doubleStream9);
        java.util.function.DoubleBinaryOperator doubleBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = doubleStream4.reduce((double) 'a', doubleBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream10);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        longStream2.close();
        java.util.stream.LongStream longStream4 = longStream2.parallel();
        longStream2.close();
        java.util.function.LongToIntFunction longToIntFunction6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream7 = longStream2.mapToInt(longToIntFunction6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("PT0S");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.util.Locale.FilteringMode filteringMode0 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        org.junit.Assert.assertTrue("'" + filteringMode0 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode0.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) 0);
        int int2 = parsePosition1.getIndex();
        parsePosition1.setIndex((int) 'x');
        parsePosition1.setIndex(365);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray10 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, zoneOffsetTransitionArray10);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray16 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17, zoneOffsetTransitionRuleArray16);
        java.time.zone.ZoneRules zoneRules19 = java.time.zone.ZoneRules.of(zoneOffset8, zoneOffset9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17);
        long long20 = localDateTime7.toEpochSecond(zoneOffset8);
        java.time.LocalDateTime localDateTime22 = localDateTime7.plusDays((long) (byte) 1);
        java.time.ZoneId zoneId23 = java.time.ZoneId.systemDefault();
        java.lang.String str24 = zoneId23.getId();
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.now(zoneId23);
        java.time.ZoneId zoneId26 = java.time.ZoneId.systemDefault();
        java.lang.String str27 = zoneId26.getId();
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime25.withZoneSameInstant(zoneId26);
        java.time.ZoneId zoneId29 = java.time.ZoneId.systemDefault();
        java.lang.String str30 = zoneId29.getId();
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.now(zoneId29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.withYear((int) (short) 1);
        boolean boolean34 = zonedDateTime28.equals((java.lang.Object) zonedDateTime33);
        int int35 = zonedDateTime33.getMinute();
        java.time.Duration duration36 = java.time.Duration.between((java.time.temporal.Temporal) localDateTime7, (java.time.temporal.Temporal) zonedDateTime33);
        java.time.LocalTime localTime37 = zonedDateTime33.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime39 = zonedDateTime33.plusYears(1645434874L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1645434875");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62134279201L) + "'", long20 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Etc/UTC" + "'", str24, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 14 + "'", int35 == 14);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(localTime37);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file3 = file2.getAbsoluteFile();
        boolean boolean4 = file3.canRead();
        java.io.File file7 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file8 = file7.getAbsoluteFile();
        boolean boolean9 = file3.renameTo(file7);
        boolean boolean11 = file3.setExecutable(true);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals(file7.getParent(), "/");
        org.junit.Assert.assertEquals(file7.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream1, false, "1970-01-10T18:01:37.000000120+18:00");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 1970-01-10T18:01:37.000000120+18:00");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(0, (float) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: 0must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.lang.String str0 = java.io.File.separator;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "/" + "'", str0, "/");
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate11 = localDate9.withDayOfMonth((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        java.nio.CharBuffer charBuffer4 = charBuffer1.append('.');
        java.lang.String str5 = charBuffer1.toString();
        char char7 = charBuffer1.charAt(0);
        char[] charArray8 = charBuffer1.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer12 = charBuffer1.put("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000", 59, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str5, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), ".\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), ".\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[., \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalDate localDate20 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra14, 120, (int) '-');
        java.util.List<java.time.chrono.Era> eraList21 = isoChronology6.eras();
        java.util.Map<java.time.temporal.TemporalField, java.lang.Long> temporalFieldMap22 = null;
        java.time.format.ResolverStyle resolverStyle23 = java.time.format.ResolverStyle.SMART;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate24 = isoChronology6.resolveDate(temporalFieldMap22, resolverStyle23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(eraList21);
        org.junit.Assert.assertTrue("'" + resolverStyle23 + "' != '" + java.time.format.ResolverStyle.SMART + "'", resolverStyle23.equals(java.time.format.ResolverStyle.SMART));
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        int int0 = java.util.Spliterator.IMMUTABLE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1024 + "'", int0 == 1024);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.time.ZoneId zoneId5 = java.time.ZoneId.systemDefault();
        java.lang.String str6 = zoneId5.getId();
        java.time.ZonedDateTime zonedDateTime7 = java.time.ZonedDateTime.now(zoneId5);
        java.time.ZonedDateTime zonedDateTime9 = zonedDateTime7.withYear((int) (short) 1);
        java.time.LocalTime localTime10 = zonedDateTime9.toLocalTime();
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj13 = properties4.getOrDefault((java.lang.Object) zonedDateTime9, (java.lang.Object) doubleStream12);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter15.println("hi!");
        properties4.list(printWriter15);
        java.lang.Object obj21 = properties4.setProperty("AM/PM", "italiano");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap22 = java.nio.charset.Charset.availableCharsets();
        boolean boolean23 = strMap22.isEmpty();
        java.util.Set<java.lang.String> strSet24 = strMap22.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate25 = java.util.function.Predicate.isEqual((java.lang.Object) strMap22);
        properties4.putAll((java.util.Map<java.lang.String, java.nio.charset.Charset>) strMap22);
        boolean boolean27 = strMapMap0.equals((java.lang.Object) properties4);
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(resolverStylePredicate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 7, (long) 1500);
        org.junit.Assert.assertNotNull(duration2);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        long[] longArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.wrap(longArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        java.util.OptionalInt optionalInt2 = intStream1.max();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream3 = intStream1.asDoubleStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.time.format.DecimalStyle decimalStyle1 = java.time.format.DecimalStyle.of(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(decimalStyle1);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime1 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray4 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList5 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, zoneOffsetTransitionArray4);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray7 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList8 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, zoneOffsetTransitionArray7);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray10 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11, zoneOffsetTransitionRuleArray10);
        java.time.zone.ZoneRules zoneRules13 = java.time.zone.ZoneRules.of(zoneOffset2, zoneOffset3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11);
        java.time.OffsetTime offsetTime14 = localTime1.atOffset(zoneOffset2);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange16 = offsetTime14.range((java.time.temporal.TemporalField) chronoField15);
        java.time.OffsetTime offsetTime18 = chronoField0.adjustInto(offsetTime14, (long) 16);
        java.time.OffsetTime offsetTime20 = offsetTime18.withSecond(3);
        java.time.chrono.IsoChronology isoChronology22 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra24 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate27 = isoChronology22.dateYearDay((java.time.chrono.Era) isoEra24, 0, 16);
        java.time.LocalTime localTime28 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime29 = localDate27.atTime(localTime28);
        java.time.LocalDate localDate31 = localDate27.withMonth(1);
        long long32 = localDate31.toEpochDay();
        java.time.chrono.IsoChronology isoChronology33 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate38 = isoChronology33.dateYearDay((java.time.chrono.Era) isoEra35, 0, 16);
        java.time.LocalTime localTime39 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime40 = localDate38.atTime(localTime39);
        java.time.LocalDate localDate42 = localDate38.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod43 = localDate31.until((java.time.chrono.ChronoLocalDate) localDate42);
        java.time.LocalDate localDate45 = localDate31.plusDays((long) (short) 0);
        java.time.LocalDate localDate47 = localDate45.minusDays((long) 9);
        java.time.LocalDate localDate49 = java.time.LocalDate.MIN;
        java.time.ZoneId zoneId50 = java.time.ZoneId.systemDefault();
        java.lang.String str51 = zoneId50.getId();
        java.time.ZonedDateTime zonedDateTime52 = java.time.ZonedDateTime.now(zoneId50);
        java.time.ZoneId zoneId53 = java.time.ZoneId.systemDefault();
        java.lang.String str54 = zoneId53.getId();
        java.time.ZonedDateTime zonedDateTime55 = zonedDateTime52.withZoneSameInstant(zoneId53);
        java.time.ZoneId zoneId56 = java.time.ZoneId.systemDefault();
        java.lang.String str57 = zoneId56.getId();
        java.time.ZonedDateTime zonedDateTime58 = java.time.ZonedDateTime.now(zoneId56);
        java.time.ZonedDateTime zonedDateTime60 = zonedDateTime58.withYear((int) (short) 1);
        boolean boolean61 = zonedDateTime55.equals((java.lang.Object) zonedDateTime60);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime55.minusMonths((long) (byte) -1);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        long long66 = localDate49.until((java.time.temporal.Temporal) zonedDateTime63, temporalUnit65);
        java.time.chrono.ChronoLocalDate chronoLocalDate67 = localDate45.minus(1645434851L, temporalUnit65);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime68 = offsetTime20.minus(7187392471159151072L, temporalUnit65);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Days");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField15.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange16);
        org.junit.Assert.assertNotNull(offsetTime18);
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(isoChronology22);
        org.junit.Assert.assertTrue("'" + isoEra24 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra24.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-719147L) + "'", long32 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology33);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra35.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronoPeriod43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(zoneId50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Etc/UTC" + "'", str51, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(zoneId53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Etc/UTC" + "'", str54, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(zoneId56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Etc/UTC" + "'", str57, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField64.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 365243238234L + "'", long66 == 365243238234L);
        org.junit.Assert.assertNotNull(chronoLocalDate67);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        java.util.Date date6 = new java.util.Date(3, 2022, 18, 37, 171, 59);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Jul 19 15:51:59 UTC 2071");
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.minus(duration17);
        java.time.OffsetTime offsetTime22 = offsetTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray29 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, zoneOffsetTransitionArray29);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray32 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33, zoneOffsetTransitionRuleArray32);
        java.time.zone.ZoneRules zoneRules35 = java.time.zone.ZoneRules.of(zoneOffset24, zoneOffset25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33);
        java.time.OffsetTime offsetTime36 = localTime23.atOffset(zoneOffset24);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange38 = offsetTime36.range((java.time.temporal.TemporalField) chronoField37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal41 = null;
        java.time.temporal.Temporal temporal42 = duration40.subtractFrom(temporal41);
        long long43 = duration40.toDays();
        java.time.Duration duration44 = duration39.minus(duration40);
        java.time.OffsetTime offsetTime45 = offsetTime36.minus((java.time.temporal.TemporalAmount) duration40);
        boolean boolean46 = offsetTime22.isAfter(offsetTime36);
        java.time.LocalTime localTime47 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray50 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, zoneOffsetTransitionArray50);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray53 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList54 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, zoneOffsetTransitionArray53);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray56 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList57 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList57, zoneOffsetTransitionRuleArray56);
        java.time.zone.ZoneRules zoneRules59 = java.time.zone.ZoneRules.of(zoneOffset48, zoneOffset49, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList57);
        java.time.OffsetTime offsetTime60 = localTime47.atOffset(zoneOffset48);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange62 = offsetTime60.range((java.time.temporal.TemporalField) chronoField61);
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean64 = offsetTime60.isSupported((java.time.temporal.TemporalField) chronoField63);
        boolean boolean65 = offsetTime22.isAfter(offsetTime60);
        java.time.ZoneId zoneId66 = java.time.ZoneId.systemDefault();
        java.lang.String str67 = zoneId66.getId();
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.now(zoneId66);
        java.time.ZonedDateTime zonedDateTime70 = zonedDateTime68.withYear((int) (short) 1);
        java.time.LocalTime localTime71 = zonedDateTime70.toLocalTime();
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.MAX;
        java.lang.String str75 = zoneOffset74.getId();
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset74);
        java.time.OffsetTime offsetTime77 = java.time.OffsetTime.of(localTime71, zoneOffset74);
        boolean boolean78 = offsetTime60.isAfter(offsetTime77);
        java.time.OffsetTime offsetTime80 = offsetTime60.plusHours((long) 70);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNull(temporal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneRules59);
        org.junit.Assert.assertNotNull(offsetTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField61.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField63.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneId66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Etc/UTC" + "'", str67, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zonedDateTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+18:00" + "'", str75, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(offsetTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(offsetTime80);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant92 = offsetDateTime91.toInstant();
        java.nio.CharBuffer charBuffer94 = java.nio.CharBuffer.allocate(16);
        int int95 = charBuffer94.limit();
        java.util.stream.IntStream intStream96 = charBuffer94.chars();
        boolean boolean97 = offsetDateTime91.equals((java.lang.Object) intStream96);
        java.util.IntSummaryStatistics intSummaryStatistics98 = intStream96.summaryStatistics();
        long long99 = intSummaryStatistics98.getSum();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(charBuffer94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 16 + "'", int95 == 16);
        org.junit.Assert.assertNotNull(intStream96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(intSummaryStatistics98);
        org.junit.Assert.assertEquals(intSummaryStatistics98.toString(), "IntSummaryStatistics{count=16, sum=0, min=0, average=0.000000, max=0}");
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator0 = java.util.function.UnaryOperator.identity();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray1 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList2 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList2, zoneOffsetTransitionArray1);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream4 = zoneOffsetTransitionList2.stream();
        java.io.Serializable serializable5 = serializableUnaryOperator0.apply((java.io.Serializable) zoneOffsetTransitionList2);
        java.io.Serializable serializable7 = serializableUnaryOperator0.apply((java.io.Serializable) 100L);
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator8 = java.util.function.UnaryOperator.identity();
        java.util.function.Function<java.lang.SecurityException, java.io.Serializable> securityExceptionFunction9 = serializableUnaryOperator0.compose((java.util.function.Function<java.io.Serializable, java.io.Serializable>) serializableUnaryOperator8);
        java.net.URISyntaxException uRISyntaxException12 = new java.net.URISyntaxException("italiano", "");
        java.lang.String str13 = uRISyntaxException12.getReason();
        java.net.URISyntaxException uRISyntaxException16 = new java.net.URISyntaxException("italiano", "");
        uRISyntaxException12.addSuppressed((java.lang.Throwable) uRISyntaxException16);
        java.io.Serializable serializable18 = serializableUnaryOperator8.apply((java.io.Serializable) uRISyntaxException12);
        int int19 = uRISyntaxException12.getIndex();
        int int20 = uRISyntaxException12.getIndex();
        org.junit.Assert.assertNotNull(serializableUnaryOperator0);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + 100L + "'", serializable7, 100L);
        org.junit.Assert.assertNotNull(serializableUnaryOperator8);
        org.junit.Assert.assertNotNull(securityExceptionFunction9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(serializable18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.util.stream.LongStream.Builder builder0 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream.Builder builder2 = builder0.add((long) '#');
        builder0.accept(15032385535000L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.security.KeyException keyException1 = new java.security.KeyException("DIRECT");
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        boolean boolean3 = charBuffer1.isReadOnly();
        java.nio.CharBuffer charBuffer5 = charBuffer1.put('x');
        java.lang.CharSequence charSequence6 = null;
        java.nio.CharBuffer charBuffer7 = charBuffer1.append(charSequence6);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.wrap((java.lang.CharSequence) charBuffer7);
        java.nio.CharBuffer charBuffer9 = charBuffer8.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer10 = charBuffer8.compact();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.lang.String str3 = charBuffer1.toString();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer5 = charBuffer1.slice();
        java.nio.CharBuffer charBuffer7 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj8 = charBuffer7.array();
        java.nio.CharBuffer charBuffer10 = charBuffer7.append('.');
        java.lang.String str11 = charBuffer7.toString();
        char char13 = charBuffer7.charAt(0);
        int int14 = charBuffer5.read(charBuffer7);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer15 = charBuffer5.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str3, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str11, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + '\000' + "'", char13 == '\000');
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isSiteLocalAddress();
        boolean boolean2 = inetAddress0.isMCGlobal();
        java.time.chrono.IsoChronology isoChronology3 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra5 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate8 = isoChronology3.dateYearDay((java.time.chrono.Era) isoEra5, 0, 16);
        java.time.LocalTime localTime9 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime10 = localDate8.atTime(localTime9);
        java.time.LocalDate localDate12 = localDate8.withMonth(1);
        java.time.Duration duration13 = java.time.Duration.ZERO;
        java.time.Duration duration14 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal15 = null;
        java.time.temporal.Temporal temporal16 = duration14.subtractFrom(temporal15);
        long long17 = duration14.toDays();
        java.time.Duration duration18 = duration13.plus(duration14);
        java.time.LocalDate localDate19 = localDate12.minus((java.time.temporal.TemporalAmount) duration13);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        java.time.LocalTime localTime25 = localDateTime24.toLocalTime();
        java.time.temporal.Temporal temporal26 = localDate19.adjustInto((java.time.temporal.Temporal) localDateTime24);
        java.time.LocalDate localDate28 = localDate19.plusWeeks((long) (short) 10);
        java.time.Month month29 = localDate19.getMonth();
        boolean boolean30 = inetAddress0.equals((java.lang.Object) month29);
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + isoEra5 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra5.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNull(temporal16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(temporal26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + month29 + "' != '" + java.time.Month.JANUARY + "'", month29.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        java.util.Hashtable<java.nio.file.AccessMode, java.util.Date> accessModeMap0 = new java.util.Hashtable<java.nio.file.AccessMode, java.util.Date>();
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isSiteLocalAddress();
        boolean boolean2 = inetAddress0.isMCGlobal();
        boolean boolean3 = inetAddress0.isMCGlobal();
        boolean boolean4 = inetAddress0.isLoopbackAddress();
        boolean boolean5 = inetAddress0.isMCSiteLocal();
        boolean boolean6 = inetAddress0.isMCGlobal();
        byte[] byteArray7 = inetAddress0.getAddress();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.wrap(byteArray7, 70, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, 17, 0, 2]");
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        java.lang.String str1 = java.net.URLConnection.getDefaultRequestProperty("");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate5 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset4);
        java.time.Month month7 = java.time.Month.JANUARY;
        java.time.Month month8 = month7.firstMonthOfQuarter();
        java.time.Month month9 = month8.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery10 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period11 = month8.query(periodTemporalQuery10);
        java.time.Period period12 = zoneOffset4.query(periodTemporalQuery10);
        java.time.Period period13 = localDateTime0.query(periodTemporalQuery10);
        java.time.Instant instant16 = java.time.Instant.ofEpochSecond((long) '4', (long) ' ');
        java.time.ZoneId zoneId17 = java.time.ZoneId.systemDefault();
        java.lang.String str18 = zoneId17.getId();
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.now(zoneId17);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit22 = null;
        boolean boolean23 = zonedDateTime19.isSupported(temporalUnit22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange25 = zonedDateTime19.range((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime27 = java.time.LocalTime.MAX;
        long long28 = chronoField26.getFrom((java.time.temporal.TemporalAccessor) localTime27);
        boolean boolean29 = zonedDateTime19.isSupported((java.time.temporal.TemporalField) chronoField26);
        java.time.ZoneId zoneId30 = java.time.ZoneId.systemDefault();
        java.lang.String str31 = zoneId30.getId();
        java.lang.String str32 = zoneId30.getId();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime19.withZoneSameInstant(zoneId30);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofInstant(instant16, zoneId30);
        java.time.ZonedDateTime zonedDateTime35 = localDateTime0.atZone(zoneId30);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.JANUARY + "'", month7.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.JANUARY + "'", month8.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month9 + "' != '" + java.time.Month.JANUARY + "'", month9.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Etc/UTC" + "'", str18, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField24.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 23L + "'", long28 == 23L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Etc/UTC" + "'", str32, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        double double1 = longSummaryStatistics0.getAverage();
        java.lang.String str2 = longSummaryStatistics0.toString();
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}" + "'", str2, "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        java.util.stream.Stream<java.lang.Double> doubleStream2 = doubleStream1.boxed();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream3 = doubleStream1.sorted();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.LocalDate localDate18 = localDate9.minusWeeks((long) 100);
        java.time.chrono.Era era19 = localDate9.getEra();
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        java.time.format.DateTimeFormatter dateTimeFormatter21 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale22 = dateTimeFormatter21.getLocale();
        java.lang.String str23 = chronoField20.getDisplayName(locale22);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = localDate9.getLong((java.time.temporal.TemporalField) chronoField20);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AmPmOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + era19 + "' != '" + java.time.chrono.IsoEra.CE + "'", era19.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AM/PM" + "'", str23, "AM/PM");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.lang.String[] strArray15 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        boolean boolean42 = zoneOffsetTransitionList21.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36);
        zoneOffsetTransitionList21.clear();
        boolean boolean44 = strSet16.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21);
        boolean boolean45 = fileTime1.equals((java.lang.Object) zoneOffsetTransitionList21);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator46 = zoneOffsetTransitionList21.spliterator();
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator47 = zoneOffsetTransitionList21.spliterator();
        boolean boolean48 = zoneOffsetTransitionList21.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.time.zone.ZoneOffsetTransition zoneOffsetTransition50 = zoneOffsetTransitionList21.remove((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 117, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator46);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator0 = java.util.function.UnaryOperator.identity();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray1 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList2 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList2, zoneOffsetTransitionArray1);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream4 = zoneOffsetTransitionList2.stream();
        java.io.Serializable serializable5 = serializableUnaryOperator0.apply((java.io.Serializable) zoneOffsetTransitionList2);
        java.io.Serializable serializable7 = serializableUnaryOperator0.apply((java.io.Serializable) 100L);
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator8 = java.util.function.UnaryOperator.identity();
        java.util.function.Function<java.lang.SecurityException, java.io.Serializable> securityExceptionFunction9 = serializableUnaryOperator0.compose((java.util.function.Function<java.io.Serializable, java.io.Serializable>) serializableUnaryOperator8);
        java.net.URISyntaxException uRISyntaxException12 = new java.net.URISyntaxException("italiano", "");
        java.lang.String str13 = uRISyntaxException12.getReason();
        java.net.URISyntaxException uRISyntaxException16 = new java.net.URISyntaxException("italiano", "");
        uRISyntaxException12.addSuppressed((java.lang.Throwable) uRISyntaxException16);
        java.io.Serializable serializable18 = serializableUnaryOperator8.apply((java.io.Serializable) uRISyntaxException12);
        int int19 = uRISyntaxException12.getIndex();
        java.security.GeneralSecurityException generalSecurityException20 = new java.security.GeneralSecurityException((java.lang.Throwable) uRISyntaxException12);
        org.junit.Assert.assertNotNull(serializableUnaryOperator0);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + 100L + "'", serializable7, 100L);
        org.junit.Assert.assertNotNull(serializableUnaryOperator8);
        org.junit.Assert.assertNotNull(securityExceptionFunction9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(serializable18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.lang.Object obj13 = properties1.setProperty("P0D", "DIRECT");
        java.lang.String str15 = properties1.getProperty("zho");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.nio.file.Path path25 = path18.relativize(path24);
        boolean boolean26 = path11.startsWith(path18);
        java.io.File file29 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long30 = file29.lastModified();
        java.net.URL uRL31 = file29.toURL();
        java.nio.file.Path path32 = file29.toPath();
        java.io.File file35 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long36 = file35.lastModified();
        java.net.URL uRL37 = file35.toURL();
        java.nio.file.Path path38 = file35.toPath();
        java.nio.file.Path path39 = path32.relativize(path38);
        java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer43 = charBuffer41.append((java.lang.CharSequence) "Etc/UTC");
        int int44 = charBuffer43.arrayOffset();
        boolean boolean45 = path38.equals((java.lang.Object) int44);
        java.nio.file.Path path46 = path18.relativize(path38);
        java.nio.file.Path path48 = path18.resolve("{}");
        java.nio.file.WatchService watchService49 = null;
        java.nio.file.WatchEvent.Kind[] kindArray51 = new java.nio.file.WatchEvent.Kind[0];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray52 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray51;
        java.nio.file.WatchEvent.Modifier modifier53 = null;
        java.nio.file.WatchEvent.Modifier[] modifierArray54 = new java.nio.file.WatchEvent.Modifier[] { modifier53 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey55 = path18.register(watchService49, (java.nio.file.WatchEvent.Kind<?>[]) kindArray51, modifierArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals(file29.getParent(), "/");
        org.junit.Assert.assertEquals(file29.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(uRL31);
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertEquals(file35.getParent(), "/");
        org.junit.Assert.assertEquals(file35.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(uRL37);
        org.junit.Assert.assertEquals(uRL37.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path38);
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(path46);
        org.junit.Assert.assertNotNull(path48);
        org.junit.Assert.assertNotNull(kindArray51);
        org.junit.Assert.assertNotNull(wildcardKindArray52);
        org.junit.Assert.assertNotNull(modifierArray54);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        boolean boolean12 = period11.isNegative();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        resizableDoubleArray0.setElement(0, (double) 1645434863000L);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        int int92 = offsetDateTime88.getDayOfMonth();
        long long93 = offsetDateTime88.toEpochSecond();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 97L + "'", long93 == 97L);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.LocalTime localTime5 = localDateTime4.toLocalTime();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period8 = localDateTime4.query(periodTemporalQuery7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        longStream2.close();
        java.util.stream.LongStream longStream4 = longStream2.parallel();
        java.util.stream.LongStream longStream5 = longStream2.sequential();
        java.nio.CharBuffer charBuffer7 = java.nio.CharBuffer.allocate(16);
        int int8 = charBuffer7.limit();
        java.util.stream.IntStream intStream9 = charBuffer7.chars();
        java.util.LongSummaryStatistics longSummaryStatistics10 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream13 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics14 = longStream13.summaryStatistics();
        java.util.function.IntConsumer intConsumer15 = longSummaryStatistics10.andThen((java.util.function.IntConsumer) longSummaryStatistics14);
        java.util.stream.IntStream intStream16 = intStream9.peek((java.util.function.IntConsumer) longSummaryStatistics10);
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.allocate(16);
        int int19 = charBuffer18.limit();
        java.util.stream.IntStream intStream20 = charBuffer18.chars();
        java.util.LongSummaryStatistics longSummaryStatistics21 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream24 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics25 = longStream24.summaryStatistics();
        java.util.function.IntConsumer intConsumer26 = longSummaryStatistics21.andThen((java.util.function.IntConsumer) longSummaryStatistics25);
        java.util.stream.IntStream intStream27 = intStream20.peek((java.util.function.IntConsumer) longSummaryStatistics21);
        longSummaryStatistics10.combine(longSummaryStatistics21);
        java.util.LongSummaryStatistics longSummaryStatistics29 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream32 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics33 = longStream32.summaryStatistics();
        java.util.function.IntConsumer intConsumer34 = longSummaryStatistics29.andThen((java.util.function.IntConsumer) longSummaryStatistics33);
        java.util.function.IntConsumer intConsumer35 = longSummaryStatistics10.andThen((java.util.function.IntConsumer) longSummaryStatistics29);
        // The following exception was thrown during execution in test generation
        try {
            longStream5.forEach((java.util.function.LongConsumer) longSummaryStatistics10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertEquals(longSummaryStatistics10.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(longSummaryStatistics14);
        org.junit.Assert.assertEquals(longSummaryStatistics14.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer15);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertEquals(longSummaryStatistics21.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream24);
        org.junit.Assert.assertNotNull(longSummaryStatistics25);
        org.junit.Assert.assertEquals(longSummaryStatistics25.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer26);
        org.junit.Assert.assertNotNull(intStream27);
        org.junit.Assert.assertEquals(longSummaryStatistics29.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream32);
        org.junit.Assert.assertNotNull(longSummaryStatistics33);
        org.junit.Assert.assertEquals(longSummaryStatistics33.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer34);
        org.junit.Assert.assertNotNull(intConsumer35);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, 0, 16);
        java.time.LocalTime localTime7 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime8 = localDate6.atTime(localTime7);
        java.time.LocalDate localDate10 = localDate6.withMonth(1);
        long long11 = localDate10.toEpochDay();
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalTime localTime18 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime19 = localDate17.atTime(localTime18);
        java.time.LocalDate localDate21 = localDate17.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod22 = localDate10.until((java.time.chrono.ChronoLocalDate) localDate21);
        java.time.LocalDate localDate24 = localDate10.plusDays((long) (short) 0);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.MAX;
        java.lang.String str29 = zoneOffset28.getId();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset28);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.lang.String str34 = zoneOffset33.getId();
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset33);
        boolean boolean36 = localDateTime30.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.format.DateTimeFormatter dateTimeFormatter37 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str38 = localDateTime35.format(dateTimeFormatter37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int40 = localDateTime35.get((java.time.temporal.TemporalField) chronoField39);
        java.time.ZoneId zoneId41 = java.time.ZoneId.systemDefault();
        java.lang.String str42 = zoneId41.getId();
        java.time.ZonedDateTime zonedDateTime43 = java.time.ZonedDateTime.now(zoneId41);
        java.time.ZonedDateTime zonedDateTime45 = zonedDateTime43.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit46 = null;
        boolean boolean47 = zonedDateTime43.isSupported(temporalUnit46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange49 = zonedDateTime43.range((java.time.temporal.TemporalField) chronoField48);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime51 = java.time.LocalTime.MAX;
        long long52 = chronoField50.getFrom((java.time.temporal.TemporalAccessor) localTime51);
        boolean boolean53 = zonedDateTime43.isSupported((java.time.temporal.TemporalField) chronoField50);
        java.time.ZoneId zoneId54 = java.time.ZoneId.systemDefault();
        java.lang.String str55 = zoneId54.getId();
        java.lang.String str56 = zoneId54.getId();
        java.time.ZonedDateTime zonedDateTime57 = zonedDateTime43.withZoneSameInstant(zoneId54);
        long long58 = chronoField39.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime43);
        java.time.temporal.TemporalUnit temporalUnit59 = chronoField39.getRangeUnit();
        java.time.LocalDate localDate60 = localDate24.plus((long) 1969, temporalUnit59);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration61 = java.time.Duration.of((long) 365, temporalUnit59);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit must not have an estimated duration");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-719147L) + "'", long11 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronoPeriod22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+18:00" + "'", str29, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+18:00" + "'", str34, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str38, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField39.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(zoneId41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Etc/UTC" + "'", str42, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField48.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField50.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 23L + "'", long52 == 23L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(zoneId54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Etc/UTC" + "'", str55, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Etc/UTC" + "'", str56, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 8L + "'", long58 == 8L);
        org.junit.Assert.assertTrue("'" + temporalUnit59 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit59.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("x-windows-iso2022jp", (double) 9L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=9.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("/Tuesday", "1.0.0.100");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 1.0.0.100");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.of("1970-01-01T18:01:37.000000120");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unknown chronology: 1970-01-01T18:01:37.000000120");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress6 = java.net.InetAddress.getByAddress(byteArray5);
        java.net.InetAddress inetAddress7 = java.net.InetAddress.getByAddress("1970-01-01", byteArray5);
        boolean boolean8 = inetAddress7.isMCGlobal();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress6);
        org.junit.Assert.assertNotNull(inetAddress7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime3 = java.time.LocalTime.of(14, 1024, 365);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 1024");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.Spliterator<java.lang.Long> longSpliterator1 = longStream0.spliterator();
        boolean boolean3 = longSpliterator1.hasCharacteristics(0);
        int int4 = longSpliterator1.characteristics();
        int int5 = longSpliterator1.characteristics();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longSpliterator1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16448 + "'", int4 == 16448);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16448 + "'", int5 == 16448);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("", "AlignedWeekOfYear", 1969, "BIG_ENDIAN");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: ");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.MAX;
        java.lang.String str5 = zoneOffset4.getId();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.lang.String str10 = zoneOffset9.getId();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        boolean boolean17 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        boolean boolean18 = localDateTime6.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray22 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList23 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, zoneOffsetTransitionArray22);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray25 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, zoneOffsetTransitionArray25);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray28 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList29 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList29, zoneOffsetTransitionRuleArray28);
        java.time.zone.ZoneRules zoneRules31 = java.time.zone.ZoneRules.of(zoneOffset20, zoneOffset21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList29);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray34 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, zoneOffsetTransitionArray34);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray40 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList41, zoneOffsetTransitionRuleArray40);
        java.time.zone.ZoneRules zoneRules43 = java.time.zone.ZoneRules.of(zoneOffset32, zoneOffset33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList41);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray46 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList47 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, zoneOffsetTransitionArray46);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray49 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList50 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, zoneOffsetTransitionArray49);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray52 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList53 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList53, zoneOffsetTransitionRuleArray52);
        java.time.zone.ZoneRules zoneRules55 = java.time.zone.ZoneRules.of(zoneOffset44, zoneOffset45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList47, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList53);
        boolean boolean56 = zoneOffsetTransitionList35.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray59 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList60 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, zoneOffsetTransitionArray59);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray62 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList63 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, zoneOffsetTransitionArray62);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray65 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList66 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66, zoneOffsetTransitionRuleArray65);
        java.time.zone.ZoneRules zoneRules68 = java.time.zone.ZoneRules.of(zoneOffset57, zoneOffset58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66);
        int int70 = zoneOffsetTransitionList63.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray73 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList74 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList74, zoneOffsetTransitionArray73);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray76 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList77 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList77, zoneOffsetTransitionArray76);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray79 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList80 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList80, zoneOffsetTransitionRuleArray79);
        java.time.zone.ZoneRules zoneRules82 = java.time.zone.ZoneRules.of(zoneOffset71, zoneOffset72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList74, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList77, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList80);
        java.time.zone.ZoneRules zoneRules83 = java.time.zone.ZoneRules.of(zoneOffset19, zoneOffset20, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList50, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList80);
        java.time.ZoneOffset zoneOffset86 = java.time.ZoneOffset.MAX;
        java.lang.String str87 = zoneOffset86.getId();
        java.time.LocalDateTime localDateTime88 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset86);
        int int89 = zoneOffset20.compareTo(zoneOffset86);
        java.time.OffsetDateTime offsetDateTime90 = java.time.OffsetDateTime.of(localDateTime11, zoneOffset20);
        java.time.LocalTime localTime91 = offsetDateTime90.toLocalTime();
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime90.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime93.plusWeeks((long) (short) 10);
        boolean boolean96 = properties1.contains((java.lang.Object) offsetDateTime93);
        java.lang.String str98 = properties1.getProperty("1970-001");
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+18:00" + "'", str5, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+18:00" + "'", str10, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneRules55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(zoneRules68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(zoneRules82);
        org.junit.Assert.assertNotNull(zoneRules83);
        org.junit.Assert.assertNotNull(zoneOffset86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+18:00" + "'", str87, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime90);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.Instant instant12 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray15 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList16 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, zoneOffsetTransitionArray15);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray18 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, zoneOffsetTransitionArray18);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray21 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22, zoneOffsetTransitionRuleArray21);
        java.time.zone.ZoneRules zoneRules24 = java.time.zone.ZoneRules.of(zoneOffset13, zoneOffset14, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22);
        boolean boolean25 = zoneRules24.isFixedOffset();
        java.time.Instant instant26 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition27 = zoneRules24.previousTransition(instant26);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList28 = zoneRules24.getTransitionRules();
        java.time.Instant instant29 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition30 = zoneRules24.previousTransition(instant29);
        java.time.Instant instant31 = java.time.Instant.MAX;
        java.time.Instant instant33 = instant31.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset34 = zoneRules24.getOffset(instant33);
        java.time.OffsetDateTime offsetDateTime35 = java.time.OffsetDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset34);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery36 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period37 = offsetDateTime35.query(periodTemporalQuery36);
        java.time.chrono.Chronology chronology38 = period37.getChronology();
        java.time.Period period39 = period11.plus((java.time.temporal.TemporalAmount) period37);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition27);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList28);
        org.junit.Assert.assertNull(zoneOffsetTransition30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(periodTemporalQuery36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.stream.LongStream longStream3 = longStream2.unordered();
        longStream2.close();
        boolean boolean5 = longStream2.isParallel();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.wrap(byteArray8, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean13 = byteBuffer11.equals((java.lang.Object) isoChronology12);
        boolean boolean14 = byteBuffer11.hasArray();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.wrap(byteArray17, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer11.put(byteBuffer20);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress27 = java.net.InetAddress.getByAddress(byteArray26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer21.put(byteArray26, (int) '\000', 0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer33 = byteBuffer5.get(byteArray26, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress27);
        org.junit.Assert.assertNotNull(byteBuffer30);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("1.0.0.100");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate7 = isoChronology2.dateYearDay((java.time.chrono.Era) isoEra4, 0, 16);
        java.time.LocalTime localTime8 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime9 = localDate7.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate7.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod12 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate7);
        java.time.LocalDate localDate14 = localDate1.withMonth(10);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.from((java.time.temporal.TemporalAccessor) localDate14);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: 1970-10-11 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra4.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField0.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray10 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, zoneOffsetTransitionArray10);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray16 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17, zoneOffsetTransitionRuleArray16);
        java.time.zone.ZoneRules zoneRules19 = java.time.zone.ZoneRules.of(zoneOffset8, zoneOffset9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17);
        long long20 = localDateTime7.toEpochSecond(zoneOffset8);
        java.time.LocalDateTime localDateTime22 = localDateTime7.plusDays((long) (byte) 1);
        java.time.ZoneId zoneId23 = java.time.ZoneId.systemDefault();
        java.lang.String str24 = zoneId23.getId();
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.now(zoneId23);
        java.time.ZoneId zoneId26 = java.time.ZoneId.systemDefault();
        java.lang.String str27 = zoneId26.getId();
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime25.withZoneSameInstant(zoneId26);
        java.time.ZoneId zoneId29 = java.time.ZoneId.systemDefault();
        java.lang.String str30 = zoneId29.getId();
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.now(zoneId29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.withYear((int) (short) 1);
        boolean boolean34 = zonedDateTime28.equals((java.lang.Object) zonedDateTime33);
        int int35 = zonedDateTime33.getMinute();
        java.time.Duration duration36 = java.time.Duration.between((java.time.temporal.Temporal) localDateTime7, (java.time.temporal.Temporal) zonedDateTime33);
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime33.plusSeconds(1645434863000L);
        java.time.ZoneId zoneId39 = java.time.ZoneId.systemDefault();
        java.lang.String str40 = zoneId39.getId();
        java.time.ZonedDateTime zonedDateTime41 = java.time.ZonedDateTime.now(zoneId39);
        java.time.ZoneId zoneId42 = java.time.ZoneId.systemDefault();
        java.lang.String str43 = zoneId42.getId();
        java.time.ZonedDateTime zonedDateTime44 = zonedDateTime41.withZoneSameInstant(zoneId42);
        java.time.ZoneId zoneId45 = java.time.ZoneId.systemDefault();
        java.lang.String str46 = zoneId45.getId();
        java.time.ZonedDateTime zonedDateTime47 = java.time.ZonedDateTime.now(zoneId45);
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime47.withYear((int) (short) 1);
        boolean boolean50 = zonedDateTime44.equals((java.lang.Object) zonedDateTime49);
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime44.minusMinutes((long) (short) 0);
        java.time.ZonedDateTime zonedDateTime54 = zonedDateTime44.plusYears(28L);
        boolean boolean55 = zonedDateTime38.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime44);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62134279201L) + "'", long20 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Etc/UTC" + "'", str24, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 14 + "'", int35 == 14);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(zoneId39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertNotNull(zoneId42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Etc/UTC" + "'", str43, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zoneId45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Etc/UTC" + "'", str46, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.HOURS;
        long long2 = timeUnit0.toDays((long) (short) -1);
        long long4 = timeUnit0.toNanos(0L);
        org.junit.Assert.assertNotNull(timeUnit0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.ChronoLocalDate chronoLocalDate12 = isoChronology6.dateNow();
        java.time.ZoneId zoneId13 = java.time.ZoneId.systemDefault();
        java.lang.String str14 = zoneId13.getId();
        java.lang.String str15 = zoneId13.getId();
        java.time.LocalDate localDate16 = isoChronology6.dateNow(zoneId13);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate18 = localDate16.withDayOfMonth(171);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 171");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoLocalDate12);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Etc/UTC" + "'", str15, "Etc/UTC");
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.time.ZoneId zoneId1 = java.time.ZoneId.systemDefault();
        java.lang.String str2 = zoneId1.getId();
        java.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZone(zoneId1);
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate(16);
        int int6 = charBuffer5.limit();
        java.time.temporal.TemporalQuery[] temporalQueryArray8 = new java.time.temporal.TemporalQuery[0];
        @SuppressWarnings("unchecked")
        java.time.temporal.TemporalQuery<?>[] wildcardTemporalQueryArray9 = (java.time.temporal.TemporalQuery<?>[]) temporalQueryArray8;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor10 = dateTimeFormatter0.parseBest((java.lang.CharSequence) charBuffer5, wildcardTemporalQueryArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: At least two queries must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(temporalQueryArray8);
        org.junit.Assert.assertNotNull(wildcardTemporalQueryArray9);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.isReadOnly();
        java.nio.CharBuffer charBuffer10 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj11 = charBuffer10.array();
        java.nio.ByteOrder byteOrder12 = charBuffer10.order();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.order(byteOrder12);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.slice();
        byte[] byteArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer16 = byteBuffer14.put(byteArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteOrder12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (byte) 1);
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.of((int) (byte) 1);
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.concat(intStream1, intStream3);
        java.util.function.IntPredicate intPredicate5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = intStream1.allMatch(intPredicate5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI3 = new java.net.URI("DecimalStyle[0+-.]", "Stati Uniti", "/1970-01-01T18:01:37.00000012");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Illegal character in scheme name at index 12: DecimalStyle[0+-.]:Stati%20Uniti#/1970-01-01T18:01:37.00000012");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer2 = charBuffer1.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.util.Iterator<java.nio.file.Path> pathItor13 = path5.iterator();
        java.util.Spliterator<java.nio.file.Path> pathSpliterator14 = path5.spliterator();
        java.io.File file17 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long18 = file17.lastModified();
        java.net.URL uRL19 = file17.toURL();
        java.nio.file.Path path20 = file17.toPath();
        java.io.File file23 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long24 = file23.lastModified();
        java.net.URL uRL25 = file23.toURL();
        java.nio.file.Path path26 = file23.toPath();
        java.nio.file.Path path27 = path20.relativize(path26);
        java.util.Iterator<java.nio.file.Path> pathItor28 = path20.iterator();
        java.nio.file.Path path29 = path20.normalize();
        java.nio.file.Path path30 = path20.normalize();
        java.nio.file.Path path31 = path5.relativize(path30);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(pathItor13);
        org.junit.Assert.assertNotNull(pathSpliterator14);
        org.junit.Assert.assertEquals(file17.getParent(), "/");
        org.junit.Assert.assertEquals(file17.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(uRL19);
        org.junit.Assert.assertEquals(uRL19.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertEquals(file23.getParent(), "/");
        org.junit.Assert.assertEquals(file23.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(uRL25);
        org.junit.Assert.assertEquals(uRL25.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(pathItor28);
        org.junit.Assert.assertNotNull(path29);
        org.junit.Assert.assertNotNull(path30);
        org.junit.Assert.assertNotNull(path31);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.util.stream.Stream.Builder<java.util.Optional<java.time.zone.ZoneOffsetTransition>> zoneOffsetTransitionOptionalBuilder0 = java.util.stream.Stream.builder();
        org.junit.Assert.assertNotNull(zoneOffsetTransitionOptionalBuilder0);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.net.URI uRI4 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        boolean boolean5 = uRI4.isOpaque();
        java.lang.String str6 = uRI4.getFragment();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalDate localDate20 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra14, 120, (int) '-');
        java.util.List<java.time.chrono.Era> eraList21 = isoChronology6.eras();
        java.lang.String str22 = isoChronology6.getCalendarType();
        java.time.chrono.ChronoLocalDate chronoLocalDate26 = isoChronology6.date(11000000, 11, 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(eraList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "iso8601" + "'", str22, "iso8601");
        org.junit.Assert.assertNotNull(chronoLocalDate26);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDate localDate29 = localDateTime9.toLocalDate();
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.lang.String str33 = zoneOffset32.getId();
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset32);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.lang.String str38 = zoneOffset37.getId();
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset37);
        boolean boolean40 = localDateTime34.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.format.DateTimeFormatter dateTimeFormatter41 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str42 = localDateTime39.format(dateTimeFormatter41);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int44 = localDateTime39.get((java.time.temporal.TemporalField) chronoField43);
        boolean boolean45 = localDateTime9.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime47 = localDateTime39.minusNanos(15032385535000L);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+18:00" + "'", str33, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+18:00" + "'", str38, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str42, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField43.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        boolean boolean3 = charBuffer1.isReadOnly();
        java.nio.CharBuffer charBuffer5 = charBuffer1.put('x');
        java.nio.ByteOrder byteOrder6 = charBuffer1.order();
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate(16);
        int int9 = charBuffer8.limit();
        char char10 = charBuffer8.get();
        char[] charArray15 = new char[] { 'x', 'a', '4', '.' };
        java.nio.CharBuffer charBuffer16 = charBuffer8.get(charArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer19 = charBuffer1.put(charArray15, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(byteOrder6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\000' + "'", char10 == '\000');
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer16);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.util.Properties properties0 = new java.util.Properties();
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter2.println("hi!");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter2);
        printWriter5.print((float) '\000');
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj10 = charBuffer9.array();
        boolean boolean11 = charBuffer9.isReadOnly();
        java.nio.CharBuffer charBuffer13 = charBuffer9.put('x');
        java.lang.CharSequence charSequence14 = null;
        java.nio.CharBuffer charBuffer15 = charBuffer9.append(charSequence14);
        java.io.PrintWriter printWriter16 = printWriter5.append((java.lang.CharSequence) charBuffer15);
        boolean boolean17 = properties0.containsValue((java.lang.Object) printWriter5);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed((-34), 10000000);
        java.util.function.IntPredicate intPredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = intStream2.allMatch(intPredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.io.File file5 = file2.getCanonicalFile();
        java.net.URL uRL6 = file5.toURL();
        boolean boolean7 = file5.isHidden();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/");
        org.junit.Assert.assertEquals(file5.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(uRL6);
        org.junit.Assert.assertEquals(uRL6.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.nio.DoubleBuffer doubleBuffer8 = byteBuffer5.asDoubleBuffer();
        java.nio.DoubleBuffer doubleBuffer9 = doubleBuffer8.asReadOnlyBuffer();
        double[] doubleArray13 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer14 = java.nio.DoubleBuffer.wrap(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer15 = doubleBuffer8.put(doubleBuffer14);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleBuffer8);
        org.junit.Assert.assertNotNull(doubleBuffer9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer14);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) '4', (long) ' ');
        java.time.Instant instant4 = instant2.minusMillis(0L);
        java.nio.file.attribute.FileTime fileTime5 = java.nio.file.attribute.FileTime.from(instant4);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(fileTime5);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.nio.file.Path path25 = path18.relativize(path24);
        boolean boolean26 = path11.startsWith(path18);
        java.net.URI uRI27 = path18.toUri();
        java.lang.String str28 = uRI27.toASCIIString();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(uRI27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "file:///1970-01-01T18:01:37.00000012" + "'", str28, "file:///1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        java.util.Date date8 = new java.util.Date((int) '0', 2022, 999999999, 0, 256);
        boolean boolean9 = date1.after(date8);
        java.util.Date date11 = new java.util.Date((long) (byte) 1);
        int int12 = date11.getTimezoneOffset();
        int int13 = date1.compareTo(date11);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Jul 02 04:16:00 UTC 2740023");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.OptionalDouble optionalDouble2 = doubleStream1.findFirst();
        java.util.function.DoublePredicate doublePredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = doubleStream1.noneMatch(doublePredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.util.Date date5 = new java.util.Date(1, (int) 'x', (int) '0', 16, 256);
        int int6 = date5.getDay();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 17 20:16:00 UTC 1911");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.net.UnknownHostException unknownHostException1 = new java.net.UnknownHostException();
        java.security.NoSuchAlgorithmException noSuchAlgorithmException2 = new java.security.NoSuchAlgorithmException("iso8601", (java.lang.Throwable) unknownHostException1);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        boolean boolean5 = doubleBuffer4.hasArray();
        double[] doubleArray9 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer10 = java.nio.DoubleBuffer.wrap(doubleArray9);
        java.nio.DoubleBuffer doubleBuffer11 = doubleBuffer4.get(doubleArray9);
        double[] doubleArray15 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer16 = java.nio.DoubleBuffer.wrap(doubleArray15);
        boolean boolean17 = doubleBuffer16.hasArray();
        java.nio.DoubleBuffer doubleBuffer18 = doubleBuffer16.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer19 = doubleBuffer4.put(doubleBuffer18);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleBuffer18);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.chrono.IsoChronology isoChronology2 = localDate1.getChronology();
        java.time.chrono.IsoChronology isoChronology3 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra5 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate8 = isoChronology3.dateYearDay((java.time.chrono.Era) isoEra5, 0, 16);
        java.time.LocalTime localTime9 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime10 = localDate8.atTime(localTime9);
        java.time.LocalDate localDate12 = localDate8.withMonth(1);
        java.time.LocalDate localDate14 = localDate12.withYear(4096);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoLocalDateTime15 = isoChronology2.localDateTime((java.time.temporal.TemporalAccessor) localDate14);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: 4096-01-16 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + isoEra5 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra5.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        boolean boolean11 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset12);
        java.util.Date date16 = new java.util.Date((long) (byte) 1);
        java.lang.Cloneable cloneable17 = strMapMap0.getOrDefault((java.lang.Object) localDateTime10, (java.lang.Cloneable) date16);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap18 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology19 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean20 = strMapMap18.containsKey((java.lang.Object) isoChronology19);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap21 = java.nio.charset.Charset.availableCharsets();
        boolean boolean22 = strMap21.isEmpty();
        java.util.Locale locale23 = java.util.Locale.US;
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.Cloneable cloneable26 = strMapMap18.put(strMap21, (java.lang.Cloneable) locale24);
        int int27 = strMap21.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap30 = strMap21.subMap("DecimalStyle[0+-.]", "{}");
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray45 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, zoneOffsetTransitionArray45);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray51 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52, zoneOffsetTransitionRuleArray51);
        java.time.zone.ZoneRules zoneRules54 = java.time.zone.ZoneRules.of(zoneOffset43, zoneOffset44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52);
        boolean boolean55 = zoneOffsetTransitionList34.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49);
        zoneOffsetTransitionList34.clear();
        java.lang.Cloneable cloneable57 = strMapMap0.putIfAbsent(strMap21, (java.lang.Cloneable) zoneOffsetTransitionList34);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionItor59 = zoneOffsetTransitionList34.listIterator((int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 58");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(cloneable17);
        org.junit.Assert.assertNotNull(isoChronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Stati Uniti" + "'", str25, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 171 + "'", int27 == 171);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(cloneable57);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        int int0 = java.util.Spliterator.SUBSIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16384 + "'", int0 == 16384);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalDate localDate20 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra14, 120, (int) '-');
        java.time.LocalTime localTime21 = java.time.LocalTime.MIDNIGHT;
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime22 = localDate20.atTime(localTime21);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale26 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = chronoField23.getDisplayName(locale26);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate30 = localDate20.with((java.time.temporal.TemporalField) chronoField23, (long) 41);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for ClockHourOfDay (valid values 1 - 24): 41");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField23.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale26.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "599b081c1808" + "'", str27, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClockHourOfDay" + "'", str28, "ClockHourOfDay");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.LongSummaryStatistics longSummaryStatistics7 = longStream2.summaryStatistics();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.LocalTime localTime5 = zonedDateTime4.toLocalTime();
        java.time.ZoneId zoneId6 = zonedDateTime4.getZone();
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(zoneId6);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        java.util.OptionalLong optionalLong1 = java.util.OptionalLong.of((long) 100);
        java.util.function.LongSupplier longSupplier2 = null;
        long long3 = optionalLong1.orElseGet(longSupplier2);
        java.lang.String str4 = optionalLong1.toString();
        org.junit.Assert.assertNotNull(optionalLong1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalLong[100]" + "'", str4, "OptionalLong[100]");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime88.plusHours((long) 256);
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime88.minusSeconds((long) '0');
        java.time.OffsetDateTime offsetDateTime97 = offsetDateTime95.minusSeconds(1645434841L);
        java.time.OffsetDateTime offsetDateTime99 = offsetDateTime95.minusWeeks(1645434857L);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertNotNull(offsetDateTime97);
        org.junit.Assert.assertNotNull(offsetDateTime99);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.isReadOnly();
        java.nio.CharBuffer charBuffer10 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj11 = charBuffer10.array();
        java.nio.ByteOrder byteOrder12 = charBuffer10.order();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.order(byteOrder12);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.slice();
        java.lang.Object obj15 = byteBuffer14.array();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = byteBuffer14.getInt();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteOrder12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        int int2 = intBuffer1.get();
        int[] intArray3 = new int[] {};
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of(intArray3);
        java.nio.IntBuffer intBuffer5 = intBuffer1.get(intArray3);
        int[] intArray6 = new int[] {};
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of(intArray6);
        java.nio.IntBuffer intBuffer8 = intBuffer5.get(intArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer11 = intBuffer5.put(21, 18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intBuffer5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(intBuffer8);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        boolean boolean5 = doubleBuffer4.hasArray();
        double[] doubleArray9 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer10 = java.nio.DoubleBuffer.wrap(doubleArray9);
        java.nio.DoubleBuffer doubleBuffer11 = doubleBuffer4.get(doubleArray9);
        boolean boolean12 = doubleBuffer4.hasArray();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.nio.DoubleBuffer doubleBuffer8 = byteBuffer5.asDoubleBuffer();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = doubleBuffer8.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleBuffer8);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getKurtosis();
        double double5 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.stream.DoubleStream.Builder builder3 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.peek((java.util.function.DoubleConsumer) builder3);
        java.util.function.DoubleUnaryOperator doubleUnaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream6 = doubleStream2.map(doubleUnaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.time.format.DecimalStyle decimalStyle0 = java.time.format.DecimalStyle.STANDARD;
        char char1 = decimalStyle0.getZeroDigit();
        java.time.format.DecimalStyle decimalStyle3 = decimalStyle0.withZeroDigit('a');
        java.time.format.DecimalStyle decimalStyle5 = decimalStyle0.withPositiveSign('#');
        java.lang.String str6 = decimalStyle0.toString();
        org.junit.Assert.assertNotNull(decimalStyle0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '0' + "'", char1 == '0');
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertNotNull(decimalStyle5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DecimalStyle[0+-.]" + "'", str6, "DecimalStyle[0+-.]");
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime1 = java.time.LocalTime.MAX;
        java.time.temporal.TemporalUnit temporalUnit2 = null;
        boolean boolean3 = localTime1.isSupported(temporalUnit2);
        java.time.LocalTime localTime5 = localTime1.plusHours((long) 256);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal6 = localDateTime0.adjustInto((java.time.temporal.Temporal) localTime1);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics1.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics5.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics8.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics5.setSumsqImpl(univariateStatistic11);
        descriptiveStatistics1.setSumsqImpl(univariateStatistic11);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic11);
        long long15 = descriptiveStatistics0.getN();
        double double16 = descriptiveStatistics0.getSumsq();
        long long17 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.DayOfWeek dayOfWeek8 = localDate5.getDayOfWeek();
        java.time.LocalDate localDate10 = localDate5.withYear(4096);
        java.lang.String str11 = localDate10.toString();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + dayOfWeek8 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek8.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "4096-01-16" + "'", str11, "4096-01-16");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        boolean boolean5 = doubleBuffer4.hasArray();
        java.nio.DoubleBuffer doubleBuffer6 = doubleBuffer4.slice();
        java.nio.DoubleBuffer doubleBuffer7 = doubleBuffer4.asReadOnlyBuffer();
        java.lang.String str8 = doubleBuffer4.toString();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.nio.HeapDoubleBuffer[pos=0 lim=3 cap=3]" + "'", str8, "java.nio.HeapDoubleBuffer[pos=0 lim=3 cap=3]");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        strSet3.clear();
        java.time.chrono.IsoChronology isoChronology5 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate10 = isoChronology5.dateYearDay((java.time.chrono.Era) isoEra7, 0, 16);
        java.time.LocalTime localTime11 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime12 = localDate10.atTime(localTime11);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray15 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList16 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, zoneOffsetTransitionArray15);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray18 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, zoneOffsetTransitionArray18);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray21 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22, zoneOffsetTransitionRuleArray21);
        java.time.zone.ZoneRules zoneRules24 = java.time.zone.ZoneRules.of(zoneOffset13, zoneOffset14, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22);
        long long25 = localDateTime12.toEpochSecond(zoneOffset13);
        java.time.LocalDateTime localDateTime27 = localDateTime12.plusDays((long) (byte) 1);
        java.time.ZoneId zoneId28 = java.time.ZoneId.systemDefault();
        java.lang.String str29 = zoneId28.getId();
        java.time.ZonedDateTime zonedDateTime30 = java.time.ZonedDateTime.now(zoneId28);
        java.time.ZoneId zoneId31 = java.time.ZoneId.systemDefault();
        java.lang.String str32 = zoneId31.getId();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime30.withZoneSameInstant(zoneId31);
        java.time.ZoneId zoneId34 = java.time.ZoneId.systemDefault();
        java.lang.String str35 = zoneId34.getId();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.now(zoneId34);
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime36.withYear((int) (short) 1);
        boolean boolean39 = zonedDateTime33.equals((java.lang.Object) zonedDateTime38);
        int int40 = zonedDateTime38.getMinute();
        java.time.Duration duration41 = java.time.Duration.between((java.time.temporal.Temporal) localDateTime12, (java.time.temporal.Temporal) zonedDateTime38);
        java.time.ZonedDateTime zonedDateTime43 = zonedDateTime38.plusSeconds(1645434863000L);
        java.time.LocalTime localTime44 = java.time.LocalTime.MAX;
        java.time.temporal.TemporalUnit temporalUnit45 = null;
        boolean boolean46 = localTime44.isSupported(temporalUnit45);
        java.time.LocalTime localTime48 = localTime44.withNano((int) '4');
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale52 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = chronoField49.getDisplayName(locale52);
        boolean boolean55 = chronoField49.isTimeBased();
        java.time.temporal.ValueRange valueRange56 = localTime44.range((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        boolean boolean58 = localTime44.isSupported((java.time.temporal.TemporalField) chronoField57);
        java.time.ZonedDateTime zonedDateTime60 = zonedDateTime43.with((java.time.temporal.TemporalField) chronoField57, (long) (byte) -1);
        java.time.ZonedDateTime zonedDateTime62 = zonedDateTime43.plusWeeks((long) 34);
        boolean boolean63 = strSet3.remove((java.lang.Object) 34);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Stati Uniti" + "'", str2, "Stati Uniti");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra7.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-62134279201L) + "'", long25 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneId28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Etc/UTC" + "'", str29, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Etc/UTC" + "'", str32, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Etc/UTC" + "'", str35, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 14 + "'", int40 == 14);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale52.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "599b081c1808" + "'", str53, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ClockHourOfDay" + "'", str54, "ClockHourOfDay");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(valueRange56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField57.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, 0, 16);
        java.time.LocalTime localTime7 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime8 = localDate6.atTime(localTime7);
        java.time.LocalDate localDate10 = localDate6.withMonth(1);
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.Duration duration12 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal13 = null;
        java.time.temporal.Temporal temporal14 = duration12.subtractFrom(temporal13);
        long long15 = duration12.toDays();
        java.time.Duration duration16 = duration11.plus(duration12);
        java.time.LocalDate localDate17 = localDate10.minus((java.time.temporal.TemporalAmount) duration11);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.lang.String str21 = zoneOffset20.getId();
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset20);
        java.time.LocalTime localTime23 = localDateTime22.toLocalTime();
        java.time.temporal.Temporal temporal24 = localDate17.adjustInto((java.time.temporal.Temporal) localDateTime22);
        java.time.LocalDate localDate26 = localDate17.plusWeeks((long) (short) 10);
        java.time.Month month27 = localDate17.getMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.of((int) ':', month27, (int) '.', 1500, (int) (short) 100, 171);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 46");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNull(temporal14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+18:00" + "'", str21, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(temporal24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + month27 + "' != '" + java.time.Month.JANUARY + "'", month27.equals(java.time.Month.JANUARY));
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        boolean boolean12 = zoneRules11.isFixedOffset();
        java.security.CodeSource codeSource13 = null;
        java.security.PermissionCollection permissionCollection14 = null;
        java.security.ProtectionDomain protectionDomain15 = new java.security.ProtectionDomain(codeSource13, permissionCollection14);
        boolean boolean16 = zoneRules11.equals((java.lang.Object) codeSource13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray19 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList20 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, zoneOffsetTransitionArray19);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray22 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList23 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, zoneOffsetTransitionArray22);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray25 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26, zoneOffsetTransitionRuleArray25);
        java.time.zone.ZoneRules zoneRules28 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList20, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList26);
        boolean boolean29 = zoneRules28.isFixedOffset();
        java.time.Instant instant30 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition31 = zoneRules28.previousTransition(instant30);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList32 = zoneRules28.getTransitionRules();
        java.time.Instant instant33 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition34 = zoneRules28.previousTransition(instant33);
        java.time.Instant instant35 = java.time.Instant.MAX;
        java.time.Instant instant37 = instant35.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset38 = zoneRules28.getOffset(instant37);
        java.time.ZoneOffset zoneOffset39 = zoneRules11.getStandardOffset(instant37);
        java.lang.Object obj40 = null;
        boolean boolean41 = zoneRules11.equals(obj40);
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList42 = zoneRules11.getTransitions();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(protectionDomain15.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList32);
        org.junit.Assert.assertNull(zoneOffsetTransition34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList42);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.util.OptionalLong optionalLong1 = java.util.OptionalLong.of((long) '-');
        boolean boolean2 = optionalLong1.isPresent();
        org.junit.Assert.assertNotNull(optionalLong1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime1 = java.time.OffsetTime.parse((java.lang.CharSequence) "OptionalInt.empty");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'OptionalInt.empty' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.OptionalDouble optionalDouble1 = longStream0.average();
        java.util.function.DoubleSupplier doubleSupplier2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = optionalDouble1.orElseGet(doubleSupplier2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.Spliterator<java.lang.Long> longSpliterator1 = longStream0.spliterator();
        long long2 = longSpliterator1.estimateSize();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.Long> wildcardComparator3 = longSpliterator1.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longSpliterator1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.nio.file.Path path25 = path18.relativize(path24);
        boolean boolean26 = path11.startsWith(path18);
        java.nio.file.WatchService watchService27 = null;
        java.nio.file.WatchEvent.Kind[] kindArray29 = new java.nio.file.WatchEvent.Kind[0];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray30 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray29;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey31 = path18.register(watchService27, wildcardKindArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(kindArray29);
        org.junit.Assert.assertNotNull(wildcardKindArray30);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        double double1 = doubleSummaryStatistics0.getMin();
        double double2 = doubleSummaryStatistics0.getSum();
        double double3 = doubleSummaryStatistics0.getMax();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics4 = new java.util.DoubleSummaryStatistics();
        double double5 = doubleSummaryStatistics4.getMin();
        double double6 = doubleSummaryStatistics4.getSum();
        doubleSummaryStatistics0.combine(doubleSummaryStatistics4);
        double double8 = doubleSummaryStatistics0.getSum();
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.NEGATIVE_INFINITY + "'", double3 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertEquals(doubleSummaryStatistics4.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.wrap((java.lang.CharSequence) charBuffer1);
        java.nio.CharBuffer charBuffer4 = charBuffer3.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer7 = charBuffer4.subSequence(31, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer4);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        // The following exception was thrown during execution in test generation
        try {
            filterOutputStream1.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        resizableDoubleArray0.setElement((int) '-', (double) 1645434860L);
        int int4 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = resizableDoubleArray0.getElement(16384);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 16384 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 46 + "'", int4 == 46);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        boolean boolean3 = charBuffer1.hasArray();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.duplicate();
        boolean boolean8 = longBuffer2.isDirect();
        java.nio.LongBuffer longBuffer9 = longBuffer2.compact();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longBuffer9);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of(0.0d);
        double double2 = optionalDouble1.getAsDouble();
        double double3 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.isReadOnly();
        java.nio.CharBuffer charBuffer10 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj11 = charBuffer10.array();
        java.nio.ByteOrder byteOrder12 = charBuffer10.order();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.order(byteOrder12);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt((int) '.', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteOrder12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.minus(duration17);
        java.time.OffsetTime offsetTime22 = offsetTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray29 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, zoneOffsetTransitionArray29);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray32 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33, zoneOffsetTransitionRuleArray32);
        java.time.zone.ZoneRules zoneRules35 = java.time.zone.ZoneRules.of(zoneOffset24, zoneOffset25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33);
        java.time.OffsetTime offsetTime36 = localTime23.atOffset(zoneOffset24);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange38 = offsetTime36.range((java.time.temporal.TemporalField) chronoField37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal41 = null;
        java.time.temporal.Temporal temporal42 = duration40.subtractFrom(temporal41);
        long long43 = duration40.toDays();
        java.time.Duration duration44 = duration39.minus(duration40);
        java.time.OffsetTime offsetTime45 = offsetTime36.minus((java.time.temporal.TemporalAmount) duration40);
        boolean boolean46 = offsetTime22.isAfter(offsetTime36);
        java.time.ZoneId zoneId47 = java.time.ZoneId.systemDefault();
        java.lang.String str48 = zoneId47.getId();
        java.time.ZonedDateTime zonedDateTime49 = java.time.ZonedDateTime.now(zoneId47);
        java.time.ZoneId zoneId50 = java.time.ZoneId.systemDefault();
        java.lang.String str51 = zoneId50.getId();
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime49.withZoneSameInstant(zoneId50);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap53 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology54 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean55 = strMapMap53.containsKey((java.lang.Object) isoChronology54);
        java.time.Duration duration56 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal57 = null;
        java.time.temporal.Temporal temporal58 = duration56.subtractFrom(temporal57);
        long long59 = duration56.toDays();
        boolean boolean60 = strMapMap53.contains((java.lang.Object) duration56);
        java.time.format.DateTimeFormatter dateTimeFormatter61 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable62 = strMapMap53.get((java.lang.Object) dateTimeFormatter61);
        java.lang.String str63 = dateTimeFormatter61.toString();
        java.lang.String str64 = zonedDateTime52.format(dateTimeFormatter61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = offsetTime36.format(dateTimeFormatter61);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNull(temporal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneId47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(zoneId50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Etc/UTC" + "'", str51, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(isoChronology54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNull(temporal58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNull(cloneable62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ParseCaseSensitive(false)Value(Year,4)Value(MonthOfYear,2)Value(DayOfMonth,2)[Offset(+HHMMss,'Z')]" + "'", str63, "ParseCaseSensitive(false)Value(Year,4)Value(MonthOfYear,2)Value(DayOfMonth,2)[Offset(+HHMMss,'Z')]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "20220221Z" + "'", str64, "20220221Z");
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("-18:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-18:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        org.junit.Assert.assertNotNull(offsetTime0);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        boolean boolean3 = charBuffer1.isReadOnly();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer7 = charBuffer5.append((java.lang.CharSequence) "Etc/UTC");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer10 = charBuffer1.append((java.lang.CharSequence) charBuffer5, 48, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(charBuffer7);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        java.net.NetworkInterface networkInterface3 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        boolean boolean4 = inetAddress0.isAnyLocalAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(networkInterface3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        date1.setYear((int) '0');
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1948");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println(true);
        java.io.File file7 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long8 = file7.lastModified();
        java.net.URL uRL9 = file7.toURL();
        java.security.CodeSigner[] codeSignerArray10 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource11 = new java.security.CodeSource(uRL9, codeSignerArray10);
        java.io.PrintWriter printWriter12 = printWriter1.printf("x-windows-iso2022jp", (java.lang.Object[]) codeSignerArray10);
        printWriter1.print('\000');
        printWriter1.print("23:59:59.999999999+18:00");
        org.junit.Assert.assertEquals(file7.getParent(), "/");
        org.junit.Assert.assertEquals(file7.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(uRL9);
        org.junit.Assert.assertEquals(uRL9.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray10);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap3 = java.nio.charset.Charset.availableCharsets();
        boolean boolean4 = strMap3.isEmpty();
        java.util.Locale locale5 = java.util.Locale.US;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.Cloneable cloneable8 = strMapMap0.put(strMap3, (java.lang.Cloneable) locale6);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap9 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str10 = strMapMap9.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap11 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean13 = strMapMap11.containsKey((java.lang.Object) isoChronology12);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap14 = java.nio.charset.Charset.availableCharsets();
        boolean boolean15 = strMap14.isEmpty();
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.lang.Cloneable cloneable19 = strMapMap11.put(strMap14, (java.lang.Cloneable) locale17);
        int int20 = strMap14.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap21 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology22 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean23 = strMapMap21.containsKey((java.lang.Object) isoChronology22);
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal25 = null;
        java.time.temporal.Temporal temporal26 = duration24.subtractFrom(temporal25);
        long long27 = duration24.toDays();
        boolean boolean28 = strMapMap21.contains((java.lang.Object) duration24);
        java.time.format.DateTimeFormatter dateTimeFormatter29 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable30 = strMapMap21.get((java.lang.Object) dateTimeFormatter29);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet31 = strMapMap21.keySet();
        java.lang.Cloneable cloneable32 = strMapMap9.put(strMap14, (java.lang.Cloneable) strMapMap21);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap33 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.Object obj34 = strMapMap33.clone();
        java.lang.String str35 = strMapMap33.toString();
        java.util.Set<java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>> strMapEntrySet36 = strMapMap33.entrySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap37 = java.nio.charset.Charset.availableCharsets();
        boolean boolean38 = strMap37.isEmpty();
        java.util.Set<java.lang.String> strSet39 = strMap37.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate40 = java.util.function.Predicate.isEqual((java.lang.Object) strMap37);
        java.util.Locale locale41 = java.util.Locale.UK;
        java.lang.String str42 = locale41.toLanguageTag();
        java.lang.Cloneable cloneable43 = strMapMap33.replace(strMap37, (java.lang.Cloneable) locale41);
        java.util.Locale locale46 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str47 = locale46.getLanguage();
        java.lang.Cloneable cloneable48 = strMapMap21.put(strMap37, (java.lang.Cloneable) locale46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics49.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics49.getGeometricMeanImpl();
        double[] doubleArray58 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double59 = univariateStatistic52.evaluate(doubleArray58);
        java.lang.Cloneable cloneable60 = strMapMap0.put(strMap37, (java.lang.Cloneable) doubleArray58);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.nio.charset.Charset>> strEntrySet61 = strMap37.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.nio.charset.Charset>> strEntrySet62 = strMap37.entrySet();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Stati Uniti" + "'", str7, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Stati Uniti" + "'", str18, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 171 + "'", int20 == 171);
        org.junit.Assert.assertNotNull(isoChronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNull(temporal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(cloneable30);
        org.junit.Assert.assertNotNull(strMapSet31);
        org.junit.Assert.assertNull(cloneable32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertNotNull(strMapEntrySet36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(resolverStylePredicate40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "en-GB" + "'", str42, "en-GB");
        org.junit.Assert.assertNull(cloneable43);
        org.junit.Assert.assertEquals(locale46.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "599b081c1808" + "'", str47, "599b081c1808");
        org.junit.Assert.assertNull(cloneable48);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(cloneable60);
        org.junit.Assert.assertNotNull(strEntrySet61);
        org.junit.Assert.assertNotNull(strEntrySet62);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.lang.String str7 = uRL4.getFile();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/1970-01-01T18:01:37.00000012" + "'", str7, "/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.LocalDate localDate7 = localDate5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.LocalDateTime localDateTime8 = localDate7.atStartOfDay();
        java.time.LocalDate localDate10 = localDate7.plusYears((long) (byte) -1);
        java.time.LocalDate localDate12 = localDate10.withDayOfYear((int) (short) 1);
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra15 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate18 = isoChronology13.dateYearDay((java.time.chrono.Era) isoEra15, 0, 16);
        java.time.LocalTime localTime19 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime20 = localDate18.atTime(localTime19);
        java.time.LocalDate localDate22 = localDate18.withMonth(1);
        java.time.Duration duration23 = java.time.Duration.ZERO;
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal25 = null;
        java.time.temporal.Temporal temporal26 = duration24.subtractFrom(temporal25);
        long long27 = duration24.toDays();
        java.time.Duration duration28 = duration23.plus(duration24);
        java.time.LocalDate localDate29 = localDate22.minus((java.time.temporal.TemporalAmount) duration23);
        java.time.LocalDate localDate31 = localDate22.minusWeeks((long) 100);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        boolean boolean33 = chronoField32.isTimeBased();
        boolean boolean34 = localDate31.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.lang.String str38 = zoneOffset37.getId();
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset37);
        java.time.LocalTime localTime40 = localDateTime39.toLocalTime();
        java.time.temporal.ValueRange valueRange41 = chronoField32.rangeRefinedBy((java.time.temporal.TemporalAccessor) localTime40);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = localDate10.get((java.time.temporal.TemporalField) chronoField32);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MilliOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + isoEra15 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra15.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNull(temporal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField32.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+18:00" + "'", str38, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(valueRange41);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.net.URL uRL8 = new java.net.URL(uRL4, "/");
        int int9 = uRL8.getPort();
        java.lang.String str10 = uRL8.getHost();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals(uRL8.toString(), "file:/");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.security.InvalidKeyException invalidKeyException14 = new java.security.InvalidKeyException("+18:00");
        java.security.cert.CertificateException certificateException15 = new java.security.cert.CertificateException("", (java.lang.Throwable) invalidKeyException14);
        java.security.InvalidKeyException invalidKeyException16 = new java.security.InvalidKeyException("en-GB", (java.lang.Throwable) invalidKeyException14);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.Object obj20 = properties1.getOrDefault((java.lang.Object) invalidKeyException14, (java.lang.Object) str19);
        java.io.File file23 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long24 = file23.lastModified();
        java.net.URL uRL25 = file23.toURL();
        java.nio.file.Path path26 = file23.toPath();
        java.io.File file29 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long30 = file29.lastModified();
        java.net.URL uRL31 = file29.toURL();
        java.nio.file.Path path32 = file29.toPath();
        java.nio.file.Path path33 = path26.relativize(path32);
        java.util.Iterator<java.nio.file.Path> pathItor34 = path26.iterator();
        java.nio.file.Path path35 = path26.normalize();
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.Object obj37 = properties1.replace((java.lang.Object) path35, (java.lang.Object) locale36);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "italiano" + "'", str19, "italiano");
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "italiano" + "'", obj20, "italiano");
        org.junit.Assert.assertEquals(file23.getParent(), "/");
        org.junit.Assert.assertEquals(file23.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(uRL25);
        org.junit.Assert.assertEquals(uRL25.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertEquals(file29.getParent(), "/");
        org.junit.Assert.assertEquals(file29.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(uRL31);
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertNotNull(path33);
        org.junit.Assert.assertNotNull(pathItor34);
        org.junit.Assert.assertNotNull(path35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition25 = null;
        boolean boolean26 = zoneOffsetTransitionList3.add(zoneOffsetTransition25);
        java.lang.Object[] objArray27 = zoneOffsetTransitionList3.toArray();
        java.lang.String[] strArray28 = java.util.Locale.getISOLanguages();
        java.lang.String[] strArray29 = zoneOffsetTransitionList3.toArray(strArray28);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream30 = zoneOffsetTransitionList3.stream();
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream31 = zoneOffsetTransitionStream30.distinct();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream32 = zoneOffsetTransitionStream30.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[null]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream30);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream31);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress inetAddress1 = java.net.InetAddress.getByName("Fri");
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: Fri: Name or service not known");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray0 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList1 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList1, zoneOffsetTransitionArray0);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream3 = zoneOffsetTransitionList1.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream5 = zoneOffsetTransitionStream3.limit((long) (-2022));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: -2022");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream3);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray0 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList1 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList1, zoneOffsetTransitionArray0);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream6 = zoneOffsetTransitionList4.stream();
        int int7 = zoneOffsetTransitionList4.size();
        boolean boolean8 = zoneOffsetTransitionList1.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.lang.String str17 = zoneOffset16.getId();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset16);
        boolean boolean19 = localDateTime13.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.MAX;
        java.lang.String str28 = zoneOffset27.getId();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset27);
        boolean boolean30 = localDateTime24.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.format.DateTimeFormatter dateTimeFormatter31 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str32 = localDateTime29.format(dateTimeFormatter31);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int34 = localDateTime29.get((java.time.temporal.TemporalField) chronoField33);
        boolean boolean35 = localDateTime18.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.lang.String str36 = localDateTime29.toString();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange38 = chronoField37.range();
        boolean boolean39 = localDateTime29.isSupported((java.time.temporal.TemporalField) chronoField37);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        boolean boolean41 = localDateTime29.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        boolean boolean42 = zoneOffsetTransitionList4.contains((java.lang.Object) localDateTime40);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime44 = localDateTime40.plusSeconds(8L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+18:00" + "'", str17, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+18:00" + "'", str28, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str32, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField33.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str36, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField37.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField0.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj3 = charBuffer2.array();
        boolean boolean4 = isoChronology0.equals(obj3);
        java.lang.String str5 = isoChronology0.getId();
        java.lang.String str6 = isoChronology0.getCalendarType();
        java.time.chrono.IsoEra isoEra8 = isoChronology0.eraOf((int) (byte) 1);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap9 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology10 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean11 = strMapMap9.containsKey((java.lang.Object) isoChronology10);
        java.time.chrono.IsoEra isoEra12 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate15 = isoChronology10.dateYearDay((java.time.chrono.Era) isoEra12, (-1), 10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.wrap(byteArray18, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology22 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean23 = byteBuffer21.equals((java.lang.Object) isoChronology22);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap24 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology25 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean26 = strMapMap24.containsKey((java.lang.Object) isoChronology25);
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate30 = isoChronology25.dateYearDay((java.time.chrono.Era) isoEra27, (-1), 10);
        int int32 = isoChronology22.prolepticYear((java.time.chrono.Era) isoEra27, (int) '#');
        java.time.LocalDate localDate35 = isoChronology10.dateYearDay((java.time.chrono.Era) isoEra27, (int) (byte) 0, 2);
        java.time.chrono.ChronoPeriod chronoPeriod39 = isoChronology10.period(1, (int) (short) 1, 365);
        int int40 = isoChronology0.compareTo((java.time.chrono.Chronology) isoChronology10);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate44 = isoChronology0.date(15, 2022, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 2022");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISO" + "'", str5, "ISO");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "iso8601" + "'", str6, "iso8601");
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(isoChronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + isoEra12 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra12.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(isoChronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(isoChronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra27.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-34) + "'", int32 == (-34));
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronoPeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        boolean boolean5 = doubleBuffer4.hasArray();
        java.nio.DoubleBuffer doubleBuffer6 = doubleBuffer4.slice();
        java.nio.DoubleBuffer doubleBuffer7 = doubleBuffer4.asReadOnlyBuffer();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics8.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getGeometricMeanImpl();
        double[] doubleArray17 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double18 = univariateStatistic11.evaluate(doubleArray17);
        java.util.stream.DoubleStream doubleStream19 = java.util.stream.DoubleStream.of(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer20 = doubleBuffer7.put(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleStream19);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path15 = path12.subpath(16384, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.net.URI uRI15 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI16 = uRI15.normalize();
        java.lang.String str17 = uRI16.getRawSchemeSpecificPart();
        boolean boolean18 = zonedDateTime6.equals((java.lang.Object) uRI16);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap19 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology20 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean21 = strMapMap19.containsKey((java.lang.Object) isoChronology20);
        java.time.Duration duration22 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal23 = null;
        java.time.temporal.Temporal temporal24 = duration22.subtractFrom(temporal23);
        long long25 = duration22.toDays();
        boolean boolean26 = strMapMap19.contains((java.lang.Object) duration22);
        java.time.format.DateTimeFormatter dateTimeFormatter27 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable28 = strMapMap19.get((java.lang.Object) dateTimeFormatter27);
        java.lang.String str29 = zonedDateTime6.format(dateTimeFormatter27);
        java.lang.String str30 = dateTimeFormatter27.toString();
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "//Etc/UTC" + "'", str17, "//Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(isoChronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNull(temporal24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(cloneable28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "00010221Z" + "'", str29, "00010221Z");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ParseCaseSensitive(false)Value(Year,4)Value(MonthOfYear,2)Value(DayOfMonth,2)[Offset(+HHMMss,'Z')]" + "'", str30, "ParseCaseSensitive(false)Value(Year,4)Value(MonthOfYear,2)Value(DayOfMonth,2)[Offset(+HHMMss,'Z')]");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.lang.String str12 = zoneOffset1.toString();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MAX;
        java.lang.String str16 = zoneOffset15.getId();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset15);
        java.lang.String str18 = zoneOffset15.getId();
        int int19 = zoneOffset1.compareTo(zoneOffset15);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+18:00" + "'", str16, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray0 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList1 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList1, zoneOffsetTransitionArray0);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream3 = zoneOffsetTransitionList1.stream();
        java.util.Optional<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionOptional4 = zoneOffsetTransitionStream3.findFirst();
        boolean boolean5 = zoneOffsetTransitionOptional4.isPresent();
        // The following exception was thrown during execution in test generation
        try {
            java.time.zone.ZoneOffsetTransition zoneOffsetTransition6 = zoneOffsetTransitionOptional4.get();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionOptional4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.net.Proxy.Type type0 = java.net.Proxy.Type.DIRECT;
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type0.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.time.Duration duration1 = java.time.Duration.ofMinutes((long) (byte) 1);
        java.time.chrono.IsoChronology isoChronology3 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra5 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate8 = isoChronology3.dateYearDay((java.time.chrono.Era) isoEra5, 0, 16);
        java.time.LocalTime localTime9 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime10 = localDate8.atTime(localTime9);
        java.time.LocalDate localDate12 = localDate8.withMonth(1);
        long long13 = localDate12.toEpochDay();
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.LocalDate localDate23 = localDate19.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod24 = localDate12.until((java.time.chrono.ChronoLocalDate) localDate23);
        java.time.LocalDate localDate26 = localDate12.plusDays((long) (short) 0);
        java.time.LocalDate localDate28 = localDate26.minusDays((long) 9);
        java.time.LocalDate localDate30 = java.time.LocalDate.MIN;
        java.time.ZoneId zoneId31 = java.time.ZoneId.systemDefault();
        java.lang.String str32 = zoneId31.getId();
        java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.now(zoneId31);
        java.time.ZoneId zoneId34 = java.time.ZoneId.systemDefault();
        java.lang.String str35 = zoneId34.getId();
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime33.withZoneSameInstant(zoneId34);
        java.time.ZoneId zoneId37 = java.time.ZoneId.systemDefault();
        java.lang.String str38 = zoneId37.getId();
        java.time.ZonedDateTime zonedDateTime39 = java.time.ZonedDateTime.now(zoneId37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime39.withYear((int) (short) 1);
        boolean boolean42 = zonedDateTime36.equals((java.lang.Object) zonedDateTime41);
        java.time.ZonedDateTime zonedDateTime44 = zonedDateTime36.minusMonths((long) (byte) -1);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        java.time.temporal.TemporalUnit temporalUnit46 = chronoField45.getBaseUnit();
        long long47 = localDate30.until((java.time.temporal.Temporal) zonedDateTime44, temporalUnit46);
        java.time.chrono.ChronoLocalDate chronoLocalDate48 = localDate26.minus(1645434851L, temporalUnit46);
        java.time.Duration duration49 = duration1.plus(28L, temporalUnit46);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + isoEra5 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra5.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-719147L) + "'", long13 == (-719147L));
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronoPeriod24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Etc/UTC" + "'", str32, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Etc/UTC" + "'", str35, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Etc/UTC" + "'", str38, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField45.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + temporalUnit46 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit46.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 365243238234L + "'", long47 == 365243238234L);
        org.junit.Assert.assertNotNull(chronoLocalDate48);
        org.junit.Assert.assertNotNull(duration49);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.time.LocalTime localTime1 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray4 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList5 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, zoneOffsetTransitionArray4);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray7 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList8 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, zoneOffsetTransitionArray7);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray10 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11, zoneOffsetTransitionRuleArray10);
        java.time.zone.ZoneRules zoneRules13 = java.time.zone.ZoneRules.of(zoneOffset2, zoneOffset3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11);
        java.time.OffsetTime offsetTime14 = localTime1.atOffset(zoneOffset2);
        java.lang.String str15 = offsetTime14.toString();
        java.time.ZoneOffset zoneOffset16 = offsetTime14.getOffset();
        java.time.format.DateTimeFormatter dateTimeFormatter17 = java.time.format.DateTimeFormatter.ISO_TIME;
        boolean boolean18 = offsetTime14.equals((java.lang.Object) dateTimeFormatter17);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime19 = java.time.OffsetDateTime.parse((java.lang.CharSequence) "4096-01-16", dateTimeFormatter17);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '4096-01-16' could not be parsed at index 2");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "23:59:59.999999999+18:00" + "'", str15, "23:59:59.999999999+18:00");
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        int int2 = intBuffer1.get();
        int[] intArray3 = new int[] {};
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of(intArray3);
        java.nio.IntBuffer intBuffer5 = intBuffer1.get(intArray3);
        int[] intArray6 = new int[] {};
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of(intArray6);
        java.nio.IntBuffer intBuffer8 = intBuffer5.get(intArray6);
        int[] intArray9 = intBuffer5.array();
        int int10 = intBuffer5.arrayOffset();
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intBuffer5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate7 = isoChronology2.dateYearDay((java.time.chrono.Era) isoEra4, 0, 16);
        java.time.LocalTime localTime8 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime9 = localDate7.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate7.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod12 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate7);
        java.time.LocalDate localDate14 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate16 = java.time.LocalDate.ofEpochDay((long) 10);
        int int17 = localDate14.compareTo((java.time.chrono.ChronoLocalDate) localDate16);
        java.time.temporal.Temporal temporal18 = localDate1.adjustInto((java.time.temporal.Temporal) localDate16);
        java.time.LocalDate localDate20 = localDate16.withMonth((int) (short) 10);
        java.time.LocalDate localDate22 = localDate16.withYear((int) (byte) 1);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra4.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 31, (long) 999999999);
        java.time.Duration duration4 = duration2.plusHours(0L);
        int int5 = duration2.getNano();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 999999999 + "'", int5 == 999999999);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition25 = null;
        boolean boolean26 = zoneOffsetTransitionList3.add(zoneOffsetTransition25);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime28 = java.time.LocalTime.MAX;
        long long29 = chronoField27.getFrom((java.time.temporal.TemporalAccessor) localTime28);
        boolean boolean30 = zoneOffsetTransitionList3.equals((java.lang.Object) localTime28);
        boolean boolean31 = zoneOffsetTransitionList3.isEmpty();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition32 = null;
        boolean boolean33 = zoneOffsetTransitionList3.add(zoneOffsetTransition32);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 23L + "'", long29 == 23L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.time.ZoneId zoneId1 = java.time.ZoneId.systemDefault();
        java.lang.String str2 = zoneId1.getId();
        java.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZone(zoneId1);
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj6 = charBuffer5.array();
        boolean boolean7 = charBuffer5.isReadOnly();
        java.nio.CharBuffer charBuffer9 = charBuffer5.put('x');
        java.nio.ByteOrder byteOrder10 = charBuffer5.order();
        java.time.temporal.TemporalQuery[] temporalQueryArray12 = new java.time.temporal.TemporalQuery[0];
        @SuppressWarnings("unchecked")
        java.time.temporal.TemporalQuery<?>[] wildcardTemporalQueryArray13 = (java.time.temporal.TemporalQuery<?>[]) temporalQueryArray12;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor14 = dateTimeFormatter0.parseBest((java.lang.CharSequence) charBuffer5, wildcardTemporalQueryArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: At least two queries must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(temporalQueryArray12);
        org.junit.Assert.assertNotNull(wildcardTemporalQueryArray13);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "599b081c1808");
        java.nio.ByteOrder byteOrder2 = charBuffer1.order();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer6 = charBuffer4.append((java.lang.CharSequence) "Etc/UTC");
        java.nio.CharBuffer charBuffer8 = charBuffer4.put('0');
        char char9 = charBuffer4.get();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer10 = charBuffer1.put(charBuffer4);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(byteOrder2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\000' + "'", char9 == '\000');
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer8 = longBuffer7.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime2 = java.time.LocalTime.of(48, 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 48");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.stream.DoubleStream doubleStream3 = doubleStream2.parallel();
        java.util.function.DoublePredicate doublePredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = doubleStream2.anyMatch(doublePredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.io.File file4 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long5 = file4.lastModified();
        java.net.URL uRL6 = file4.toURL();
        java.io.File file7 = file4.getCanonicalFile();
        boolean boolean9 = file7.setExecutable(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file10 = java.io.File.createTempFile("-18:00", "//Etc/UTC", file7);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /1970-01-01T18:01:37.00000012/-18:005972941701592845530/Etc/UTC");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file4.getParent(), "/");
        org.junit.Assert.assertEquals(file4.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(uRL6);
        org.junit.Assert.assertEquals(uRL6.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/");
        org.junit.Assert.assertEquals(file7.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        int int1 = isoEra0.getValue();
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, 0, 16);
        java.time.LocalTime localTime7 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime8 = localDate6.atTime(localTime7);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray11 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, zoneOffsetTransitionArray11);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray17 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList18, zoneOffsetTransitionRuleArray17);
        java.time.zone.ZoneRules zoneRules20 = java.time.zone.ZoneRules.of(zoneOffset9, zoneOffset10, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList18);
        long long21 = localDateTime8.toEpochSecond(zoneOffset9);
        java.time.LocalTime localTime22 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset9);
        java.time.temporal.ValueRange valueRange23 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.chrono.IsoChronology isoChronology26 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra28 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate31 = isoChronology26.dateYearDay((java.time.chrono.Era) isoEra28, 0, 16);
        java.time.LocalTime localTime32 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime33 = localDate31.atTime(localTime32);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray42 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43, zoneOffsetTransitionRuleArray42);
        java.time.zone.ZoneRules zoneRules45 = java.time.zone.ZoneRules.of(zoneOffset34, zoneOffset35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43);
        long long46 = localDateTime33.toEpochSecond(zoneOffset34);
        java.time.LocalTime localTime47 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset34);
        java.time.temporal.ValueRange valueRange48 = chronoField25.rangeRefinedBy((java.time.temporal.TemporalAccessor) localTime47);
        int int49 = valueRange23.checkValidIntValue(24L, (java.time.temporal.TemporalField) chronoField25);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-62134279201L) + "'", long21 == (-62134279201L));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(valueRange23);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField25.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertNotNull(isoChronology26);
        org.junit.Assert.assertTrue("'" + isoEra28 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra28.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-62134279201L) + "'", long46 == (-62134279201L));
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 24 + "'", int49 == 24);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.chrono.Chronology chronology13 = dateTimeFormatter11.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod17 = chronology13.period((int) (short) 1, 0, (int) '#');
        java.lang.String str18 = chronoPeriod17.toString();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronoPeriod17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "P1Y35D" + "'", str18, "P1Y35D");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.util.Optional<java.time.Duration> durationOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(durationOptional0);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale2 = dateTimeFormatter1.getLocale();
        java.time.format.DecimalStyle decimalStyle3 = java.time.format.DecimalStyle.STANDARD;
        char char4 = decimalStyle3.getZeroDigit();
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle3.withZeroDigit('a');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle3.withPositiveSign('#');
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withDecimalStyle(decimalStyle8);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.parse((java.lang.CharSequence) "2022-02-21T09:14:13.671Z[Etc/UTC]", dateTimeFormatter9);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '2022-02-21T09:14:13.671Z[Etc/UTC]' could not be parsed, unparsed text found at index 24");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '0' + "'", char4 == '0');
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDate localDate29 = localDateTime9.toLocalDate();
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.lang.String str33 = zoneOffset32.getId();
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset32);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.lang.String str38 = zoneOffset37.getId();
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset37);
        boolean boolean40 = localDateTime34.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.format.DateTimeFormatter dateTimeFormatter41 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str42 = localDateTime39.format(dateTimeFormatter41);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int44 = localDateTime39.get((java.time.temporal.TemporalField) chronoField43);
        boolean boolean45 = localDateTime9.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime47 = localDateTime39.minusHours(1645434867L);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap48 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology49 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean50 = strMapMap48.containsKey((java.lang.Object) isoChronology49);
        java.time.Duration duration51 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal52 = null;
        java.time.temporal.Temporal temporal53 = duration51.subtractFrom(temporal52);
        long long54 = duration51.toDays();
        boolean boolean55 = strMapMap48.contains((java.lang.Object) duration51);
        java.time.format.DateTimeFormatter dateTimeFormatter56 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable57 = strMapMap48.get((java.lang.Object) dateTimeFormatter56);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet58 = strMapMap48.keySet();
        java.time.LocalDate localDate60 = java.time.LocalDate.ofEpochDay((long) 10);
        java.lang.Cloneable cloneable61 = strMapMap48.remove((java.lang.Object) localDate60);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal62 = localDateTime47.adjustInto((java.time.temporal.Temporal) localDate60);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+18:00" + "'", str33, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+18:00" + "'", str38, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str42, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField43.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(isoChronology49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNull(temporal53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNull(cloneable57);
        org.junit.Assert.assertNotNull(strMapSet58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNull(cloneable61);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.Instant instant92 = offsetDateTime91.toInstant();
        java.nio.CharBuffer charBuffer94 = java.nio.CharBuffer.allocate(16);
        int int95 = charBuffer94.limit();
        java.util.stream.IntStream intStream96 = charBuffer94.chars();
        boolean boolean97 = offsetDateTime91.equals((java.lang.Object) intStream96);
        java.util.function.IntToDoubleFunction intToDoubleFunction98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream99 = intStream96.mapToDouble(intToDoubleFunction98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(charBuffer94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 16 + "'", int95 == 16);
        org.junit.Assert.assertNotNull(intStream96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(64);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj3 = charBuffer2.array();
        boolean boolean4 = isoChronology0.equals(obj3);
        java.lang.String str5 = isoChronology0.getId();
        java.lang.String str6 = isoChronology0.getCalendarType();
        java.time.chrono.IsoEra isoEra8 = isoChronology0.eraOf((int) (byte) 1);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap9 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology10 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean11 = strMapMap9.containsKey((java.lang.Object) isoChronology10);
        java.time.chrono.IsoEra isoEra12 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate15 = isoChronology10.dateYearDay((java.time.chrono.Era) isoEra12, (-1), 10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.wrap(byteArray18, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology22 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean23 = byteBuffer21.equals((java.lang.Object) isoChronology22);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap24 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology25 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean26 = strMapMap24.containsKey((java.lang.Object) isoChronology25);
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate30 = isoChronology25.dateYearDay((java.time.chrono.Era) isoEra27, (-1), 10);
        int int32 = isoChronology22.prolepticYear((java.time.chrono.Era) isoEra27, (int) '#');
        java.time.LocalDate localDate35 = isoChronology10.dateYearDay((java.time.chrono.Era) isoEra27, (int) (byte) 0, 2);
        java.time.chrono.ChronoPeriod chronoPeriod39 = isoChronology10.period(1, (int) (short) 1, 365);
        int int40 = isoChronology0.compareTo((java.time.chrono.Chronology) isoChronology10);
        java.time.LocalDate localDate43 = isoChronology10.dateYearDay(2, 18);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISO" + "'", str5, "ISO");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "iso8601" + "'", str6, "iso8601");
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(isoChronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + isoEra12 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra12.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(isoChronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(isoChronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra27.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-34) + "'", int32 == (-34));
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronoPeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.net.URI uRI3 = new java.net.URI("//Etc/UTC", "iso8601", ":");
        java.lang.String str4 = uRI3.getScheme();
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        java.io.IOException iOException1 = new java.io.IOException("Optional.empty");
        java.security.cert.CertificateEncodingException certificateEncodingException2 = new java.security.cert.CertificateEncodingException((java.lang.Throwable) iOException1);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        java.security.KeyException keyException0 = new java.security.KeyException();
        java.security.cert.CertificateException certificateException1 = new java.security.cert.CertificateException((java.lang.Throwable) keyException0);
        java.security.KeyException keyException2 = new java.security.KeyException((java.lang.Throwable) certificateException1);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.lang.String str7 = zoneOffset6.getId();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset6);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset11);
        boolean boolean14 = localDateTime8.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str16 = localDateTime13.format(dateTimeFormatter15);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int18 = localDateTime13.get((java.time.temporal.TemporalField) chronoField17);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.lang.String str22 = zoneOffset21.getId();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.lang.String str27 = zoneOffset26.getId();
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset26);
        boolean boolean29 = localDateTime23.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.format.DateTimeFormatter dateTimeFormatter30 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str31 = localDateTime28.format(dateTimeFormatter30);
        boolean boolean32 = localDateTime13.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean34 = localDateTime13.isSupported((java.time.temporal.TemporalField) chronoField33);
        java.time.Period period36 = java.time.Period.ofYears((int) '\000');
        java.time.Period period38 = period36.minusDays((long) (short) 0);
        java.time.LocalDateTime localDateTime39 = localDateTime13.plus((java.time.temporal.TemporalAmount) period36);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.MAX;
        java.time.Clock clock41 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset40);
        java.time.ZoneId zoneId42 = java.time.ZoneId.systemDefault();
        java.lang.String str43 = zoneId42.getId();
        java.lang.String str44 = zoneId42.getId();
        java.time.ZonedDateTime zonedDateTime45 = java.time.ZonedDateTime.ofInstant(localDateTime39, zoneOffset40, zoneId42);
        java.lang.String str46 = zoneOffset40.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime47 = java.time.OffsetTime.of((int) ':', 214, 0, (int) (byte) 100, zoneOffset40);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 58");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+18:00" + "'", str7, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str16, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+18:00" + "'", str22, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+18:00" + "'", str27, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str31, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField33.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(clock41);
        org.junit.Assert.assertNotNull(zoneId42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Etc/UTC" + "'", str43, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Etc/UTC" + "'", str44, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+18:00" + "'", str46, "+18:00");
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.lang.String str27 = localDateTime20.toString();
        java.time.chrono.Chronology chronology28 = localDateTime20.getChronology();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plusYears((long) (short) 0);
        java.util.concurrent.TimeUnit timeUnit31 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long33 = timeUnit31.toMinutes(1645434849L);
        long long35 = timeUnit31.toNanos((long) 9);
        long long37 = timeUnit31.toMillis((long) 9);
        boolean boolean38 = localDateTime20.equals((java.lang.Object) timeUnit31);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.MAX;
        java.lang.String str42 = zoneOffset41.getId();
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset41);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.lang.String str47 = zoneOffset46.getId();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset46);
        boolean boolean49 = localDateTime43.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.format.DateTimeFormatter dateTimeFormatter50 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str51 = localDateTime48.format(dateTimeFormatter50);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int53 = localDateTime48.get((java.time.temporal.TemporalField) chronoField52);
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.lang.String str57 = zoneOffset56.getId();
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset56);
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.MAX;
        java.lang.String str62 = zoneOffset61.getId();
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset61);
        boolean boolean64 = localDateTime58.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime63);
        java.time.format.DateTimeFormatter dateTimeFormatter65 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str66 = localDateTime63.format(dateTimeFormatter65);
        boolean boolean67 = localDateTime48.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime63);
        java.time.chrono.IsoChronology isoChronology68 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra70 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate73 = isoChronology68.dateYearDay((java.time.chrono.Era) isoEra70, 0, 16);
        java.time.LocalTime localTime74 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime75 = localDate73.atTime(localTime74);
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray78 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList79 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, zoneOffsetTransitionArray78);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray81 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList82 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList82, zoneOffsetTransitionArray81);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray84 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList85 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList85, zoneOffsetTransitionRuleArray84);
        java.time.zone.ZoneRules zoneRules87 = java.time.zone.ZoneRules.of(zoneOffset76, zoneOffset77, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList82, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList85);
        long long88 = localDateTime75.toEpochSecond(zoneOffset76);
        java.time.LocalDateTime localDateTime90 = localDateTime75.plusDays((long) (byte) 1);
        java.time.temporal.Temporal temporal91 = localDateTime63.adjustInto((java.time.temporal.Temporal) localDateTime75);
        java.time.LocalDateTime localDateTime93 = localDateTime75.withNano((int) 'u');
        java.time.Month month94 = localDateTime93.getMonth();
        java.time.LocalDateTime localDateTime96 = localDateTime93.minusWeeks((long) '\000');
        int int97 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime93);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str27, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(timeUnit31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 27L + "'", long33 == 27L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 9000L + "'", long35 == 9000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+18:00" + "'", str42, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+18:00" + "'", str47, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str51, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField52.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+18:00" + "'", str57, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+18:00" + "'", str62, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str66, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(isoChronology68);
        org.junit.Assert.assertTrue("'" + isoEra70 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra70.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(zoneRules87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-62134279201L) + "'", long88 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(temporal91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + month94 + "' != '" + java.time.Month.JANUARY + "'", month94.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1969 + "'", int97 == 1969);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.put(byteBuffer14);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress21 = java.net.InetAddress.getByAddress(byteArray20);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer15.put(byteArray20, (int) '\000', 0);
        // The following exception was thrown during execution in test generation
        try {
            byte byte26 = byteBuffer24.get(999998029);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 999998029");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress21);
        org.junit.Assert.assertNotNull(byteBuffer24);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("italiano", "");
        int int4 = uRISyntaxException3.getIndex();
        java.util.concurrent.ExecutionException executionException5 = new java.util.concurrent.ExecutionException("/1.0.0.100", (java.lang.Throwable) uRISyntaxException3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        java.security.Permission permission2 = null;
        java.security.AccessControlException accessControlException3 = new java.security.AccessControlException("AM/PM", permission2);
        java.security.KeyException keyException4 = new java.security.KeyException("java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]", (java.lang.Throwable) accessControlException3);
        java.security.cert.CertificateEncodingException certificateEncodingException5 = new java.security.cert.CertificateEncodingException((java.lang.Throwable) keyException4);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        java.net.NetworkInterface networkInterface3 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics4.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics4.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics4.getGeometricMeanImpl();
        double double9 = descriptiveStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getSkewnessImpl();
        boolean boolean11 = networkInterface3.equals((java.lang.Object) descriptiveStatistics4);
        int int12 = networkInterface3.getMTU();
        java.util.Locale locale15 = new java.util.Locale("DecimalStyle[0+-.]", "Di");
        boolean boolean16 = networkInterface3.equals((java.lang.Object) "DecimalStyle[0+-.]");
        java.util.Enumeration<java.net.InetAddress> inetAddressEnumeration17 = networkInterface3.getInetAddresses();
        byte[] byteArray18 = networkInterface3.getHardwareAddress();
        java.net.NetworkInterface networkInterface19 = networkInterface3.getParent();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.net.InterfaceAddress> interfaceAddressList20 = networkInterface19.getInterfaceAddresses();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(networkInterface3);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1500 + "'", int12 == 1500);
        org.junit.Assert.assertEquals(locale15.toString(), "decimalstyle[0+-.]_DI");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(inetAddressEnumeration17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[2, 66, -84, 17, 0, 2]");
        org.junit.Assert.assertNull(networkInterface19);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        java.util.OptionalInt optionalInt2 = intStream1.max();
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = optionalInt2.equals(obj3);
        java.util.function.IntSupplier intSupplier5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int6 = optionalInt2.orElseGet(intSupplier5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj3 = charBuffer2.array();
        boolean boolean4 = isoChronology0.equals(obj3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap5 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = strMapMap5.containsKey((java.lang.Object) isoChronology6);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, (-1), 10);
        int int13 = isoChronology0.prolepticYear((java.time.chrono.Era) isoEra8, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate17 = isoChronology0.date(0, 52, 171);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 52");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        java.net.NetworkInterface networkInterface3 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics4.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics4.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics4.getGeometricMeanImpl();
        double double9 = descriptiveStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getSkewnessImpl();
        boolean boolean11 = networkInterface3.equals((java.lang.Object) descriptiveStatistics4);
        int int12 = networkInterface3.getMTU();
        java.util.Locale locale15 = new java.util.Locale("DecimalStyle[0+-.]", "Di");
        boolean boolean16 = networkInterface3.equals((java.lang.Object) "DecimalStyle[0+-.]");
        int int17 = networkInterface3.getIndex();
        java.util.Enumeration<java.net.NetworkInterface> networkInterfaceEnumeration18 = networkInterface3.getSubInterfaces();
        java.util.Enumeration<java.net.InetAddress> inetAddressEnumeration19 = networkInterface3.getInetAddresses();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(networkInterface3);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1500 + "'", int12 == 1500);
        org.junit.Assert.assertEquals(locale15.toString(), "decimalstyle[0+-.]_DI");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 18 + "'", int17 == 18);
        org.junit.Assert.assertNotNull(networkInterfaceEnumeration18);
        org.junit.Assert.assertNotNull(inetAddressEnumeration19);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withYear((int) (short) 1);
        boolean boolean11 = zonedDateTime5.equals((java.lang.Object) zonedDateTime10);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime5.minusMinutes((long) (short) 0);
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime13.minusMinutes((long) 1500);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.util.stream.Collector.Characteristics characteristics0 = java.util.stream.Collector.Characteristics.UNORDERED;
        org.junit.Assert.assertTrue("'" + characteristics0 + "' != '" + java.util.stream.Collector.Characteristics.UNORDERED + "'", characteristics0.equals(java.util.stream.Collector.Characteristics.UNORDERED));
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.lang.String str10 = zoneOffset9.getId();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        boolean boolean22 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        boolean boolean23 = localDateTime11.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray30 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, zoneOffsetTransitionArray30);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray33 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34, zoneOffsetTransitionRuleArray33);
        java.time.zone.ZoneRules zoneRules36 = java.time.zone.ZoneRules.of(zoneOffset25, zoneOffset26, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray42 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, zoneOffsetTransitionArray42);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray45 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46, zoneOffsetTransitionRuleArray45);
        java.time.zone.ZoneRules zoneRules48 = java.time.zone.ZoneRules.of(zoneOffset37, zoneOffset38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray51 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, zoneOffsetTransitionArray51);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray54 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList55 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, zoneOffsetTransitionArray54);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray57 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList58, zoneOffsetTransitionRuleArray57);
        java.time.zone.ZoneRules zoneRules60 = java.time.zone.ZoneRules.of(zoneOffset49, zoneOffset50, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList58);
        boolean boolean61 = zoneOffsetTransitionList40.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55);
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray64 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList65 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, zoneOffsetTransitionArray64);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray67 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList68 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList68, zoneOffsetTransitionArray67);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray70 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList71 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList71, zoneOffsetTransitionRuleArray70);
        java.time.zone.ZoneRules zoneRules73 = java.time.zone.ZoneRules.of(zoneOffset62, zoneOffset63, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList68, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList71);
        int int75 = zoneOffsetTransitionList68.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray78 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList79 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, zoneOffsetTransitionArray78);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray81 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList82 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList82, zoneOffsetTransitionArray81);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray84 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList85 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList85, zoneOffsetTransitionRuleArray84);
        java.time.zone.ZoneRules zoneRules87 = java.time.zone.ZoneRules.of(zoneOffset76, zoneOffset77, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList82, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList85);
        java.time.zone.ZoneRules zoneRules88 = java.time.zone.ZoneRules.of(zoneOffset24, zoneOffset25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList68, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList85);
        java.time.ZoneOffset zoneOffset91 = java.time.ZoneOffset.MAX;
        java.lang.String str92 = zoneOffset91.getId();
        java.time.LocalDateTime localDateTime93 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset91);
        int int94 = zoneOffset25.compareTo(zoneOffset91);
        java.time.OffsetDateTime offsetDateTime95 = java.time.OffsetDateTime.of(localDateTime16, zoneOffset25);
        java.time.zone.ZoneRules zoneRules96 = zoneOffset25.getRules();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime97 = java.time.OffsetDateTime.of(256, (int) (short) 10, (int) (short) 100, 48, 52, 999998029, 10, zoneOffset25);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+18:00" + "'", str10, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneRules60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(zoneRules73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(zoneRules87);
        org.junit.Assert.assertNotNull(zoneRules88);
        org.junit.Assert.assertNotNull(zoneOffset91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "+18:00" + "'", str92, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertNotNull(zoneRules96);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.net.URI uRI4 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI5 = uRI4.normalize();
        java.net.URI uRI10 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI11 = uRI10.normalize();
        java.lang.String str12 = uRI11.getRawPath();
        java.lang.String str13 = uRI11.getFragment();
        java.net.URI uRI14 = uRI4.resolve(uRI11);
        java.net.URI uRI15 = uRI11.parseServerAuthority();
        boolean boolean16 = uRI11.isAbsolute();
        org.junit.Assert.assertNotNull(uRI5);
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/UTC" + "'", str12, "/UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress inetAddress4 = java.net.InetAddress.getByAddress("1970-01-10T18:01:37.000000120+18:00", byteArray3);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: addr is of illegal length");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1]");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        date1.setDate((int) (short) 1);
        date1.setTime(1645434854L);
        date1.setMinutes(2);
        date1.setDate(9);
        org.junit.Assert.assertEquals(date1.toString(), "Fri Jan 09 01:02:54 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime88.plusHours((long) 256);
        int int94 = offsetDateTime88.getHour();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        java.security.InvalidKeyException invalidKeyException1 = new java.security.InvalidKeyException("ParseCaseSensitive(false)Value(Year,4)Value(MonthOfYear,2)Value(DayOfMonth,2)[Offset(+HHMMss,'Z')]");
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str1 = strMapMap0.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap2 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology3 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean4 = strMapMap2.containsKey((java.lang.Object) isoChronology3);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        boolean boolean6 = strMap5.isEmpty();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.Cloneable cloneable10 = strMapMap2.put(strMap5, (java.lang.Cloneable) locale8);
        int int11 = strMap5.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap12 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = strMapMap12.containsKey((java.lang.Object) isoChronology13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal16 = null;
        java.time.temporal.Temporal temporal17 = duration15.subtractFrom(temporal16);
        long long18 = duration15.toDays();
        boolean boolean19 = strMapMap12.contains((java.lang.Object) duration15);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable21 = strMapMap12.get((java.lang.Object) dateTimeFormatter20);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet22 = strMapMap12.keySet();
        java.lang.Cloneable cloneable23 = strMapMap0.put(strMap5, (java.lang.Cloneable) strMapMap12);
        int[] intArray24 = new int[] {};
        java.util.stream.IntStream intStream25 = java.util.stream.IntStream.of(intArray24);
        long long26 = intStream25.count();
        java.lang.Cloneable cloneable27 = strMapMap12.get((java.lang.Object) intStream25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfInt ofInt28 = intStream25.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Stati Uniti" + "'", str9, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 171 + "'", int11 == 171);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNull(temporal17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(cloneable21);
        org.junit.Assert.assertNotNull(strMapSet22);
        org.junit.Assert.assertNull(cloneable23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNull(cloneable27);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        int int90 = offsetDateTime88.getDayOfMonth();
        java.lang.String str91 = offsetDateTime88.toString();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1970-01-01T18:01:37.000000120+18:00" + "'", str91, "1970-01-01T18:01:37.000000120+18:00");
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        double double1 = doubleSummaryStatistics0.getMin();
        doubleSummaryStatistics0.accept((double) 9000L);
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=1, sum=9000.000000, min=9000.000000, average=9000.000000, max=9000.000000}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        java.nio.DoubleBuffer doubleBuffer5 = doubleBuffer4.asReadOnlyBuffer();
        boolean boolean6 = doubleBuffer5.hasRemaining();
        double[] doubleArray10 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer11 = java.nio.DoubleBuffer.wrap(doubleArray10);
        boolean boolean12 = doubleBuffer11.hasArray();
        double[] doubleArray16 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer17 = java.nio.DoubleBuffer.wrap(doubleArray16);
        java.nio.DoubleBuffer doubleBuffer18 = doubleBuffer11.get(doubleArray16);
        java.nio.ByteOrder byteOrder19 = doubleBuffer18.order();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer20 = doubleBuffer5.put(doubleBuffer18);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer17);
        org.junit.Assert.assertNotNull(doubleBuffer18);
        org.junit.Assert.assertNotNull(byteOrder19);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.util.Date date3 = new java.util.Date(999998029, (int) '.', 13);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Oct 23 19:08:16 UTC 169104695");
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean17 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.OffsetTime offsetTime19 = offsetTime13.plusMinutes((long) 'u');
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean21 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField20);
        java.time.Duration duration23 = java.time.Duration.ofMinutes((long) (byte) 1);
        java.time.OffsetTime offsetTime24 = offsetTime13.minus((java.time.temporal.TemporalAmount) duration23);
        java.time.OffsetTime offsetTime26 = offsetTime24.minusMinutes((long) (-4095));
        java.time.ZoneOffset zoneOffset27 = offsetTime24.getOffset();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField20.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(offsetTime24);
        org.junit.Assert.assertNotNull(offsetTime26);
        org.junit.Assert.assertNotNull(zoneOffset27);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.lang.String[] strArray15 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        boolean boolean42 = zoneOffsetTransitionList21.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36);
        zoneOffsetTransitionList21.clear();
        boolean boolean44 = strSet16.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21);
        boolean boolean45 = fileTime1.equals((java.lang.Object) zoneOffsetTransitionList21);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator46 = zoneOffsetTransitionList21.spliterator();
        java.lang.Object[] objArray47 = zoneOffsetTransitionList21.toArray();
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        int int9 = byteBuffer5.remaining();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress16 = java.net.InetAddress.getByAddress(byteArray15);
        java.net.InetAddress inetAddress17 = java.net.InetAddress.getByAddress("1970-01-01", byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer20 = byteBuffer5.get(byteArray15, (int) ' ', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress16);
        org.junit.Assert.assertNotNull(inetAddress17);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long2 = timeUnit0.toMinutes(1645434849L);
        long long4 = timeUnit0.toNanos((long) 9);
        long long6 = timeUnit0.toMillis((long) 9);
        long long8 = timeUnit0.toMillis((long) 2);
        java.util.stream.LongStream.Builder builder9 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream.Builder builder11 = builder9.add((long) '#');
        // The following exception was thrown during execution in test generation
        try {
            timeUnit0.timedWait((java.lang.Object) builder11, (long) 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalMonitorStateException; message: null");
        } catch (java.lang.IllegalMonitorStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeUnit0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 27L + "'", long2 == 27L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9000L + "'", long4 == 9000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        boolean boolean7 = longStream6.isParallel();
        java.util.stream.Stream<java.lang.Long> longStream8 = longStream6.boxed();
        java.util.function.LongBinaryOperator longBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = longStream6.reduce((long) 16448, longBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(longStream8);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        zoneOffsetTransitionList3.clear();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition26 = null;
        boolean boolean27 = zoneOffsetTransitionList3.add(zoneOffsetTransition26);
        java.util.ListIterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionItor28 = zoneOffsetTransitionList3.listIterator();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition29 = zoneOffsetTransitionItor28.next();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition30 = zoneOffsetTransitionItor28.previous();
        boolean boolean31 = zoneOffsetTransitionItor28.hasNext();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition32 = null;
        zoneOffsetTransitionItor28.add(zoneOffsetTransition32);
        // The following exception was thrown during execution in test generation
        try {
            zoneOffsetTransitionItor28.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionItor28);
        org.junit.Assert.assertNull(zoneOffsetTransition29);
        org.junit.Assert.assertNull(zoneOffsetTransition30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.chrono.IsoChronology isoChronology2 = localDate1.getChronology();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap3 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology4 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean5 = strMapMap3.containsKey((java.lang.Object) isoChronology4);
        java.time.chrono.IsoEra isoEra6 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate9 = isoChronology4.dateYearDay((java.time.chrono.Era) isoEra6, (-1), 10);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        long long16 = duration11.toDays();
        java.lang.String str17 = duration11.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate18 = localDate9.plus((java.time.temporal.TemporalAmount) duration11);
        java.time.LocalDate localDate20 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology21 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra23 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate26 = isoChronology21.dateYearDay((java.time.chrono.Era) isoEra23, 0, 16);
        java.time.LocalTime localTime27 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime28 = localDate26.atTime(localTime27);
        java.time.LocalDate localDate30 = localDate26.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod31 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate20, (java.time.chrono.ChronoLocalDate) localDate26);
        java.time.LocalDate localDate33 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate35 = java.time.LocalDate.ofEpochDay((long) 10);
        int int36 = localDate33.compareTo((java.time.chrono.ChronoLocalDate) localDate35);
        java.time.temporal.Temporal temporal37 = localDate20.adjustInto((java.time.temporal.Temporal) localDate35);
        java.time.LocalDate localDate39 = localDate35.withMonth((int) (short) 10);
        java.time.format.DateTimeFormatter dateTimeFormatter40 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.String str41 = localDate35.format(dateTimeFormatter40);
        java.time.Period period42 = localDate9.until((java.time.chrono.ChronoLocalDate) localDate35);
        boolean boolean43 = localDate1.isEqual((java.time.chrono.ChronoLocalDate) localDate9);
        long long44 = localDate1.toEpochDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(isoChronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + isoEra6 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra6.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0S" + "'", str17, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(isoChronology21);
        org.junit.Assert.assertTrue("'" + isoEra23 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra23.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronoPeriod31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "19700111" + "'", str41, "19700111");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 365241780471L + "'", long44 == 365241780471L);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.lang.String str1 = isoChronology0.getCalendarType();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "iso8601" + "'", str1, "iso8601");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: ");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime28 = localDateTime9.plusNanos(11L);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.lang.String str32 = zoneOffset31.getId();
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset31);
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.lang.String str37 = zoneOffset36.getId();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset36);
        boolean boolean39 = localDateTime33.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.format.DateTimeFormatter dateTimeFormatter40 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str41 = localDateTime38.format(dateTimeFormatter40);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int43 = localDateTime38.get((java.time.temporal.TemporalField) chronoField42);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.lang.String str47 = zoneOffset46.getId();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.MAX;
        java.lang.String str52 = zoneOffset51.getId();
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset51);
        boolean boolean54 = localDateTime48.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.format.DateTimeFormatter dateTimeFormatter55 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str56 = localDateTime53.format(dateTimeFormatter55);
        boolean boolean57 = localDateTime38.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean59 = localDateTime38.isSupported((java.time.temporal.TemporalField) chronoField58);
        java.time.Period period61 = java.time.Period.ofYears((int) '\000');
        java.time.Period period63 = period61.minusDays((long) (short) 0);
        java.time.LocalDateTime localDateTime64 = localDateTime38.plus((java.time.temporal.TemporalAmount) period61);
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.MAX;
        java.time.Clock clock66 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset65);
        java.time.ZoneId zoneId67 = java.time.ZoneId.systemDefault();
        java.lang.String str68 = zoneId67.getId();
        java.lang.String str69 = zoneId67.getId();
        java.time.ZonedDateTime zonedDateTime70 = java.time.ZonedDateTime.ofInstant(localDateTime64, zoneOffset65, zoneId67);
        java.time.Instant instant71 = localDateTime9.toInstant(zoneOffset65);
        java.time.chrono.IsoChronology isoChronology72 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra74 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate77 = isoChronology72.dateYearDay((java.time.chrono.Era) isoEra74, 0, 16);
        java.time.LocalTime localTime78 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime79 = localDate77.atTime(localTime78);
        java.time.LocalDate localDate81 = localDate77.withMonth(1);
        java.time.Duration duration82 = java.time.Duration.ZERO;
        java.time.Duration duration83 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal84 = null;
        java.time.temporal.Temporal temporal85 = duration83.subtractFrom(temporal84);
        long long86 = duration83.toDays();
        java.time.Duration duration87 = duration82.plus(duration83);
        java.time.LocalDate localDate88 = localDate81.minus((java.time.temporal.TemporalAmount) duration82);
        java.time.ZoneOffset zoneOffset91 = java.time.ZoneOffset.MAX;
        java.lang.String str92 = zoneOffset91.getId();
        java.time.LocalDateTime localDateTime93 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset91);
        java.time.LocalTime localTime94 = localDateTime93.toLocalTime();
        java.time.temporal.Temporal temporal95 = localDate88.adjustInto((java.time.temporal.Temporal) localDateTime93);
        boolean boolean96 = localDateTime9.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime93);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+18:00" + "'", str32, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+18:00" + "'", str37, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str41, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField42.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+18:00" + "'", str47, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+18:00" + "'", str52, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str56, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField58.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(clock66);
        org.junit.Assert.assertNotNull(zoneId67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Etc/UTC" + "'", str68, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Etc/UTC" + "'", str69, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(isoChronology72);
        org.junit.Assert.assertTrue("'" + isoEra74 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra74.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNull(temporal85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(zoneOffset91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "+18:00" + "'", str92, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertNotNull(temporal95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.Spliterator<java.lang.Long> longSpliterator1 = longStream0.spliterator();
        long long2 = longSpliterator1.estimateSize();
        long long3 = longSpliterator1.estimateSize();
        boolean boolean5 = longSpliterator1.hasCharacteristics((-1));
        boolean boolean7 = longSpliterator1.hasCharacteristics((int) '\000');
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longSpliterator1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        long long6 = java.util.Date.UTC(7, 4096, 0, 41, 70, 70);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 8783316670000L + "'", long6 == 8783316670000L);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int14 = localDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        boolean boolean28 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics29 = new java.util.DoubleSummaryStatistics();
        double double30 = doubleSummaryStatistics29.getMin();
        boolean boolean31 = localDateTime9.equals((java.lang.Object) double30);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray34 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, zoneOffsetTransitionArray34);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray40 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList41, zoneOffsetTransitionRuleArray40);
        java.time.zone.ZoneRules zoneRules43 = java.time.zone.ZoneRules.of(zoneOffset32, zoneOffset33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList41);
        boolean boolean44 = zoneRules43.isFixedOffset();
        java.time.Instant instant45 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition46 = zoneRules43.previousTransition(instant45);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList47 = zoneRules43.getTransitionRules();
        java.time.Instant instant48 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition49 = zoneRules43.previousTransition(instant48);
        java.time.Instant instant50 = java.time.Instant.MAX;
        java.time.Instant instant52 = instant50.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset53 = zoneRules43.getOffset(instant52);
        java.time.Instant instant54 = localDateTime9.toInstant(zoneOffset53);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime56 = localDateTime9.withMonth((-1));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): -1");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals(doubleSummaryStatistics29.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition46);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList47);
        org.junit.Assert.assertNull(zoneOffsetTransition49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(instant54);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        double[] doubleArray3 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        boolean boolean5 = doubleBuffer4.hasArray();
        double[] doubleArray9 = new double[] { '.', (-1), 1.0f };
        java.nio.DoubleBuffer doubleBuffer10 = java.nio.DoubleBuffer.wrap(doubleArray9);
        java.nio.DoubleBuffer doubleBuffer11 = doubleBuffer4.get(doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = doubleBuffer11.get((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[46.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.wrap(byteArray9, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = byteBuffer12.equals((java.lang.Object) isoChronology13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean17 = strMapMap15.containsKey((java.lang.Object) isoChronology16);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, (-1), 10);
        int int23 = isoChronology13.prolepticYear((java.time.chrono.Era) isoEra18, (int) '#');
        java.time.LocalDate localDate26 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra18, (int) (byte) 0, 2);
        java.time.chrono.ChronoPeriod chronoPeriod30 = isoChronology1.period(1, (int) (short) 1, 365);
        java.time.LocalDate localDate32 = isoChronology1.dateEpochDay((long) 365);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray38 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, zoneOffsetTransitionArray38);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray41 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList42 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList42, zoneOffsetTransitionRuleArray41);
        java.time.zone.ZoneRules zoneRules44 = java.time.zone.ZoneRules.of(zoneOffset33, zoneOffset34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList42);
        java.time.Clock clock45 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset33);
        java.time.chrono.IsoChronology isoChronology46 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra48 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate51 = isoChronology46.dateYearDay((java.time.chrono.Era) isoEra48, 0, 16);
        java.time.Duration duration52 = java.time.Duration.ZERO;
        java.time.LocalDate localDate53 = localDate51.plus((java.time.temporal.TemporalAmount) duration52);
        java.time.LocalDateTime localDateTime54 = localDate53.atStartOfDay();
        java.time.LocalDate localDate56 = localDate53.plusYears((long) (byte) -1);
        int int57 = localDate53.lengthOfYear();
        java.time.ZoneId zoneId58 = java.time.ZoneId.systemDefault();
        java.time.ZonedDateTime zonedDateTime59 = localDate53.atStartOfDay(zoneId58);
        boolean boolean60 = clock45.equals((java.lang.Object) localDate53);
        java.time.LocalDate localDate61 = isoChronology1.dateNow(clock45);
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-34) + "'", int23 == (-34));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(clock45);
        org.junit.Assert.assertNotNull(isoChronology46);
        org.junit.Assert.assertTrue("'" + isoEra48 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra48.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 365 + "'", int57 == 365);
        org.junit.Assert.assertNotNull(zoneId58);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.US;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet6);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = strSet6.add("java.security.PrivilegedActionException: java.util.concurrent.TimeoutException: 1970-01-01T18:01:37.00000012");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Stati Uniti" + "'", str5, "Stati Uniti");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime88.plusHours((long) 256);
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime88.minusSeconds((long) '0');
        java.time.OffsetDateTime offsetDateTime97 = offsetDateTime95.plusMinutes((long) 16);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertNotNull(offsetDateTime97);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        boolean boolean14 = path5.startsWith("x-windows-iso2022jp");
        java.nio.file.WatchService watchService15 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind16 = null;
        java.nio.file.WatchEvent.Kind[] kindArray18 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray19 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray18;
        wildcardKindArray19[0] = wildcardKind16;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey22 = path5.register(watchService15, wildcardKindArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(kindArray18);
        org.junit.Assert.assertNotNull(wildcardKindArray19);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.Month month2 = month1.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery3 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period4 = month1.query(periodTemporalQuery3);
        boolean boolean5 = period4.isZero();
        java.time.chrono.Chronology chronology6 = period4.getChronology();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.JANUARY + "'", month2.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.lang.String str5 = uRL4.getQuery();
        java.lang.String str6 = uRL4.getPath();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/1970-01-01T18:01:37.00000012" + "'", str6, "/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        longStream2.close();
        java.util.stream.LongStream longStream4 = longStream2.parallel();
        longStream2.close();
        longStream2.close();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.STANDARD;
        char char3 = decimalStyle2.getZeroDigit();
        java.time.format.DecimalStyle decimalStyle5 = decimalStyle2.withZeroDigit('a');
        java.time.format.DecimalStyle decimalStyle7 = decimalStyle2.withPositiveSign('#');
        java.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withDecimalStyle(decimalStyle7);
        char char9 = decimalStyle7.getZeroDigit();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '0' + "'", char3 == '0');
        org.junit.Assert.assertNotNull(decimalStyle5);
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '0' + "'", char9 == '0');
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray0 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList1 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList1, zoneOffsetTransitionArray0);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream3 = zoneOffsetTransitionList1.stream();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray4 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList5 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, zoneOffsetTransitionArray4);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream7 = zoneOffsetTransitionList5.stream();
        int int8 = zoneOffsetTransitionList5.size();
        boolean boolean9 = zoneOffsetTransitionList1.retainAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition11 = null;
        // The following exception was thrown during execution in test generation
        try {
            zoneOffsetTransitionList1.add(9, zoneOffsetTransition11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.duplicate();
        boolean boolean8 = longBuffer2.isDirect();
        java.nio.LongBuffer longBuffer9 = longBuffer2.duplicate();
        boolean boolean10 = longBuffer9.hasArray();
        java.nio.LongBuffer longBuffer11 = longBuffer9.compact();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longBuffer11);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration1 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal2 = null;
        java.time.temporal.Temporal temporal3 = duration1.subtractFrom(temporal2);
        long long4 = duration1.toDays();
        java.time.Duration duration5 = duration0.minus(duration1);
        java.time.Duration duration7 = duration0.minusHours((long) (short) 0);
        long long8 = duration0.toDays();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNull(temporal3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        java.util.stream.Stream<java.lang.Double> doubleStream2 = doubleStream1.boxed();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream4 = doubleStream1.skip((long) 11000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        double[] doubleArray2 = doubleStream1.toArray();
        java.util.stream.DoubleStream doubleStream3 = doubleStream1.sequential();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleStream3);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.io.File file9 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long10 = file9.lastModified();
        java.net.URL uRL11 = file9.toURL();
        java.security.CodeSigner[] codeSignerArray12 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource13 = new java.security.CodeSource(uRL11, codeSignerArray12);
        java.net.URL uRL14 = codeSource13.getLocation();
        java.lang.String str15 = uRL14.getHost();
        boolean boolean16 = longBuffer5.equals((java.lang.Object) uRL14);
        java.lang.String str17 = uRL14.toString();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertEquals(file9.getParent(), "/");
        org.junit.Assert.assertEquals(file9.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(uRL11);
        org.junit.Assert.assertEquals(uRL11.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray12);
        org.junit.Assert.assertNotNull(uRL14);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "file:/1970-01-01T18:01:37.00000012" + "'", str17, "file:/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        int int0 = java.util.Spliterator.SUBSIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16384 + "'", int0 == 16384);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.util.Iterator<java.nio.file.Path> pathItor13 = path5.iterator();
        java.nio.file.Path path14 = path5.normalize();
        java.nio.file.Path path15 = path5.normalize();
        java.nio.file.WatchService watchService16 = null;
        java.nio.file.WatchEvent.Kind[] kindArray18 = new java.nio.file.WatchEvent.Kind[0];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray19 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray18;
        java.nio.file.WatchEvent.Modifier[] modifierArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey21 = path15.register(watchService16, (java.nio.file.WatchEvent.Kind<?>[]) kindArray18, modifierArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(pathItor13);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(path15);
        org.junit.Assert.assertNotNull(kindArray18);
        org.junit.Assert.assertNotNull(wildcardKindArray19);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration3.subtractFrom(temporal4);
        long long6 = duration3.toDays();
        boolean boolean7 = strMapMap0.contains((java.lang.Object) duration3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        boolean boolean12 = strMap11.isEmpty();
        java.util.Locale locale13 = java.util.Locale.US;
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.lang.Cloneable cloneable16 = strMapMap8.put(strMap11, (java.lang.Cloneable) locale14);
        java.nio.charset.Charset charset18 = strMap11.get((java.lang.Object) "1970-01-01T18:01:37.000000130+18:00");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics19.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics22.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics22.getGeometricMeanImpl();
        descriptiveStatistics19.setSumsqImpl(univariateStatistic25);
        double[] doubleArray27 = descriptiveStatistics19.getSortedValues();
        java.lang.Cloneable cloneable28 = strMapMap0.put(strMap11, (java.lang.Cloneable) doubleArray27);
        boolean boolean29 = strMap11.isEmpty();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Stati Uniti" + "'", str15, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable16);
        org.junit.Assert.assertNull(charset18);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNull(cloneable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.LocalDate localDate92 = offsetDateTime88.toLocalDate();
        long long93 = localDate92.toEpochDay();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withDayOfMonth((int) (short) 10);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.minusHours((long) 999999999);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        boolean boolean8 = zonedDateTime4.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.LocalDate localDate10 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology11 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra13 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate16 = isoChronology11.dateYearDay((java.time.chrono.Era) isoEra13, 0, 16);
        java.time.LocalTime localTime17 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime18 = localDate16.atTime(localTime17);
        java.time.LocalDate localDate20 = localDate16.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod21 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate10, (java.time.chrono.ChronoLocalDate) localDate16);
        java.time.chrono.Era era22 = localDate10.getEra();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronoField7.getFrom((java.time.temporal.TemporalAccessor) localDate10);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField7.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(isoChronology11);
        org.junit.Assert.assertTrue("'" + isoEra13 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra13.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronoPeriod21);
        org.junit.Assert.assertTrue("'" + era22 + "' != '" + java.time.chrono.IsoEra.CE + "'", era22.equals(java.time.chrono.IsoEra.CE));
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.Clock clock12 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset0);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray15 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList16 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, zoneOffsetTransitionArray15);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray18 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, zoneOffsetTransitionArray18);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray21 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22, zoneOffsetTransitionRuleArray21);
        java.time.zone.ZoneRules zoneRules24 = java.time.zone.ZoneRules.of(zoneOffset13, zoneOffset14, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray30 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, zoneOffsetTransitionArray30);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray33 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34, zoneOffsetTransitionRuleArray33);
        java.time.zone.ZoneRules zoneRules36 = java.time.zone.ZoneRules.of(zoneOffset25, zoneOffset26, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34);
        boolean boolean37 = zoneOffsetTransitionList16.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition38 = null;
        boolean boolean39 = zoneOffsetTransitionList16.add(zoneOffsetTransition38);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime41 = java.time.LocalTime.MAX;
        long long42 = chronoField40.getFrom((java.time.temporal.TemporalAccessor) localTime41);
        boolean boolean43 = zoneOffsetTransitionList16.equals((java.lang.Object) localTime41);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal44 = zoneOffset0.adjustInto((java.time.temporal.Temporal) localTime41);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(clock12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField40.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 23L + "'", long42 == 23L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.time.Period period1 = java.time.Period.ofYears((int) '\000');
        java.time.Period period3 = period1.minusDays((long) (short) 0);
        java.time.Period period5 = period3.plusDays((long) (-1));
        java.time.chrono.ChronoPeriod chronoPeriod6 = period5.normalized();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(chronoPeriod6);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(13);
        int int2 = intBuffer1.get();
        int[] intArray3 = new int[] {};
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of(intArray3);
        java.nio.IntBuffer intBuffer5 = intBuffer1.get(intArray3);
        int[] intArray6 = new int[] {};
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of(intArray6);
        java.nio.IntBuffer intBuffer8 = intBuffer5.get(intArray6);
        int[] intArray9 = intBuffer5.array();
        java.lang.String str10 = intBuffer5.toString();
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intBuffer5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.nio.HeapIntBuffer[pos=1 lim=13 cap=13]" + "'", str10, "java.nio.HeapIntBuffer[pos=1 lim=13 cap=13]");
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        long long16 = valueRange15.getMinimum();
        boolean boolean17 = valueRange15.isIntValue();
        long long18 = valueRange15.getSmallestMaximum();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 24L + "'", long18 == 24L);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        long long6 = zonedDateTime2.toEpochSecond();
        java.time.ZonedDateTime zonedDateTime8 = zonedDateTime2.minusMonths((long) (-34));
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime9 = zonedDateTime8.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime11 = zonedDateTime8.minusHours(1645434869L);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645434886L + "'", long6 == 1645434886L);
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime11);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList12 = period11.getUnits();
        java.time.Period period13 = period11.negated();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(temporalUnitList12);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.DoubleStream doubleStream4 = intStream3.asDoubleStream();
        java.util.stream.Stream<java.lang.Double> doubleStream5 = doubleStream4.boxed();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Double> doubleStream6 = doubleStream4.boxed();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(doubleStream5);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double[] doubleArray9 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double10 = univariateStatistic3.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics11.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getGeometricMeanImpl();
        double[] doubleArray20 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double21 = univariateStatistic14.evaluate(doubleArray20);
        double double22 = univariateStatistic3.evaluate(doubleArray20);
        java.util.stream.DoubleStream doubleStream23 = java.util.stream.DoubleStream.of(doubleArray20);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleStream23);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        zoneOffsetTransitionList3.clear();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition26 = null;
        boolean boolean27 = zoneOffsetTransitionList3.add(zoneOffsetTransition26);
        java.util.ListIterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionItor28 = zoneOffsetTransitionList3.listIterator();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition29 = zoneOffsetTransitionItor28.next();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition30 = zoneOffsetTransitionItor28.previous();
        boolean boolean31 = zoneOffsetTransitionItor28.hasNext();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition32 = null;
        zoneOffsetTransitionItor28.add(zoneOffsetTransition32);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition34 = null;
        zoneOffsetTransitionItor28.add(zoneOffsetTransition34);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionItor28);
        org.junit.Assert.assertNull(zoneOffsetTransition29);
        org.junit.Assert.assertNull(zoneOffsetTransition30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.BCE;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate11 = isoChronology1.date((java.time.chrono.Era) isoEra7, (int) (byte) 1, 16384, 9);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 16384");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra7.equals(java.time.chrono.IsoEra.BCE));
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period1 = java.time.Period.parse((java.lang.CharSequence) "ProtectionDomain  null\n null\n <no principals>\n null\n");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text cannot be parsed to a Period");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        boolean boolean3 = charBuffer1.isReadOnly();
        java.nio.CharBuffer charBuffer5 = charBuffer1.put('x');
        java.lang.CharSequence charSequence6 = null;
        java.nio.CharBuffer charBuffer7 = charBuffer1.append(charSequence6);
        java.nio.CharBuffer charBuffer8 = charBuffer1.slice();
        java.io.File file11 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        boolean boolean13 = file11.setWritable(false);
        boolean boolean15 = file11.setWritable(false);
        boolean boolean16 = charBuffer1.equals((java.lang.Object) boolean15);
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.allocate(16);
        int int19 = charBuffer18.limit();
        char char20 = charBuffer18.get();
        char[] charArray25 = new char[] { 'x', 'a', '4', '.' };
        java.nio.CharBuffer charBuffer26 = charBuffer18.get(charArray25);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer29 = charBuffer1.get(charArray25, 14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertEquals(file11.getParent(), "/");
        org.junit.Assert.assertEquals(file11.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + '\000' + "'", char20 == '\000');
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer26);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.util.Iterator<java.nio.file.Path> pathItor13 = path5.iterator();
        java.nio.file.LinkOption linkOption14 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.now(zoneId18);
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime20.withYear((int) (short) 1);
        java.time.LocalTime localTime23 = zonedDateTime22.toLocalTime();
        java.util.stream.DoubleStream doubleStream25 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj26 = properties17.getOrDefault((java.lang.Object) zonedDateTime22, (java.lang.Object) doubleStream25);
        java.lang.Object obj29 = properties17.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration30 = properties17.propertyNames();
        java.nio.file.LinkOption linkOption31 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.lang.Object obj33 = properties17.getOrDefault((java.lang.Object) linkOption31, (java.lang.Object) 9000L);
        java.nio.file.LinkOption linkOption34 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption35 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption36 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray37 = new java.nio.file.LinkOption[] { linkOption14, linkOption15, linkOption31, linkOption34, linkOption35, linkOption36 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path38 = path5.toRealPath(linkOptionArray37);
            org.junit.Assert.fail("Expected exception of type java.nio.file.NoSuchFileException; message: /1970-01-01T18:01:37.00000012");
        } catch (java.nio.file.NoSuchFileException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(pathItor13);
        org.junit.Assert.assertTrue("'" + linkOption14 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption14.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(doubleStream25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(wildcardEnumeration30);
        org.junit.Assert.assertTrue("'" + linkOption31 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption31.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + 9000L + "'", obj33, 9000L);
        org.junit.Assert.assertTrue("'" + linkOption34 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption34.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption35 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption35.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption36 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption36.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray37);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.security.ProtectionDomain protectionDomain2 = new java.security.ProtectionDomain(codeSource0, permissionCollection1);
        java.lang.ClassLoader classLoader3 = protectionDomain2.getClassLoader();
        java.security.Principal[] principalArray4 = protectionDomain2.getPrincipals();
        java.security.PermissionCollection permissionCollection5 = protectionDomain2.getPermissions();
        org.junit.Assert.assertEquals(protectionDomain2.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader3);
        org.junit.Assert.assertNotNull(principalArray4);
        org.junit.Assert.assertNull(permissionCollection5);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.time.Period period11 = isoChronology6.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.ChronoLocalDate chronoLocalDate12 = isoChronology6.dateNow();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate14 = localDateTime13.toLocalDate();
        java.time.chrono.IsoChronology isoChronology15 = localDate14.getChronology();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, 0, 16);
        java.time.LocalTime localTime22 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime23 = localDate21.atTime(localTime22);
        java.time.LocalDate localDate25 = localDate21.withMonth(1);
        boolean boolean26 = localDate14.isAfter((java.time.chrono.ChronoLocalDate) localDate21);
        java.time.chrono.ChronoLocalDate chronoLocalDate27 = isoChronology6.date((java.time.temporal.TemporalAccessor) localDate21);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate29 = localDateTime28.toLocalDate();
        java.time.chrono.IsoChronology isoChronology30 = localDate29.getChronology();
        int int31 = isoChronology6.compareTo((java.time.chrono.Chronology) isoChronology30);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.Era era33 = isoChronology30.eraOf((int) ':');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid era: 58");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoLocalDate12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronoLocalDate27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(isoChronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        short[] shortArray6 = new short[] { (short) 10, (byte) 100, (byte) 10, (short) 10, (short) 10, (byte) 0 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer10 = java.nio.ShortBuffer.wrap(shortArray6, 13, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, 100, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(shortBuffer7);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        char char3 = charBuffer1.get();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate4 = java.time.LocalDate.parse((java.lang.CharSequence) charBuffer1);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '???????????????' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\000' + "'", char3 == '\000');
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.time.Period period1 = java.time.Period.ofYears((int) '\000');
        java.time.chrono.Chronology chronology2 = period1.getChronology();
        java.time.Period period4 = period1.plusYears((long) 'x');
        java.time.chrono.ChronoPeriod chronoPeriod5 = period4.normalized();
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime7 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray10 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, zoneOffsetTransitionArray10);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray16 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17, zoneOffsetTransitionRuleArray16);
        java.time.zone.ZoneRules zoneRules19 = java.time.zone.ZoneRules.of(zoneOffset8, zoneOffset9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17);
        java.time.OffsetTime offsetTime20 = localTime7.atOffset(zoneOffset8);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange22 = offsetTime20.range((java.time.temporal.TemporalField) chronoField21);
        java.time.OffsetTime offsetTime24 = chronoField6.adjustInto(offsetTime20, (long) 16);
        java.time.LocalTime localTime25 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray28 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList29 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList29, zoneOffsetTransitionArray28);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray31 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList32 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, zoneOffsetTransitionArray31);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray34 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList35 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList35, zoneOffsetTransitionRuleArray34);
        java.time.zone.ZoneRules zoneRules37 = java.time.zone.ZoneRules.of(zoneOffset26, zoneOffset27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList29, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList35);
        java.time.OffsetTime offsetTime38 = localTime25.atOffset(zoneOffset26);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange40 = offsetTime38.range((java.time.temporal.TemporalField) chronoField39);
        long long41 = offsetTime24.getLong((java.time.temporal.TemporalField) chronoField39);
        boolean boolean42 = period4.equals((java.lang.Object) offsetTime24);
        java.time.OffsetTime offsetTime44 = offsetTime24.plusMinutes((long) 16384);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(chronoPeriod5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField6.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField21.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange22);
        org.junit.Assert.assertNotNull(offsetTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneRules37);
        org.junit.Assert.assertNotNull(offsetTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 23L + "'", long41 == 23L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(offsetTime44);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.DayOfWeek dayOfWeek8 = localDate5.getDayOfWeek();
        java.time.temporal.TemporalField temporalField9 = null;
        boolean boolean10 = localDate5.isSupported(temporalField9);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + dayOfWeek8 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek8.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Fri");
        boolean boolean2 = printStream1.checkError();
        printStream1.print((double) (byte) -1);
        printStream1.flush();
        char[] charArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            printStream1.print(charArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = chronoField0.checkValidIntValue((long) 'u');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for AmPmOfDay (valid values 0 - 1): 117");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        java.time.Duration duration7 = java.time.Duration.ZERO;
        java.time.Duration duration8 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal9 = null;
        java.time.temporal.Temporal temporal10 = duration8.subtractFrom(temporal9);
        long long11 = duration8.toDays();
        java.time.Duration duration12 = duration7.plus(duration8);
        long long13 = duration8.toDays();
        java.lang.String str14 = duration8.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate15 = localDate6.plus((java.time.temporal.TemporalAmount) duration8);
        java.time.LocalDate localDate17 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology18 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra20 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate23 = isoChronology18.dateYearDay((java.time.chrono.Era) isoEra20, 0, 16);
        java.time.LocalTime localTime24 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime25 = localDate23.atTime(localTime24);
        java.time.LocalDate localDate27 = localDate23.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod28 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate17, (java.time.chrono.ChronoLocalDate) localDate23);
        java.time.LocalDate localDate30 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate32 = java.time.LocalDate.ofEpochDay((long) 10);
        int int33 = localDate30.compareTo((java.time.chrono.ChronoLocalDate) localDate32);
        java.time.temporal.Temporal temporal34 = localDate17.adjustInto((java.time.temporal.Temporal) localDate32);
        int int35 = localDate32.getDayOfYear();
        java.time.LocalDate localDate36 = localDate6.with((java.time.temporal.TemporalAdjuster) localDate32);
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNull(temporal10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(isoChronology18);
        org.junit.Assert.assertTrue("'" + isoEra20 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra20.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronoPeriod28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) 0);
        java.lang.String str2 = parsePosition1.toString();
        parsePosition1.setIndex(0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=0,errorIndex=-1]");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        boolean boolean4 = file2.setWritable(false);
        long long5 = file2.getUsableSpace();
        java.lang.String str6 = file2.getAbsolutePath();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/1970-01-01T18:01:37.00000012" + "'", str6, "/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.net.URL uRL7 = codeSource6.getLocation();
        java.security.cert.Certificate[] certificateArray8 = codeSource6.getCertificates();
        java.security.CodeSigner[] codeSignerArray9 = codeSource6.getCodeSigners();
        java.lang.String str10 = codeSource6.toString();
        java.io.File file13 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long14 = file13.lastModified();
        java.net.URL uRL15 = file13.toURL();
        java.security.CodeSigner[] codeSignerArray16 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource17 = new java.security.CodeSource(uRL15, codeSignerArray16);
        java.net.URL uRL19 = new java.net.URL(uRL15, "/");
        int int20 = uRL19.getPort();
        java.security.cert.Certificate[] certificateArray21 = new java.security.cert.Certificate[] {};
        java.security.CodeSource codeSource22 = new java.security.CodeSource(uRL19, certificateArray21);
        java.net.URL uRL23 = codeSource22.getLocation();
        boolean boolean24 = codeSource6.implies(codeSource22);
        java.net.URL uRL25 = codeSource22.getLocation();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertNotNull(uRL7);
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(certificateArray8);
        org.junit.Assert.assertNotNull(codeSignerArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(file:/1970-01-01T18:01:37.00000012 <no signer certificates>)" + "'", str10, "(file:/1970-01-01T18:01:37.00000012 <no signer certificates>)");
        org.junit.Assert.assertEquals(file13.getParent(), "/");
        org.junit.Assert.assertEquals(file13.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(uRL15);
        org.junit.Assert.assertEquals(uRL15.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray16);
        org.junit.Assert.assertEquals(uRL19.toString(), "file:/");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(certificateArray21);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(uRL25);
        org.junit.Assert.assertEquals(uRL25.toString(), "file:/");
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.DoubleStream doubleStream4 = intStream3.asDoubleStream();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate(16);
        int int7 = charBuffer6.limit();
        java.util.stream.IntStream intStream8 = charBuffer6.chars();
        java.util.stream.DoubleStream doubleStream9 = intStream8.asDoubleStream();
        java.util.stream.DoubleStream doubleStream10 = java.util.stream.DoubleStream.concat(doubleStream4, doubleStream9);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics11 = new java.util.DoubleSummaryStatistics();
        double double12 = doubleSummaryStatistics11.getMin();
        double double13 = doubleSummaryStatistics11.getSum();
        double double14 = doubleSummaryStatistics11.getMax();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics15 = new java.util.DoubleSummaryStatistics();
        double double16 = doubleSummaryStatistics15.getMin();
        double double17 = doubleSummaryStatistics15.getSum();
        doubleSummaryStatistics11.combine(doubleSummaryStatistics15);
        // The following exception was thrown during execution in test generation
        try {
            doubleStream9.forEachOrdered((java.util.function.DoubleConsumer) doubleSummaryStatistics15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertEquals(doubleSummaryStatistics11.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.NEGATIVE_INFINITY + "'", double14 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertEquals(doubleSummaryStatistics15.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition25 = null;
        boolean boolean26 = zoneOffsetTransitionList3.add(zoneOffsetTransition25);
        java.lang.Object[] objArray27 = zoneOffsetTransitionList3.toArray();
        java.lang.String[] strArray28 = java.util.Locale.getISOLanguages();
        java.lang.String[] strArray29 = zoneOffsetTransitionList3.toArray(strArray28);
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.time.ZoneId zoneId32 = java.time.ZoneId.systemDefault();
        java.lang.String str33 = zoneId32.getId();
        java.time.ZonedDateTime zonedDateTime34 = java.time.ZonedDateTime.now(zoneId32);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime34.withYear((int) (short) 1);
        java.time.LocalTime localTime37 = zonedDateTime36.toLocalTime();
        java.util.stream.DoubleStream doubleStream39 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj40 = properties31.getOrDefault((java.lang.Object) zonedDateTime36, (java.lang.Object) doubleStream39);
        java.lang.Object obj43 = properties31.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration44 = properties31.propertyNames();
        boolean boolean45 = zoneOffsetTransitionList3.remove((java.lang.Object) properties31);
        java.lang.Object obj48 = properties31.setProperty("java.util.concurrent.ExecutionException: java.nio.channels.AsynchronousCloseException", "2022-02-21T09:14:01.826Z[Etc/UTC]");
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties31.keys();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[null]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Etc/UTC" + "'", str33, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(doubleStream39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(wildcardEnumeration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration49);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanese" + "'", str1, "Japanese");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        java.lang.String str3 = date1.toString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Thu Jan 01 00:00:00 UTC 1970" + "'", str3, "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        boolean boolean12 = zoneRules11.isFixedOffset();
        java.time.Instant instant13 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition14 = zoneRules11.previousTransition(instant13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate18 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.MAX;
        java.lang.String str28 = zoneOffset27.getId();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset27);
        boolean boolean30 = localDateTime24.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.MAX;
        java.lang.String str34 = zoneOffset33.getId();
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset33);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.lang.String str39 = zoneOffset38.getId();
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset38);
        boolean boolean41 = localDateTime35.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.time.format.DateTimeFormatter dateTimeFormatter42 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str43 = localDateTime40.format(dateTimeFormatter42);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int45 = localDateTime40.get((java.time.temporal.TemporalField) chronoField44);
        boolean boolean46 = localDateTime29.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.lang.String str47 = localDateTime40.toString();
        java.time.chrono.Chronology chronology48 = localDateTime40.getChronology();
        java.time.LocalDateTime localDateTime50 = localDateTime40.plusYears((long) (short) 0);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.MAX;
        java.lang.String str54 = zoneOffset53.getId();
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset53);
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray58 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList59 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList59, zoneOffsetTransitionArray58);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray61 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList62 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, zoneOffsetTransitionArray61);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray64 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList65 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList65, zoneOffsetTransitionRuleArray64);
        java.time.zone.ZoneRules zoneRules67 = java.time.zone.ZoneRules.of(zoneOffset56, zoneOffset57, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList59, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList65);
        int int68 = zoneOffset53.compareTo(zoneOffset56);
        long long69 = localDateTime50.toEpochSecond(zoneOffset56);
        java.lang.String str70 = zoneOffset56.getId();
        boolean boolean71 = zoneRules11.isValidOffset(localDateTime19, zoneOffset56);
        java.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = localDateTime19.format(dateTimeFormatter72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: formatter");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition14);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+18:00" + "'", str28, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+18:00" + "'", str34, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+18:00" + "'", str39, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str43, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField44.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str47, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+18:00" + "'", str54, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 97L + "'", long69 == 97L);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+18:00" + "'", str70, "+18:00");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics3.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic6);
        double[] doubleArray8 = descriptiveStatistics0.getSortedValues();
        java.lang.String str9 = descriptiveStatistics0.toString();
        double double10 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics11.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getGeometricMeanImpl();
        double[] doubleArray20 = new double[] { 0, 1969, 1.0d, 'x', (short) -1 };
        double double21 = univariateStatistic14.evaluate(doubleArray20);
        descriptiveStatistics0.setSumImpl(univariateStatistic14);
        double double23 = descriptiveStatistics0.getSum();
        double[] doubleArray24 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 1969.0, 1.0, 120.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.FRIDAY;
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap1 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology2 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean3 = strMapMap1.containsKey((java.lang.Object) isoChronology2);
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal5 = null;
        java.time.temporal.Temporal temporal6 = duration4.subtractFrom(temporal5);
        long long7 = duration4.toDays();
        boolean boolean8 = strMapMap1.contains((java.lang.Object) duration4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray11 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, zoneOffsetTransitionArray11);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray17 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList18, zoneOffsetTransitionRuleArray17);
        java.time.zone.ZoneRules zoneRules20 = java.time.zone.ZoneRules.of(zoneOffset9, zoneOffset10, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList18);
        java.time.Clock clock21 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset9);
        java.time.format.TextStyle textStyle22 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = zoneOffset9.getDisplayName(textStyle22, locale23);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray25 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, zoneOffsetTransitionArray25);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream28 = zoneOffsetTransitionList26.stream();
        int int29 = zoneOffsetTransitionList26.size();
        java.lang.Cloneable cloneable30 = strMapMap1.getOrDefault((java.lang.Object) textStyle22, (java.lang.Cloneable) zoneOffsetTransitionList26);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String str33 = locale32.toLanguageTag();
        java.lang.String str34 = chronoField31.getDisplayName(locale32);
        java.lang.String str35 = locale32.getScript();
        java.lang.String str36 = dayOfWeek0.getDisplayName(textStyle22, locale32);
        java.time.format.TextStyle textStyle37 = textStyle22.asNormal();
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNull(temporal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertTrue("'" + textStyle22 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle22.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+18:00" + "'", str24, "+18:00");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(cloneable30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField31.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en-GB" + "'", str33, "en-GB");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AlignedWeekOfYear" + "'", str34, "AlignedWeekOfYear");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Fri" + "'", str36, "Fri");
        org.junit.Assert.assertTrue("'" + textStyle37 + "' != '" + java.time.format.TextStyle.SHORT + "'", textStyle37.equals(java.time.format.TextStyle.SHORT));
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        java.nio.IntBuffer intBuffer2 = java.nio.IntBuffer.wrap(intArray0);
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate(16);
        int int5 = charBuffer4.limit();
        java.util.stream.IntStream intStream6 = charBuffer4.chars();
        int[] intArray7 = intStream6.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer10 = intBuffer2.put(intArray7, 365, 171);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intBuffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.io.File file1 = new java.io.File("iso8601");
        boolean boolean2 = file1.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "iso8601");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.util.stream.Stream.Builder<java.util.stream.DoubleStream> doubleStreamBuilder0 = java.util.stream.Stream.builder();
        org.junit.Assert.assertNotNull(doubleStreamBuilder0);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        boolean boolean11 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.format.DateTimeFormatter dateTimeFormatter12 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str13 = localDateTime10.format(dateTimeFormatter12);
        java.time.chrono.Chronology chronology14 = dateTimeFormatter12.getChronology();
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra17 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate20 = isoChronology15.dateYearDay((java.time.chrono.Era) isoEra17, 0, 16);
        java.time.LocalTime localTime21 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime22 = localDate20.atTime(localTime21);
        java.time.LocalDate localDate24 = localDate20.withMonth(1);
        java.time.chrono.ChronoLocalDate chronoLocalDate25 = chronology14.date((java.time.temporal.TemporalAccessor) localDate20);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray28 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList29 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList29, zoneOffsetTransitionArray28);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray31 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList32 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, zoneOffsetTransitionArray31);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray34 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList35 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList35, zoneOffsetTransitionRuleArray34);
        java.time.zone.ZoneRules zoneRules37 = java.time.zone.ZoneRules.of(zoneOffset26, zoneOffset27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList29, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList32, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList35);
        java.time.Clock clock38 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset26);
        java.time.format.TextStyle textStyle39 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = zoneOffset26.getDisplayName(textStyle39, locale40);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        java.time.format.DateTimeFormatter dateTimeFormatter43 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale44 = dateTimeFormatter43.getLocale();
        java.lang.String str45 = chronoField42.getDisplayName(locale44);
        java.lang.String str46 = chronology14.getDisplayName(textStyle39, locale44);
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter47 = java.time.format.DateTimeFormatter.ofPattern("Thu Jan 01 00:00:00 UTC 1970", locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown pattern letter: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str13, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertTrue("'" + isoEra17 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra17.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronoLocalDate25);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneRules37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + textStyle39 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle39.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+18:00" + "'", str41, "+18:00");
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField42.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AM/PM" + "'", str45, "AM/PM");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISO" + "'", str46, "ISO");
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putFloat((-1.0f));
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZonedDateTime zonedDateTime7 = zonedDateTime5.minusYears((long) (short) 0);
        java.time.LocalDate localDate9 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology10 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra12 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate15 = isoChronology10.dateYearDay((java.time.chrono.Era) isoEra12, 0, 16);
        java.time.LocalTime localTime16 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime17 = localDate15.atTime(localTime16);
        java.time.LocalDate localDate19 = localDate15.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod20 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate9, (java.time.chrono.ChronoLocalDate) localDate15);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray29 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30, zoneOffsetTransitionRuleArray29);
        java.time.zone.ZoneRules zoneRules32 = java.time.zone.ZoneRules.of(zoneOffset21, zoneOffset22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList30);
        java.time.Clock clock33 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset21);
        java.time.format.TextStyle textStyle34 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = zoneOffset21.getDisplayName(textStyle34, locale35);
        java.time.ZonedDateTime zonedDateTime37 = localDate9.atStartOfDay((java.time.ZoneId) zoneOffset21);
        boolean boolean38 = zonedDateTime5.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime37);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime40 = zonedDateTime5.withDayOfYear(78000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 78000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(isoChronology10);
        org.junit.Assert.assertTrue("'" + isoEra12 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra12.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronoPeriod20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(clock33);
        org.junit.Assert.assertTrue("'" + textStyle34 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle34.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+18:00" + "'", str36, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra29 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate32 = isoChronology27.dateYearDay((java.time.chrono.Era) isoEra29, 0, 16);
        java.time.LocalTime localTime33 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime34 = localDate32.atTime(localTime33);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray43 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44, zoneOffsetTransitionRuleArray43);
        java.time.zone.ZoneRules zoneRules46 = java.time.zone.ZoneRules.of(zoneOffset35, zoneOffset36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44);
        long long47 = localDateTime34.toEpochSecond(zoneOffset35);
        java.time.LocalDateTime localDateTime49 = localDateTime34.plusDays((long) (byte) 1);
        boolean boolean50 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.Duration duration51 = java.time.Duration.ZERO;
        java.time.Duration duration53 = duration51.minusMillis((long) (byte) 0);
        java.time.chrono.IsoChronology isoChronology55 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer57 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj58 = charBuffer57.array();
        boolean boolean59 = isoChronology55.equals(obj58);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap60 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology61 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean62 = strMapMap60.containsKey((java.lang.Object) isoChronology61);
        java.time.chrono.IsoEra isoEra63 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate66 = isoChronology61.dateYearDay((java.time.chrono.Era) isoEra63, (-1), 10);
        int int68 = isoChronology55.prolepticYear((java.time.chrono.Era) isoEra63, 0);
        java.time.Month month69 = java.time.Month.JANUARY;
        java.time.Month month70 = month69.firstMonthOfQuarter();
        java.time.Month month71 = month70.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean73 = month71.isSupported((java.time.temporal.TemporalField) chronoField72);
        boolean boolean74 = isoEra63.isSupported((java.time.temporal.TemporalField) chronoField72);
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField72.getRangeUnit();
        java.time.Duration duration76 = duration51.minus((long) 0, temporalUnit75);
        boolean boolean77 = localDateTime49.isSupported(temporalUnit75);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime79 = localDateTime49.withSecond(100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + isoEra29 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra29.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-62134279201L) + "'", long47 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(isoChronology55);
        org.junit.Assert.assertNotNull(charBuffer57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(isoChronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + isoEra63 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra63.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + month69 + "' != '" + java.time.Month.JANUARY + "'", month69.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month70 + "' != '" + java.time.Month.JANUARY + "'", month70.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month71 + "' != '" + java.time.Month.JANUARY + "'", month71.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField72.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Month month1 = java.time.Month.of(21);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear: 21");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]", "0", file2);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/java.nio.HeapLongBuffer[pos=0 lim=1 cap=1]20559111247421894660");
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal1 = null;
        java.time.temporal.Temporal temporal2 = duration0.subtractFrom(temporal1);
        long long3 = duration0.toDays();
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration0.addTo(temporal4);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, 0, 16);
        java.time.LocalTime localTime12 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime13 = localDate11.atTime(localTime12);
        java.time.LocalTime localTime15 = localTime12.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean18 = strMapMap16.containsKey((java.lang.Object) isoChronology17);
        java.time.chrono.IsoEra isoEra19 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate22 = isoChronology17.dateYearDay((java.time.chrono.Era) isoEra19, (-1), 10);
        java.time.Duration duration23 = java.time.Duration.ZERO;
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal25 = null;
        java.time.temporal.Temporal temporal26 = duration24.subtractFrom(temporal25);
        long long27 = duration24.toDays();
        java.time.Duration duration28 = duration23.plus(duration24);
        long long29 = duration24.toDays();
        java.lang.String str30 = duration24.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate31 = localDate22.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.LocalTime localTime32 = localTime12.minus((java.time.temporal.TemporalAmount) duration24);
        java.time.temporal.Temporal temporal33 = duration0.addTo((java.time.temporal.Temporal) localTime12);
        java.time.LocalTime localTime34 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray43 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44, zoneOffsetTransitionRuleArray43);
        java.time.zone.ZoneRules zoneRules46 = java.time.zone.ZoneRules.of(zoneOffset35, zoneOffset36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44);
        java.time.OffsetTime offsetTime47 = localTime34.atOffset(zoneOffset35);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange49 = offsetTime47.range((java.time.temporal.TemporalField) chronoField48);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean51 = offsetTime47.isSupported((java.time.temporal.TemporalField) chronoField50);
        java.time.OffsetTime offsetTime53 = offsetTime47.plusMinutes((long) 'u');
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean55 = offsetTime47.isSupported((java.time.temporal.TemporalField) chronoField54);
        java.time.temporal.Temporal temporal56 = localTime12.adjustInto((java.time.temporal.Temporal) offsetTime47);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray59 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList60 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, zoneOffsetTransitionArray59);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray62 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList63 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, zoneOffsetTransitionArray62);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray65 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList66 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66, zoneOffsetTransitionRuleArray65);
        java.time.zone.ZoneRules zoneRules68 = java.time.zone.ZoneRules.of(zoneOffset57, zoneOffset58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList60, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList66);
        java.time.Clock clock69 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset57);
        java.time.format.TextStyle textStyle70 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.lang.String str72 = zoneOffset57.getDisplayName(textStyle70, locale71);
        java.time.OffsetTime offsetTime73 = offsetTime47.withOffsetSameLocal(zoneOffset57);
        java.time.temporal.TemporalUnit temporalUnit75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime76 = offsetTime47.minus(9000L, temporalUnit75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNull(temporal2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + isoEra19 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra19.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNull(temporal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0S" + "'", str30, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNotNull(offsetTime47);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField48.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField50.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(offsetTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField54.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(temporal56);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(zoneRules68);
        org.junit.Assert.assertNotNull(clock69);
        org.junit.Assert.assertTrue("'" + textStyle70 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle70.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+18:00" + "'", str72, "+18:00");
        org.junit.Assert.assertNotNull(offsetTime73);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.String str2 = properties1.toString();
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.MAX;
        java.lang.String str6 = zoneOffset5.getId();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset5);
        java.time.LocalTime localTime8 = localDateTime7.toLocalTime();
        java.time.LocalDate localDate9 = localDateTime7.toLocalDate();
        java.time.format.DateTimeFormatter dateTimeFormatter10 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.format.DecimalStyle decimalStyle11 = java.time.format.DecimalStyle.ofDefaultLocale();
        java.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withDecimalStyle(decimalStyle11);
        java.lang.String str13 = localDate9.format(dateTimeFormatter10);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.lang.String str23 = zoneOffset22.getId();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset22);
        boolean boolean25 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str27 = localDateTime24.format(dateTimeFormatter26);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int29 = localDateTime24.get((java.time.temporal.TemporalField) chronoField28);
        java.time.ZoneId zoneId30 = java.time.ZoneId.systemDefault();
        java.lang.String str31 = zoneId30.getId();
        java.time.ZonedDateTime zonedDateTime32 = java.time.ZonedDateTime.now(zoneId30);
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime32.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit35 = null;
        boolean boolean36 = zonedDateTime32.isSupported(temporalUnit35);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange38 = zonedDateTime32.range((java.time.temporal.TemporalField) chronoField37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime40 = java.time.LocalTime.MAX;
        long long41 = chronoField39.getFrom((java.time.temporal.TemporalAccessor) localTime40);
        boolean boolean42 = zonedDateTime32.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.time.ZoneId zoneId43 = java.time.ZoneId.systemDefault();
        java.lang.String str44 = zoneId43.getId();
        java.lang.String str45 = zoneId43.getId();
        java.time.ZonedDateTime zonedDateTime46 = zonedDateTime32.withZoneSameInstant(zoneId43);
        long long47 = chronoField28.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime32);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.ZoneId zoneId49 = java.time.ZoneId.systemDefault();
        java.lang.String str50 = zoneId49.getId();
        java.time.ZonedDateTime zonedDateTime51 = java.time.ZonedDateTime.now(zoneId49);
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime51.withYear((int) (short) 1);
        java.time.LocalTime localTime54 = zonedDateTime53.toLocalTime();
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.lang.String str58 = zoneOffset57.getId();
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset57);
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray62 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList63 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, zoneOffsetTransitionArray62);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray65 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList66 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList66, zoneOffsetTransitionArray65);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray68 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList69 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList69, zoneOffsetTransitionRuleArray68);
        java.time.zone.ZoneRules zoneRules71 = java.time.zone.ZoneRules.of(zoneOffset60, zoneOffset61, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList63, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList66, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList69);
        int int72 = zoneOffset57.compareTo(zoneOffset60);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime73 = zonedDateTime53.withZoneSameLocal((java.time.ZoneId) zoneOffset57);
        java.time.ZoneId zoneId74 = java.time.ZoneId.systemDefault();
        java.lang.String str75 = zoneId74.getId();
        java.time.ZonedDateTime zonedDateTime76 = java.time.ZonedDateTime.now(zoneId74);
        java.time.ZonedDateTime zonedDateTime78 = zonedDateTime76.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit79 = null;
        boolean boolean80 = zonedDateTime76.isSupported(temporalUnit79);
        java.time.temporal.ChronoField chronoField81 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange82 = zonedDateTime76.range((java.time.temporal.TemporalField) chronoField81);
        java.time.temporal.ChronoField chronoField83 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime84 = java.time.LocalTime.MAX;
        long long85 = chronoField83.getFrom((java.time.temporal.TemporalAccessor) localTime84);
        boolean boolean86 = zonedDateTime76.isSupported((java.time.temporal.TemporalField) chronoField83);
        boolean boolean87 = chronoField83.isDateBased();
        int int88 = zonedDateTime53.get((java.time.temporal.TemporalField) chronoField83);
        java.time.Instant instant89 = java.time.Instant.EPOCH;
        java.time.temporal.ChronoField chronoField90 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean91 = instant89.isSupported((java.time.temporal.TemporalField) chronoField90);
        java.time.temporal.ChronoField chronoField92 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.ValueRange valueRange93 = chronoField92.range();
        java.time.temporal.TemporalField[] temporalFieldArray94 = new java.time.temporal.TemporalField[] { chronoField14, chronoField28, chronoField48, chronoField83, chronoField90, chronoField92 };
        java.time.format.DateTimeFormatter dateTimeFormatter95 = dateTimeFormatter10.withResolverFields(temporalFieldArray94);
        java.lang.Object obj96 = properties1.remove((java.lang.Object) temporalFieldArray94);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+18:00" + "'", str6, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(decimalStyle11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+18:00" + "'", str23, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str27, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField28.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField37.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 23L + "'", long41 == 23L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(zoneId43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Etc/UTC" + "'", str44, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 8L + "'", long47 == 8L);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField48.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(zoneId49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Etc/UTC" + "'", str50, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+18:00" + "'", str58, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(zoneRules71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime73);
        org.junit.Assert.assertNotNull(zoneId74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Etc/UTC" + "'", str75, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime76);
        org.junit.Assert.assertNotNull(zonedDateTime78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + chronoField81 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField81.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange82);
        org.junit.Assert.assertTrue("'" + chronoField83 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField83.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 23L + "'", long85 == 23L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertTrue("'" + chronoField90 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField90.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + chronoField92 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField92.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(valueRange93);
        org.junit.Assert.assertNotNull(temporalFieldArray94);
        org.junit.Assert.assertNotNull(dateTimeFormatter95);
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        boolean boolean1 = strMap0.isEmpty();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate3 = java.util.function.Predicate.isEqual((java.lang.Object) strMap0);
        java.time.LocalTime localTime4 = java.time.LocalTime.MIN;
        boolean boolean5 = strMap0.containsValue((java.lang.Object) localTime4);
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(resolverStylePredicate3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.io.InvalidObjectException invalidObjectException1 = new java.io.InvalidObjectException("/1.0.0.100");
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        int int0 = java.util.Spliterator.IMMUTABLE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1024 + "'", int0 == 1024);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.security.CodeSigner[] codeSignerArray5 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource6 = new java.security.CodeSource(uRL4, codeSignerArray5);
        java.lang.String str7 = uRL4.getAuthority();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(codeSignerArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.util.function.DoubleUnaryOperator doubleUnaryOperator1 = java.util.function.DoubleUnaryOperator.identity();
        java.util.stream.DoubleStream doubleStream2 = java.util.stream.DoubleStream.iterate((double) '0', doubleUnaryOperator1);
        java.util.function.DoubleToIntFunction doubleToIntFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = doubleStream2.mapToInt(doubleToIntFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleUnaryOperator1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(168);
        org.junit.Assert.assertNotNull(intBuffer1);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        java.time.Period period1 = java.time.Period.ofYears((int) '\000');
        java.time.chrono.Chronology chronology2 = period1.getChronology();
        java.time.Period period4 = period1.plusYears((long) 'x');
        java.time.Period period6 = period4.multipliedBy(31);
        int int7 = period4.getDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble3 = doubleStream1.min();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        intStream3.close();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate(16);
        int int7 = charBuffer6.limit();
        java.util.stream.IntStream intStream8 = charBuffer6.chars();
        java.util.LongSummaryStatistics longSummaryStatistics9 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream12 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics13 = longStream12.summaryStatistics();
        java.util.function.IntConsumer intConsumer14 = longSummaryStatistics9.andThen((java.util.function.IntConsumer) longSummaryStatistics13);
        java.util.stream.IntStream intStream15 = intStream8.peek((java.util.function.IntConsumer) longSummaryStatistics9);
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.allocate(16);
        int int18 = charBuffer17.limit();
        java.util.stream.IntStream intStream19 = charBuffer17.chars();
        java.util.LongSummaryStatistics longSummaryStatistics20 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream23 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics24 = longStream23.summaryStatistics();
        java.util.function.IntConsumer intConsumer25 = longSummaryStatistics20.andThen((java.util.function.IntConsumer) longSummaryStatistics24);
        java.util.stream.IntStream intStream26 = intStream19.peek((java.util.function.IntConsumer) longSummaryStatistics20);
        longSummaryStatistics9.combine(longSummaryStatistics20);
        java.util.LongSummaryStatistics longSummaryStatistics28 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream31 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics32 = longStream31.summaryStatistics();
        java.util.function.IntConsumer intConsumer33 = longSummaryStatistics28.andThen((java.util.function.IntConsumer) longSummaryStatistics32);
        java.util.function.IntConsumer intConsumer34 = longSummaryStatistics9.andThen((java.util.function.IntConsumer) longSummaryStatistics28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream35 = intStream3.peek(intConsumer34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertEquals(longSummaryStatistics9.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(longSummaryStatistics13);
        org.junit.Assert.assertEquals(longSummaryStatistics13.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer14);
        org.junit.Assert.assertNotNull(intStream15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(intStream19);
        org.junit.Assert.assertEquals(longSummaryStatistics20.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream23);
        org.junit.Assert.assertNotNull(longSummaryStatistics24);
        org.junit.Assert.assertEquals(longSummaryStatistics24.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer25);
        org.junit.Assert.assertNotNull(intStream26);
        org.junit.Assert.assertEquals(longSummaryStatistics28.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream31);
        org.junit.Assert.assertNotNull(longSummaryStatistics32);
        org.junit.Assert.assertEquals(longSummaryStatistics32.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer33);
        org.junit.Assert.assertNotNull(intConsumer34);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        char char3 = charBuffer1.get();
        char[] charArray8 = new char[] { 'x', 'a', '4', '.' };
        java.nio.CharBuffer charBuffer9 = charBuffer1.get(charArray8);
        int int10 = charBuffer1.arrayOffset();
        java.nio.CharBuffer charBuffer11 = java.nio.CharBuffer.wrap((java.lang.CharSequence) charBuffer1);
        java.util.stream.IntStream intStream12 = charBuffer11.codePoints();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\000' + "'", char3 == '\000');
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(intStream12);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.lang.String str5 = uRL4.getQuery();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        boolean boolean16 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str18 = localDateTime15.format(dateTimeFormatter17);
        java.time.chrono.Chronology chronology19 = dateTimeFormatter17.getChronology();
        java.time.chrono.IsoChronology isoChronology20 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra22 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate25 = isoChronology20.dateYearDay((java.time.chrono.Era) isoEra22, 0, 16);
        java.time.LocalTime localTime26 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime27 = localDate25.atTime(localTime26);
        java.time.LocalDate localDate29 = localDate25.withMonth(1);
        java.time.chrono.ChronoLocalDate chronoLocalDate30 = chronology19.date((java.time.temporal.TemporalAccessor) localDate25);
        java.util.List<java.time.chrono.Era> eraList31 = chronology19.eras();
        boolean boolean32 = uRL4.equals((java.lang.Object) chronology19);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str18, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(isoChronology20);
        org.junit.Assert.assertTrue("'" + isoEra22 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra22.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronoLocalDate30);
        org.junit.Assert.assertNotNull(eraList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj4 = charBuffer3.array();
        java.nio.CharBuffer charBuffer6 = charBuffer3.append('.');
        java.lang.String str7 = charBuffer3.toString();
        java.nio.CharBuffer charBuffer9 = charBuffer3.append('a');
        java.io.PrintWriter printWriter12 = printWriter1.append((java.lang.CharSequence) charBuffer3, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer15 = charBuffer3.subSequence((int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str7, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.range(16, 0);
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(1645434861L);
        java.util.function.LongPredicate longPredicate2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = longStream1.anyMatch(longPredicate2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.io.File file2 = new java.io.File("+18:00", "DIRECT");
        long long3 = file2.getUsableSpace();
        org.junit.Assert.assertEquals(file2.getParent(), "+18:00");
        org.junit.Assert.assertEquals(file2.toString(), "+18:00/DIRECT");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(10);
        java.nio.IntBuffer intBuffer3 = java.nio.IntBuffer.allocate(13);
        java.nio.IntBuffer intBuffer4 = intBuffer3.duplicate();
        java.nio.IntBuffer intBuffer5 = intBuffer4.compact();
        boolean boolean6 = intBuffer5.isDirect();
        java.nio.Buffer buffer7 = intBuffer5.rewind();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer8 = intBuffer1.put(intBuffer5);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertNotNull(intBuffer3);
        org.junit.Assert.assertNotNull(intBuffer4);
        org.junit.Assert.assertNotNull(intBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(buffer7);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.lang.Object obj13 = properties1.setProperty("P0D", "DIRECT");
        java.util.Set<java.lang.Object> objSet14 = properties1.keySet();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.lang.String str17 = properties16.toString();
        java.util.Enumeration<?> wildcardEnumeration18 = properties16.propertyNames();
        java.io.PrintStream printStream20 = new java.io.PrintStream("20220221Z");
        printStream20.close();
        properties16.storeToXML((java.io.OutputStream) printStream20, "/UTC");
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML((java.io.OutputStream) printStream20, "P0D", "Tuesday");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Tuesday");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration18);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream.Builder builder2 = builder0.add((double) ':');
        java.util.stream.DoubleStream.Builder builder4 = builder0.add((double) 299105394688L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.lang.String str3 = charBuffer1.toString();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer5 = charBuffer1.slice();
        java.time.format.DateTimeFormatter dateTimeFormatter6 = java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime7 = java.time.OffsetTime.parse((java.lang.CharSequence) charBuffer5, dateTimeFormatter6);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '????????????????' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str3, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.ZonedDateTime zonedDateTime13 = java.time.ZonedDateTime.of(localDateTime9, (java.time.ZoneId) zoneOffset11);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime13.withLaterOffsetAtOverlap();
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration18 = duration16.minusMillis((long) (byte) 0);
        java.time.chrono.IsoChronology isoChronology20 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj23 = charBuffer22.array();
        boolean boolean24 = isoChronology20.equals(obj23);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap25 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology26 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean27 = strMapMap25.containsKey((java.lang.Object) isoChronology26);
        java.time.chrono.IsoEra isoEra28 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate31 = isoChronology26.dateYearDay((java.time.chrono.Era) isoEra28, (-1), 10);
        int int33 = isoChronology20.prolepticYear((java.time.chrono.Era) isoEra28, 0);
        java.time.Month month34 = java.time.Month.JANUARY;
        java.time.Month month35 = month34.firstMonthOfQuarter();
        java.time.Month month36 = month35.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean38 = month36.isSupported((java.time.temporal.TemporalField) chronoField37);
        boolean boolean39 = isoEra28.isSupported((java.time.temporal.TemporalField) chronoField37);
        java.time.temporal.TemporalUnit temporalUnit40 = chronoField37.getRangeUnit();
        java.time.Duration duration41 = duration16.minus((long) 0, temporalUnit40);
        java.time.temporal.Temporal temporal42 = zonedDateTime14.plus(0L, temporalUnit40);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(isoChronology20);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(isoChronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + isoEra28 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra28.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.JANUARY + "'", month34.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month35 + "' != '" + java.time.Month.JANUARY + "'", month35.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month36 + "' != '" + java.time.Month.JANUARY + "'", month36.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit40 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit40.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(temporal42);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.lang.String[] strArray15 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        boolean boolean42 = zoneOffsetTransitionList21.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36);
        zoneOffsetTransitionList21.clear();
        boolean boolean44 = strSet16.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21);
        boolean boolean45 = fileTime1.equals((java.lang.Object) zoneOffsetTransitionList21);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator46 = zoneOffsetTransitionList21.spliterator();
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator47 = zoneOffsetTransitionList21.spliterator();
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream48 = zoneOffsetTransitionList21.stream();
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream49 = zoneOffsetTransitionStream48.sorted();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionOptional50 = zoneOffsetTransitionStream48.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator46);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator47);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream48);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream49);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        boolean boolean1 = strMap0.isEmpty();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate3 = java.util.function.Predicate.isEqual((java.lang.Object) strMap0);
        java.util.Set<java.lang.String> strSet4 = strMap0.keySet();
        // The following exception was thrown during execution in test generation
        try {
            strMap0.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(resolverStylePredicate3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal1 = null;
        java.time.temporal.Temporal temporal2 = duration0.subtractFrom(temporal1);
        long long3 = duration0.toDays();
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration0.addTo(temporal4);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, 0, 16);
        java.time.LocalTime localTime12 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime13 = localDate11.atTime(localTime12);
        java.time.LocalTime localTime15 = localTime12.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean18 = strMapMap16.containsKey((java.lang.Object) isoChronology17);
        java.time.chrono.IsoEra isoEra19 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate22 = isoChronology17.dateYearDay((java.time.chrono.Era) isoEra19, (-1), 10);
        java.time.Duration duration23 = java.time.Duration.ZERO;
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal25 = null;
        java.time.temporal.Temporal temporal26 = duration24.subtractFrom(temporal25);
        long long27 = duration24.toDays();
        java.time.Duration duration28 = duration23.plus(duration24);
        long long29 = duration24.toDays();
        java.lang.String str30 = duration24.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate31 = localDate22.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.LocalTime localTime32 = localTime12.minus((java.time.temporal.TemporalAmount) duration24);
        java.time.temporal.Temporal temporal33 = duration0.addTo((java.time.temporal.Temporal) localTime12);
        int int34 = localTime12.getMinute();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime36 = localTime12.withHour(41);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 41");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNull(temporal2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + isoEra19 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra19.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNull(temporal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0S" + "'", str30, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.time.Month month1 = java.time.Month.NOVEMBER;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.of(64, month1, (int) '.', 0, (int) '.', (-2022));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 46");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.NOVEMBER + "'", month1.equals(java.time.Month.NOVEMBER));
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str17 = localDateTime14.format(dateTimeFormatter16);
        java.time.chrono.Chronology chronology18 = dateTimeFormatter16.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod22 = chronology18.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime2.plus((java.time.temporal.TemporalAmount) chronoPeriod22);
        java.time.chrono.Chronology chronology24 = zonedDateTime2.getChronology();
        int int25 = zonedDateTime2.getYear();
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str17, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronoPeriod22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str17 = localDateTime14.format(dateTimeFormatter16);
        java.time.chrono.Chronology chronology18 = dateTimeFormatter16.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod22 = chronology18.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime2.plus((java.time.temporal.TemporalAmount) chronoPeriod22);
        java.time.chrono.Chronology chronology24 = zonedDateTime2.getChronology();
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange26 = chronoField25.range();
        java.time.temporal.ValueRange valueRange27 = chronology24.range(chronoField25);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str17, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronoPeriod22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField25.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange26);
        org.junit.Assert.assertNotNull(valueRange27);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.println('4');
        printWriter1.close();
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.lang.String str18 = zoneOffset17.getId();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset17);
        boolean boolean20 = localDateTime14.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.lang.String str24 = zoneOffset23.getId();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.MAX;
        java.lang.String str29 = zoneOffset28.getId();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset28);
        boolean boolean31 = localDateTime25.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.format.DateTimeFormatter dateTimeFormatter32 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str33 = localDateTime30.format(dateTimeFormatter32);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int35 = localDateTime30.get((java.time.temporal.TemporalField) chronoField34);
        boolean boolean36 = localDateTime19.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.lang.String str37 = localDateTime30.toString();
        java.lang.String[] strArray38 = java.util.Locale.getISOLanguages();
        boolean boolean39 = localDateTime30.equals((java.lang.Object) strArray38);
        java.io.PrintWriter printWriter40 = printWriter1.format("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000", (java.lang.Object[]) strArray38);
        printWriter1.print('4');
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+18:00" + "'", str18, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+18:00" + "'", str24, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+18:00" + "'", str29, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str33, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField34.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str37, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(printWriter40);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.duplicate();
        boolean boolean8 = longBuffer2.isDirect();
        java.nio.LongBuffer longBuffer9 = longBuffer2.duplicate();
        int int10 = longBuffer9.arrayOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer12 = longBuffer9.put((long) 34);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray0 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList1 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList1, zoneOffsetTransitionArray0);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream3 = zoneOffsetTransitionList1.stream();
        int int4 = zoneOffsetTransitionList1.size();
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray7 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList8 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, zoneOffsetTransitionArray7);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray10 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, zoneOffsetTransitionArray10);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray13 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList14, zoneOffsetTransitionRuleArray13);
        java.time.zone.ZoneRules zoneRules16 = java.time.zone.ZoneRules.of(zoneOffset5, zoneOffset6, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList14);
        int int18 = zoneOffsetTransitionList11.indexOf((java.lang.Object) true);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator19 = zoneOffsetTransitionList11.spliterator();
        boolean boolean20 = zoneOffsetTransitionList1.containsAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11);
        java.util.ListIterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionItor22 = zoneOffsetTransitionList1.listIterator(0);
        // The following exception was thrown during execution in test generation
        try {
            java.time.zone.ZoneOffsetTransition zoneOffsetTransition23 = zoneOffsetTransitionItor22.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionItor22);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.DoubleStream doubleStream4 = intStream3.asDoubleStream();
        java.util.stream.Stream<java.lang.Double> doubleStream5 = doubleStream4.boxed();
        java.util.function.DoubleToLongFunction doubleToLongFunction6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream7 = doubleStream4.mapToLong(doubleToLongFunction6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(doubleStream5);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 39L);
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.OptionalDouble optionalDouble3 = doubleStream2.findAny();
        double double4 = optionalDouble3.getAsDouble();
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        java.time.Period period1 = java.time.Period.ofYears((int) '\000');
        java.lang.String str2 = period1.toString();
        java.time.chrono.IsoChronology isoChronology3 = period1.getChronology();
        java.util.List<java.time.chrono.Era> eraList4 = isoChronology3.eras();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate7 = isoChronology3.dateYearDay(0, (-2022));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): -2022");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "P0D" + "'", str2, "P0D");
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertNotNull(eraList4);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter12.println("hi!");
        properties1.list(printWriter12);
        printWriter12.println(10);
        printWriter12.print(16);
        printWriter12.close();
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.security.SignatureException signatureException1 = new java.security.SignatureException("hi!");
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.time.chrono.IsoEra isoEra11 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate14 = isoChronology9.dateYearDay((java.time.chrono.Era) isoEra11, (-1), 10);
        int int16 = isoChronology6.prolepticYear((java.time.chrono.Era) isoEra11, (int) '#');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.temporal.Temporal temporal18 = isoEra11.adjustInto((java.time.temporal.Temporal) localDateTime17);
        java.time.chrono.IsoChronology isoChronology19 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra21 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate24 = isoChronology19.dateYearDay((java.time.chrono.Era) isoEra21, 0, 16);
        java.time.LocalTime localTime25 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime26 = localDate24.atTime(localTime25);
        java.time.LocalDate localDate28 = localDate24.withMonth(1);
        java.time.Duration duration29 = java.time.Duration.ZERO;
        java.time.Duration duration30 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal31 = null;
        java.time.temporal.Temporal temporal32 = duration30.subtractFrom(temporal31);
        long long33 = duration30.toDays();
        java.time.Duration duration34 = duration29.plus(duration30);
        java.time.LocalDate localDate35 = localDate28.minus((java.time.temporal.TemporalAmount) duration29);
        java.time.LocalDate localDate37 = localDate28.minusWeeks((long) 100);
        java.time.chrono.IsoChronology isoChronology38 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra40 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate43 = isoChronology38.dateYearDay((java.time.chrono.Era) isoEra40, 0, 16);
        java.time.Duration duration44 = java.time.Duration.ZERO;
        java.time.LocalDate localDate45 = localDate43.plus((java.time.temporal.TemporalAmount) duration44);
        java.time.LocalDateTime localDateTime46 = localDate45.atStartOfDay();
        java.time.LocalDate localDate48 = localDate45.plusYears((long) (byte) -1);
        java.time.LocalDate localDate49 = localDate37.with((java.time.temporal.TemporalAdjuster) localDate45);
        java.lang.String str50 = localDate45.toString();
        java.time.LocalDate localDate52 = localDate45.plusDays((long) 171);
        java.time.temporal.Temporal temporal53 = isoEra11.adjustInto((java.time.temporal.Temporal) localDate45);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + isoEra11 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra11.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-34) + "'", int16 == (-34));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertNotNull(isoChronology19);
        org.junit.Assert.assertTrue("'" + isoEra21 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra21.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNull(temporal32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(isoChronology38);
        org.junit.Assert.assertTrue("'" + isoEra40 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra40.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0001-01-16" + "'", str50, "0001-01-16");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(temporal53);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.util.Iterator<java.nio.file.Path> pathItor13 = path5.iterator();
        java.nio.file.Path path14 = path5.normalize();
        java.nio.file.Path path15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path16 = path14.resolveSibling(path15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(pathItor13);
        org.junit.Assert.assertNotNull(path14);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("DayOfYear", "de", 48, "x-windows-iso2022jp");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: dayofyear");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        boolean boolean1 = strMap0.isEmpty();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        int int3 = strSet2.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = strSet2.add("+18:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI4 = new java.net.URI("599b081c1808 (DIRECT)", "Era", "599b081c1808", "United States");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: 599b081c1808 (DIRECT)://Era599b081c1808#United%20States");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        resizableDoubleArray0.addElement((-1.0d));
        resizableDoubleArray0.addElement((double) 999999999);
        resizableDoubleArray0.addElement((double) 1024);
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 9.99999999E8, 1024.0]");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime91.plusYears((long) 'a');
        int int94 = offsetDateTime93.getNano();
        java.time.OffsetTime offsetTime95 = offsetDateTime93.toOffsetTime();
        java.time.OffsetDateTime offsetDateTime97 = offsetDateTime93.plusHours((long) 16);
        java.time.OffsetDateTime offsetDateTime99 = offsetDateTime97.plusDays((long) 'x');
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 120 + "'", int94 == 120);
        org.junit.Assert.assertNotNull(offsetTime95);
        org.junit.Assert.assertNotNull(offsetDateTime97);
        org.junit.Assert.assertNotNull(offsetDateTime99);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.text.Format format1 = dateTimeFormatter0.toFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = format1.parseObject("java.nio.HeapDoubleBuffer[pos=0 lim=3 cap=3]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Text 'java.nio.HeapDoubleBuffer[pos=0 lim=3 cap=3]' could not be parsed at index 0");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(format1);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(171);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.parse((java.lang.CharSequence) "java.util.concurrent.ExecutionException: java.nio.channels.AsynchronousCloseException");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'java.util.concurrent.ExecutionException: java.nio.channels.Async...' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.OptionalDouble optionalDouble2 = doubleStream1.findFirst();
        java.util.function.DoubleSupplier doubleSupplier3 = null;
        double double4 = optionalDouble2.orElseGet(doubleSupplier3);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withYear((int) (short) 1);
        boolean boolean11 = zonedDateTime5.equals((java.lang.Object) zonedDateTime10);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime5.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology14 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime5);
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra17 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate20 = isoChronology15.dateYearDay((java.time.chrono.Era) isoEra17, 0, 16);
        java.time.LocalTime localTime21 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime22 = localDate20.atTime(localTime21);
        java.time.DayOfWeek dayOfWeek23 = localDate20.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate24 = chronology14.date((java.time.temporal.TemporalAccessor) dayOfWeek23);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDate from TemporalAccessor: TUESDAY of type java.time.DayOfWeek");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertTrue("'" + isoEra17 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra17.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + dayOfWeek23 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek23.equals(java.time.DayOfWeek.TUESDAY));
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZonedDateTime zonedDateTime4 = zonedDateTime2.withYear((int) (short) 1);
        java.time.LocalTime localTime5 = zonedDateTime4.toLocalTime();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray16 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList17, zoneOffsetTransitionArray16);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray19 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList20 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList20, zoneOffsetTransitionRuleArray19);
        java.time.zone.ZoneRules zoneRules22 = java.time.zone.ZoneRules.of(zoneOffset11, zoneOffset12, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList17, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList20);
        int int23 = zoneOffset8.compareTo(zoneOffset11);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime24 = zonedDateTime4.withZoneSameLocal((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId25 = java.time.ZoneId.systemDefault();
        java.lang.String str26 = zoneId25.getId();
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.now(zoneId25);
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime27.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit30 = null;
        boolean boolean31 = zonedDateTime27.isSupported(temporalUnit30);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange33 = zonedDateTime27.range((java.time.temporal.TemporalField) chronoField32);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime35 = java.time.LocalTime.MAX;
        long long36 = chronoField34.getFrom((java.time.temporal.TemporalAccessor) localTime35);
        boolean boolean37 = zonedDateTime27.isSupported((java.time.temporal.TemporalField) chronoField34);
        boolean boolean38 = chronoField34.isDateBased();
        int int39 = zonedDateTime4.get((java.time.temporal.TemporalField) chronoField34);
        java.time.Month month40 = zonedDateTime4.getMonth();
        java.time.chrono.IsoChronology isoChronology41 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra43 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate46 = isoChronology41.dateYearDay((java.time.chrono.Era) isoEra43, 0, 16);
        java.time.LocalTime localTime47 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime48 = localDate46.atTime(localTime47);
        java.time.LocalDate localDate50 = localDate46.withMonth(1);
        java.time.Duration duration51 = java.time.Duration.ZERO;
        java.time.Duration duration52 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal53 = null;
        java.time.temporal.Temporal temporal54 = duration52.subtractFrom(temporal53);
        long long55 = duration52.toDays();
        java.time.Duration duration56 = duration51.plus(duration52);
        java.time.LocalDate localDate57 = localDate50.minus((java.time.temporal.TemporalAmount) duration51);
        java.time.LocalDate localDate59 = localDate50.minusWeeks((long) 100);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        boolean boolean61 = chronoField60.isTimeBased();
        boolean boolean62 = localDate59.isSupported((java.time.temporal.TemporalField) chronoField60);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange63 = month40.range((java.time.temporal.TemporalField) chronoField60);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MilliOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime24);
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField32.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 23L + "'", long36 == 23L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertTrue("'" + month40 + "' != '" + java.time.Month.FEBRUARY + "'", month40.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(isoChronology41);
        org.junit.Assert.assertTrue("'" + isoEra43 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra43.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNull(temporal54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField60.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.util.Locale locale2 = new java.util.Locale("599b081c1808", "DIRECT");
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale2.getDisplayCountry(locale3);
        java.lang.String str5 = locale2.getDisplayName();
        java.util.Set<java.lang.String> strSet6 = locale2.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for DIRECT");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DIRECT" + "'", str4, "DIRECT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "599b081c1808 (DIRECT)" + "'", str5, "599b081c1808 (DIRECT)");
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        java.io.File file3 = file2.getAbsoluteFile();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter5 = new java.io.PrintWriter(file2, "italiano://Etc/UTC#Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: italiano://Etc/UTC#Etc/UTC");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer5.asShortBuffer();
        java.nio.ShortBuffer shortBuffer8 = shortBuffer7.slice();
        java.nio.ShortBuffer shortBuffer9 = shortBuffer8.compact();
        short[] shortArray15 = new short[] { (short) 0, (short) 0, (byte) 100, (short) -1, (short) 10 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer16 = shortBuffer8.get(shortArray15);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertNotNull(shortBuffer9);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[0, 0, 100, -1, 10]");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.stream.DoubleStream.Builder builder3 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.peek((java.util.function.DoubleConsumer) builder3);
        java.util.function.DoubleToIntFunction doubleToIntFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream6 = doubleStream2.mapToInt(doubleToIntFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.lang.Throwable throwable0 = null;
        java.security.SignatureException signatureException1 = new java.security.SignatureException(throwable0);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.time.chrono.IsoEra isoEra11 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate14 = isoChronology9.dateYearDay((java.time.chrono.Era) isoEra11, (-1), 10);
        int int16 = isoChronology6.prolepticYear((java.time.chrono.Era) isoEra11, (int) '#');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.temporal.Temporal temporal18 = isoEra11.adjustInto((java.time.temporal.Temporal) localDateTime17);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate22 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset21);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset21);
        java.time.Month month24 = java.time.Month.JANUARY;
        java.time.Month month25 = month24.firstMonthOfQuarter();
        java.time.Month month26 = month25.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = month25.query(periodTemporalQuery27);
        java.time.Period period29 = zoneOffset21.query(periodTemporalQuery27);
        java.time.Period period30 = localDateTime17.query(periodTemporalQuery27);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.Clock clock43 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset31);
        java.time.LocalDate localDate44 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset31);
        java.time.OffsetDateTime offsetDateTime45 = java.time.OffsetDateTime.of(localDateTime17, zoneOffset31);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.plusHours(1645434879L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000187710");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + isoEra11 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra11.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-34) + "'", int16 == (-34));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + month24 + "' != '" + java.time.Month.JANUARY + "'", month24.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month25 + "' != '" + java.time.Month.JANUARY + "'", month25.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.JANUARY + "'", month26.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(clock43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics8 = longStream7.summaryStatistics();
        java.util.function.IntConsumer intConsumer9 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics8);
        java.util.stream.IntStream intStream10 = intStream3.peek((java.util.function.IntConsumer) longSummaryStatistics4);
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        int int13 = charBuffer12.limit();
        java.util.stream.IntStream intStream14 = charBuffer12.chars();
        java.util.LongSummaryStatistics longSummaryStatistics15 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream18 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics19 = longStream18.summaryStatistics();
        java.util.function.IntConsumer intConsumer20 = longSummaryStatistics15.andThen((java.util.function.IntConsumer) longSummaryStatistics19);
        java.util.stream.IntStream intStream21 = intStream14.peek((java.util.function.IntConsumer) longSummaryStatistics15);
        longSummaryStatistics4.combine(longSummaryStatistics15);
        java.util.LongSummaryStatistics longSummaryStatistics23 = new java.util.LongSummaryStatistics();
        java.util.stream.LongStream longStream26 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        java.util.LongSummaryStatistics longSummaryStatistics27 = longStream26.summaryStatistics();
        java.util.function.IntConsumer intConsumer28 = longSummaryStatistics23.andThen((java.util.function.IntConsumer) longSummaryStatistics27);
        java.util.function.IntConsumer intConsumer29 = longSummaryStatistics4.andThen((java.util.function.IntConsumer) longSummaryStatistics23);
        long long30 = longSummaryStatistics4.getCount();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(longSummaryStatistics8);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertEquals(longSummaryStatistics15.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(longSummaryStatistics19);
        org.junit.Assert.assertEquals(longSummaryStatistics19.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer20);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertEquals(longSummaryStatistics23.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(longStream26);
        org.junit.Assert.assertNotNull(longSummaryStatistics27);
        org.junit.Assert.assertEquals(longSummaryStatistics27.toString(), "LongSummaryStatistics{count=9, sum=45, min=1, average=5.000000, max=9}");
        org.junit.Assert.assertNotNull(intConsumer28);
        org.junit.Assert.assertNotNull(intConsumer29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: window size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        resizableDoubleArray0.addElement((-1.0d));
        resizableDoubleArray0.addElement((double) 999999999);
        resizableDoubleArray0.addElement((double) 1024);
        resizableDoubleArray0.setExpansionMode((int) (byte) 0);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.lang.String[] strArray15 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        boolean boolean42 = zoneOffsetTransitionList21.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36);
        zoneOffsetTransitionList21.clear();
        boolean boolean44 = strSet16.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21);
        boolean boolean45 = fileTime1.equals((java.lang.Object) zoneOffsetTransitionList21);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator46 = zoneOffsetTransitionList21.spliterator();
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator47 = zoneOffsetTransitionList21.spliterator();
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream48 = zoneOffsetTransitionList21.stream();
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream50 = zoneOffsetTransitionStream48.limit((long) 1970);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator46);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator47);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream48);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream50);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        java.nio.CharBuffer charBuffer4 = charBuffer1.append('.');
        int int5 = charBuffer1.length();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.time.LocalTime localTime0 = java.time.LocalTime.now();
        int int1 = localTime0.getNano();
        org.junit.Assert.assertNotNull(localTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 781000000 + "'", int1 == 781000000);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        boolean boolean4 = file2.setWritable(false);
        long long5 = file2.getUsableSpace();
        boolean boolean6 = file2.mkdirs();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal1 = null;
        java.time.temporal.Temporal temporal2 = duration0.subtractFrom(temporal1);
        long long3 = duration0.toDays();
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration0.addTo(temporal4);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, 0, 16);
        java.time.LocalTime localTime12 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime13 = localDate11.atTime(localTime12);
        java.time.LocalTime localTime15 = localTime12.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean18 = strMapMap16.containsKey((java.lang.Object) isoChronology17);
        java.time.chrono.IsoEra isoEra19 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate22 = isoChronology17.dateYearDay((java.time.chrono.Era) isoEra19, (-1), 10);
        java.time.Duration duration23 = java.time.Duration.ZERO;
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal25 = null;
        java.time.temporal.Temporal temporal26 = duration24.subtractFrom(temporal25);
        long long27 = duration24.toDays();
        java.time.Duration duration28 = duration23.plus(duration24);
        long long29 = duration24.toDays();
        java.lang.String str30 = duration24.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate31 = localDate22.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.LocalTime localTime32 = localTime12.minus((java.time.temporal.TemporalAmount) duration24);
        java.time.temporal.Temporal temporal33 = duration0.addTo((java.time.temporal.Temporal) localTime12);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray42 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43, zoneOffsetTransitionRuleArray42);
        java.time.zone.ZoneRules zoneRules45 = java.time.zone.ZoneRules.of(zoneOffset34, zoneOffset35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43);
        boolean boolean46 = zoneRules45.isFixedOffset();
        java.time.Instant instant47 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition48 = zoneRules45.previousTransition(instant47);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList49 = zoneRules45.getTransitionRules();
        java.time.Instant instant50 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition51 = zoneRules45.previousTransition(instant50);
        java.time.Instant instant52 = java.time.Instant.MAX;
        java.time.Instant instant54 = instant52.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset55 = zoneRules45.getOffset(instant54);
        java.time.Month month56 = java.time.Month.JANUARY;
        java.time.Month month57 = month56.firstMonthOfQuarter();
        java.time.Month month58 = month57.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery59 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period60 = month57.query(periodTemporalQuery59);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate62 = localDateTime61.toLocalDate();
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate66 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset65);
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset65);
        java.time.Month month68 = java.time.Month.JANUARY;
        java.time.Month month69 = month68.firstMonthOfQuarter();
        java.time.Month month70 = month69.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery71 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period72 = month69.query(periodTemporalQuery71);
        java.time.Period period73 = zoneOffset65.query(periodTemporalQuery71);
        java.time.Period period74 = localDateTime61.query(periodTemporalQuery71);
        java.time.Period period75 = month57.query(periodTemporalQuery71);
        java.time.Period period76 = zoneOffset55.query(periodTemporalQuery71);
        java.time.OffsetTime offsetTime77 = localTime12.atOffset(zoneOffset55);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNull(temporal2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + isoEra19 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra19.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNull(temporal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0S" + "'", str30, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition48);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList49);
        org.junit.Assert.assertNull(zoneOffsetTransition51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertTrue("'" + month56 + "' != '" + java.time.Month.JANUARY + "'", month56.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month57 + "' != '" + java.time.Month.JANUARY + "'", month57.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month58 + "' != '" + java.time.Month.JANUARY + "'", month58.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + month68 + "' != '" + java.time.Month.JANUARY + "'", month68.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month69 + "' != '" + java.time.Month.JANUARY + "'", month69.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month70 + "' != '" + java.time.Month.JANUARY + "'", month70.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(offsetTime77);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.lang.String[] strArray15 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        boolean boolean42 = zoneOffsetTransitionList21.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36);
        zoneOffsetTransitionList21.clear();
        boolean boolean44 = strSet16.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21);
        boolean boolean45 = fileTime1.equals((java.lang.Object) zoneOffsetTransitionList21);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator46 = zoneOffsetTransitionList21.spliterator();
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator47 = zoneOffsetTransitionList21.spliterator();
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream48 = zoneOffsetTransitionList21.stream();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress54 = java.net.InetAddress.getByAddress(byteArray53);
        java.net.NetworkInterface networkInterface55 = java.net.NetworkInterface.getByInetAddress(inetAddress54);
        java.lang.String str56 = inetAddress54.getCanonicalHostName();
        boolean boolean57 = inetAddress54.isAnyLocalAddress();
        boolean boolean58 = zoneOffsetTransitionList21.remove((java.lang.Object) inetAddress54);
        java.net.NetworkInterface networkInterface59 = java.net.NetworkInterface.getByInetAddress(inetAddress54);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator46);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator47);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream48);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress54);
        org.junit.Assert.assertNull(networkInterface55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1.0.0.100" + "'", str56, "1.0.0.100");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(networkInterface59);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        boolean boolean13 = zoneRules12.isFixedOffset();
        java.time.Instant instant14 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules12.previousTransition(instant14);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = zoneRules12.getTransitionRules();
        java.time.Instant instant17 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition18 = zoneRules12.previousTransition(instant17);
        java.time.Instant instant19 = java.time.Instant.MAX;
        java.time.Instant instant21 = instant19.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset22 = zoneRules12.getOffset(instant21);
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset22);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime24 = java.time.OffsetTime.from((java.time.temporal.TemporalAccessor) instant0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetTime from TemporalAccessor: 1970-01-01T00:00:00Z of type java.time.Instant");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList16);
        org.junit.Assert.assertNull(zoneOffsetTransition18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.OVERFLOW;
        java.lang.String str1 = coderResult0.toString();
        boolean boolean2 = coderResult0.isError();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "OVERFLOW" + "'", str1, "OVERFLOW");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        boolean boolean1 = strMap0.isEmpty();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate3 = java.util.function.Predicate.isEqual((java.lang.Object) strMap0);
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate4 = resolverStylePredicate3.negate();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        boolean boolean6 = strMap5.isEmpty();
        java.util.Set<java.lang.String> strSet7 = strMap5.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate8 = java.util.function.Predicate.isEqual((java.lang.Object) strMap5);
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate9 = resolverStylePredicate4.and(resolverStylePredicate8);
        java.time.format.ResolverStyle resolverStyle10 = java.time.format.ResolverStyle.STRICT;
        boolean boolean11 = resolverStylePredicate8.test(resolverStyle10);
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(resolverStylePredicate3);
        org.junit.Assert.assertNotNull(resolverStylePredicate4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(resolverStylePredicate8);
        org.junit.Assert.assertNotNull(resolverStylePredicate9);
        org.junit.Assert.assertTrue("'" + resolverStyle10 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle10.equals(java.time.format.ResolverStyle.STRICT));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.lang.String str7 = zoneOffset6.getId();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset6);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.lang.String str17 = zoneOffset16.getId();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset16);
        boolean boolean19 = localDateTime13.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        boolean boolean20 = localDateTime8.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray24 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, zoneOffsetTransitionArray24);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray30 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31, zoneOffsetTransitionRuleArray30);
        java.time.zone.ZoneRules zoneRules33 = java.time.zone.ZoneRules.of(zoneOffset22, zoneOffset23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray42 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43, zoneOffsetTransitionRuleArray42);
        java.time.zone.ZoneRules zoneRules45 = java.time.zone.ZoneRules.of(zoneOffset34, zoneOffset35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray51 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, zoneOffsetTransitionArray51);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray54 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList55 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList55, zoneOffsetTransitionRuleArray54);
        java.time.zone.ZoneRules zoneRules57 = java.time.zone.ZoneRules.of(zoneOffset46, zoneOffset47, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList55);
        boolean boolean58 = zoneOffsetTransitionList37.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52);
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray61 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList62 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, zoneOffsetTransitionArray61);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray64 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList65 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, zoneOffsetTransitionArray64);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray67 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList68 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList68, zoneOffsetTransitionRuleArray67);
        java.time.zone.ZoneRules zoneRules70 = java.time.zone.ZoneRules.of(zoneOffset59, zoneOffset60, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList68);
        int int72 = zoneOffsetTransitionList65.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray75 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList76 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, zoneOffsetTransitionArray75);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray78 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList79 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, zoneOffsetTransitionArray78);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray81 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList82 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList82, zoneOffsetTransitionRuleArray81);
        java.time.zone.ZoneRules zoneRules84 = java.time.zone.ZoneRules.of(zoneOffset73, zoneOffset74, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList79, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList82);
        java.time.zone.ZoneRules zoneRules85 = java.time.zone.ZoneRules.of(zoneOffset21, zoneOffset22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList65, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList82);
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.MAX;
        java.lang.String str89 = zoneOffset88.getId();
        java.time.LocalDateTime localDateTime90 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset88);
        int int91 = zoneOffset22.compareTo(zoneOffset88);
        java.time.OffsetDateTime offsetDateTime92 = java.time.OffsetDateTime.of(localDateTime13, zoneOffset22);
        java.time.zone.ZoneRules zoneRules93 = zoneOffset22.getRules();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime94 = java.time.OffsetTime.of((-2022), 64, (int) 'a', 23, zoneOffset22);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): -2022");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+18:00" + "'", str7, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+18:00" + "'", str17, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneRules57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(zoneRules70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(zoneRules84);
        org.junit.Assert.assertNotNull(zoneRules85);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+18:00" + "'", str89, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime92);
        org.junit.Assert.assertNotNull(zoneRules93);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println(true);
        java.io.File file7 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long8 = file7.lastModified();
        java.net.URL uRL9 = file7.toURL();
        java.security.CodeSigner[] codeSignerArray10 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource11 = new java.security.CodeSource(uRL9, codeSignerArray10);
        java.io.PrintWriter printWriter12 = printWriter1.printf("x-windows-iso2022jp", (java.lang.Object[]) codeSignerArray10);
        printWriter1.print('\000');
        printWriter1.println(10L);
        org.junit.Assert.assertEquals(file7.getParent(), "/");
        org.junit.Assert.assertEquals(file7.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645434888000L + "'", long8 == 1645434888000L);
        org.junit.Assert.assertNotNull(uRL9);
        org.junit.Assert.assertEquals(uRL9.toString(), "file:/1970-01-01T18:01:37.00000012/");
        org.junit.Assert.assertNotNull(codeSignerArray10);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.getHostName();
        java.net.InetAddress inetAddress2 = java.net.InetAddress.getLocalHost();
        boolean boolean4 = inetAddress2.isReachable((int) '0');
        java.net.NetworkInterface networkInterface5 = java.net.NetworkInterface.getByInetAddress(inetAddress2);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics6.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics6.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics6.getGeometricMeanImpl();
        double double11 = descriptiveStatistics6.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics6.getSkewnessImpl();
        boolean boolean13 = networkInterface5.equals((java.lang.Object) descriptiveStatistics6);
        int int14 = networkInterface5.getMTU();
        java.util.Locale locale17 = new java.util.Locale("DecimalStyle[0+-.]", "Di");
        boolean boolean18 = networkInterface5.equals((java.lang.Object) "DecimalStyle[0+-.]");
        int int19 = networkInterface5.getIndex();
        java.util.Enumeration<java.net.NetworkInterface> networkInterfaceEnumeration20 = networkInterface5.getSubInterfaces();
        boolean boolean23 = inetAddress0.isReachable(networkInterface5, 16384, 365);
        boolean boolean24 = networkInterface5.supportsMulticast();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808" + "'", str1, "599b081c1808");
        org.junit.Assert.assertNotNull(inetAddress2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(networkInterface5);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1500 + "'", int14 == 1500);
        org.junit.Assert.assertEquals(locale17.toString(), "decimalstyle[0+-.]_DI");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 18 + "'", int19 == 18);
        org.junit.Assert.assertNotNull(networkInterfaceEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withYear((int) (short) 1);
        boolean boolean11 = zonedDateTime5.equals((java.lang.Object) zonedDateTime10);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime5.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology14 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime5);
        java.time.ZoneId zoneId15 = java.time.ZoneId.systemDefault();
        java.lang.String str16 = zoneId15.getId();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.now(zoneId15);
        java.time.ZoneId zoneId18 = java.time.ZoneId.systemDefault();
        java.lang.String str19 = zoneId18.getId();
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime17.withZoneSameInstant(zoneId18);
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime20.minusYears((long) (short) 0);
        boolean boolean23 = zonedDateTime5.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime22);
        java.time.Period period25 = java.time.Period.ofYears((int) '\000');
        java.time.Period period27 = period25.minusDays((long) (short) 0);
        java.time.Period period29 = period27.plusDays((long) (-1));
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime5.plus((java.time.temporal.TemporalAmount) period27);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition25 = null;
        boolean boolean26 = zoneOffsetTransitionList3.add(zoneOffsetTransition25);
        java.lang.Object[] objArray27 = zoneOffsetTransitionList3.toArray();
        java.lang.String[] strArray28 = java.util.Locale.getISOLanguages();
        java.lang.String[] strArray29 = zoneOffsetTransitionList3.toArray(strArray28);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream30 = zoneOffsetTransitionList3.stream();
        java.nio.file.attribute.FileTime fileTime32 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.lang.String[] strArray46 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray51 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, zoneOffsetTransitionArray51);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray54 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList55 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, zoneOffsetTransitionArray54);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray57 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList58, zoneOffsetTransitionRuleArray57);
        java.time.zone.ZoneRules zoneRules60 = java.time.zone.ZoneRules.of(zoneOffset49, zoneOffset50, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList58);
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray63 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList64, zoneOffsetTransitionArray63);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray66 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList67 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList67, zoneOffsetTransitionArray66);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray69 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList70 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList70, zoneOffsetTransitionRuleArray69);
        java.time.zone.ZoneRules zoneRules72 = java.time.zone.ZoneRules.of(zoneOffset61, zoneOffset62, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList64, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList67, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList70);
        boolean boolean73 = zoneOffsetTransitionList52.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList67);
        zoneOffsetTransitionList52.clear();
        boolean boolean75 = strSet47.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52);
        boolean boolean76 = fileTime32.equals((java.lang.Object) zoneOffsetTransitionList52);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator77 = zoneOffsetTransitionList52.spliterator();
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator78 = zoneOffsetTransitionList52.spliterator();
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream79 = zoneOffsetTransitionList52.stream();
        boolean boolean80 = zoneOffsetTransitionList3.retainAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList52);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray81 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList82 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList82, zoneOffsetTransitionArray81);
        int int84 = zoneOffsetTransitionList82.size();
        boolean boolean85 = zoneOffsetTransitionList3.retainAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList82);
        java.io.File file88 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long89 = file88.lastModified();
        java.net.URL uRL90 = file88.toURL();
        java.nio.file.Path path91 = file88.toPath();
        java.io.File file94 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long95 = file94.lastModified();
        java.net.URL uRL96 = file94.toURL();
        java.nio.file.Path path97 = file94.toPath();
        java.nio.file.Path path98 = path91.relativize(path97);
        boolean boolean99 = zoneOffsetTransitionList82.contains((java.lang.Object) path91);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[null]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream30);
        org.junit.Assert.assertNotNull(fileTime32);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneRules60);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(zoneRules72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator77);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator78);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals(file88.getParent(), "/");
        org.junit.Assert.assertEquals(file88.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1645434888000L + "'", long89 == 1645434888000L);
        org.junit.Assert.assertNotNull(uRL90);
        org.junit.Assert.assertEquals(uRL90.toString(), "file:/1970-01-01T18:01:37.00000012/");
        org.junit.Assert.assertNotNull(path91);
        org.junit.Assert.assertEquals(file94.getParent(), "/");
        org.junit.Assert.assertEquals(file94.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1645434888000L + "'", long95 == 1645434888000L);
        org.junit.Assert.assertNotNull(uRL96);
        org.junit.Assert.assertEquals(uRL96.toString(), "file:/1970-01-01T18:01:37.00000012/");
        org.junit.Assert.assertNotNull(path97);
        org.junit.Assert.assertNotNull(path98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.asReadOnlyBuffer();
        java.nio.IntBuffer intBuffer10 = byteBuffer9.asIntBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer13 = byteBuffer9.put((int) '0', (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(intBuffer10);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        zoneOffsetTransitionList3.clear();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition26 = null;
        boolean boolean27 = zoneOffsetTransitionList3.add(zoneOffsetTransition26);
        java.util.ListIterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionItor28 = zoneOffsetTransitionList3.listIterator();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition29 = zoneOffsetTransitionItor28.next();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition30 = null;
        zoneOffsetTransitionItor28.add(zoneOffsetTransition30);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionItor28);
        org.junit.Assert.assertNull(zoneOffsetTransition29);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj3 = charBuffer2.array();
        boolean boolean4 = isoChronology0.equals(obj3);
        java.lang.String str5 = isoChronology0.getId();
        java.lang.String str6 = isoChronology0.getCalendarType();
        java.time.chrono.IsoEra isoEra8 = isoChronology0.eraOf((int) (byte) 1);
        int int9 = isoEra8.getValue();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISO" + "'", str5, "ISO");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "iso8601" + "'", str6, "iso8601");
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics3.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic6);
        double[] doubleArray8 = descriptiveStatistics0.getSortedValues();
        java.lang.String str9 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics12.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics16.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics19.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics19.getGeometricMeanImpl();
        descriptiveStatistics16.setSumsqImpl(univariateStatistic22);
        descriptiveStatistics12.setSumsqImpl(univariateStatistic22);
        descriptiveStatistics11.setGeometricMeanImpl(univariateStatistic22);
        descriptiveStatistics10.setSumsqImpl(univariateStatistic22);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic22);
        double double28 = descriptiveStatistics0.getVariance();
        double double29 = descriptiveStatistics0.getMin();
        double[] doubleArray30 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        longStream2.close();
        java.util.stream.LongStream longStream4 = longStream2.parallel();
        java.util.stream.LongStream longStream5 = longStream2.sequential();
        java.util.stream.LongStream longStream6 = longStream2.sequential();
        boolean boolean7 = longStream2.isParallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong8 = longStream2.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println((float) 921697L);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.net.URLConnection.setDefaultRequestProperty("java.nio.HeapDoubleBuffer[pos=0 lim=3 cap=3]", "HourOfDay");
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean2 = instant0.isSupported((java.time.temporal.TemporalField) chronoField1);
        java.time.Instant instant4 = instant0.plusNanos((long) 9);
        java.time.ZoneId zoneId5 = java.time.ZoneId.systemDefault();
        java.lang.String str6 = zoneId5.getId();
        java.lang.String str7 = zoneId5.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.ofInstant(instant4, zoneId5);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withNano((int) '.');
        java.time.LocalDate localDate11 = zonedDateTime10.toLocalDate();
        java.time.LocalDate localDate13 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.ofEpochDay((long) 10);
        int int16 = localDate13.compareTo((java.time.chrono.ChronoLocalDate) localDate15);
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra19 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate22 = isoChronology17.dateYearDay((java.time.chrono.Era) isoEra19, 0, 16);
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime24 = localDate22.atTime(localTime23);
        java.time.LocalDate localDate26 = localDate22.withMonth(1);
        boolean boolean27 = localDate22.isLeapYear();
        java.time.chrono.ChronoPeriod chronoPeriod28 = localDate15.until((java.time.chrono.ChronoLocalDate) localDate22);
        java.time.temporal.TemporalUnit temporalUnit29 = null;
        boolean boolean30 = localDate15.isSupported(temporalUnit29);
        boolean boolean31 = localDate11.isEqual((java.time.chrono.ChronoLocalDate) localDate15);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField1.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Etc/UTC" + "'", str6, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + isoEra19 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra19.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronoPeriod28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer5.compact();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer6.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put(31, (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.minus(duration17);
        java.time.OffsetTime offsetTime22 = offsetTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray29 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, zoneOffsetTransitionArray29);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray32 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33, zoneOffsetTransitionRuleArray32);
        java.time.zone.ZoneRules zoneRules35 = java.time.zone.ZoneRules.of(zoneOffset24, zoneOffset25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33);
        java.time.OffsetTime offsetTime36 = localTime23.atOffset(zoneOffset24);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange38 = offsetTime36.range((java.time.temporal.TemporalField) chronoField37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal41 = null;
        java.time.temporal.Temporal temporal42 = duration40.subtractFrom(temporal41);
        long long43 = duration40.toDays();
        java.time.Duration duration44 = duration39.minus(duration40);
        java.time.OffsetTime offsetTime45 = offsetTime36.minus((java.time.temporal.TemporalAmount) duration40);
        boolean boolean46 = offsetTime22.isAfter(offsetTime36);
        java.time.OffsetTime offsetTime48 = offsetTime22.withNano((int) '#');
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = locale50.toLanguageTag();
        java.lang.String str52 = chronoField49.getDisplayName(locale50);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap53 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology54 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean55 = strMapMap53.containsKey((java.lang.Object) isoChronology54);
        java.time.chrono.IsoEra isoEra56 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate59 = isoChronology54.dateYearDay((java.time.chrono.Era) isoEra56, (-1), 10);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.wrap(byteArray62, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology66 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean67 = byteBuffer65.equals((java.lang.Object) isoChronology66);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap68 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology69 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean70 = strMapMap68.containsKey((java.lang.Object) isoChronology69);
        java.time.chrono.IsoEra isoEra71 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate74 = isoChronology69.dateYearDay((java.time.chrono.Era) isoEra71, (-1), 10);
        int int76 = isoChronology66.prolepticYear((java.time.chrono.Era) isoEra71, (int) '#');
        java.time.LocalDate localDate79 = isoChronology54.dateYearDay((java.time.chrono.Era) isoEra71, (int) (byte) 0, 2);
        boolean boolean80 = chronoField49.isSupportedBy((java.time.temporal.TemporalAccessor) localDate79);
        boolean boolean81 = chronoField49.isDateBased();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime83 = offsetTime48.with((java.time.temporal.TemporalField) chronoField49, (long) 120);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for AlignedWeekOfYear (valid values 1 - 53): 120");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNull(temporal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField49.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en-GB" + "'", str51, "en-GB");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "AlignedWeekOfYear" + "'", str52, "AlignedWeekOfYear");
        org.junit.Assert.assertNotNull(isoChronology54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + isoEra56 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra56.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(isoChronology66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(isoChronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + isoEra71 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra71.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-34) + "'", int76 == (-34));
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.ofDefaultLocale();
        java.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withDecimalStyle(decimalStyle2);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter6 = java.time.format.DateTimeFormatter.ofPattern("Etc/UTC", locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown pattern letter: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean17 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.OffsetTime offsetTime19 = offsetTime13.plusMinutes((long) 'u');
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime21 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray24 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, zoneOffsetTransitionArray24);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray30 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31, zoneOffsetTransitionRuleArray30);
        java.time.zone.ZoneRules zoneRules33 = java.time.zone.ZoneRules.of(zoneOffset22, zoneOffset23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31);
        java.time.OffsetTime offsetTime34 = localTime21.atOffset(zoneOffset22);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange36 = offsetTime34.range((java.time.temporal.TemporalField) chronoField35);
        java.time.OffsetTime offsetTime38 = chronoField20.adjustInto(offsetTime34, (long) 16);
        boolean boolean39 = offsetTime13.isAfter(offsetTime34);
        java.time.OffsetTime offsetTime41 = offsetTime13.withSecond((int) (short) 1);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField20.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange36);
        org.junit.Assert.assertNotNull(offsetTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(offsetTime41);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((long) 9);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        boolean boolean5 = file2.delete();
        long long6 = file2.getFreeSpace();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645434888000L + "'", long3 == 1645434888000L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012/");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.io.File file2 = new java.io.File("+18:00", "DIRECT");
        java.io.File file3 = file2.getParentFile();
        java.lang.String str4 = file3.getCanonicalPath();
        org.junit.Assert.assertEquals(file2.getParent(), "+18:00");
        org.junit.Assert.assertEquals(file2.toString(), "+18:00/DIRECT");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "+18:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/experiment/+18:00" + "'", str4, "/experiment/+18:00");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withYear((int) (short) 1);
        boolean boolean11 = zonedDateTime5.equals((java.lang.Object) zonedDateTime10);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime5.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology14 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime5);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime5.plusWeeks((long) '-');
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime17 = zonedDateTime5.withEarlierOffsetAtOverlap();
        java.time.Month month18 = java.time.Month.JANUARY;
        java.time.Month month19 = month18.firstMonthOfQuarter();
        java.time.Month month20 = java.time.Month.JANUARY;
        java.time.Month month21 = month20.firstMonthOfQuarter();
        java.time.Month month22 = month21.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = month21.query(periodTemporalQuery23);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate26 = localDateTime25.toLocalDate();
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate30 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset29);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset29);
        java.time.Month month32 = java.time.Month.JANUARY;
        java.time.Month month33 = month32.firstMonthOfQuarter();
        java.time.Month month34 = month33.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery35 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period36 = month33.query(periodTemporalQuery35);
        java.time.Period period37 = zoneOffset29.query(periodTemporalQuery35);
        java.time.Period period38 = localDateTime25.query(periodTemporalQuery35);
        java.time.Period period39 = month21.query(periodTemporalQuery35);
        java.time.Period period40 = month19.query(periodTemporalQuery35);
        java.time.Period period41 = zonedDateTime5.query(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime17);
        org.junit.Assert.assertTrue("'" + month18 + "' != '" + java.time.Month.JANUARY + "'", month18.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month19 + "' != '" + java.time.Month.JANUARY + "'", month19.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month20 + "' != '" + java.time.Month.JANUARY + "'", month20.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month21 + "' != '" + java.time.Month.JANUARY + "'", month21.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month22 + "' != '" + java.time.Month.JANUARY + "'", month22.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + month32 + "' != '" + java.time.Month.JANUARY + "'", month32.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month33 + "' != '" + java.time.Month.JANUARY + "'", month33.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.JANUARY + "'", month34.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.net.URI uRI4 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI5 = uRI4.normalize();
        java.lang.String str6 = uRI5.getRawSchemeSpecificPart();
        java.net.URI uRI7 = uRI5.parseServerAuthority();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.time.ZoneId zoneId10 = java.time.ZoneId.systemDefault();
        java.lang.String str11 = zoneId10.getId();
        java.time.ZonedDateTime zonedDateTime12 = java.time.ZonedDateTime.now(zoneId10);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime12.withYear((int) (short) 1);
        java.time.LocalTime localTime15 = zonedDateTime14.toLocalTime();
        java.util.stream.DoubleStream doubleStream17 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj18 = properties9.getOrDefault((java.lang.Object) zonedDateTime14, (java.lang.Object) doubleStream17);
        java.net.URI uRI23 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI24 = uRI23.normalize();
        java.lang.String str25 = uRI24.getRawSchemeSpecificPart();
        boolean boolean26 = zonedDateTime14.equals((java.lang.Object) uRI24);
        java.lang.String str27 = uRI24.getPath();
        java.net.URI uRI28 = uRI5.resolve(uRI24);
        org.junit.Assert.assertNotNull(uRI5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "//Etc/UTC" + "'", str6, "//Etc/UTC");
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Etc/UTC" + "'", str11, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(uRI24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "//Etc/UTC" + "'", str25, "//Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/UTC" + "'", str27, "/UTC");
        org.junit.Assert.assertNotNull(uRI28);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        boolean boolean7 = longStream6.isParallel();
        boolean boolean8 = longStream6.isParallel();
        long[] longArray9 = longStream6.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong10 = longStream6.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(0.0d);
        java.util.OptionalDouble optionalDouble2 = doubleStream1.findAny();
        boolean boolean3 = optionalDouble2.isPresent();
        double double5 = optionalDouble2.orElse((double) (short) 100);
        java.time.ZoneId zoneId6 = java.time.ZoneId.systemDefault();
        java.lang.String str7 = zoneId6.getId();
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(zoneId6);
        java.time.ZoneId zoneId9 = java.time.ZoneId.systemDefault();
        java.lang.String str10 = zoneId9.getId();
        java.time.ZonedDateTime zonedDateTime11 = zonedDateTime8.withZoneSameInstant(zoneId9);
        long long12 = zonedDateTime8.toEpochSecond();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime8.minusMonths((long) (-34));
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime8.withDayOfYear((int) '#');
        boolean boolean17 = optionalDouble2.equals((java.lang.Object) '#');
        java.util.function.DoubleSupplier doubleSupplier18 = null;
        double double19 = optionalDouble2.orElseGet(doubleSupplier18);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Etc/UTC" + "'", str10, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645434890L + "'", long12 == 1645434890L);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter4.print((float) '\000');
        java.io.PrintWriter printWriter8 = printWriter4.append('4');
        printWriter4.write("1.0.0.100", 64, (-5));
        org.junit.Assert.assertNotNull(printWriter8);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter12.println("hi!");
        properties1.list(printWriter12);
        printWriter12.println(10);
        printWriter12.println((int) (short) 1);
        printWriter12.flush();
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.security.AccessControlException accessControlException1 = new java.security.AccessControlException("Chinese");
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.util.OptionalLong optionalLong1 = java.util.OptionalLong.of((long) 100);
        java.util.function.LongSupplier longSupplier2 = null;
        long long3 = optionalLong1.orElseGet(longSupplier2);
        long long5 = optionalLong1.orElse((long) (byte) 10);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal7 = null;
        java.time.temporal.Temporal temporal8 = duration6.subtractFrom(temporal7);
        long long9 = duration6.toDays();
        java.time.temporal.Temporal temporal10 = null;
        java.time.temporal.Temporal temporal11 = duration6.addTo(temporal10);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.LocalTime localTime18 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime19 = localDate17.atTime(localTime18);
        java.time.LocalTime localTime21 = localTime18.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap22 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology23 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean24 = strMapMap22.containsKey((java.lang.Object) isoChronology23);
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate28 = isoChronology23.dateYearDay((java.time.chrono.Era) isoEra25, (-1), 10);
        java.time.Duration duration29 = java.time.Duration.ZERO;
        java.time.Duration duration30 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal31 = null;
        java.time.temporal.Temporal temporal32 = duration30.subtractFrom(temporal31);
        long long33 = duration30.toDays();
        java.time.Duration duration34 = duration29.plus(duration30);
        long long35 = duration30.toDays();
        java.lang.String str36 = duration30.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate37 = localDate28.plus((java.time.temporal.TemporalAmount) duration30);
        java.time.LocalTime localTime38 = localTime18.minus((java.time.temporal.TemporalAmount) duration30);
        java.time.temporal.Temporal temporal39 = duration6.addTo((java.time.temporal.Temporal) localTime18);
        int int40 = localTime18.getMinute();
        boolean boolean41 = optionalLong1.equals((java.lang.Object) int40);
        java.net.URISyntaxException uRISyntaxException44 = new java.net.URISyntaxException("italiano", "");
        java.lang.String str45 = uRISyntaxException44.getReason();
        java.net.URISyntaxException uRISyntaxException48 = new java.net.URISyntaxException("italiano", "");
        uRISyntaxException44.addSuppressed((java.lang.Throwable) uRISyntaxException48);
        boolean boolean50 = optionalLong1.equals((java.lang.Object) uRISyntaxException44);
        java.lang.String str51 = optionalLong1.toString();
        org.junit.Assert.assertNotNull(optionalLong1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNull(temporal8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(temporal11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(isoChronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra25.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNull(temporal32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0S" + "'", str36, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(temporal39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OptionalLong[100]" + "'", str51, "OptionalLong[100]");
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        boolean boolean11 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset12);
        java.util.Date date16 = new java.util.Date((long) (byte) 1);
        java.lang.Cloneable cloneable17 = strMapMap0.getOrDefault((java.lang.Object) localDateTime10, (java.lang.Cloneable) date16);
        date16.setYear((int) (byte) 1);
        java.time.Instant instant20 = date16.toInstant();
        java.lang.Object obj21 = date16.clone();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 UTC 1901");
        org.junit.Assert.assertNotNull(cloneable17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "Tue Jan 01 00:00:00 UTC 1901");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "Tue Jan 01 00:00:00 UTC 1901");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "Tue Jan 01 00:00:00 UTC 1901");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.lang.String str13 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset12);
        boolean boolean15 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        boolean boolean16 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray32 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, zoneOffsetTransitionArray32);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray35 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, zoneOffsetTransitionArray35);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray38 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39, zoneOffsetTransitionRuleArray38);
        java.time.zone.ZoneRules zoneRules41 = java.time.zone.ZoneRules.of(zoneOffset30, zoneOffset31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList33, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList36, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList39);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray47 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, zoneOffsetTransitionArray47);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray50 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51, zoneOffsetTransitionRuleArray50);
        java.time.zone.ZoneRules zoneRules53 = java.time.zone.ZoneRules.of(zoneOffset42, zoneOffset43, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList51);
        boolean boolean54 = zoneOffsetTransitionList33.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray60 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, zoneOffsetTransitionArray60);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray63 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList64 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64, zoneOffsetTransitionRuleArray63);
        java.time.zone.ZoneRules zoneRules66 = java.time.zone.ZoneRules.of(zoneOffset55, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList64);
        int int68 = zoneOffsetTransitionList61.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray71 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, zoneOffsetTransitionArray71);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray77 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList78 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78, zoneOffsetTransitionRuleArray77);
        java.time.zone.ZoneRules zoneRules80 = java.time.zone.ZoneRules.of(zoneOffset69, zoneOffset70, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList72, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset17, zoneOffset18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList48, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList61, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.MAX;
        java.lang.String str85 = zoneOffset84.getId();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset84);
        int int87 = zoneOffset18.compareTo(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime88 = java.time.OffsetDateTime.of(localDateTime9, zoneOffset18);
        java.time.LocalTime localTime89 = offsetDateTime88.toLocalTime();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime88.withDayOfMonth((int) (byte) 10);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime91.plusWeeks((long) (short) 10);
        java.time.Month month94 = offsetDateTime91.getMonth();
        java.time.LocalDateTime localDateTime95 = offsetDateTime91.toLocalDateTime();
        int int96 = offsetDateTime91.getNano();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+18:00" + "'", str13, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+18:00" + "'", str85, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertTrue("'" + month94 + "' != '" + java.time.Month.JANUARY + "'", month94.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 120 + "'", int96 == 120);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.lang.String[] strArray13 = new java.lang.String[] { "Stati Uniti", "{}", "italiano://Etc/UTC#Etc/UTC", "en-GB", "P0D", ":", "hi!", "{}", "java.nio.channels.AsynchronousCloseException", "italiano://Etc/UTC#Etc/UTC", "ISO", "+18:00", "P0D" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray18 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, zoneOffsetTransitionArray18);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray21 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, zoneOffsetTransitionArray21);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray24 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList25, zoneOffsetTransitionRuleArray24);
        java.time.zone.ZoneRules zoneRules27 = java.time.zone.ZoneRules.of(zoneOffset16, zoneOffset17, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList25);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray30 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, zoneOffsetTransitionArray30);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray36 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList37, zoneOffsetTransitionRuleArray36);
        java.time.zone.ZoneRules zoneRules39 = java.time.zone.ZoneRules.of(zoneOffset28, zoneOffset29, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList37);
        boolean boolean40 = zoneOffsetTransitionList19.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34);
        zoneOffsetTransitionList19.clear();
        boolean boolean42 = strSet14.removeAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19);
        strSet14.clear();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(256);
        char char2 = byteBuffer1.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '\000' + "'", char2 == '\000');
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.io.File file5 = file2.getCanonicalFile();
        java.net.URL uRL6 = file5.toURL();
        boolean boolean7 = file5.exists();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/");
        org.junit.Assert.assertEquals(file5.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(uRL6);
        org.junit.Assert.assertEquals(uRL6.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.lang.String str5 = uRL4.getQuery();
        java.lang.Class class6 = null;
        java.lang.Class[] classArray7 = new java.lang.Class[] { class6 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = uRL4.getContent(classArray7);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /1970-01-01T18:01:37.00000012 (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(classArray7);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.MEDIUM;
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.MEDIUM + "'", formatStyle0.equals(java.time.format.FormatStyle.MEDIUM));
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        resizableDoubleArray0.setElement((int) '-', (double) 1645434860L);
        int int4 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 46 + "'", int4 == 46);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.time.Month month0 = java.time.Month.OCTOBER;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.OCTOBER + "'", month0.equals(java.time.Month.OCTOBER));
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.lang.Object obj13 = properties1.setProperty("en-GB", "2022-02-21T09:14:01.826Z[Etc/UTC]");
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter15.println("hi!");
        printWriter15.print((double) (byte) -1);
        printWriter15.write("");
        printWriter15.println();
        properties1.store((java.io.Writer) printWriter15, "MALFORMED[10]");
        int int25 = properties1.size();
        java.util.OptionalLong optionalLong27 = java.util.OptionalLong.of((long) '-');
        java.util.Properties properties28 = null;
        java.util.Properties properties29 = new java.util.Properties(properties28);
        java.lang.String str30 = properties29.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        boolean boolean32 = properties1.remove((java.lang.Object) optionalLong27, (java.lang.Object) properties29);
        java.io.PrintStream printStream34 = new java.io.PrintStream("Fri");
        boolean boolean35 = printStream34.checkError();
        printStream34.print((double) (byte) -1);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray41 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList42 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList42, zoneOffsetTransitionArray41);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray44 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, zoneOffsetTransitionArray44);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray47 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList48 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList48, zoneOffsetTransitionRuleArray47);
        java.time.zone.ZoneRules zoneRules50 = java.time.zone.ZoneRules.of(zoneOffset39, zoneOffset40, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList42, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList45, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList48);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray53 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList54 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, zoneOffsetTransitionArray53);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray56 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList57 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList57, zoneOffsetTransitionArray56);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray59 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList60 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList60, zoneOffsetTransitionRuleArray59);
        java.time.zone.ZoneRules zoneRules62 = java.time.zone.ZoneRules.of(zoneOffset51, zoneOffset52, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList57, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList60);
        boolean boolean63 = zoneOffsetTransitionList42.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList57);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition64 = null;
        boolean boolean65 = zoneOffsetTransitionList42.add(zoneOffsetTransition64);
        java.lang.Object[] objArray66 = zoneOffsetTransitionList42.toArray();
        java.io.PrintStream printStream67 = printStream34.printf("ISO", objArray66);
        properties29.store((java.io.OutputStream) printStream34, "java.text.AttributedCharacterIterator$Attribute(reading)");
        printStream34.print('a');
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(optionalLong27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneRules50);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[null]");
        org.junit.Assert.assertNotNull(printStream67);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.duplicate();
        boolean boolean8 = longBuffer2.isDirect();
        long[] longArray10 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer11 = java.nio.LongBuffer.wrap(longArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer12 = longBuffer2.put(longArray10);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[10]");
        org.junit.Assert.assertNotNull(longBuffer11);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        boolean boolean12 = zoneRules11.isFixedOffset();
        java.time.Instant instant13 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition14 = zoneRules11.previousTransition(instant13);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList15 = zoneRules11.getTransitionRules();
        java.time.Instant instant16 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition17 = zoneRules11.previousTransition(instant16);
        java.time.Instant instant18 = java.time.Instant.MAX;
        java.time.Instant instant20 = instant18.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset21 = zoneRules11.getOffset(instant20);
        boolean boolean22 = zoneRules11.isFixedOffset();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition14);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList15);
        org.junit.Assert.assertNull(zoneOffsetTransition17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        java.time.Duration duration21 = duration16.minus(duration17);
        java.time.OffsetTime offsetTime22 = offsetTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime23 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray26 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, zoneOffsetTransitionArray26);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray29 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, zoneOffsetTransitionArray29);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray32 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList33 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33, zoneOffsetTransitionRuleArray32);
        java.time.zone.ZoneRules zoneRules35 = java.time.zone.ZoneRules.of(zoneOffset24, zoneOffset25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList27, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList30, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList33);
        java.time.OffsetTime offsetTime36 = localTime23.atOffset(zoneOffset24);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange38 = offsetTime36.range((java.time.temporal.TemporalField) chronoField37);
        java.time.Duration duration39 = java.time.Duration.ZERO;
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal41 = null;
        java.time.temporal.Temporal temporal42 = duration40.subtractFrom(temporal41);
        long long43 = duration40.toDays();
        java.time.Duration duration44 = duration39.minus(duration40);
        java.time.OffsetTime offsetTime45 = offsetTime36.minus((java.time.temporal.TemporalAmount) duration40);
        boolean boolean46 = offsetTime22.isAfter(offsetTime36);
        java.time.LocalTime localTime47 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray50 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList51 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, zoneOffsetTransitionArray50);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray53 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList54 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, zoneOffsetTransitionArray53);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray56 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList57 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList57, zoneOffsetTransitionRuleArray56);
        java.time.zone.ZoneRules zoneRules59 = java.time.zone.ZoneRules.of(zoneOffset48, zoneOffset49, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList51, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList54, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList57);
        java.time.OffsetTime offsetTime60 = localTime47.atOffset(zoneOffset48);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange62 = offsetTime60.range((java.time.temporal.TemporalField) chronoField61);
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean64 = offsetTime60.isSupported((java.time.temporal.TemporalField) chronoField63);
        boolean boolean65 = offsetTime22.isAfter(offsetTime60);
        int int66 = offsetTime22.getHour();
        java.time.LocalTime localTime67 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray70 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList71 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList71, zoneOffsetTransitionArray70);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray73 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList74 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList74, zoneOffsetTransitionArray73);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray76 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList77 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList77, zoneOffsetTransitionRuleArray76);
        java.time.zone.ZoneRules zoneRules79 = java.time.zone.ZoneRules.of(zoneOffset68, zoneOffset69, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList71, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList74, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList77);
        java.time.OffsetTime offsetTime80 = localTime67.atOffset(zoneOffset68);
        java.time.temporal.ChronoField chronoField81 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange82 = offsetTime80.range((java.time.temporal.TemporalField) chronoField81);
        java.time.temporal.ChronoField chronoField83 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean84 = offsetTime80.isSupported((java.time.temporal.TemporalField) chronoField83);
        java.time.OffsetTime offsetTime86 = offsetTime80.plusMinutes((long) 'u');
        java.time.temporal.Temporal temporal87 = offsetTime22.with((java.time.temporal.TemporalAdjuster) offsetTime86);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNull(temporal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneRules59);
        org.junit.Assert.assertNotNull(offsetTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField61.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField63.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 23 + "'", int66 == 23);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(zoneRules79);
        org.junit.Assert.assertNotNull(offsetTime80);
        org.junit.Assert.assertTrue("'" + chronoField81 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField81.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange82);
        org.junit.Assert.assertTrue("'" + chronoField83 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField83.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(offsetTime86);
        org.junit.Assert.assertNotNull(temporal87);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Fri");
        boolean boolean2 = printStream1.checkError();
        printStream1.print((double) (byte) -1);
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray8 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, zoneOffsetTransitionArray8);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray11 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, zoneOffsetTransitionArray11);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray14 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15, zoneOffsetTransitionRuleArray14);
        java.time.zone.ZoneRules zoneRules17 = java.time.zone.ZoneRules.of(zoneOffset6, zoneOffset7, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        boolean boolean30 = zoneOffsetTransitionList9.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition31 = null;
        boolean boolean32 = zoneOffsetTransitionList9.add(zoneOffsetTransition31);
        java.lang.Object[] objArray33 = zoneOffsetTransitionList9.toArray();
        java.io.PrintStream printStream34 = printStream1.printf("ISO", objArray33);
        printStream1.println(true);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        printStream1.write(byteArray42);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[null]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, -1, 1, 100, 0]");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator0 = java.util.function.UnaryOperator.identity();
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray1 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList2 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList2, zoneOffsetTransitionArray1);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream4 = zoneOffsetTransitionList2.stream();
        java.io.Serializable serializable5 = serializableUnaryOperator0.apply((java.io.Serializable) zoneOffsetTransitionList2);
        java.util.Spliterator<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionSpliterator6 = zoneOffsetTransitionList2.spliterator();
        org.junit.Assert.assertNotNull(serializableUnaryOperator0);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionSpliterator6);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics1.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics5.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics8.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics5.setSumsqImpl(univariateStatistic11);
        descriptiveStatistics1.setSumsqImpl(univariateStatistic11);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics17.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics17.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics21.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics24.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics24.getGeometricMeanImpl();
        descriptiveStatistics21.setSumsqImpl(univariateStatistic27);
        descriptiveStatistics17.setSumsqImpl(univariateStatistic27);
        descriptiveStatistics16.setGeometricMeanImpl(univariateStatistic27);
        descriptiveStatistics15.setMaxImpl(univariateStatistic27);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic27);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.util.function.DoubleUnaryOperator doubleUnaryOperator0 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator1 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator2 = doubleUnaryOperator0.andThen(doubleUnaryOperator1);
        java.util.function.DoubleUnaryOperator[] doubleUnaryOperatorArray3 = new java.util.function.DoubleUnaryOperator[] { doubleUnaryOperator1 };
        java.util.stream.Stream<java.util.function.DoubleUnaryOperator> doubleUnaryOperatorStream4 = java.util.stream.Stream.of(doubleUnaryOperatorArray3);
        org.junit.Assert.assertNotNull(doubleUnaryOperator0);
        org.junit.Assert.assertNotNull(doubleUnaryOperator1);
        org.junit.Assert.assertNotNull(doubleUnaryOperator2);
        org.junit.Assert.assertNotNull(doubleUnaryOperatorArray3);
        org.junit.Assert.assertNotNull(doubleUnaryOperatorStream4);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.ChronoLocalDate chronoLocalDate4 = isoChronology1.dateEpochDay((long) 14);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime5 = java.time.chrono.ChronoLocalDateTime.from((java.time.temporal.TemporalAccessor) chronoLocalDate4);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: 1970-01-15 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(chronoLocalDate4);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.time.Period period3 = java.time.Period.of((-1), 0, 2);
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.lang.String str7 = zoneOffset6.getId();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset6);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset11);
        boolean boolean14 = localDateTime8.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str16 = localDateTime13.format(dateTimeFormatter15);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int18 = localDateTime13.get((java.time.temporal.TemporalField) chronoField17);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.lang.String str22 = zoneOffset21.getId();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.lang.String str27 = zoneOffset26.getId();
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset26);
        boolean boolean29 = localDateTime23.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.format.DateTimeFormatter dateTimeFormatter30 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str31 = localDateTime28.format(dateTimeFormatter30);
        boolean boolean32 = localDateTime13.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDate localDate33 = localDateTime13.toLocalDate();
        java.time.temporal.Temporal temporal34 = period3.subtractFrom((java.time.temporal.Temporal) localDate33);
        java.time.chrono.IsoChronology isoChronology35 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra37 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate40 = isoChronology35.dateYearDay((java.time.chrono.Era) isoEra37, 0, 16);
        java.time.Duration duration41 = java.time.Duration.ZERO;
        java.time.LocalDate localDate42 = localDate40.plus((java.time.temporal.TemporalAmount) duration41);
        java.time.chrono.IsoChronology isoChronology43 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra45 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate48 = isoChronology43.dateYearDay((java.time.chrono.Era) isoEra45, 0, 16);
        java.time.Duration duration49 = java.time.Duration.ZERO;
        java.time.LocalDate localDate50 = localDate48.plus((java.time.temporal.TemporalAmount) duration49);
        boolean boolean51 = localDate40.isBefore((java.time.chrono.ChronoLocalDate) localDate50);
        java.time.temporal.Temporal temporal52 = period3.subtractFrom((java.time.temporal.Temporal) localDate50);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+18:00" + "'", str7, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str16, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+18:00" + "'", str22, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+18:00" + "'", str27, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str31, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(isoChronology35);
        org.junit.Assert.assertTrue("'" + isoEra37 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra37.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(isoChronology43);
        org.junit.Assert.assertTrue("'" + isoEra45 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra45.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(temporal52);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean17 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.OffsetTime offsetTime19 = offsetTime13.plusMinutes((long) 'u');
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean21 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField20);
        java.time.Duration duration23 = java.time.Duration.ofMinutes((long) (byte) 1);
        java.time.OffsetTime offsetTime24 = offsetTime13.minus((java.time.temporal.TemporalAmount) duration23);
        java.time.chrono.IsoChronology isoChronology25 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate30 = isoChronology25.dateYearDay((java.time.chrono.Era) isoEra27, 0, 16);
        java.time.Duration duration31 = java.time.Duration.ZERO;
        java.time.LocalDate localDate32 = localDate30.plus((java.time.temporal.TemporalAmount) duration31);
        java.time.LocalDateTime localDateTime33 = localDate32.atStartOfDay();
        java.time.chrono.Era era34 = localDate32.getEra();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal35 = duration23.addTo((java.time.temporal.Temporal) localDate32);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Seconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField20.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(offsetTime24);
        org.junit.Assert.assertNotNull(isoChronology25);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra27.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + era34 + "' != '" + java.time.chrono.IsoEra.CE + "'", era34.equals(java.time.chrono.IsoEra.CE));
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        java.lang.String str1 = zoneId0.getId();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(zoneId0);
        java.time.ZoneId zoneId3 = java.time.ZoneId.systemDefault();
        java.lang.String str4 = zoneId3.getId();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime2.withZoneSameInstant(zoneId3);
        java.time.ZonedDateTime zonedDateTime7 = zonedDateTime5.minusYears((long) (short) 0);
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        long long9 = zonedDateTime5.getLong((java.time.temporal.TemporalField) chronoField8);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime5.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.ValueRange valueRange12 = chronoField11.range();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime14 = zonedDateTime10.with((java.time.temporal.TemporalField) chronoField11, 0L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for ClockHourOfAmPm (valid values 1 - 12): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneId0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Etc/UTC" + "'", str1, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField8.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField11.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(valueRange12);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray15 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList16 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, zoneOffsetTransitionArray15);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray18 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList19 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, zoneOffsetTransitionArray18);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray21 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22, zoneOffsetTransitionRuleArray21);
        java.time.zone.ZoneRules zoneRules24 = java.time.zone.ZoneRules.of(zoneOffset13, zoneOffset14, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList16, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList19, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList22);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray30 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, zoneOffsetTransitionArray30);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray33 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34, zoneOffsetTransitionRuleArray33);
        java.time.zone.ZoneRules zoneRules36 = java.time.zone.ZoneRules.of(zoneOffset25, zoneOffset26, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList34);
        boolean boolean37 = zoneOffsetTransitionList16.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray43 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, zoneOffsetTransitionArray43);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray46 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList47 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList47, zoneOffsetTransitionRuleArray46);
        java.time.zone.ZoneRules zoneRules49 = java.time.zone.ZoneRules.of(zoneOffset38, zoneOffset39, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList47);
        int int51 = zoneOffsetTransitionList44.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray54 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList55 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, zoneOffsetTransitionArray54);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray57 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList58 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, zoneOffsetTransitionArray57);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray60 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList61 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList61, zoneOffsetTransitionRuleArray60);
        java.time.zone.ZoneRules zoneRules63 = java.time.zone.ZoneRules.of(zoneOffset52, zoneOffset53, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList55, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList58, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList61);
        java.time.zone.ZoneRules zoneRules64 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList31, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList44, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList61);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream65 = zoneOffsetTransitionList31.parallelStream();
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream67 = zoneOffsetTransitionStream65.limit(11L);
        java.lang.Object[] objArray68 = zoneOffsetTransitionStream67.toArray();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(zoneRules64);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream65);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.util.Date date5 = new java.util.Date((int) 'a', 1969, 1024, 10, 18);
        java.util.Date date11 = new java.util.Date(256, (int) (short) -1, 13, 64, (int) (short) 10);
        java.time.Instant instant12 = date11.toInstant();
        int int13 = date5.compareTo(date11);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Nov 21 10:18:00 UTC 2163");
        org.junit.Assert.assertEquals(date11.toString(), "Mon Dec 15 16:10:00 UTC 2155");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = localTime0.atOffset(zoneOffset1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange15 = offsetTime13.range((java.time.temporal.TemporalField) chronoField14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean17 = offsetTime13.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.OffsetTime offsetTime19 = offsetTime13.plusMinutes((long) 'u');
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime21 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray24 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, zoneOffsetTransitionArray24);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray27 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, zoneOffsetTransitionArray27);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray30 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList31 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31, zoneOffsetTransitionRuleArray30);
        java.time.zone.ZoneRules zoneRules33 = java.time.zone.ZoneRules.of(zoneOffset22, zoneOffset23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList28, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList31);
        java.time.OffsetTime offsetTime34 = localTime21.atOffset(zoneOffset22);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange36 = offsetTime34.range((java.time.temporal.TemporalField) chronoField35);
        java.time.OffsetTime offsetTime38 = chronoField20.adjustInto(offsetTime34, (long) 16);
        boolean boolean39 = offsetTime13.isAfter(offsetTime34);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        // The following exception was thrown during execution in test generation
        try {
            int int41 = offsetTime13.get((java.time.temporal.TemporalField) chronoField40);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField20.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange36);
        org.junit.Assert.assertNotNull(offsetTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        java.time.Period period1 = java.time.Period.ofYears((int) '\000');
        java.time.Period period3 = period1.minusDays((long) (short) 0);
        java.time.ZoneId zoneId4 = java.time.ZoneId.systemDefault();
        java.lang.String str5 = zoneId4.getId();
        java.time.ZonedDateTime zonedDateTime6 = java.time.ZonedDateTime.now(zoneId4);
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = zonedDateTime6.withZoneSameInstant(zoneId7);
        long long10 = zonedDateTime6.toEpochSecond();
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime6.minusMonths((long) (-34));
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate14 = localDateTime13.toLocalDate();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime12.with((java.time.temporal.TemporalAdjuster) localDateTime13);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.toLanguageTag();
        java.lang.String str19 = chronoField16.getDisplayName(locale17);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap20 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology21 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean22 = strMapMap20.containsKey((java.lang.Object) isoChronology21);
        java.time.chrono.IsoEra isoEra23 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate26 = isoChronology21.dateYearDay((java.time.chrono.Era) isoEra23, (-1), 10);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.wrap(byteArray29, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology33 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean34 = byteBuffer32.equals((java.lang.Object) isoChronology33);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap35 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology36 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean37 = strMapMap35.containsKey((java.lang.Object) isoChronology36);
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate41 = isoChronology36.dateYearDay((java.time.chrono.Era) isoEra38, (-1), 10);
        int int43 = isoChronology33.prolepticYear((java.time.chrono.Era) isoEra38, (int) '#');
        java.time.LocalDate localDate46 = isoChronology21.dateYearDay((java.time.chrono.Era) isoEra38, (int) (byte) 0, 2);
        boolean boolean47 = chronoField16.isSupportedBy((java.time.temporal.TemporalAccessor) localDate46);
        long long48 = zonedDateTime15.getLong((java.time.temporal.TemporalField) chronoField16);
        java.time.temporal.Temporal temporal49 = period3.addTo((java.time.temporal.Temporal) zonedDateTime15);
        java.time.temporal.TemporalField temporalField50 = null;
        boolean boolean51 = zonedDateTime15.isSupported(temporalField50);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645434892L + "'", long10 == 1645434892L);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en-GB" + "'", str18, "en-GB");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AlignedWeekOfYear" + "'", str19, "AlignedWeekOfYear");
        org.junit.Assert.assertNotNull(isoChronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + isoEra23 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra23.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(isoChronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(isoChronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + isoEra38 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra38.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-34) + "'", int43 == (-34));
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 53L + "'", long48 == 53L);
        org.junit.Assert.assertNotNull(temporal49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) 4);
        java.util.stream.LongStream longStream2 = longStream1.sequential();
        java.util.stream.LongStream longStream3 = longStream1.sorted();
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        boolean boolean13 = zoneRules12.isFixedOffset();
        java.time.Instant instant14 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules12.previousTransition(instant14);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = zoneRules12.getTransitionRules();
        java.time.Instant instant17 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition18 = zoneRules12.previousTransition(instant17);
        java.time.Instant instant19 = java.time.Instant.MAX;
        java.time.Instant instant21 = instant19.plusNanos((long) (short) -1);
        java.time.ZoneOffset zoneOffset22 = zoneRules12.getOffset(instant21);
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery24 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period25 = offsetDateTime23.query(periodTemporalQuery24);
        java.time.chrono.Chronology chronology26 = period25.getChronology();
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MAX;
        java.lang.String str30 = zoneOffset29.getId();
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset29);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.lang.String str35 = zoneOffset34.getId();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset34);
        boolean boolean37 = localDateTime31.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str39 = localDateTime36.format(dateTimeFormatter38);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int41 = localDateTime36.get((java.time.temporal.TemporalField) chronoField40);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.lang.String str45 = zoneOffset44.getId();
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset44);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.MAX;
        java.lang.String str50 = zoneOffset49.getId();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset49);
        boolean boolean52 = localDateTime46.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.format.DateTimeFormatter dateTimeFormatter53 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str54 = localDateTime51.format(dateTimeFormatter53);
        boolean boolean55 = localDateTime36.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean57 = localDateTime36.isSupported((java.time.temporal.TemporalField) chronoField56);
        java.time.Period period59 = java.time.Period.ofYears((int) '\000');
        java.time.Period period61 = period59.minusDays((long) (short) 0);
        java.time.LocalDateTime localDateTime62 = localDateTime36.plus((java.time.temporal.TemporalAmount) period59);
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.MAX;
        java.time.Clock clock64 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset63);
        java.time.ZoneId zoneId65 = java.time.ZoneId.systemDefault();
        java.lang.String str66 = zoneId65.getId();
        java.lang.String str67 = zoneId65.getId();
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.ofInstant(localDateTime62, zoneOffset63, zoneId65);
        java.time.Clock clock69 = java.time.Clock.system(zoneId65);
        java.time.chrono.ChronoLocalDate chronoLocalDate70 = chronology26.dateNow(clock69);
        boolean boolean71 = chronoLocalDate70.isLeapYear();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList16);
        org.junit.Assert.assertNull(zoneOffsetTransition18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(periodTemporalQuery24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+18:00" + "'", str30, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+18:00" + "'", str35, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str39, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+18:00" + "'", str45, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+18:00" + "'", str50, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str54, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField56.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(zoneId65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Etc/UTC" + "'", str66, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Etc/UTC" + "'", str67, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(clock69);
        org.junit.Assert.assertNotNull(chronoLocalDate70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        int[] intArray0 = new int[] {};
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(intArray0);
        java.util.OptionalInt optionalInt2 = intStream1.max();
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = optionalInt2.equals(obj3);
        int int6 = optionalInt2.orElse(46);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 46 + "'", int6 == 46);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        char char3 = charBuffer1.get();
        java.nio.CharBuffer charBuffer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = charBuffer1.read(charBuffer4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\000' + "'", char3 == '\000');
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.Month month2 = month1.firstMonthOfQuarter();
        java.time.Month month4 = month1.minus((long) ':');
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.JANUARY + "'", month2.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.MARCH + "'", month4.equals(java.time.Month.MARCH));
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        char char0 = java.text.CharacterIterator.DONE;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + '\uffff' + "'", char0 == '\uffff');
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.security.AccessControlException accessControlException1 = new java.security.AccessControlException("{}");
        java.security.SignatureException signatureException2 = new java.security.SignatureException((java.lang.Throwable) accessControlException1);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.Object obj1 = strMapMap0.clone();
        java.lang.String str2 = strMapMap0.toString();
        java.util.Set<java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>> strMapEntrySet3 = strMapMap0.entrySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap4 = java.nio.charset.Charset.availableCharsets();
        boolean boolean5 = strMap4.isEmpty();
        java.util.Set<java.lang.String> strSet6 = strMap4.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate7 = java.util.function.Predicate.isEqual((java.lang.Object) strMap4);
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.Cloneable cloneable10 = strMapMap0.replace(strMap4, (java.lang.Cloneable) locale8);
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset13 = strMap4.replace("DayOfWeek", charset12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(strMapEntrySet3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(resolverStylePredicate7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en-GB" + "'", str9, "en-GB");
        org.junit.Assert.assertNull(cloneable10);
        org.junit.Assert.assertNotNull(charset12);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.String str1 = strMapMap0.toString();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap2 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology3 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean4 = strMapMap2.containsKey((java.lang.Object) isoChronology3);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        boolean boolean6 = strMap5.isEmpty();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.Cloneable cloneable10 = strMapMap2.put(strMap5, (java.lang.Cloneable) locale8);
        int int11 = strMap5.size();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap12 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = strMapMap12.containsKey((java.lang.Object) isoChronology13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal16 = null;
        java.time.temporal.Temporal temporal17 = duration15.subtractFrom(temporal16);
        long long18 = duration15.toDays();
        boolean boolean19 = strMapMap12.contains((java.lang.Object) duration15);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable21 = strMapMap12.get((java.lang.Object) dateTimeFormatter20);
        java.util.Set<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapSet22 = strMapMap12.keySet();
        java.lang.Cloneable cloneable23 = strMapMap0.put(strMap5, (java.lang.Cloneable) strMapMap12);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap24 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.Object obj25 = strMapMap24.clone();
        java.lang.String str26 = strMapMap24.toString();
        java.util.Set<java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>> strMapEntrySet27 = strMapMap24.entrySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap28 = java.nio.charset.Charset.availableCharsets();
        boolean boolean29 = strMap28.isEmpty();
        java.util.Set<java.lang.String> strSet30 = strMap28.keySet();
        java.util.function.Predicate<java.time.format.ResolverStyle> resolverStylePredicate31 = java.util.function.Predicate.isEqual((java.lang.Object) strMap28);
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String str33 = locale32.toLanguageTag();
        java.lang.Cloneable cloneable34 = strMapMap24.replace(strMap28, (java.lang.Cloneable) locale32);
        java.util.Locale locale37 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str38 = locale37.getLanguage();
        java.lang.Cloneable cloneable39 = strMapMap12.put(strMap28, (java.lang.Cloneable) locale37);
        java.lang.String str40 = locale37.getDisplayCountry();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Stati Uniti" + "'", str9, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 171 + "'", int11 == 171);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNull(temporal17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(cloneable21);
        org.junit.Assert.assertNotNull(strMapSet22);
        org.junit.Assert.assertNull(cloneable23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNotNull(strMapEntrySet27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(resolverStylePredicate31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en-GB" + "'", str33, "en-GB");
        org.junit.Assert.assertNull(cloneable34);
        org.junit.Assert.assertEquals(locale37.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "599b081c1808" + "'", str38, "599b081c1808");
        org.junit.Assert.assertNull(cloneable39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DIRECT" + "'", str40, "DIRECT");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.io.PrintStream printStream1 = new java.io.PrintStream("20220221Z");
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale3 = dateTimeFormatter2.getLocale();
        java.util.Locale locale4 = java.util.Locale.US;
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.lang.String str7 = locale3.getDisplayVariant(locale4);
        java.lang.Object[] objArray9 = null;
        java.io.PrintStream printStream10 = printStream1.format(locale3, "DecimalStyle[a+-.]", objArray9);
        printStream10.println("0001-01-16");
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress19 = java.net.InetAddress.getByAddress(byteArray18);
        java.net.InetAddress inetAddress20 = java.net.InetAddress.getByAddress("1970-01-01", byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            printStream10.write(byteArray18, 34, 1500);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Stati Uniti" + "'", str6, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress19);
        org.junit.Assert.assertNotNull(inetAddress20);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.time.temporal.TemporalAccessor temporalAccessor0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant1 = java.time.Instant.from(temporalAccessor0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: temporal");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.net.URI uRI4 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI5 = uRI4.normalize();
        java.net.URI uRI10 = new java.net.URI("italiano", "Etc/UTC", "", "Etc/UTC");
        java.net.URI uRI11 = uRI10.normalize();
        java.lang.String str12 = uRI11.getRawPath();
        java.lang.String str13 = uRI11.getFragment();
        java.net.URI uRI14 = uRI4.resolve(uRI11);
        java.lang.String str15 = uRI14.toASCIIString();
        java.lang.String str16 = uRI14.getRawPath();
        org.junit.Assert.assertNotNull(uRI5);
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/UTC" + "'", str12, "/UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Etc/UTC" + "'", str13, "Etc/UTC");
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "italiano://Etc/UTC#Etc/UTC" + "'", str15, "italiano://Etc/UTC#Etc/UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/UTC" + "'", str16, "/UTC");
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.security.GeneralSecurityException generalSecurityException1 = new java.security.GeneralSecurityException("\u4e0a\u5348\u4e0b\u5348");
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long9 = file8.lastModified();
        java.net.URL uRL10 = file8.toURL();
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path12 = path5.relativize(path11);
        java.io.File file15 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long16 = file15.lastModified();
        java.net.URL uRL17 = file15.toURL();
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long22 = file21.lastModified();
        java.net.URL uRL23 = file21.toURL();
        java.nio.file.Path path24 = file21.toPath();
        java.nio.file.Path path25 = path18.relativize(path24);
        boolean boolean26 = path11.startsWith(path18);
        java.io.File file29 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long30 = file29.lastModified();
        java.net.URL uRL31 = file29.toURL();
        java.nio.file.Path path32 = file29.toPath();
        java.io.File file35 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long36 = file35.lastModified();
        java.net.URL uRL37 = file35.toURL();
        java.nio.file.Path path38 = file35.toPath();
        java.nio.file.Path path39 = path32.relativize(path38);
        java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer43 = charBuffer41.append((java.lang.CharSequence) "Etc/UTC");
        int int44 = charBuffer43.arrayOffset();
        boolean boolean45 = path38.equals((java.lang.Object) int44);
        java.nio.file.Path path46 = path18.relativize(path38);
        boolean boolean48 = path38.startsWith("OptionalLong[100]");
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(uRL10);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
        org.junit.Assert.assertEquals(file15.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(uRL23);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals(file29.getParent(), "/");
        org.junit.Assert.assertEquals(file29.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(uRL31);
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertEquals(file35.getParent(), "/");
        org.junit.Assert.assertEquals(file35.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(uRL37);
        org.junit.Assert.assertEquals(uRL37.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(path38);
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(path46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 100);
        double double2 = optionalDouble1.getAsDouble();
        double double3 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        java.nio.CharBuffer charBuffer4 = charBuffer1.append('.');
        java.lang.String str5 = charBuffer1.toString();
        java.nio.CharBuffer charBuffer7 = charBuffer1.append('a');
        int int8 = charBuffer1.arrayOffset();
        java.nio.CharBuffer charBuffer9 = charBuffer1.slice();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str5, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(charBuffer9);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition25 = null;
        boolean boolean26 = zoneOffsetTransitionList3.add(zoneOffsetTransition25);
        java.lang.Object[] objArray27 = zoneOffsetTransitionList3.toArray();
        java.lang.String[] strArray28 = java.util.Locale.getISOLanguages();
        java.lang.String[] strArray29 = zoneOffsetTransitionList3.toArray(strArray28);
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.time.ZoneId zoneId32 = java.time.ZoneId.systemDefault();
        java.lang.String str33 = zoneId32.getId();
        java.time.ZonedDateTime zonedDateTime34 = java.time.ZonedDateTime.now(zoneId32);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime34.withYear((int) (short) 1);
        java.time.LocalTime localTime37 = zonedDateTime36.toLocalTime();
        java.util.stream.DoubleStream doubleStream39 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj40 = properties31.getOrDefault((java.lang.Object) zonedDateTime36, (java.lang.Object) doubleStream39);
        java.lang.Object obj43 = properties31.setProperty("P0D", "DIRECT");
        java.util.Enumeration<?> wildcardEnumeration44 = properties31.propertyNames();
        boolean boolean45 = zoneOffsetTransitionList3.remove((java.lang.Object) properties31);
        java.lang.Object obj48 = properties31.setProperty("java.util.concurrent.ExecutionException: java.nio.channels.AsynchronousCloseException", "2022-02-21T09:14:01.826Z[Etc/UTC]");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet49 = properties31.entrySet();
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[null]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Etc/UTC" + "'", str33, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(doubleStream39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(wildcardEnumeration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEntrySet49);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isSiteLocalAddress();
        boolean boolean2 = inetAddress0.isMCGlobal();
        boolean boolean3 = inetAddress0.isMCGlobal();
        boolean boolean4 = inetAddress0.isLoopbackAddress();
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.wrap(byteArray7, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology11 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean12 = byteBuffer10.equals((java.lang.Object) isoChronology11);
        java.lang.String str13 = isoChronology11.getCalendarType();
        java.time.Clock clock14 = java.time.Clock.systemUTC();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MAX;
        java.time.Clock clock16 = clock14.withZone((java.time.ZoneId) zoneOffset15);
        java.time.LocalDate localDate17 = isoChronology11.dateNow(clock16);
        boolean boolean18 = inetAddress0.equals((java.lang.Object) localDate17);
        int int19 = localDate17.getYear();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(isoChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "iso8601" + "'", str13, "iso8601");
        org.junit.Assert.assertNotNull(clock14);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(clock16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        boolean boolean11 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.lang.String str15 = zoneOffset14.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        boolean boolean22 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str24 = localDateTime21.format(dateTimeFormatter23);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int26 = localDateTime21.get((java.time.temporal.TemporalField) chronoField25);
        boolean boolean27 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.chrono.IsoChronology isoChronology28 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra30 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate33 = isoChronology28.dateYearDay((java.time.chrono.Era) isoEra30, 0, 16);
        java.time.LocalTime localTime34 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime35 = localDate33.atTime(localTime34);
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray38 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList39 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, zoneOffsetTransitionArray38);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray41 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList42 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList42, zoneOffsetTransitionArray41);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray44 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList45 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList45, zoneOffsetTransitionRuleArray44);
        java.time.zone.ZoneRules zoneRules47 = java.time.zone.ZoneRules.of(zoneOffset36, zoneOffset37, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList39, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList42, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList45);
        long long48 = localDateTime35.toEpochSecond(zoneOffset36);
        java.time.LocalDateTime localDateTime50 = localDateTime35.plusDays((long) (byte) 1);
        boolean boolean51 = localDateTime21.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime50);
        java.time.LocalDateTime localDateTime53 = localDateTime50.plusDays((-62134279201L));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = dateTimeFormatter0.format((java.time.temporal.TemporalAccessor) localDateTime53);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+18:00" + "'", str15, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str24, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField25.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(isoChronology28);
        org.junit.Assert.assertTrue("'" + isoEra30 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra30.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-62134279201L) + "'", long48 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean7 = byteBuffer5.equals((java.lang.Object) isoChronology6);
        boolean boolean8 = byteBuffer5.hasArray();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray11, (int) (short) 0, 0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.put(byteBuffer14);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 100 };
        java.net.InetAddress inetAddress21 = java.net.InetAddress.getByAddress(byteArray20);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer15.put(byteArray20, (int) '\000', 0);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer24.asFloatBuffer();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(inetAddress21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 78000000, (long) 3);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.net.URISyntaxException uRISyntaxException2 = new java.net.URISyntaxException("java.nio.channels.AsynchronousCloseException", "+18:00");
        java.lang.String str3 = uRISyntaxException2.getInput();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.nio.channels.AsynchronousCloseException" + "'", str3, "java.nio.channels.AsynchronousCloseException");
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.stream.LongStream longStream4 = longStream2.limit(1645434854L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.LongSummaryStatistics longSummaryStatistics5 = longStream2.summaryStatistics();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        java.time.LocalTime localTime22 = localDateTime21.toLocalTime();
        java.time.temporal.Temporal temporal23 = localDate16.adjustInto((java.time.temporal.Temporal) localDateTime21);
        java.time.LocalDateTime localDateTime25 = localDateTime21.minusDays((long) (-1));
        java.time.LocalTime localTime26 = localDateTime25.toLocalTime();
        java.time.ZoneId zoneId27 = java.time.ZoneId.systemDefault();
        java.lang.String str28 = zoneId27.getId();
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.now(zoneId27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime29.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit32 = null;
        boolean boolean33 = zonedDateTime29.isSupported(temporalUnit32);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.temporal.ValueRange valueRange35 = zonedDateTime29.range((java.time.temporal.TemporalField) chronoField34);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.LocalTime localTime37 = java.time.LocalTime.MAX;
        long long38 = chronoField36.getFrom((java.time.temporal.TemporalAccessor) localTime37);
        boolean boolean39 = zonedDateTime29.isSupported((java.time.temporal.TemporalField) chronoField36);
        java.time.temporal.ValueRange valueRange40 = chronoField36.range();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime42 = localTime26.with((java.time.temporal.TemporalField) chronoField36, (long) '\000');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for ClockHourOfDay (valid values 1 - 24): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(temporal23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Etc/UTC" + "'", str28, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField34.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(valueRange35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField36.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 23L + "'", long38 == 23L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(valueRange40);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.lang.String str6 = isoChronology0.toString();
        java.time.chrono.ChronoPeriod chronoPeriod10 = isoChronology0.period(0, (-1), (int) (short) 10);
        java.util.List<java.time.chrono.Era> eraList11 = isoChronology0.eras();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISO" + "'", str6, "ISO");
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(eraList11);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration3.subtractFrom(temporal4);
        long long6 = duration3.toDays();
        boolean boolean7 = strMapMap0.contains((java.lang.Object) duration3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        boolean boolean12 = strMap11.isEmpty();
        java.util.Locale locale13 = java.util.Locale.US;
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.lang.Cloneable cloneable16 = strMapMap8.put(strMap11, (java.lang.Cloneable) locale14);
        java.nio.charset.Charset charset18 = strMap11.get((java.lang.Object) "1970-01-01T18:01:37.000000130+18:00");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics19.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics22.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics22.getGeometricMeanImpl();
        descriptiveStatistics19.setSumsqImpl(univariateStatistic25);
        double[] doubleArray27 = descriptiveStatistics19.getSortedValues();
        java.lang.Cloneable cloneable28 = strMapMap0.put(strMap11, (java.lang.Cloneable) doubleArray27);
        java.util.Enumeration<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapEnumeration29 = strMapMap0.keys();
        boolean boolean30 = strMapEnumeration29.hasMoreElements();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Stati Uniti" + "'", str15, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable16);
        org.junit.Assert.assertNull(charset18);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNull(cloneable28);
        org.junit.Assert.assertNotNull(strMapEnumeration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal1 = null;
        java.time.temporal.Temporal temporal2 = duration0.subtractFrom(temporal1);
        long long3 = duration0.toDays();
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration0.addTo(temporal4);
        java.time.chrono.IsoChronology isoChronology6 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate11 = isoChronology6.dateYearDay((java.time.chrono.Era) isoEra8, 0, 16);
        java.time.LocalTime localTime12 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime13 = localDate11.atTime(localTime12);
        java.time.LocalTime localTime15 = localTime12.withNano(4);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean18 = strMapMap16.containsKey((java.lang.Object) isoChronology17);
        java.time.chrono.IsoEra isoEra19 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate22 = isoChronology17.dateYearDay((java.time.chrono.Era) isoEra19, (-1), 10);
        java.time.Duration duration23 = java.time.Duration.ZERO;
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal25 = null;
        java.time.temporal.Temporal temporal26 = duration24.subtractFrom(temporal25);
        long long27 = duration24.toDays();
        java.time.Duration duration28 = duration23.plus(duration24);
        long long29 = duration24.toDays();
        java.lang.String str30 = duration24.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate31 = localDate22.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.LocalTime localTime32 = localTime12.minus((java.time.temporal.TemporalAmount) duration24);
        java.time.temporal.Temporal temporal33 = duration0.addTo((java.time.temporal.Temporal) localTime12);
        java.time.LocalDate localDate35 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.ZoneId zoneId36 = java.time.ZoneId.systemDefault();
        java.lang.String str37 = zoneId36.getId();
        java.time.ZonedDateTime zonedDateTime38 = java.time.ZonedDateTime.now(zoneId36);
        java.time.ZonedDateTime zonedDateTime40 = zonedDateTime38.withYear((int) (short) 1);
        java.time.temporal.Temporal temporal41 = localDate35.adjustInto((java.time.temporal.Temporal) zonedDateTime40);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        long long43 = temporal41.getLong((java.time.temporal.TemporalField) chronoField42);
        boolean boolean44 = localTime12.isSupported((java.time.temporal.TemporalField) chronoField42);
        java.time.LocalTime localTime46 = localTime12.plusHours((long) (byte) 10);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNull(temporal2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertNotNull(isoChronology6);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra8.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + isoEra19 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra19.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNull(temporal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0S" + "'", str30, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(zoneId36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Etc/UTC" + "'", str37, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(temporal41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField42.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 11L + "'", long43 == 11L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localTime46);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime1 = java.time.OffsetDateTime.parse((java.lang.CharSequence) "java.nio.HeapFloatBufferR[pos=0 lim=256 cap=256]");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'java.nio.HeapFloatBufferR[pos=0 lim=256 cap=256]' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.util.stream.IntStream.Builder builder0 = java.util.stream.IntStream.builder();
        java.util.stream.IntStream intStream1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream.Builder builder3 = builder0.add(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(0);
        org.junit.Assert.assertNotNull(floatBuffer1);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.time.Instant instant0 = null;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.lang.String str4 = zoneOffset3.getId();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.lang.String str9 = zoneOffset8.getId();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset8);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        boolean boolean16 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        boolean boolean17 = localDateTime5.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray21 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList22 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, zoneOffsetTransitionArray21);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray24 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, zoneOffsetTransitionArray24);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray27 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList28 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList28, zoneOffsetTransitionRuleArray27);
        java.time.zone.ZoneRules zoneRules30 = java.time.zone.ZoneRules.of(zoneOffset19, zoneOffset20, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList22, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList25, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList28);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray33 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList34 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, zoneOffsetTransitionArray33);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray39 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40, zoneOffsetTransitionRuleArray39);
        java.time.zone.ZoneRules zoneRules42 = java.time.zone.ZoneRules.of(zoneOffset31, zoneOffset32, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList34, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList40);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray45 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, zoneOffsetTransitionArray45);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray48 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, zoneOffsetTransitionArray48);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray51 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52, zoneOffsetTransitionRuleArray51);
        java.time.zone.ZoneRules zoneRules54 = java.time.zone.ZoneRules.of(zoneOffset43, zoneOffset44, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList46, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList52);
        boolean boolean55 = zoneOffsetTransitionList34.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49);
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray58 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList59 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList59, zoneOffsetTransitionArray58);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray61 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList62 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, zoneOffsetTransitionArray61);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray64 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList65 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList65, zoneOffsetTransitionRuleArray64);
        java.time.zone.ZoneRules zoneRules67 = java.time.zone.ZoneRules.of(zoneOffset56, zoneOffset57, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList59, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList65);
        int int69 = zoneOffsetTransitionList62.indexOf((java.lang.Object) true);
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray72 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList73 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList73, zoneOffsetTransitionArray72);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray75 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList76 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, zoneOffsetTransitionArray75);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray78 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList79 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList79, zoneOffsetTransitionRuleArray78);
        java.time.zone.ZoneRules zoneRules81 = java.time.zone.ZoneRules.of(zoneOffset70, zoneOffset71, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList73, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList76, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList79);
        java.time.zone.ZoneRules zoneRules82 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList49, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList62, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList79);
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.MAX;
        java.lang.String str86 = zoneOffset85.getId();
        java.time.LocalDateTime localDateTime87 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset85);
        int int88 = zoneOffset19.compareTo(zoneOffset85);
        java.time.OffsetDateTime offsetDateTime89 = java.time.OffsetDateTime.of(localDateTime10, zoneOffset19);
        java.time.zone.ZoneRules zoneRules90 = zoneOffset19.getRules();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime91 = java.time.ZonedDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: instant");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+18:00" + "'", str4, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+18:00" + "'", str9, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zoneRules82);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+18:00" + "'", str86, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime89);
        org.junit.Assert.assertNotNull(zoneRules90);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        double[] doubleArray5 = new double[] { 23L, (byte) 1, 7187392471159151072L, 2, 23L };
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.of(doubleArray5);
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.distinct();
        boolean boolean8 = doubleStream6.isParallel();
        java.util.function.DoubleBinaryOperator doubleBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble10 = doubleStream6.reduce(doubleBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[23.0, 1.0, 7.1873924711591506E18, 2.0, 23.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.wrap(byteArray9, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean14 = byteBuffer12.equals((java.lang.Object) isoChronology13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap15 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean17 = strMapMap15.containsKey((java.lang.Object) isoChronology16);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, (-1), 10);
        int int23 = isoChronology13.prolepticYear((java.time.chrono.Era) isoEra18, (int) '#');
        java.time.LocalDate localDate26 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra18, (int) (byte) 0, 2);
        java.time.chrono.ChronoPeriod chronoPeriod30 = isoChronology1.period(1, (int) (short) 1, 365);
        java.time.LocalDate localDate32 = isoChronology1.dateEpochDay((long) 365);
        java.time.LocalTime localTime33 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray36 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, zoneOffsetTransitionArray36);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray42 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43, zoneOffsetTransitionRuleArray42);
        java.time.zone.ZoneRules zoneRules45 = java.time.zone.ZoneRules.of(zoneOffset34, zoneOffset35, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList37, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList43);
        java.time.OffsetTime offsetTime46 = localTime33.atOffset(zoneOffset34);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange48 = offsetTime46.range((java.time.temporal.TemporalField) chronoField47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        boolean boolean50 = offsetTime46.isSupported((java.time.temporal.TemporalField) chronoField49);
        int int51 = localDate32.get((java.time.temporal.TemporalField) chronoField49);
        boolean boolean52 = chronoField49.isTimeBased();
        boolean boolean53 = chronoField49.isTimeBased();
        java.lang.String str54 = chronoField49.toString();
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-34) + "'", int23 == (-34));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(offsetTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField47.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField49.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "AlignedWeekOfYear" + "'", str54, "AlignedWeekOfYear");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.println('4');
        printWriter1.println((long) (-34));
        printWriter1.write(14);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write("/", 214, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 215");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.lang.Object obj1 = strMapMap0.clone();
        java.lang.String str2 = strMapMap0.toString();
        java.util.Set<java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>> strMapEntrySet3 = strMapMap0.entrySet();
        java.util.Enumeration<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapEnumeration4 = strMapMap0.keys();
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.wrap(byteArray7, (int) (short) 0, 0);
        int int11 = byteBuffer10.arrayOffset();
        java.nio.ShortBuffer shortBuffer12 = byteBuffer10.asShortBuffer();
        java.nio.ShortBuffer shortBuffer13 = shortBuffer12.slice();
        java.nio.ShortBuffer shortBuffer14 = shortBuffer13.compact();
        boolean boolean15 = strMapMap0.containsValue((java.lang.Object) shortBuffer13);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap16 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology17 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean18 = strMapMap16.containsKey((java.lang.Object) isoChronology17);
        java.time.Duration duration19 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal20 = null;
        java.time.temporal.Temporal temporal21 = duration19.subtractFrom(temporal20);
        long long22 = duration19.toDays();
        boolean boolean23 = strMapMap16.contains((java.lang.Object) duration19);
        java.time.format.DateTimeFormatter dateTimeFormatter24 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.Cloneable cloneable25 = strMapMap16.get((java.lang.Object) dateTimeFormatter24);
        java.lang.Cloneable cloneable27 = strMapMap16.get((java.lang.Object) false);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap28 = java.nio.charset.Charset.availableCharsets();
        boolean boolean29 = strMap28.isEmpty();
        java.util.Set<java.lang.String> strSet30 = strMap28.keySet();
        int int31 = strMap28.size();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale33 = java.util.Locale.UK;
        java.lang.String str34 = locale33.toLanguageTag();
        java.lang.String str35 = chronoField32.getDisplayName(locale33);
        java.lang.Cloneable cloneable36 = strMapMap16.replace(strMap28, (java.lang.Cloneable) locale33);
        java.util.Comparator<? super java.lang.String> wildcardComparator37 = strMap28.comparator();
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter39.println("hi!");
        printWriter39.print((double) (byte) -1);
        printWriter39.println('4');
        printWriter39.println((double) 171);
        java.nio.CharBuffer charBuffer49 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj50 = charBuffer49.array();
        java.nio.CharBuffer charBuffer52 = charBuffer49.append('.');
        java.lang.String str53 = charBuffer49.toString();
        char char55 = charBuffer49.charAt(0);
        char[] charArray56 = charBuffer49.array();
        printWriter39.write(charArray56);
        java.lang.Cloneable cloneable58 = strMapMap0.replace(strMap28, (java.lang.Cloneable) charArray56);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(strMapEntrySet3);
        org.junit.Assert.assertNotNull(strMapEnumeration4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertNotNull(shortBuffer13);
        org.junit.Assert.assertNotNull(shortBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(isoChronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNull(temporal21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(cloneable25);
        org.junit.Assert.assertNull(cloneable27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 171 + "'", int31 == 171);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField32.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "en-GB" + "'", str34, "en-GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AlignedWeekOfYear" + "'", str35, "AlignedWeekOfYear");
        org.junit.Assert.assertNull(cloneable36);
        org.junit.Assert.assertNotNull(wildcardComparator37);
        org.junit.Assert.assertNotNull(charBuffer49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(charBuffer52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str53, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + char55 + "' != '" + '\000' + "'", char55 == '\000');
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), ".\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), ".\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[., \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(cloneable58);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray2 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList3 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, zoneOffsetTransitionArray2);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray5 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList6 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, zoneOffsetTransitionArray5);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray8 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9, zoneOffsetTransitionRuleArray8);
        java.time.zone.ZoneRules zoneRules11 = java.time.zone.ZoneRules.of(zoneOffset0, zoneOffset1, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList6, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList9);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray14 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, zoneOffsetTransitionArray14);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray20 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21, zoneOffsetTransitionRuleArray20);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset12, zoneOffset13, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList15, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList21);
        boolean boolean24 = zoneOffsetTransitionList3.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition25 = null;
        boolean boolean26 = zoneOffsetTransitionList3.add(zoneOffsetTransition25);
        java.lang.Object[] objArray27 = zoneOffsetTransitionList3.toArray();
        java.lang.String[] strArray28 = java.util.Locale.getISOLanguages();
        java.lang.String[] strArray29 = zoneOffsetTransitionList3.toArray(strArray28);
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream30 = zoneOffsetTransitionList3.stream();
        java.util.stream.Stream<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionStream31 = zoneOffsetTransitionStream30.distinct();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionOptional32 = zoneOffsetTransitionStream30.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[null]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream30);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionStream31);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.DoubleStream doubleStream4 = intStream3.asDoubleStream();
        java.util.stream.Stream<java.lang.Double> doubleStream5 = doubleStream4.boxed();
        java.util.function.DoublePredicate doublePredicate6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = doubleStream4.allMatch(doublePredicate6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(doubleStream5);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        float[] floatArray5 = new float[] { 10000000, (byte) 10, 16448, 6603384152749567654L, 23L };
        java.nio.FloatBuffer floatBuffer6 = java.nio.FloatBuffer.wrap(floatArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer9 = java.nio.FloatBuffer.wrap(floatArray5, 23, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[1.0E7, 10.0, 16448.0, 6.6033843E18, 23.0]");
        org.junit.Assert.assertNotNull(floatBuffer6);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter4.close();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.security.CodeSource codeSource8 = null;
        java.security.PermissionCollection permissionCollection9 = null;
        java.security.ProtectionDomain protectionDomain10 = new java.security.ProtectionDomain(codeSource8, permissionCollection9);
        java.lang.ClassLoader classLoader11 = protectionDomain10.getClassLoader();
        java.security.Principal[] principalArray12 = protectionDomain10.getPrincipals();
        java.security.CodeSource codeSource13 = null;
        java.security.PermissionCollection permissionCollection14 = null;
        java.security.ProtectionDomain protectionDomain15 = new java.security.ProtectionDomain(codeSource13, permissionCollection14);
        java.security.PermissionCollection permissionCollection16 = protectionDomain15.getPermissions();
        java.security.CodeSource codeSource17 = null;
        java.security.PermissionCollection permissionCollection18 = null;
        java.security.ProtectionDomain protectionDomain19 = new java.security.ProtectionDomain(codeSource17, permissionCollection18);
        java.security.PermissionCollection permissionCollection20 = protectionDomain19.getPermissions();
        java.security.ProtectionDomain[] protectionDomainArray21 = new java.security.ProtectionDomain[] { protectionDomain10, protectionDomain15, protectionDomain19 };
        java.security.AccessControlContext accessControlContext22 = new java.security.AccessControlContext(protectionDomainArray21);
        java.io.PrintWriter printWriter23 = printWriter6.format("1970-01-01T18:01:37.000000120", (java.lang.Object[]) protectionDomainArray21);
        java.security.AccessControlContext accessControlContext24 = new java.security.AccessControlContext(protectionDomainArray21);
        org.junit.Assert.assertEquals(protectionDomain10.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader11);
        org.junit.Assert.assertNotNull(principalArray12);
        org.junit.Assert.assertEquals(protectionDomain15.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(permissionCollection16);
        org.junit.Assert.assertEquals(protectionDomain19.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(permissionCollection20);
        org.junit.Assert.assertNotNull(protectionDomainArray21);
        org.junit.Assert.assertNotNull(printWriter23);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration1 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal2 = null;
        java.time.temporal.Temporal temporal3 = duration1.subtractFrom(temporal2);
        long long4 = duration1.toDays();
        java.time.Duration duration5 = duration0.minus(duration1);
        java.time.Duration duration6 = duration1.negated();
        long long7 = duration6.toNanos();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNull(temporal3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        boolean boolean3 = charBuffer1.isReadOnly();
        java.nio.CharBuffer charBuffer5 = charBuffer1.put('x');
        int int6 = charBuffer5.arrayOffset();
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate(16);
        int int9 = charBuffer8.limit();
        char char10 = charBuffer8.get();
        char[] charArray15 = new char[] { 'x', 'a', '4', '.' };
        java.nio.CharBuffer charBuffer16 = charBuffer8.get(charArray15);
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.wrap(charArray15);
        java.nio.CharBuffer charBuffer18 = charBuffer5.get(charArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime19 = java.time.OffsetDateTime.parse((java.lang.CharSequence) charBuffer5);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '???????????' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\000' + "'", char10 == '\000');
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 37);
        double double2 = optionalDouble1.getAsDouble();
        double double3 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 37.0d + "'", double2 == 37.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 37.0d + "'", double3 == 37.0d);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.nio.file.attribute.FileTime fileTime3 = java.nio.file.attribute.FileTime.fromMillis((long) (short) 10);
        java.time.Instant instant4 = fileTime3.toInstant();
        java.lang.String str5 = fileTime3.toString();
        int int6 = fileTime1.compareTo(fileTime3);
        java.util.concurrent.TimeUnit timeUnit7 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long8 = fileTime1.to(timeUnit7);
        long long10 = timeUnit7.toHours(24L);
        long long12 = timeUnit7.toDays(45L);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(fileTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.01Z" + "'", str5, "1970-01-01T00:00:00.01Z");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeUnit7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.chrono.IsoChronology isoChronology27 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra29 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate32 = isoChronology27.dateYearDay((java.time.chrono.Era) isoEra29, 0, 16);
        java.time.LocalTime localTime33 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime34 = localDate32.atTime(localTime33);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray37 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, zoneOffsetTransitionArray37);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray40 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList41 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, zoneOffsetTransitionArray40);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray43 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList44 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44, zoneOffsetTransitionRuleArray43);
        java.time.zone.ZoneRules zoneRules46 = java.time.zone.ZoneRules.of(zoneOffset35, zoneOffset36, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList41, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList44);
        long long47 = localDateTime34.toEpochSecond(zoneOffset35);
        java.time.LocalDateTime localDateTime49 = localDateTime34.plusDays((long) (byte) 1);
        boolean boolean50 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.Duration duration51 = java.time.Duration.ZERO;
        java.time.Duration duration53 = duration51.minusMillis((long) (byte) 0);
        java.time.chrono.IsoChronology isoChronology55 = java.time.chrono.IsoChronology.INSTANCE;
        java.nio.CharBuffer charBuffer57 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj58 = charBuffer57.array();
        boolean boolean59 = isoChronology55.equals(obj58);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap60 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology61 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean62 = strMapMap60.containsKey((java.lang.Object) isoChronology61);
        java.time.chrono.IsoEra isoEra63 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate66 = isoChronology61.dateYearDay((java.time.chrono.Era) isoEra63, (-1), 10);
        int int68 = isoChronology55.prolepticYear((java.time.chrono.Era) isoEra63, 0);
        java.time.Month month69 = java.time.Month.JANUARY;
        java.time.Month month70 = month69.firstMonthOfQuarter();
        java.time.Month month71 = month70.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean73 = month71.isSupported((java.time.temporal.TemporalField) chronoField72);
        boolean boolean74 = isoEra63.isSupported((java.time.temporal.TemporalField) chronoField72);
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField72.getRangeUnit();
        java.time.Duration duration76 = duration51.minus((long) 0, temporalUnit75);
        boolean boolean77 = localDateTime49.isSupported(temporalUnit75);
        boolean boolean78 = temporalUnit75.isDurationEstimated();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(isoChronology27);
        org.junit.Assert.assertTrue("'" + isoEra29 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra29.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-62134279201L) + "'", long47 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(isoChronology55);
        org.junit.Assert.assertNotNull(charBuffer57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(isoChronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + isoEra63 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra63.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + month69 + "' != '" + java.time.Month.JANUARY + "'", month69.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month70 + "' != '" + java.time.Month.JANUARY + "'", month70.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month71 + "' != '" + java.time.Month.JANUARY + "'", month71.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField72.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal4 = null;
        java.time.temporal.Temporal temporal5 = duration3.subtractFrom(temporal4);
        long long6 = duration3.toDays();
        boolean boolean7 = strMapMap0.contains((java.lang.Object) duration3);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap8 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology9 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean10 = strMapMap8.containsKey((java.lang.Object) isoChronology9);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        boolean boolean12 = strMap11.isEmpty();
        java.util.Locale locale13 = java.util.Locale.US;
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.lang.Cloneable cloneable16 = strMapMap8.put(strMap11, (java.lang.Cloneable) locale14);
        java.nio.charset.Charset charset18 = strMap11.get((java.lang.Object) "1970-01-01T18:01:37.000000130+18:00");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics19.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics22.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics22.getGeometricMeanImpl();
        descriptiveStatistics19.setSumsqImpl(univariateStatistic25);
        double[] doubleArray27 = descriptiveStatistics19.getSortedValues();
        java.lang.Cloneable cloneable28 = strMapMap0.put(strMap11, (java.lang.Cloneable) doubleArray27);
        java.lang.String str29 = strMap11.firstKey();
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        boolean boolean31 = chronoField30.isDateBased();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset32 = strMap11.get((java.lang.Object) boolean31);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNull(temporal5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Stati Uniti" + "'", str15, "Stati Uniti");
        org.junit.Assert.assertNull(cloneable16);
        org.junit.Assert.assertNull(charset18);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNull(cloneable28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Big5" + "'", str29, "Big5");
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField30.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.ofEpochSecond(1645434882L, (-4095), zoneOffset2);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for NanoOfSecond (valid values 0 - 999999999): -4095");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.time.Month month0 = java.time.Month.JUNE;
        int int1 = month0.minLength();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JUNE + "'", month0.equals(java.time.Month.JUNE));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 30 + "'", int1 == 30);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.util.stream.IntStream.Builder builder0 = java.util.stream.IntStream.builder();
        builder0.accept((-34));
        java.util.stream.IntStream.Builder builder4 = builder0.add((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        long long3 = date1.getTime();
        int int4 = date1.getDate();
        int int5 = date1.getDay();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.lang.String str20 = zoneOffset19.getId();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset19);
        java.time.LocalTime localTime22 = localDateTime21.toLocalTime();
        java.time.temporal.Temporal temporal23 = localDate16.adjustInto((java.time.temporal.Temporal) localDateTime21);
        java.time.LocalDate localDate25 = localDate16.plusWeeks((long) (short) 10);
        java.time.LocalDateTime localDateTime26 = localDate25.atStartOfDay();
        java.time.format.DateTimeFormatter dateTimeFormatter27 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale28 = dateTimeFormatter27.getLocale();
        java.time.format.DecimalStyle decimalStyle29 = java.time.format.DecimalStyle.STANDARD;
        char char30 = decimalStyle29.getZeroDigit();
        java.time.format.DecimalStyle decimalStyle32 = decimalStyle29.withZeroDigit('a');
        java.time.format.DecimalStyle decimalStyle34 = decimalStyle29.withPositiveSign('#');
        java.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter27.withDecimalStyle(decimalStyle34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = localDateTime26.format(dateTimeFormatter27);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+18:00" + "'", str20, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(temporal23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertNotNull(decimalStyle29);
        org.junit.Assert.assertTrue("'" + char30 + "' != '" + '0' + "'", char30 == '0');
        org.junit.Assert.assertNotNull(decimalStyle32);
        org.junit.Assert.assertNotNull(decimalStyle34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.Month month2 = month1.firstMonthOfQuarter();
        java.time.Month month3 = month1.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale7 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = chronoField4.getDisplayName(locale7);
        boolean boolean10 = chronoField4.isTimeBased();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = month1.getLong((java.time.temporal.TemporalField) chronoField4);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: ClockHourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.JANUARY + "'", month2.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.JANUARY + "'", month3.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField4.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale7.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "599b081c1808" + "'", str8, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClockHourOfDay" + "'", str9, "ClockHourOfDay");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.lang.String str5 = zoneOffset2.getId();
        int int6 = zoneOffset2.getTotalSeconds();
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(zoneId7);
        java.time.ZonedDateTime zonedDateTime11 = zonedDateTime9.withYear((int) (short) 1);
        java.time.LocalTime localTime12 = zonedDateTime11.toLocalTime();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap13 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap14 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean16 = strMapMap14.containsKey((java.lang.Object) isoChronology15);
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal18 = null;
        java.time.temporal.Temporal temporal19 = duration17.subtractFrom(temporal18);
        long long20 = duration17.toDays();
        boolean boolean21 = strMapMap14.contains((java.lang.Object) duration17);
        java.lang.Cloneable cloneable22 = strMapMap13.get((java.lang.Object) duration17);
        java.time.Duration duration23 = java.time.Duration.ZERO;
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal25 = null;
        java.time.temporal.Temporal temporal26 = duration24.subtractFrom(temporal25);
        long long27 = duration24.toDays();
        java.time.Duration duration28 = duration23.plus(duration24);
        long long29 = duration24.toDays();
        java.time.Duration duration30 = duration17.plus(duration24);
        java.time.LocalTime localTime31 = localTime12.plus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime33 = localTime31.plusHours(97L);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        boolean boolean35 = localTime33.isSupported((java.time.temporal.TemporalField) chronoField34);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = zoneOffset2.get((java.time.temporal.TemporalField) chronoField34);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: DayOfWeek");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+18:00" + "'", str5, "+18:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 64800 + "'", int6 == 64800);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(temporal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(cloneable22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNull(temporal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField34.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime1 = java.time.OffsetTime.parse((java.lang.CharSequence) "MALFORMED[10]");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'MALFORMED[10]' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, (int) (short) 0, 0);
        int int6 = byteBuffer5.arrayOffset();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer5.asShortBuffer();
        java.nio.ShortBuffer shortBuffer8 = shortBuffer7.slice();
        java.nio.ShortBuffer shortBuffer9 = shortBuffer8.compact();
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.wrap(byteArray12, (int) (short) 0, 0);
        int int16 = byteBuffer15.arrayOffset();
        java.nio.ShortBuffer shortBuffer17 = byteBuffer15.asShortBuffer();
        java.nio.ShortBuffer shortBuffer18 = shortBuffer17.slice();
        boolean boolean19 = shortBuffer18.isDirect();
        int int20 = shortBuffer8.compareTo(shortBuffer18);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray21 = shortBuffer18.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertNotNull(shortBuffer9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(shortBuffer17);
        org.junit.Assert.assertNotNull(shortBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        boolean boolean13 = zoneRules12.isFixedOffset();
        java.time.Instant instant14 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules12.previousTransition(instant14);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = zoneRules12.getTransitionRules();
        java.time.Instant instant17 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition18 = zoneRules12.previousTransition(instant17);
        boolean boolean19 = attribute0.equals((java.lang.Object) zoneOffsetTransition18);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.time.ZoneId zoneId22 = java.time.ZoneId.systemDefault();
        java.lang.String str23 = zoneId22.getId();
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.now(zoneId22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.withYear((int) (short) 1);
        java.time.LocalTime localTime27 = zonedDateTime26.toLocalTime();
        java.util.stream.DoubleStream doubleStream29 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj30 = properties21.getOrDefault((java.lang.Object) zonedDateTime26, (java.lang.Object) doubleStream29);
        java.lang.Object obj33 = properties21.setProperty("P0D", "DIRECT");
        java.util.Set<java.lang.Object> objSet34 = properties21.keySet();
        boolean boolean35 = attribute0.equals((java.lang.Object) properties21);
        java.text.AttributedCharacterIterator.Attribute attribute36 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray39 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, zoneOffsetTransitionArray39);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray42 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList43 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, zoneOffsetTransitionArray42);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray45 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList46 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46, zoneOffsetTransitionRuleArray45);
        java.time.zone.ZoneRules zoneRules48 = java.time.zone.ZoneRules.of(zoneOffset37, zoneOffset38, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList40, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList43, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList46);
        boolean boolean49 = zoneRules48.isFixedOffset();
        java.time.Instant instant50 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition51 = zoneRules48.previousTransition(instant50);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList52 = zoneRules48.getTransitionRules();
        java.time.Instant instant53 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition54 = zoneRules48.previousTransition(instant53);
        boolean boolean55 = attribute36.equals((java.lang.Object) zoneOffsetTransition54);
        java.util.Properties properties56 = null;
        java.util.Properties properties57 = new java.util.Properties(properties56);
        java.time.ZoneId zoneId58 = java.time.ZoneId.systemDefault();
        java.lang.String str59 = zoneId58.getId();
        java.time.ZonedDateTime zonedDateTime60 = java.time.ZonedDateTime.now(zoneId58);
        java.time.ZonedDateTime zonedDateTime62 = zonedDateTime60.withYear((int) (short) 1);
        java.time.LocalTime localTime63 = zonedDateTime62.toLocalTime();
        java.util.stream.DoubleStream doubleStream65 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj66 = properties57.getOrDefault((java.lang.Object) zonedDateTime62, (java.lang.Object) doubleStream65);
        java.lang.Object obj69 = properties57.setProperty("P0D", "DIRECT");
        java.util.Set<java.lang.Object> objSet70 = properties57.keySet();
        boolean boolean71 = attribute36.equals((java.lang.Object) properties57);
        java.io.PrintStream printStream73 = new java.io.PrintStream("20220221Z");
        java.time.format.DateTimeFormatter dateTimeFormatter74 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale75 = dateTimeFormatter74.getLocale();
        java.util.Locale locale76 = java.util.Locale.US;
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.lang.String str78 = locale76.getDisplayCountry(locale77);
        java.lang.String str79 = locale75.getDisplayVariant(locale76);
        java.lang.Object[] objArray81 = null;
        java.io.PrintStream printStream82 = printStream73.format(locale75, "DecimalStyle[a+-.]", objArray81);
        properties57.list(printStream82);
        java.io.PrintStream printStream85 = printStream82.append((java.lang.CharSequence) "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        properties21.storeToXML((java.io.OutputStream) printStream85, "AmPmOfDay");
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList16);
        org.junit.Assert.assertNull(zoneOffsetTransition18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Etc/UTC" + "'", str23, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(doubleStream29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(attribute36);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition51);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList52);
        org.junit.Assert.assertNull(zoneOffsetTransition54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneId58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Etc/UTC" + "'", str59, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(doubleStream65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Stati Uniti" + "'", str78, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        long[] longArray2 = new long[] { 16384, 14 };
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.wrap(longArray2);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[16384, 14]");
        org.junit.Assert.assertNotNull(longBuffer3);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH + "'", chronoField0.equals(java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH));
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.net.NetworkInterface networkInterface1 = java.net.NetworkInterface.getByName("");
        org.junit.Assert.assertNull(networkInterface1);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.util.OptionalLong optionalLong1 = java.util.OptionalLong.of((long) 100);
        java.util.function.LongSupplier longSupplier2 = null;
        long long3 = optionalLong1.orElseGet(longSupplier2);
        long long4 = optionalLong1.getAsLong();
        org.junit.Assert.assertNotNull(optionalLong1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        java.time.OffsetTime offsetTime13 = java.time.OffsetTime.of(localTime0, zoneOffset2);
        java.time.OffsetTime offsetTime15 = offsetTime13.plusHours(8L);
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, 0, 16);
        java.time.Duration duration22 = java.time.Duration.ZERO;
        java.time.LocalDate localDate23 = localDate21.plus((java.time.temporal.TemporalAmount) duration22);
        java.time.chrono.IsoChronology isoChronology24 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra26 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate29 = isoChronology24.dateYearDay((java.time.chrono.Era) isoEra26, 0, 16);
        java.time.Duration duration30 = java.time.Duration.ZERO;
        java.time.LocalDate localDate31 = localDate29.plus((java.time.temporal.TemporalAmount) duration30);
        boolean boolean32 = localDate21.isBefore((java.time.chrono.ChronoLocalDate) localDate31);
        int int33 = localDate31.lengthOfMonth();
        java.time.LocalDate localDate35 = localDate31.withYear((int) (byte) 10);
        java.time.chrono.IsoChronology isoChronology36 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate41 = isoChronology36.dateYearDay((java.time.chrono.Era) isoEra38, 0, 16);
        java.time.LocalTime localTime42 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime43 = localDate41.atTime(localTime42);
        java.time.DayOfWeek dayOfWeek44 = localDate41.getDayOfWeek();
        java.time.chrono.IsoChronology isoChronology45 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra47 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate50 = isoChronology45.dateYearDay((java.time.chrono.Era) isoEra47, 0, 16);
        java.time.LocalTime localTime51 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime52 = localDate50.atTime(localTime51);
        java.time.LocalDate localDate54 = localDate50.withMonth(1);
        java.time.Period period55 = localDate41.until((java.time.chrono.ChronoLocalDate) localDate50);
        java.time.chrono.ChronoLocalDate chronoLocalDate56 = localDate31.minus((java.time.temporal.TemporalAmount) period55);
        java.time.OffsetTime offsetTime57 = offsetTime13.minus((java.time.temporal.TemporalAmount) period55);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(isoChronology24);
        org.junit.Assert.assertTrue("'" + isoEra26 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra26.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(isoChronology36);
        org.junit.Assert.assertTrue("'" + isoEra38 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra38.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + dayOfWeek44 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek44.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(isoChronology45);
        org.junit.Assert.assertTrue("'" + isoEra47 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra47.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoLocalDate56);
        org.junit.Assert.assertNotNull(offsetTime57);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str12 = localDateTime9.format(dateTimeFormatter11);
        java.time.chrono.Chronology chronology13 = dateTimeFormatter11.getChronology();
        java.time.chrono.IsoChronology isoChronology14 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate19 = isoChronology14.dateYearDay((java.time.chrono.Era) isoEra16, 0, 16);
        java.time.LocalTime localTime20 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime21 = localDate19.atTime(localTime20);
        java.time.LocalDate localDate23 = localDate19.withMonth(1);
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = chronology13.date((java.time.temporal.TemporalAccessor) localDate19);
        java.time.DayOfWeek dayOfWeek25 = localDate19.getDayOfWeek();
        java.time.chrono.Chronology chronology26 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) dayOfWeek25);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str12, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(isoChronology14);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra16.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertTrue("'" + dayOfWeek25 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek25.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(256);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap2 = java.nio.charset.Charset.availableCharsets();
        boolean boolean3 = strMap2.isEmpty();
        java.util.Set<java.lang.String> strSet4 = strMap2.keySet();
        int int5 = strSet4.size();
        boolean boolean6 = floatBuffer1.equals((java.lang.Object) strSet4);
        java.nio.FloatBuffer floatBuffer7 = floatBuffer1.compact();
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 171 + "'", int5 == 171);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatBuffer7);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.allocate(256);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.slice();
        java.nio.FloatBuffer floatBuffer5 = floatBuffer1.put(floatBuffer3);
        java.nio.FloatBuffer floatBuffer8 = floatBuffer3.put((int) '4', (float) 97L);
        java.nio.FloatBuffer floatBuffer11 = floatBuffer8.put(70, (float) 37);
        float[] floatArray14 = new float[] { 1645434879L, 24 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer15 = floatBuffer11.get(floatArray14);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(floatBuffer8);
        org.junit.Assert.assertNotNull(floatBuffer11);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[1.64543488E9, 24.0]");
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        java.net.URLConnection.setDefaultAllowUserInteraction(false);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        java.io.InvalidObjectException invalidObjectException1 = new java.io.InvalidObjectException("1.0.0.100");
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        long[] longArray1 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer2 = java.nio.LongBuffer.wrap(longArray1);
        long[] longArray4 = new long[] { (byte) 10 };
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.wrap(longArray4);
        java.nio.LongBuffer longBuffer6 = longBuffer2.put(longBuffer5);
        java.nio.LongBuffer longBuffer7 = longBuffer2.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = longBuffer2.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[10]");
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.time.LocalTime localTime1 = java.time.LocalTime.ofSecondOfDay(0L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(0L, (long) 100);
        java.util.function.LongUnaryOperator longUnaryOperator3 = java.util.function.LongUnaryOperator.identity();
        long long5 = longUnaryOperator3.applyAsLong(7187392471159151072L);
        java.util.stream.LongStream longStream6 = longStream2.map(longUnaryOperator3);
        boolean boolean7 = longStream6.isParallel();
        boolean boolean8 = longStream6.isParallel();
        long[] longArray9 = longStream6.toArray();
        java.util.function.LongPredicate longPredicate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = longStream6.allMatch(longPredicate10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7187392471159151072L + "'", long5 == 7187392471159151072L);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]");
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean1 = coderResult0.isUnderflow();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray0 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList1 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList1, zoneOffsetTransitionArray0);
        java.time.LocalTime localTime3 = java.time.LocalTime.MAX;
        java.time.LocalTime localTime5 = localTime3.plusMinutes((long) 'x');
        java.time.LocalTime localTime7 = localTime3.minusNanos((long) '#');
        boolean boolean8 = zoneOffsetTransitionList1.contains((java.lang.Object) localTime3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("23:59:59.999999999+18:00", "-18:00", "java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: 23:59:59.999999999+18:00");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        boolean boolean4 = file2.setWritable(false);
        java.net.URL uRL5 = file2.toURL();
        boolean boolean7 = file2.setLastModified(31556889864403199L);
        boolean boolean8 = file2.isHidden();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(uRL5);
        org.junit.Assert.assertEquals(uRL5.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray3 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList4 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, zoneOffsetTransitionArray3);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray6 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList7 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, zoneOffsetTransitionArray6);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray9 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList10 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10, zoneOffsetTransitionRuleArray9);
        java.time.zone.ZoneRules zoneRules12 = java.time.zone.ZoneRules.of(zoneOffset1, zoneOffset2, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList4, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList7, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList10);
        boolean boolean13 = zoneRules12.isFixedOffset();
        java.time.Instant instant14 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules12.previousTransition(instant14);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList16 = zoneRules12.getTransitionRules();
        java.time.Instant instant17 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition18 = zoneRules12.previousTransition(instant17);
        boolean boolean19 = attribute0.equals((java.lang.Object) zoneOffsetTransition18);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.time.ZoneId zoneId22 = java.time.ZoneId.systemDefault();
        java.lang.String str23 = zoneId22.getId();
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.now(zoneId22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.withYear((int) (short) 1);
        java.time.LocalTime localTime27 = zonedDateTime26.toLocalTime();
        java.util.stream.DoubleStream doubleStream29 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj30 = properties21.getOrDefault((java.lang.Object) zonedDateTime26, (java.lang.Object) doubleStream29);
        java.util.stream.DoubleStream doubleStream31 = doubleStream29.parallel();
        java.util.stream.DoubleStream doubleStream32 = doubleStream29.parallel();
        boolean boolean33 = attribute0.equals((java.lang.Object) doubleStream29);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList16);
        org.junit.Assert.assertNull(zoneOffsetTransition18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Etc/UTC" + "'", str23, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(doubleStream29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(doubleStream31);
        org.junit.Assert.assertNotNull(doubleStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) -1, (float) 1645434892L, (float) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.util.Date date5 = new java.util.Date((int) 'a', 1969, 1024, 10, 18);
        java.lang.String str6 = date5.toString();
        org.junit.Assert.assertEquals(date5.toString(), "Mon Nov 21 10:18:00 UTC 2163");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Mon Nov 21 10:18:00 UTC 2163" + "'", str6, "Mon Nov 21 10:18:00 UTC 2163");
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.lang.String str8 = zoneOffset7.getId();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset7);
        boolean boolean10 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.MAX;
        java.lang.String str14 = zoneOffset13.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.lang.String str19 = zoneOffset18.getId();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset18);
        boolean boolean21 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str23 = localDateTime20.format(dateTimeFormatter22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int25 = localDateTime20.get((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.lang.String str27 = localDateTime20.toString();
        java.time.chrono.Chronology chronology28 = localDateTime20.getChronology();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String str31 = locale30.toLanguageTag();
        java.lang.String str32 = chronoField29.getDisplayName(locale30);
        java.time.LocalDateTime localDateTime34 = localDateTime20.with((java.time.temporal.TemporalField) chronoField29, (long) (byte) 10);
        java.time.LocalDateTime localDateTime36 = localDateTime20.minusWeeks((long) (-34));
        java.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks(9000L);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+18:00" + "'", str8, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+18:00" + "'", str14, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+18:00" + "'", str19, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str23, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T18:01:37.000000120" + "'", str27, "1970-01-01T18:01:37.000000120");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField29.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en-GB" + "'", str31, "en-GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AlignedWeekOfYear" + "'", str32, "AlignedWeekOfYear");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer3 = charBuffer1.append((java.lang.CharSequence) "Etc/UTC");
        // The following exception was thrown during execution in test generation
        try {
            char char5 = charBuffer3.get((int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.write("");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj13 = charBuffer12.array();
        java.nio.CharBuffer charBuffer15 = charBuffer12.append('.');
        java.lang.String str16 = charBuffer12.toString();
        java.nio.CharBuffer charBuffer18 = charBuffer12.append('a');
        java.io.PrintWriter printWriter21 = printWriter10.append((java.lang.CharSequence) charBuffer12, 0, 0);
        char[] charArray25 = new char[] { 'u', ':', '-' };
        java.nio.CharBuffer charBuffer26 = java.nio.CharBuffer.wrap(charArray25);
        printWriter10.print(charArray25);
        printWriter1.print(charArray25);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str16, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "u:-");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "u:-");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[u, :, -]");
        org.junit.Assert.assertNotNull(charBuffer26);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.LocalTime localTime5 = localDateTime4.toLocalTime();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.format.DateTimeFormatter dateTimeFormatter7 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.format.DecimalStyle decimalStyle8 = java.time.format.DecimalStyle.ofDefaultLocale();
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDecimalStyle(decimalStyle8);
        java.lang.String str10 = localDate6.format(dateTimeFormatter7);
        java.time.LocalDate localDate12 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate14 = java.time.LocalDate.ofEpochDay((long) 10);
        int int15 = localDate12.compareTo((java.time.chrono.ChronoLocalDate) localDate14);
        java.time.chrono.IsoChronology isoChronology16 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate21 = isoChronology16.dateYearDay((java.time.chrono.Era) isoEra18, 0, 16);
        java.time.LocalTime localTime22 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime23 = localDate21.atTime(localTime22);
        java.time.LocalDate localDate25 = localDate21.withMonth(1);
        boolean boolean26 = localDate21.isLeapYear();
        java.time.chrono.ChronoPeriod chronoPeriod27 = localDate14.until((java.time.chrono.ChronoLocalDate) localDate21);
        java.time.temporal.Temporal temporal28 = localDate6.adjustInto((java.time.temporal.Temporal) localDate21);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra18.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronoPeriod27);
        org.junit.Assert.assertNotNull(temporal28);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.nio.CharBuffer charBuffer3 = charBuffer1.append((java.lang.CharSequence) "Etc/UTC");
        java.time.format.DateTimeFormatter dateTimeFormatter4 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale5 = dateTimeFormatter4.getLocale();
        java.time.format.DecimalStyle decimalStyle6 = java.time.format.DecimalStyle.STANDARD;
        char char7 = decimalStyle6.getZeroDigit();
        java.time.format.DecimalStyle decimalStyle9 = decimalStyle6.withZeroDigit('a');
        java.time.format.DecimalStyle decimalStyle11 = decimalStyle6.withPositiveSign('#');
        java.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter4.withDecimalStyle(decimalStyle11);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime13 = java.time.OffsetDateTime.parse((java.lang.CharSequence) charBuffer3, dateTimeFormatter12);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '?????????' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '0' + "'", char7 == '0');
        org.junit.Assert.assertNotNull(decimalStyle9);
        org.junit.Assert.assertNotNull(decimalStyle11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.util.stream.Stream.Builder<java.time.temporal.Temporal> temporalBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.Stream<java.time.temporal.Temporal> temporalStream1 = temporalBuilder0.build();
        java.util.stream.Stream.Builder<java.time.temporal.Temporal> temporalBuilder2 = java.util.stream.Stream.builder();
        java.util.function.Consumer<java.time.temporal.Temporal> temporalConsumer3 = temporalBuilder0.andThen((java.util.function.Consumer<java.time.temporal.Temporal>) temporalBuilder2);
        java.time.ZoneId zoneId4 = java.time.ZoneId.systemDefault();
        java.lang.String str5 = zoneId4.getId();
        java.time.ZonedDateTime zonedDateTime6 = java.time.ZonedDateTime.now(zoneId4);
        java.time.ZonedDateTime zonedDateTime8 = zonedDateTime6.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.lang.String str17 = zoneOffset16.getId();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset16);
        boolean boolean19 = localDateTime13.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str21 = localDateTime18.format(dateTimeFormatter20);
        java.time.chrono.Chronology chronology22 = dateTimeFormatter20.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod26 = chronology22.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime6.plus((java.time.temporal.TemporalAmount) chronoPeriod26);
        java.time.chrono.Chronology chronology28 = zonedDateTime6.getChronology();
        java.util.stream.Stream.Builder<java.time.temporal.Temporal> temporalBuilder29 = temporalBuilder2.add((java.time.temporal.Temporal) zonedDateTime6);
        org.junit.Assert.assertNotNull(temporalBuilder0);
        org.junit.Assert.assertNotNull(temporalStream1);
        org.junit.Assert.assertNotNull(temporalBuilder2);
        org.junit.Assert.assertNotNull(temporalConsumer3);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+18:00" + "'", str17, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str21, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronoPeriod26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(temporalBuilder29);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        java.util.Date date1 = new java.util.Date((long) (byte) 1);
        int int2 = date1.getTimezoneOffset();
        date1.setDate((int) (short) 1);
        int int5 = date1.getSeconds();
        int int6 = date1.getDay();
        int int7 = date1.getMinutes();
        date1.setMonth(168);
        org.junit.Assert.assertEquals(date1.toString(), "Sun Jan 01 00:00:00 UTC 1984");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Fri");
        boolean boolean2 = printStream1.checkError();
        printStream1.print((double) (byte) -1);
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray8 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList9 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, zoneOffsetTransitionArray8);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray11 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, zoneOffsetTransitionArray11);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray14 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList15 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15, zoneOffsetTransitionRuleArray14);
        java.time.zone.ZoneRules zoneRules17 = java.time.zone.ZoneRules.of(zoneOffset6, zoneOffset7, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList12, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray23 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, zoneOffsetTransitionArray23);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray26 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList27 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27, zoneOffsetTransitionRuleArray26);
        java.time.zone.ZoneRules zoneRules29 = java.time.zone.ZoneRules.of(zoneOffset18, zoneOffset19, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList27);
        boolean boolean30 = zoneOffsetTransitionList9.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList24);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition31 = null;
        boolean boolean32 = zoneOffsetTransitionList9.add(zoneOffsetTransition31);
        java.lang.Object[] objArray33 = zoneOffsetTransitionList9.toArray();
        java.io.PrintStream printStream34 = printStream1.printf("ISO", objArray33);
        printStream1.println(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "italiano://Etc/UTC#Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: italiano://Etc/UTC#Etc/UTC");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[null]");
        org.junit.Assert.assertNotNull(printStream34);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        java.util.stream.IntStream intStream4 = intStream3.distinct();
        java.util.stream.DoubleStream doubleStream5 = intStream4.asDoubleStream();
        java.util.function.IntBinaryOperator intBinaryOperator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt7 = intStream4.reduce(intBinaryOperator6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(doubleStream5);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) '4', (long) ' ');
        java.time.Instant instant11 = instant9.plusNanos(100L);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra14 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate17 = isoChronology12.dateYearDay((java.time.chrono.Era) isoEra14, 0, 16);
        java.time.Duration duration18 = java.time.Duration.ZERO;
        java.time.LocalDate localDate19 = localDate17.plus((java.time.temporal.TemporalAmount) duration18);
        java.time.LocalDateTime localDateTime20 = localDate19.atStartOfDay();
        java.time.LocalDate localDate22 = localDate19.plusYears((long) (byte) -1);
        int int23 = localDate19.lengthOfYear();
        java.time.ZoneId zoneId24 = java.time.ZoneId.systemDefault();
        java.time.ZonedDateTime zonedDateTime25 = localDate19.atStartOfDay(zoneId24);
        java.time.LocalTime localTime26 = java.time.LocalTime.now(zoneId24);
        java.time.Clock clock27 = java.time.Clock.tickSeconds(zoneId24);
        java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime28 = isoChronology1.zonedDateTime(instant9, zoneId24);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter30.println("hi!");
        printWriter30.print((double) (byte) -1);
        printWriter30.println('4');
        printWriter30.close();
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter30);
        boolean boolean39 = isoChronology1.equals((java.lang.Object) printWriter30);
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertTrue("'" + isoEra14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 365 + "'", int23 == 365);
        org.junit.Assert.assertNotNull(zoneId24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        boolean boolean3 = charBuffer1.isReadOnly();
        java.nio.CharBuffer charBuffer5 = charBuffer1.put('x');
        java.lang.CharSequence charSequence6 = null;
        java.nio.CharBuffer charBuffer7 = charBuffer1.append(charSequence6);
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate(16);
        int int10 = charBuffer9.limit();
        char char11 = charBuffer9.get();
        char[] charArray16 = new char[] { 'x', 'a', '4', '.' };
        java.nio.CharBuffer charBuffer17 = charBuffer9.get(charArray16);
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer21 = charBuffer1.put(charArray16, 0, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.lang.String str3 = zoneOffset2.getId();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset2);
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean6 = localDateTime4.isSupported((java.time.temporal.TemporalField) chronoField5);
        java.time.chrono.IsoChronology isoChronology7 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra9 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate12 = isoChronology7.dateYearDay((java.time.chrono.Era) isoEra9, 0, 16);
        java.time.LocalTime localTime13 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime14 = localDate12.atTime(localTime13);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray17 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, zoneOffsetTransitionArray17);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray20 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, zoneOffsetTransitionArray20);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray23 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList24 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList24, zoneOffsetTransitionRuleArray23);
        java.time.zone.ZoneRules zoneRules26 = java.time.zone.ZoneRules.of(zoneOffset15, zoneOffset16, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList18, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList21, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList24);
        long long27 = localDateTime14.toEpochSecond(zoneOffset15);
        int int28 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.ZoneId zoneId29 = java.time.ZoneId.systemDefault();
        java.lang.String str30 = zoneId29.getId();
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.now(zoneId29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.lang.String str37 = zoneOffset36.getId();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset36);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.MAX;
        java.lang.String str42 = zoneOffset41.getId();
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset41);
        boolean boolean44 = localDateTime38.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.format.DateTimeFormatter dateTimeFormatter45 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str46 = localDateTime43.format(dateTimeFormatter45);
        java.time.chrono.Chronology chronology47 = dateTimeFormatter45.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod51 = chronology47.period((int) (short) 1, 0, (int) '#');
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime31.plus((java.time.temporal.TemporalAmount) chronoPeriod51);
        java.time.temporal.Temporal temporal53 = localDateTime4.adjustInto((java.time.temporal.Temporal) zonedDateTime31);
        java.time.chrono.Chronology chronology54 = localDateTime4.getChronology();
        java.time.LocalDateTime localDateTime56 = localDateTime4.plusMonths(1645434866L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime58 = localDateTime56.withDayOfMonth((int) '0');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 48");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+18:00" + "'", str3, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField5.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(isoChronology7);
        org.junit.Assert.assertTrue("'" + isoEra9 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra9.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62134279201L) + "'", long27 == (-62134279201L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1969 + "'", int28 == 1969);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+18:00" + "'", str37, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+18:00" + "'", str42, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str46, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(temporal53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.time.Period period1 = java.time.Period.ofYears((int) '\000');
        java.time.Period period3 = period1.minusDays((long) (short) 0);
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.MAX;
        java.lang.String str7 = zoneOffset6.getId();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset6);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.MAX;
        java.lang.String str12 = zoneOffset11.getId();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset11);
        boolean boolean14 = localDateTime8.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str16 = localDateTime13.format(dateTimeFormatter15);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int18 = localDateTime13.get((java.time.temporal.TemporalField) chronoField17);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.lang.String str22 = zoneOffset21.getId();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.MAX;
        java.lang.String str27 = zoneOffset26.getId();
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset26);
        boolean boolean29 = localDateTime23.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.format.DateTimeFormatter dateTimeFormatter30 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str31 = localDateTime28.format(dateTimeFormatter30);
        boolean boolean32 = localDateTime13.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDate localDate33 = localDateTime13.toLocalDate();
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.MAX;
        java.lang.String str37 = zoneOffset36.getId();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset36);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.MAX;
        java.lang.String str42 = zoneOffset41.getId();
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 'a', (int) 'x', zoneOffset41);
        boolean boolean44 = localDateTime38.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.format.DateTimeFormatter dateTimeFormatter45 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.lang.String str46 = localDateTime43.format(dateTimeFormatter45);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int48 = localDateTime43.get((java.time.temporal.TemporalField) chronoField47);
        boolean boolean49 = localDateTime13.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.LocalDateTime localDateTime51 = localDateTime43.minusHours(1645434867L);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        java.time.format.DateTimeFormatter dateTimeFormatter54 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.util.Locale locale55 = dateTimeFormatter54.getLocale();
        java.lang.String str56 = chronoField53.getDisplayName(locale55);
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField53.getRangeUnit();
        java.time.LocalDateTime localDateTime58 = localDateTime43.plus((long) ':', temporalUnit57);
        long long59 = period3.get(temporalUnit57);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+18:00" + "'", str7, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+18:00" + "'", str12, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str16, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+18:00" + "'", str22, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+18:00" + "'", str27, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str31, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+18:00" + "'", str37, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+18:00" + "'", str42, "+18:00");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T18:01:37.00000012" + "'", str46, "1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField47.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField53.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "AM/PM" + "'", str56, "AM/PM");
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap0 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology1 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean2 = strMapMap0.containsKey((java.lang.Object) isoChronology1);
        java.time.chrono.IsoEra isoEra3 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate6 = isoChronology1.dateYearDay((java.time.chrono.Era) isoEra3, (-1), 10);
        java.time.Duration duration7 = java.time.Duration.ZERO;
        java.time.Duration duration8 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal9 = null;
        java.time.temporal.Temporal temporal10 = duration8.subtractFrom(temporal9);
        long long11 = duration8.toDays();
        java.time.Duration duration12 = duration7.plus(duration8);
        long long13 = duration8.toDays();
        java.lang.String str14 = duration8.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate15 = localDate6.plus((java.time.temporal.TemporalAmount) duration8);
        java.time.LocalDate localDate17 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.chrono.IsoChronology isoChronology18 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra20 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate23 = isoChronology18.dateYearDay((java.time.chrono.Era) isoEra20, 0, 16);
        java.time.LocalTime localTime24 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime25 = localDate23.atTime(localTime24);
        java.time.LocalDate localDate27 = localDate23.withMonth(1);
        java.time.chrono.ChronoPeriod chronoPeriod28 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate17, (java.time.chrono.ChronoLocalDate) localDate23);
        java.time.LocalDate localDate30 = java.time.LocalDate.ofEpochDay((long) 10);
        java.time.LocalDate localDate32 = java.time.LocalDate.ofEpochDay((long) 10);
        int int33 = localDate30.compareTo((java.time.chrono.ChronoLocalDate) localDate32);
        java.time.temporal.Temporal temporal34 = localDate17.adjustInto((java.time.temporal.Temporal) localDate32);
        java.time.LocalDate localDate36 = localDate32.withMonth((int) (short) 10);
        java.time.format.DateTimeFormatter dateTimeFormatter37 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.String str38 = localDate32.format(dateTimeFormatter37);
        java.time.Period period39 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate32);
        java.time.LocalDate localDate41 = localDate32.plusMonths(24L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.from((java.time.temporal.TemporalAccessor) localDate32);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: 1970-01-11 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + isoEra3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNull(temporal10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(chronoLocalDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(isoChronology18);
        org.junit.Assert.assertTrue("'" + isoEra20 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra20.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronoPeriod28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "19700111" + "'", str38, "19700111");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localDate41);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean2 = inetAddress0.isReachable((int) '0');
        java.net.NetworkInterface networkInterface3 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics4.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics4.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics4.getGeometricMeanImpl();
        double double9 = descriptiveStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getSkewnessImpl();
        boolean boolean11 = networkInterface3.equals((java.lang.Object) descriptiveStatistics4);
        int int12 = networkInterface3.getMTU();
        java.lang.String str13 = networkInterface3.getDisplayName();
        java.lang.String str14 = networkInterface3.getDisplayName();
        java.net.NetworkInterface networkInterface15 = networkInterface3.getParent();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(networkInterface3);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1500 + "'", int12 == 1500);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eth0" + "'", str13, "eth0");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eth0" + "'", str14, "eth0");
        org.junit.Assert.assertNull(networkInterface15);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.ZoneId zoneId2 = java.time.ZoneId.systemDefault();
        java.lang.String str3 = zoneId2.getId();
        java.time.ZonedDateTime zonedDateTime4 = java.time.ZonedDateTime.now(zoneId2);
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.withYear((int) (short) 1);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(0.0d);
        java.lang.Object obj10 = properties1.getOrDefault((java.lang.Object) zonedDateTime6, (java.lang.Object) doubleStream9);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter12.println("hi!");
        properties1.list(printWriter12);
        printWriter12.println(10);
        printWriter12.print('0');
        char[] charArray23 = new char[] { 'u', ':', '-' };
        java.nio.CharBuffer charBuffer24 = java.nio.CharBuffer.wrap(charArray23);
        printWriter12.println(charArray23);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Etc/UTC" + "'", str3, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "u:-");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "u:-");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[u, :, -]");
        org.junit.Assert.assertNotNull(charBuffer24);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray10 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, zoneOffsetTransitionArray10);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray16 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17, zoneOffsetTransitionRuleArray16);
        java.time.zone.ZoneRules zoneRules19 = java.time.zone.ZoneRules.of(zoneOffset8, zoneOffset9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17);
        long long20 = localDateTime7.toEpochSecond(zoneOffset8);
        java.time.LocalDateTime localDateTime22 = localDateTime7.plusDays((long) (byte) 1);
        java.time.ZoneId zoneId23 = java.time.ZoneId.systemDefault();
        java.lang.String str24 = zoneId23.getId();
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.now(zoneId23);
        java.time.ZoneId zoneId26 = java.time.ZoneId.systemDefault();
        java.lang.String str27 = zoneId26.getId();
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime25.withZoneSameInstant(zoneId26);
        java.time.ZoneId zoneId29 = java.time.ZoneId.systemDefault();
        java.lang.String str30 = zoneId29.getId();
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.now(zoneId29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.withYear((int) (short) 1);
        boolean boolean34 = zonedDateTime28.equals((java.lang.Object) zonedDateTime33);
        int int35 = zonedDateTime33.getMinute();
        java.time.Duration duration36 = java.time.Duration.between((java.time.temporal.Temporal) localDateTime7, (java.time.temporal.Temporal) zonedDateTime33);
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime33.plusSeconds(1645434863000L);
        java.time.LocalTime localTime39 = java.time.LocalTime.MAX;
        java.time.temporal.TemporalUnit temporalUnit40 = null;
        boolean boolean41 = localTime39.isSupported(temporalUnit40);
        java.time.LocalTime localTime43 = localTime39.withNano((int) '4');
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale47 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = chronoField44.getDisplayName(locale47);
        boolean boolean50 = chronoField44.isTimeBased();
        java.time.temporal.ValueRange valueRange51 = localTime39.range((java.time.temporal.TemporalField) chronoField44);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        boolean boolean53 = localTime39.isSupported((java.time.temporal.TemporalField) chronoField52);
        java.time.ZonedDateTime zonedDateTime55 = zonedDateTime38.with((java.time.temporal.TemporalField) chronoField52, (long) (byte) -1);
        java.time.ZonedDateTime zonedDateTime57 = zonedDateTime38.plusWeeks((long) 34);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime57.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62134279201L) + "'", long20 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Etc/UTC" + "'", str24, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 14 + "'", int35 == 14);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale47.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "599b081c1808" + "'", str48, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClockHourOfDay" + "'", str49, "ClockHourOfDay");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(valueRange51);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField52.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.temporal.TemporalUnit temporalUnit1 = null;
        boolean boolean2 = localTime0.isSupported(temporalUnit1);
        java.time.LocalTime localTime4 = localTime0.withNano((int) '4');
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.util.Locale locale8 = new java.util.Locale("599b081c1808", "DIRECT");
        java.lang.String str9 = locale8.getLanguage();
        java.lang.String str10 = chronoField5.getDisplayName(locale8);
        boolean boolean11 = chronoField5.isTimeBased();
        java.time.temporal.ValueRange valueRange12 = localTime0.range((java.time.temporal.TemporalField) chronoField5);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        boolean boolean14 = localTime0.isSupported((java.time.temporal.TemporalField) chronoField13);
        java.lang.String str15 = chronoField13.toString();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField5.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertEquals(locale8.toString(), "599b081c1808_DIRECT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "599b081c1808" + "'", str9, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClockHourOfDay" + "'", str10, "ClockHourOfDay");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(valueRange12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField13.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "InstantSeconds" + "'", str15, "InstantSeconds");
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalTime localTime1 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray4 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList5 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, zoneOffsetTransitionArray4);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray7 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList8 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, zoneOffsetTransitionArray7);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray10 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11, zoneOffsetTransitionRuleArray10);
        java.time.zone.ZoneRules zoneRules13 = java.time.zone.ZoneRules.of(zoneOffset2, zoneOffset3, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList5, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList8, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList11);
        java.time.OffsetTime offsetTime14 = localTime1.atOffset(zoneOffset2);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange16 = offsetTime14.range((java.time.temporal.TemporalField) chronoField15);
        java.time.OffsetTime offsetTime18 = chronoField0.adjustInto(offsetTime14, (long) 16);
        java.time.LocalTime localTime19 = java.time.LocalTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray22 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList23 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, zoneOffsetTransitionArray22);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray25 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, zoneOffsetTransitionArray25);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray28 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList29 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList29, zoneOffsetTransitionRuleArray28);
        java.time.zone.ZoneRules zoneRules31 = java.time.zone.ZoneRules.of(zoneOffset20, zoneOffset21, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList23, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList26, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList29);
        java.time.OffsetTime offsetTime32 = localTime19.atOffset(zoneOffset20);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange34 = offsetTime32.range((java.time.temporal.TemporalField) chronoField33);
        long long35 = offsetTime18.getLong((java.time.temporal.TemporalField) chronoField33);
        java.time.chrono.IsoChronology isoChronology36 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate41 = isoChronology36.dateYearDay((java.time.chrono.Era) isoEra38, 0, 16);
        java.time.LocalTime localTime42 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime43 = localDate41.atTime(localTime42);
        java.time.LocalDate localDate45 = localDate41.withMonth(1);
        java.time.Duration duration46 = java.time.Duration.ZERO;
        java.time.Duration duration47 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal48 = null;
        java.time.temporal.Temporal temporal49 = duration47.subtractFrom(temporal48);
        long long50 = duration47.toDays();
        java.time.Duration duration51 = duration46.plus(duration47);
        java.time.LocalDate localDate52 = localDate45.minus((java.time.temporal.TemporalAmount) duration46);
        java.time.LocalDate localDate54 = localDate45.minusWeeks((long) 100);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.wrap(byteArray57, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology61 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean62 = byteBuffer60.equals((java.lang.Object) isoChronology61);
        java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable> strMapMap63 = new java.util.Hashtable<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>, java.lang.Cloneable>();
        java.time.chrono.IsoChronology isoChronology64 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean65 = strMapMap63.containsKey((java.lang.Object) isoChronology64);
        java.time.chrono.IsoEra isoEra66 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate69 = isoChronology64.dateYearDay((java.time.chrono.Era) isoEra66, (-1), 10);
        int int71 = isoChronology61.prolepticYear((java.time.chrono.Era) isoEra66, (int) '#');
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.MAX;
        java.time.temporal.Temporal temporal73 = isoEra66.adjustInto((java.time.temporal.Temporal) localDateTime72);
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.MIN;
        java.time.LocalDate localDate77 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset76);
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.ofEpochSecond((long) (-34), (int) 'a', zoneOffset76);
        java.time.Month month79 = java.time.Month.JANUARY;
        java.time.Month month80 = month79.firstMonthOfQuarter();
        java.time.Month month81 = month80.firstMonthOfQuarter();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery82 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period83 = month80.query(periodTemporalQuery82);
        java.time.Period period84 = zoneOffset76.query(periodTemporalQuery82);
        java.time.Period period85 = localDateTime72.query(periodTemporalQuery82);
        java.time.chrono.ChronoLocalDate chronoLocalDate86 = localDate45.minus((java.time.temporal.TemporalAmount) period85);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal87 = offsetTime18.adjustInto((java.time.temporal.Temporal) localDate45);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField15.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange16);
        org.junit.Assert.assertNotNull(offsetTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(offsetTime32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField33.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 23L + "'", long35 == 23L);
        org.junit.Assert.assertNotNull(isoChronology36);
        org.junit.Assert.assertTrue("'" + isoEra38 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra38.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNull(temporal49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(isoChronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(isoChronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + isoEra66 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra66.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-34) + "'", int71 == (-34));
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(temporal73);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + month79 + "' != '" + java.time.Month.JANUARY + "'", month79.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month80 + "' != '" + java.time.Month.JANUARY + "'", month80.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month81 + "' != '" + java.time.Month.JANUARY + "'", month81.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(periodTemporalQuery82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(chronoLocalDate86);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.time.LocalDate localDate0 = java.time.LocalDate.MIN;
        java.time.ZoneId zoneId1 = java.time.ZoneId.systemDefault();
        java.lang.String str2 = zoneId1.getId();
        java.time.ZonedDateTime zonedDateTime3 = java.time.ZonedDateTime.now(zoneId1);
        java.time.ZoneId zoneId4 = java.time.ZoneId.systemDefault();
        java.lang.String str5 = zoneId4.getId();
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime3.withZoneSameInstant(zoneId4);
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(zoneId7);
        java.time.ZonedDateTime zonedDateTime11 = zonedDateTime9.withYear((int) (short) 1);
        boolean boolean12 = zonedDateTime6.equals((java.lang.Object) zonedDateTime11);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime6.minusMonths((long) (byte) -1);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        java.time.temporal.TemporalUnit temporalUnit16 = chronoField15.getBaseUnit();
        long long17 = localDate0.until((java.time.temporal.Temporal) zonedDateTime14, temporalUnit16);
        java.time.temporal.TemporalUnit temporalUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime20 = zonedDateTime14.plus((long) 11000000, temporalUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime3);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField15.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + temporalUnit16 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit16.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 365243238234L + "'", long17 == 365243238234L);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("DecimalStyle[0+-.]");
        printWriter1.println("hi!");
        printWriter1.print((double) (byte) -1);
        printWriter1.println('4');
        printWriter1.println((long) (-34));
        printWriter1.write(14);
        printWriter1.print(0.0d);
        printWriter1.print(168);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of(doubleArray0);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        java.util.Spliterator.OfDouble ofDouble4 = ofDouble3.trySplit();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = ofDouble4.estimateSize();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertNull(ofDouble4);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.LocalDate localDate9 = localDate5.withMonth(1);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.temporal.Temporal temporal12 = null;
        java.time.temporal.Temporal temporal13 = duration11.subtractFrom(temporal12);
        long long14 = duration11.toDays();
        java.time.Duration duration15 = duration10.plus(duration11);
        java.time.LocalDate localDate16 = localDate9.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.Duration duration18 = duration10.minusSeconds(0L);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(duration18);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (short) 1, (long) 10);
        longStream2.close();
        java.util.stream.LongStream longStream4 = longStream2.parallel();
        java.util.stream.LongStream longStream5 = longStream2.sequential();
        java.util.stream.LongStream longStream6 = longStream2.sequential();
        java.util.function.LongBinaryOperator longBinaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong8 = longStream2.reduce(longBinaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        int int2 = charBuffer1.limit();
        java.util.stream.IntStream intStream3 = charBuffer1.chars();
        int[] intArray4 = intStream3.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer7 = java.nio.IntBuffer.wrap(intArray4, (int) '\000', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        java.time.LocalDate localDate0 = java.time.LocalDate.MIN;
        java.time.ZoneId zoneId1 = java.time.ZoneId.systemDefault();
        java.lang.String str2 = zoneId1.getId();
        java.time.ZonedDateTime zonedDateTime3 = java.time.ZonedDateTime.now(zoneId1);
        java.time.ZoneId zoneId4 = java.time.ZoneId.systemDefault();
        java.lang.String str5 = zoneId4.getId();
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime3.withZoneSameInstant(zoneId4);
        java.time.ZoneId zoneId7 = java.time.ZoneId.systemDefault();
        java.lang.String str8 = zoneId7.getId();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(zoneId7);
        java.time.ZonedDateTime zonedDateTime11 = zonedDateTime9.withYear((int) (short) 1);
        boolean boolean12 = zonedDateTime6.equals((java.lang.Object) zonedDateTime11);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime6.minusMonths((long) (byte) -1);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        java.time.temporal.TemporalUnit temporalUnit16 = chronoField15.getBaseUnit();
        long long17 = localDate0.until((java.time.temporal.Temporal) zonedDateTime14, temporalUnit16);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime18 = java.time.chrono.ChronoLocalDateTime.from((java.time.temporal.TemporalAccessor) localDate0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: -999999999-01-01 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Etc/UTC" + "'", str2, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime3);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField15.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + temporalUnit16 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit16.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 365243238234L + "'", long17 == 365243238234L);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        boolean boolean3 = file2.exists();
        boolean boolean5 = file2.setLastModified(14L);
        boolean boolean6 = file2.canWrite();
        java.lang.String str7 = file2.getPath();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/1970-01-01T18:01:37.00000012" + "'", str7, "/1970-01-01T18:01:37.00000012");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(16);
        java.lang.Object obj2 = charBuffer1.array();
        java.nio.CharBuffer charBuffer4 = charBuffer1.append('.');
        java.lang.String str5 = charBuffer1.toString();
        char char7 = charBuffer1.charAt(0);
        char[] charArray8 = charBuffer1.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer11 = charBuffer1.subSequence((-1), (int) '0');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str5, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), ".\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), ".\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[., \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) (short) 0);
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.util.Date date5 = new java.util.Date(1, (int) 'x', (int) '0', 16, 256);
        int int6 = date5.getMinutes();
        int int7 = date5.getDate();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 17 20:16:00 UTC 1911");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 17 + "'", int7 == 17);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        java.io.File file2 = new java.io.File("", "1970-01-01T18:01:37.00000012");
        long long3 = file2.lastModified();
        java.net.URL uRL4 = file2.toURL();
        java.io.File file5 = file2.getCanonicalFile();
        java.io.File file6 = file2.getAbsoluteFile();
        java.io.File file9 = java.io.File.createTempFile("1970-01-01T18:01:37.00000012", "PT0S");
        long long10 = file9.length();
        boolean boolean11 = file9.setReadOnly();
        java.io.File file12 = file9.getCanonicalFile();
        java.io.File file13 = file9.getAbsoluteFile();
        int int14 = file2.compareTo(file9);
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(uRL4);
        org.junit.Assert.assertEquals(uRL4.toString(), "file:/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/");
        org.junit.Assert.assertEquals(file5.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
        org.junit.Assert.assertEquals(file6.toString(), "/1970-01-01T18:01:37.00000012");
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/tmp/1970-01-01T18:01:37.00000012592401971898172910PT0S");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/tmp/1970-01-01T18:01:37.00000012592401971898172910PT0S");
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/tmp/1970-01-01T18:01:37.00000012592401971898172910PT0S");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-67) + "'", int14 == (-67));
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        descriptiveStatistics3.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic6);
        double[] doubleArray8 = descriptiveStatistics0.getSortedValues();
        double double9 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate5 = isoChronology0.dateYearDay((java.time.chrono.Era) isoEra2, 0, 16);
        java.time.LocalTime localTime6 = java.time.LocalTime.MAX;
        java.time.LocalDateTime localDateTime7 = localDate5.atTime(localTime6);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.MAX;
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray10 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList11 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, zoneOffsetTransitionArray10);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray13 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, zoneOffsetTransitionArray13);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray16 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList17 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17, zoneOffsetTransitionRuleArray16);
        java.time.zone.ZoneRules zoneRules19 = java.time.zone.ZoneRules.of(zoneOffset8, zoneOffset9, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList11, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList14, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList17);
        long long20 = localDateTime7.toEpochSecond(zoneOffset8);
        java.time.LocalDateTime localDateTime22 = localDateTime7.plusDays((long) (byte) 1);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime25 = localDateTime7.with((java.time.temporal.TemporalField) chronoField23, 9L);
        java.time.Month month26 = localDateTime7.getMonth();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) -1 };
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.wrap(byteArray29, (int) (short) 0, 0);
        java.time.chrono.IsoChronology isoChronology33 = java.time.chrono.IsoChronology.INSTANCE;
        boolean boolean34 = byteBuffer32.equals((java.lang.Object) isoChronology33);
        java.time.Period period38 = isoChronology33.period((int) (short) 10, (int) '0', 4);
        java.time.chrono.IsoChronology isoChronology39 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.chrono.IsoEra isoEra41 = java.time.chrono.IsoEra.of((int) (byte) 0);
        java.time.LocalDate localDate44 = isoChronology39.dateYearDay((java.time.chrono.Era) isoEra41, 0, 16);
        java.time.LocalDate localDate47 = isoChronology33.dateYearDay((java.time.chrono.Era) isoEra41, 120, (int) '-');
        java.time.ZoneId zoneId48 = java.time.ZoneId.systemDefault();
        java.lang.String str49 = zoneId48.getId();
        java.time.ZonedDateTime zonedDateTime50 = java.time.ZonedDateTime.now(zoneId48);
        java.time.ZoneId zoneId51 = java.time.ZoneId.systemDefault();
        java.lang.String str52 = zoneId51.getId();
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime50.withZoneSameInstant(zoneId51);
        java.time.ZoneId zoneId54 = java.time.ZoneId.systemDefault();
        java.lang.String str55 = zoneId54.getId();
        java.time.ZonedDateTime zonedDateTime56 = java.time.ZonedDateTime.now(zoneId54);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime56.withYear((int) (short) 1);
        boolean boolean59 = zonedDateTime53.equals((java.lang.Object) zonedDateTime58);
        java.time.ZonedDateTime zonedDateTime61 = zonedDateTime53.minusMinutes((long) (short) 0);
        java.time.chrono.Chronology chronology62 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zonedDateTime53);
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        long long64 = zonedDateTime53.getLong((java.time.temporal.TemporalField) chronoField63);
        boolean boolean65 = isoEra41.isSupported((java.time.temporal.TemporalField) chronoField63);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange66 = month26.range((java.time.temporal.TemporalField) chronoField63);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62134279201L) + "'", long20 == (-62134279201L));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField23.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime25);
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.JANUARY + "'", month26.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, -1]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(isoChronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(isoChronology39);
        org.junit.Assert.assertTrue("'" + isoEra41 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra41.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(zoneId48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Etc/UTC" + "'", str49, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(zoneId51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Etc/UTC" + "'", str52, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(zoneId54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Etc/UTC" + "'", str55, "Etc/UTC");
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zonedDateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField63.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645434895L + "'", long64 == 1645434895L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }
}
